
CANMOTOR3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019698  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030b8  08019968  08019968  0001a968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ca20  0801ca20  0001da20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ca28  0801ca28  0001da28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ca2c  0801ca2c  0001da2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  24000000  0801ca30  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  240001f8  0801cc28  0001e1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000039b0  24004b7c  080215ab  00022b7c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2400852c  080215ab  0002352c  2**0
                  ALLOC
 10 .lwip_sec     00000400  30000000  30000000  00023000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00022b7b  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003711b  00000000  00000000  00022ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074ec  00000000  00000000  00059cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025a0  00000000  00000000  000611b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001df1  00000000  00000000  00063750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043d2b  00000000  00000000  00065541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003cad7  00000000  00000000  000a926c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017252e  00000000  00000000  000e5d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00258271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b144  00000000  00000000  002582b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  002633f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004b7c 	.word	0x24004b7c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019950 	.word	0x08019950

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004b80 	.word	0x24004b80
 800030c:	08019950 	.word	0x08019950

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9c0 	b.w	8000ad0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	468e      	mov	lr, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	4688      	mov	r8, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4617      	mov	r7, r2
 80007ec:	d962      	bls.n	80008b4 <__udivmoddi4+0xdc>
 80007ee:	fab2 f682 	clz	r6, r2
 80007f2:	b14e      	cbz	r6, 8000808 <__udivmoddi4+0x30>
 80007f4:	f1c6 0320 	rsb	r3, r6, #32
 80007f8:	fa01 f806 	lsl.w	r8, r1, r6
 80007fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000800:	40b7      	lsls	r7, r6
 8000802:	ea43 0808 	orr.w	r8, r3, r8
 8000806:	40b4      	lsls	r4, r6
 8000808:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800080c:	fa1f fc87 	uxth.w	ip, r7
 8000810:	fbb8 f1fe 	udiv	r1, r8, lr
 8000814:	0c23      	lsrs	r3, r4, #16
 8000816:	fb0e 8811 	mls	r8, lr, r1, r8
 800081a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800081e:	fb01 f20c 	mul.w	r2, r1, ip
 8000822:	429a      	cmp	r2, r3
 8000824:	d909      	bls.n	800083a <__udivmoddi4+0x62>
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	f101 30ff 	add.w	r0, r1, #4294967295
 800082c:	f080 80ea 	bcs.w	8000a04 <__udivmoddi4+0x22c>
 8000830:	429a      	cmp	r2, r3
 8000832:	f240 80e7 	bls.w	8000a04 <__udivmoddi4+0x22c>
 8000836:	3902      	subs	r1, #2
 8000838:	443b      	add	r3, r7
 800083a:	1a9a      	subs	r2, r3, r2
 800083c:	b2a3      	uxth	r3, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800084a:	fb00 fc0c 	mul.w	ip, r0, ip
 800084e:	459c      	cmp	ip, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x8e>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f100 32ff 	add.w	r2, r0, #4294967295
 8000858:	f080 80d6 	bcs.w	8000a08 <__udivmoddi4+0x230>
 800085c:	459c      	cmp	ip, r3
 800085e:	f240 80d3 	bls.w	8000a08 <__udivmoddi4+0x230>
 8000862:	443b      	add	r3, r7
 8000864:	3802      	subs	r0, #2
 8000866:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086a:	eba3 030c 	sub.w	r3, r3, ip
 800086e:	2100      	movs	r1, #0
 8000870:	b11d      	cbz	r5, 800087a <__udivmoddi4+0xa2>
 8000872:	40f3      	lsrs	r3, r6
 8000874:	2200      	movs	r2, #0
 8000876:	e9c5 3200 	strd	r3, r2, [r5]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d905      	bls.n	800088e <__udivmoddi4+0xb6>
 8000882:	b10d      	cbz	r5, 8000888 <__udivmoddi4+0xb0>
 8000884:	e9c5 0100 	strd	r0, r1, [r5]
 8000888:	2100      	movs	r1, #0
 800088a:	4608      	mov	r0, r1
 800088c:	e7f5      	b.n	800087a <__udivmoddi4+0xa2>
 800088e:	fab3 f183 	clz	r1, r3
 8000892:	2900      	cmp	r1, #0
 8000894:	d146      	bne.n	8000924 <__udivmoddi4+0x14c>
 8000896:	4573      	cmp	r3, lr
 8000898:	d302      	bcc.n	80008a0 <__udivmoddi4+0xc8>
 800089a:	4282      	cmp	r2, r0
 800089c:	f200 8105 	bhi.w	8000aaa <__udivmoddi4+0x2d2>
 80008a0:	1a84      	subs	r4, r0, r2
 80008a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008a6:	2001      	movs	r0, #1
 80008a8:	4690      	mov	r8, r2
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d0e5      	beq.n	800087a <__udivmoddi4+0xa2>
 80008ae:	e9c5 4800 	strd	r4, r8, [r5]
 80008b2:	e7e2      	b.n	800087a <__udivmoddi4+0xa2>
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	f000 8090 	beq.w	80009da <__udivmoddi4+0x202>
 80008ba:	fab2 f682 	clz	r6, r2
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f040 80a4 	bne.w	8000a0c <__udivmoddi4+0x234>
 80008c4:	1a8a      	subs	r2, r1, r2
 80008c6:	0c03      	lsrs	r3, r0, #16
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	b280      	uxth	r0, r0
 80008ce:	b2bc      	uxth	r4, r7
 80008d0:	2101      	movs	r1, #1
 80008d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008de:	fb04 f20c 	mul.w	r2, r4, ip
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x11e>
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x11c>
 80008ee:	429a      	cmp	r2, r3
 80008f0:	f200 80e0 	bhi.w	8000ab4 <__udivmoddi4+0x2dc>
 80008f4:	46c4      	mov	ip, r8
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000900:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000904:	fb02 f404 	mul.w	r4, r2, r4
 8000908:	429c      	cmp	r4, r3
 800090a:	d907      	bls.n	800091c <__udivmoddi4+0x144>
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x142>
 8000914:	429c      	cmp	r4, r3
 8000916:	f200 80ca 	bhi.w	8000aae <__udivmoddi4+0x2d6>
 800091a:	4602      	mov	r2, r0
 800091c:	1b1b      	subs	r3, r3, r4
 800091e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000922:	e7a5      	b.n	8000870 <__udivmoddi4+0x98>
 8000924:	f1c1 0620 	rsb	r6, r1, #32
 8000928:	408b      	lsls	r3, r1
 800092a:	fa22 f706 	lsr.w	r7, r2, r6
 800092e:	431f      	orrs	r7, r3
 8000930:	fa0e f401 	lsl.w	r4, lr, r1
 8000934:	fa20 f306 	lsr.w	r3, r0, r6
 8000938:	fa2e fe06 	lsr.w	lr, lr, r6
 800093c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000940:	4323      	orrs	r3, r4
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	fa1f fc87 	uxth.w	ip, r7
 800094a:	fbbe f0f9 	udiv	r0, lr, r9
 800094e:	0c1c      	lsrs	r4, r3, #16
 8000950:	fb09 ee10 	mls	lr, r9, r0, lr
 8000954:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000958:	fb00 fe0c 	mul.w	lr, r0, ip
 800095c:	45a6      	cmp	lr, r4
 800095e:	fa02 f201 	lsl.w	r2, r2, r1
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x1a0>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 3aff 	add.w	sl, r0, #4294967295
 800096a:	f080 809c 	bcs.w	8000aa6 <__udivmoddi4+0x2ce>
 800096e:	45a6      	cmp	lr, r4
 8000970:	f240 8099 	bls.w	8000aa6 <__udivmoddi4+0x2ce>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	eba4 040e 	sub.w	r4, r4, lr
 800097c:	fa1f fe83 	uxth.w	lr, r3
 8000980:	fbb4 f3f9 	udiv	r3, r4, r9
 8000984:	fb09 4413 	mls	r4, r9, r3, r4
 8000988:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800098c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000990:	45a4      	cmp	ip, r4
 8000992:	d908      	bls.n	80009a6 <__udivmoddi4+0x1ce>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f103 3eff 	add.w	lr, r3, #4294967295
 800099a:	f080 8082 	bcs.w	8000aa2 <__udivmoddi4+0x2ca>
 800099e:	45a4      	cmp	ip, r4
 80009a0:	d97f      	bls.n	8000aa2 <__udivmoddi4+0x2ca>
 80009a2:	3b02      	subs	r3, #2
 80009a4:	443c      	add	r4, r7
 80009a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009aa:	eba4 040c 	sub.w	r4, r4, ip
 80009ae:	fba0 ec02 	umull	lr, ip, r0, r2
 80009b2:	4564      	cmp	r4, ip
 80009b4:	4673      	mov	r3, lr
 80009b6:	46e1      	mov	r9, ip
 80009b8:	d362      	bcc.n	8000a80 <__udivmoddi4+0x2a8>
 80009ba:	d05f      	beq.n	8000a7c <__udivmoddi4+0x2a4>
 80009bc:	b15d      	cbz	r5, 80009d6 <__udivmoddi4+0x1fe>
 80009be:	ebb8 0203 	subs.w	r2, r8, r3
 80009c2:	eb64 0409 	sbc.w	r4, r4, r9
 80009c6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ca:	fa22 f301 	lsr.w	r3, r2, r1
 80009ce:	431e      	orrs	r6, r3
 80009d0:	40cc      	lsrs	r4, r1
 80009d2:	e9c5 6400 	strd	r6, r4, [r5]
 80009d6:	2100      	movs	r1, #0
 80009d8:	e74f      	b.n	800087a <__udivmoddi4+0xa2>
 80009da:	fbb1 fcf2 	udiv	ip, r1, r2
 80009de:	0c01      	lsrs	r1, r0, #16
 80009e0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009e4:	b280      	uxth	r0, r0
 80009e6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ea:	463b      	mov	r3, r7
 80009ec:	4638      	mov	r0, r7
 80009ee:	463c      	mov	r4, r7
 80009f0:	46b8      	mov	r8, r7
 80009f2:	46be      	mov	lr, r7
 80009f4:	2620      	movs	r6, #32
 80009f6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009fa:	eba2 0208 	sub.w	r2, r2, r8
 80009fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a02:	e766      	b.n	80008d2 <__udivmoddi4+0xfa>
 8000a04:	4601      	mov	r1, r0
 8000a06:	e718      	b.n	800083a <__udivmoddi4+0x62>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	e72c      	b.n	8000866 <__udivmoddi4+0x8e>
 8000a0c:	f1c6 0220 	rsb	r2, r6, #32
 8000a10:	fa2e f302 	lsr.w	r3, lr, r2
 8000a14:	40b7      	lsls	r7, r6
 8000a16:	40b1      	lsls	r1, r6
 8000a18:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a20:	430a      	orrs	r2, r1
 8000a22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a26:	b2bc      	uxth	r4, r7
 8000a28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a32:	fb08 f904 	mul.w	r9, r8, r4
 8000a36:	40b0      	lsls	r0, r6
 8000a38:	4589      	cmp	r9, r1
 8000a3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a3e:	b280      	uxth	r0, r0
 8000a40:	d93e      	bls.n	8000ac0 <__udivmoddi4+0x2e8>
 8000a42:	1879      	adds	r1, r7, r1
 8000a44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a48:	d201      	bcs.n	8000a4e <__udivmoddi4+0x276>
 8000a4a:	4589      	cmp	r9, r1
 8000a4c:	d81f      	bhi.n	8000a8e <__udivmoddi4+0x2b6>
 8000a4e:	eba1 0109 	sub.w	r1, r1, r9
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fb09 f804 	mul.w	r8, r9, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a64:	4542      	cmp	r2, r8
 8000a66:	d229      	bcs.n	8000abc <__udivmoddi4+0x2e4>
 8000a68:	18ba      	adds	r2, r7, r2
 8000a6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a6e:	d2c4      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a70:	4542      	cmp	r2, r8
 8000a72:	d2c2      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a74:	f1a9 0102 	sub.w	r1, r9, #2
 8000a78:	443a      	add	r2, r7
 8000a7a:	e7be      	b.n	80009fa <__udivmoddi4+0x222>
 8000a7c:	45f0      	cmp	r8, lr
 8000a7e:	d29d      	bcs.n	80009bc <__udivmoddi4+0x1e4>
 8000a80:	ebbe 0302 	subs.w	r3, lr, r2
 8000a84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a88:	3801      	subs	r0, #1
 8000a8a:	46e1      	mov	r9, ip
 8000a8c:	e796      	b.n	80009bc <__udivmoddi4+0x1e4>
 8000a8e:	eba7 0909 	sub.w	r9, r7, r9
 8000a92:	4449      	add	r1, r9
 8000a94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9c:	fb09 f804 	mul.w	r8, r9, r4
 8000aa0:	e7db      	b.n	8000a5a <__udivmoddi4+0x282>
 8000aa2:	4673      	mov	r3, lr
 8000aa4:	e77f      	b.n	80009a6 <__udivmoddi4+0x1ce>
 8000aa6:	4650      	mov	r0, sl
 8000aa8:	e766      	b.n	8000978 <__udivmoddi4+0x1a0>
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e6fd      	b.n	80008aa <__udivmoddi4+0xd2>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3a02      	subs	r2, #2
 8000ab2:	e733      	b.n	800091c <__udivmoddi4+0x144>
 8000ab4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ab8:	443b      	add	r3, r7
 8000aba:	e71c      	b.n	80008f6 <__udivmoddi4+0x11e>
 8000abc:	4649      	mov	r1, r9
 8000abe:	e79c      	b.n	80009fa <__udivmoddi4+0x222>
 8000ac0:	eba1 0109 	sub.w	r1, r1, r9
 8000ac4:	46c4      	mov	ip, r8
 8000ac6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aca:	fb09 f804 	mul.w	r8, r9, r4
 8000ace:	e7c4      	b.n	8000a5a <__udivmoddi4+0x282>

08000ad0 <__aeabi_idiv0>:
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan2;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ada:	4b3c      	ldr	r3, [pc, #240]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000adc:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd0 <MX_FDCAN1_Init+0xfc>)
 8000ade:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ae6:	4b39      	ldr	r3, [pc, #228]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000aec:	4b37      	ldr	r3, [pc, #220]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000af2:	4b36      	ldr	r3, [pc, #216]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000af8:	4b34      	ldr	r3, [pc, #208]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000afe:	4b33      	ldr	r3, [pc, #204]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 5;
 8000b04:	4b31      	ldr	r3, [pc, #196]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b06:	2205      	movs	r2, #5
 8000b08:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8000b0a:	4b30      	ldr	r3, [pc, #192]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b0c:	221d      	movs	r2, #29
 8000b0e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 8000b10:	4b2e      	ldr	r3, [pc, #184]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b12:	2214      	movs	r2, #20
 8000b14:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000b16:	4b2d      	ldr	r3, [pc, #180]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b1e:	2205      	movs	r2, #5
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8000b22:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b24:	220e      	movs	r2, #14
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 10;
 8000b28:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b2a:	220a      	movs	r2, #10
 8000b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 200;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b30:	22c8      	movs	r2, #200	@ 0xc8
 8000b32:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b34:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000b3a:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b60:	2204      	movs	r2, #4
 8000b62:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 4;
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b82:	4812      	ldr	r0, [pc, #72]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b84:	f003 fb12 	bl	80041ac <HAL_FDCAN_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000b8e:	f000 fe94 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_EXTENDED_ID; // Nếu bạn dùng extended ID
 8000b92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b96:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]

  // Để cho phép tất cả ID -> Mask = 0x00000000
  sFilterConfig.FilterID1 = 0x00000000; // ID không quan trọng
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x00000000; // Mask = 0 -> bỏ qua tất cả bit
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000bb6:	f003 fcd7 	bl	8004568 <HAL_FDCAN_ConfigFilter>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_FDCAN1_Init+0xf0>
      Error_Handler();
 8000bc0:	f000 fe7b 	bl	80018ba <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	24004b98 	.word	0x24004b98
 8000bd0:	4000a000 	.word	0x4000a000

08000bd4 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000bda:	4a2f      	ldr	r2, [pc, #188]	@ (8000c98 <MX_FDCAN2_Init+0xc4>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bde:	4b2d      	ldr	r3, [pc, #180]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000be4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bea:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bf6:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000bfc:	4b25      	ldr	r3, [pc, #148]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 5;
 8000c02:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c04:	2205      	movs	r2, #5
 8000c06:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 29;
 8000c08:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c0a:	221d      	movs	r2, #29
 8000c0c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 20;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c10:	2214      	movs	r2, #20
 8000c12:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 2;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 5;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c1c:	2205      	movs	r2, #5
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 14;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c22:	220e      	movs	r2, #14
 8000c24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 10;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c28:	220a      	movs	r2, #10
 8000c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 100;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c2e:	2264      	movs	r2, #100	@ 0x64
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000c38:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c46:	2204      	movs	r2, #4
 8000c48:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 4;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c50:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c52:	2204      	movs	r2, #4
 8000c54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 4;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c74:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <MX_FDCAN2_Init+0xc0>)
 8000c82:	f003 fa93 	bl	80041ac <HAL_FDCAN_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c8c:	f000 fe15 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	24004c38 	.word	0x24004c38
 8000c98:	4000a400 	.word	0x4000a400

08000c9c <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8000d60 <MX_FDCAN3_Init+0xc4>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000cb8:	4b28      	ldr	r3, [pc, #160]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000cbe:	4b27      	ldr	r3, [pc, #156]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 8000cc4:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 5;
 8000cca:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000ccc:	2205      	movs	r2, #5
 8000cce:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 29;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cd2:	221d      	movs	r2, #29
 8000cd4:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 20;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cd8:	2214      	movs	r2, #20
 8000cda:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 2;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 5;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 14;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cea:	220e      	movs	r2, #14
 8000cec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 10;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cf0:	220a      	movs	r2, #10
 8000cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 4;
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d08:	2204      	movs	r2, #4
 8000d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d0e:	2204      	movs	r2, #4
 8000d10:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d18:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d26:	2204      	movs	r2, #4
 8000d28:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 4;
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d38:	2204      	movs	r2, #4
 8000d3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d3c:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d44:	2204      	movs	r2, #4
 8000d46:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <MX_FDCAN3_Init+0xc0>)
 8000d4a:	f003 fa2f 	bl	80041ac <HAL_FDCAN_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000d54:	f000 fdb1 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	24004cd8 	.word	0x24004cd8
 8000d60:	4000d400 	.word	0x4000d400

08000d64 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0bc      	sub	sp, #240	@ 0xf0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	22b8      	movs	r2, #184	@ 0xb8
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f015 fbf5 	bl	8016574 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a8f      	ldr	r2, [pc, #572]	@ (8000fcc <HAL_FDCAN_MspInit+0x268>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d159      	bne.n	8000e48 <HAL_FDCAN_MspInit+0xe4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d94:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000da0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000da4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da8:	f107 0320 	add.w	r3, r7, #32
 8000dac:	4618      	mov	r0, r3
 8000dae:	f005 feeb 	bl	8006b88 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000db8:	f000 fd7f 	bl	80018ba <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000dbc:	4b84      	ldr	r3, [pc, #528]	@ (8000fd0 <HAL_FDCAN_MspInit+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a83      	ldr	r2, [pc, #524]	@ (8000fd0 <HAL_FDCAN_MspInit+0x26c>)
 8000dc4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000dc6:	4b82      	ldr	r3, [pc, #520]	@ (8000fd0 <HAL_FDCAN_MspInit+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10e      	bne.n	8000dec <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dce:	4b81      	ldr	r3, [pc, #516]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000dd0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000dd4:	4a7f      	ldr	r2, [pc, #508]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dda:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000dde:	4b7d      	ldr	r3, [pc, #500]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000de0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b79      	ldr	r3, [pc, #484]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	4a78      	ldr	r2, [pc, #480]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfc:	4b75      	ldr	r3, [pc, #468]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e0a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e24:	2309      	movs	r3, #9
 8000e26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4869      	ldr	r0, [pc, #420]	@ (8000fd8 <HAL_FDCAN_MspInit+0x274>)
 8000e32:	f004 fbad 	bl	8005590 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2013      	movs	r0, #19
 8000e3c:	f001 fd30 	bl	80028a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e40:	2013      	movs	r0, #19
 8000e42:	f001 fd47 	bl	80028d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 8000e46:	e0bc      	b.n	8000fc2 <HAL_FDCAN_MspInit+0x25e>
  else if(fdcanHandle->Instance==FDCAN2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a63      	ldr	r2, [pc, #396]	@ (8000fdc <HAL_FDCAN_MspInit+0x278>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d159      	bne.n	8000f06 <HAL_FDCAN_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e52:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000e5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f005 fe8c 	bl	8006b88 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_FDCAN_MspInit+0x116>
      Error_Handler();
 8000e76:	f000 fd20 	bl	80018ba <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e7a:	4b55      	ldr	r3, [pc, #340]	@ (8000fd0 <HAL_FDCAN_MspInit+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a53      	ldr	r2, [pc, #332]	@ (8000fd0 <HAL_FDCAN_MspInit+0x26c>)
 8000e82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e84:	4b52      	ldr	r3, [pc, #328]	@ (8000fd0 <HAL_FDCAN_MspInit+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d10e      	bne.n	8000eaa <HAL_FDCAN_MspInit+0x146>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e8c:	4b51      	ldr	r3, [pc, #324]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000e8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000e92:	4a50      	ldr	r2, [pc, #320]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e98:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000e9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	4a48      	ldr	r2, [pc, #288]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eba:	4b46      	ldr	r3, [pc, #280]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ec8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ecc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000ee2:	2309      	movs	r3, #9
 8000ee4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000eec:	4619      	mov	r1, r3
 8000eee:	483c      	ldr	r0, [pc, #240]	@ (8000fe0 <HAL_FDCAN_MspInit+0x27c>)
 8000ef0:	f004 fb4e 	bl	8005590 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f001 fcd1 	bl	80028a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000efe:	2014      	movs	r0, #20
 8000f00:	f001 fce8 	bl	80028d4 <HAL_NVIC_EnableIRQ>
}
 8000f04:	e05d      	b.n	8000fc2 <HAL_FDCAN_MspInit+0x25e>
  else if(fdcanHandle->Instance==FDCAN3)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a36      	ldr	r2, [pc, #216]	@ (8000fe4 <HAL_FDCAN_MspInit+0x280>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d158      	bne.n	8000fc2 <HAL_FDCAN_MspInit+0x25e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f1c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f005 fe2d 	bl	8006b88 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_FDCAN_MspInit+0x1d4>
      Error_Handler();
 8000f34:	f000 fcc1 	bl	80018ba <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f38:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <HAL_FDCAN_MspInit+0x26c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a24      	ldr	r2, [pc, #144]	@ (8000fd0 <HAL_FDCAN_MspInit+0x26c>)
 8000f40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <HAL_FDCAN_MspInit+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d10e      	bne.n	8000f68 <HAL_FDCAN_MspInit+0x204>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000f4c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000f50:	4a20      	ldr	r2, [pc, #128]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f56:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000f5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6e:	4a19      	ldr	r2, [pc, #100]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f78:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <HAL_FDCAN_MspInit+0x270>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f86:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_FDCAN3;
 8000fa0:	2305      	movs	r3, #5
 8000fa2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000faa:	4619      	mov	r1, r3
 8000fac:	480e      	ldr	r0, [pc, #56]	@ (8000fe8 <HAL_FDCAN_MspInit+0x284>)
 8000fae:	f004 faef 	bl	8005590 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	209f      	movs	r0, #159	@ 0x9f
 8000fb8:	f001 fc72 	bl	80028a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8000fbc:	209f      	movs	r0, #159	@ 0x9f
 8000fbe:	f001 fc89 	bl	80028d4 <HAL_NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	37f0      	adds	r7, #240	@ 0xf0
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	4000a000 	.word	0x4000a000
 8000fd0:	24004d78 	.word	0x24004d78
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	4000a400 	.word	0x4000a400
 8000fe0:	58020400 	.word	0x58020400
 8000fe4:	4000d400 	.word	0x4000d400
 8000fe8:	58020c00 	.word	0x58020c00

08000fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff2:	4b30      	ldr	r3, [pc, #192]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8000ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001002:	4b2c      	ldr	r3, [pc, #176]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001010:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	4a27      	ldr	r2, [pc, #156]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001020:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	4a1f      	ldr	r2, [pc, #124]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103e:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	4a18      	ldr	r2, [pc, #96]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105c:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8001072:	f043 0308 	orr.w	r3, r3, #8
 8001076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001088:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108e:	4a09      	ldr	r2, [pc, #36]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 8001090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <MX_GPIO_Init+0xc8>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

}
 80010a6:	bf00      	nop
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	58024400 	.word	0x58024400

080010b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <MX_I2C1_Init+0x78>)
 80010be:	4a1d      	ldr	r2, [pc, #116]	@ (8001134 <MX_I2C1_Init+0x7c>)
 80010c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A20D1F;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_I2C1_Init+0x78>)
 80010c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001138 <MX_I2C1_Init+0x80>)
 80010c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_I2C1_Init+0x78>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_I2C1_Init+0x78>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <MX_I2C1_Init+0x78>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_I2C1_Init+0x78>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_I2C1_Init+0x78>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_I2C1_Init+0x78>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_I2C1_Init+0x78>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f2:	480f      	ldr	r0, [pc, #60]	@ (8001130 <MX_I2C1_Init+0x78>)
 80010f4:	f004 fbf4 	bl	80058e0 <HAL_I2C_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010fe:	f000 fbdc 	bl	80018ba <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001102:	2100      	movs	r1, #0
 8001104:	480a      	ldr	r0, [pc, #40]	@ (8001130 <MX_I2C1_Init+0x78>)
 8001106:	f004 fca1 	bl	8005a4c <HAL_I2CEx_ConfigAnalogFilter>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001110:	f000 fbd3 	bl	80018ba <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <MX_I2C1_Init+0x78>)
 8001118:	f004 fce3 	bl	8005ae2 <HAL_I2CEx_ConfigDigitalFilter>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001122:	f000 fbca 	bl	80018ba <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001126:	2001      	movs	r0, #1
 8001128:	f004 fd28 	bl	8005b7c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	24004d7c 	.word	0x24004d7c
 8001134:	40005400 	.word	0x40005400
 8001138:	10a20d1f 	.word	0x10a20d1f

0800113c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0b8      	sub	sp, #224	@ 0xe0
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	22b8      	movs	r2, #184	@ 0xb8
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f015 fa09 	bl	8016574 <memset>
  if(i2cHandle->Instance==I2C1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a2a      	ldr	r2, [pc, #168]	@ (8001210 <HAL_I2C_MspInit+0xd4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d14d      	bne.n	8001208 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800116c:	f04f 0208 	mov.w	r2, #8
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4618      	mov	r0, r3
 8001184:	f005 fd00 	bl	8006b88 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800118e:	f000 fb94 	bl	80018ba <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <HAL_I2C_MspInit+0xd8>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001198:	4a1e      	ldr	r2, [pc, #120]	@ (8001214 <HAL_I2C_MspInit+0xd8>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <HAL_I2C_MspInit+0xd8>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b0:	23c0      	movs	r3, #192	@ 0xc0
 80011b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b6:	2312      	movs	r3, #18
 80011b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c8:	2304      	movs	r3, #4
 80011ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011d2:	4619      	mov	r1, r3
 80011d4:	4810      	ldr	r0, [pc, #64]	@ (8001218 <HAL_I2C_MspInit+0xdc>)
 80011d6:	f004 f9db 	bl	8005590 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_I2C_MspInit+0xd8>)
 80011dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001214 <HAL_I2C_MspInit+0xd8>)
 80011e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_I2C_MspInit+0xd8>)
 80011ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	201f      	movs	r0, #31
 80011fe:	f001 fb4f 	bl	80028a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001202:	201f      	movs	r0, #31
 8001204:	f001 fb66 	bl	80028d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001208:	bf00      	nop
 800120a:	37e0      	adds	r7, #224	@ 0xe0
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40005400 	.word	0x40005400
 8001214:	58024400 	.word	0x58024400
 8001218:	58020400 	.word	0x58020400

0800121c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001220:	f3bf 8f4f 	dsb	sy
}
 8001224:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <__NVIC_SystemReset+0x24>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800122e:	4904      	ldr	r1, [pc, #16]	@ (8001240 <__NVIC_SystemReset+0x24>)
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_SystemReset+0x28>)
 8001232:	4313      	orrs	r3, r2
 8001234:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001236:	f3bf 8f4f 	dsb	sy
}
 800123a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <__NVIC_SystemReset+0x20>
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	05fa0004 	.word	0x05fa0004

08001248 <LAN8720_ReadPHY>:
/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
extern struct netif gnetif;

HAL_StatusTypeDef LAN8720_ReadPHY(uint8_t phy_addr, uint8_t reg_addr,
		uint16_t *data) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	603a      	str	r2, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	460b      	mov	r3, r1
 8001256:	71bb      	strb	r3, [r7, #6]
	uint32_t reg_value;
	HAL_StatusTypeDef status = HAL_ETH_ReadPHYRegister(&heth, phy_addr,
 8001258:	79f9      	ldrb	r1, [r7, #7]
 800125a:	79ba      	ldrb	r2, [r7, #6]
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4806      	ldr	r0, [pc, #24]	@ (800127c <LAN8720_ReadPHY+0x34>)
 8001262:	f001 ff3a 	bl	80030da <HAL_ETH_ReadPHYRegister>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
			reg_addr, &reg_value);
	*data = (uint16_t) reg_value;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	b29a      	uxth	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	801a      	strh	r2, [r3, #0]
	return status;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24005260 	.word	0x24005260

08001280 <PHY_CheckStatus>:
HAL_StatusTypeDef LAN8720_WritePHY(uint8_t phy_addr, uint8_t reg_addr,
		uint16_t data) {
	return HAL_ETH_WritePHYRegister(&heth, phy_addr, reg_addr, data);
}
// H m ki?m tra tr?ng th i k?t n?i PHY
void PHY_CheckStatus(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
	uint16_t status = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	80fb      	strh	r3, [r7, #6]
	uint16_t control = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	80bb      	strh	r3, [r7, #4]
	uint16_t phy_spec_status = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	807b      	strh	r3, [r7, #2]
	//  ?c thanh ghi Basic Control (0x00)
	LAN8720_ReadPHY(LAN8720_PHY_ADDRESS, 0x00, &control);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	461a      	mov	r2, r3
 8001296:	2100      	movs	r1, #0
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff ffd5 	bl	8001248 <LAN8720_ReadPHY>
	printf("PHY Basic Control Register: 0x%04X\n", control);
 800129e:	88bb      	ldrh	r3, [r7, #4]
 80012a0:	4619      	mov	r1, r3
 80012a2:	481f      	ldr	r0, [pc, #124]	@ (8001320 <PHY_CheckStatus+0xa0>)
 80012a4:	f014 ffd2 	bl	801624c <iprintf>

	//  ?c thanh ghi Basic Status (0x01)
	LAN8720_ReadPHY(LAN8720_PHY_ADDRESS, 0x01, &status);
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	461a      	mov	r2, r3
 80012ac:	2101      	movs	r1, #1
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ffca 	bl	8001248 <LAN8720_ReadPHY>
	printf("PHY Basic Status Register: 0x%04X\n", status);
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	4619      	mov	r1, r3
 80012b8:	481a      	ldr	r0, [pc, #104]	@ (8001324 <PHY_CheckStatus+0xa4>)
 80012ba:	f014 ffc7 	bl	801624c <iprintf>

	// Ki?m tra tr?ng th i li n k?t
	if (status & 0x0004) { // Bit 2: Link Status
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d026      	beq.n	8001316 <PHY_CheckStatus+0x96>

		printf("PHY Link is UP\n");
 80012c8:	4817      	ldr	r0, [pc, #92]	@ (8001328 <PHY_CheckStatus+0xa8>)
 80012ca:	f015 f827 	bl	801631c <puts>

		// Ki?m tra t?c d? v  ch? d? duplex
		LAN8720_ReadPHY(LAN8720_PHY_ADDRESS, 0x1F, &phy_spec_status);
 80012ce:	1cbb      	adds	r3, r7, #2
 80012d0:	461a      	mov	r2, r3
 80012d2:	211f      	movs	r1, #31
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff ffb7 	bl	8001248 <LAN8720_ReadPHY>
		printf("PHY Specific Status: 0x%04X\n", phy_spec_status);
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	4619      	mov	r1, r3
 80012de:	4813      	ldr	r0, [pc, #76]	@ (800132c <PHY_CheckStatus+0xac>)
 80012e0:	f014 ffb4 	bl	801624c <iprintf>

		if (phy_spec_status & 0x0400) { // Bit 10: Speed 100Mbps
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <PHY_CheckStatus+0x76>
			printf("Speed: 100Mbps\n");
 80012ee:	4810      	ldr	r0, [pc, #64]	@ (8001330 <PHY_CheckStatus+0xb0>)
 80012f0:	f015 f814 	bl	801631c <puts>
 80012f4:	e002      	b.n	80012fc <PHY_CheckStatus+0x7c>
		} else {
			printf("Speed: 10Mbps\n");
 80012f6:	480f      	ldr	r0, [pc, #60]	@ (8001334 <PHY_CheckStatus+0xb4>)
 80012f8:	f015 f810 	bl	801631c <puts>
		}

		if (phy_spec_status & 0x0800) { // Bit 11: Full Duplex
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <PHY_CheckStatus+0x8e>
			printf("Duplex: Full\n");
 8001306:	480c      	ldr	r0, [pc, #48]	@ (8001338 <PHY_CheckStatus+0xb8>)
 8001308:	f015 f808 	bl	801631c <puts>
		}
	} else {
		NVIC_SystemReset();
		printf("PHY Link is DOWN\n");
	}
}
 800130c:	e005      	b.n	800131a <PHY_CheckStatus+0x9a>
			printf("Duplex: Half\n");
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <PHY_CheckStatus+0xbc>)
 8001310:	f015 f804 	bl	801631c <puts>
}
 8001314:	e001      	b.n	800131a <PHY_CheckStatus+0x9a>
		NVIC_SystemReset();
 8001316:	f7ff ff81 	bl	800121c <__NVIC_SystemReset>
}
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	08019968 	.word	0x08019968
 8001324:	0801998c 	.word	0x0801998c
 8001328:	080199b0 	.word	0x080199b0
 800132c:	080199c0 	.word	0x080199c0
 8001330:	080199e0 	.word	0x080199e0
 8001334:	080199f0 	.word	0x080199f0
 8001338:	08019a00 	.word	0x08019a00
 800133c:	08019a10 	.word	0x08019a10

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001346:	f000 fa55 	bl	80017f4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800134a:	4b70      	ldr	r3, [pc, #448]	@ (800150c <main+0x1cc>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11b      	bne.n	800138e <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8001356:	f3bf 8f4f 	dsb	sy
}
 800135a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800135c:	f3bf 8f6f 	isb	sy
}
 8001360:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001362:	4b6a      	ldr	r3, [pc, #424]	@ (800150c <main+0x1cc>)
 8001364:	2200      	movs	r2, #0
 8001366:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800136a:	f3bf 8f4f 	dsb	sy
}
 800136e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001370:	f3bf 8f6f 	isb	sy
}
 8001374:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001376:	4b65      	ldr	r3, [pc, #404]	@ (800150c <main+0x1cc>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	4a64      	ldr	r2, [pc, #400]	@ (800150c <main+0x1cc>)
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001380:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001382:	f3bf 8f4f 	dsb	sy
}
 8001386:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001388:	f3bf 8f6f 	isb	sy
}
 800138c:	e000      	b.n	8001390 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800138e:	bf00      	nop
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001390:	f001 f95e 	bl	8002650 <HAL_Init>
  //HAL_Delay(5000);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001394:	f000 f8c6 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001398:	f7ff fe28 	bl	8000fec <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800139c:	f7ff fb9a 	bl	8000ad4 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 80013a0:	f000 ff6e 	bl	8002280 <MX_USART1_UART_Init>
  MX_FDCAN2_Init();
 80013a4:	f7ff fc16 	bl	8000bd4 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80013a8:	f7ff fe86 	bl	80010b8 <MX_I2C1_Init>
  MX_LWIP_Init();
 80013ac:	f009 f926 	bl	800a5fc <MX_LWIP_Init>
  MX_FDCAN3_Init();
 80013b0:	f7ff fc74 	bl	8000c9c <MX_FDCAN3_Init>
  MX_TIM1_Init();
 80013b4:	f000 fe5c 	bl	8002070 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 80013b8:	4855      	ldr	r0, [pc, #340]	@ (8001510 <main+0x1d0>)
 80013ba:	f003 f94b 	bl	8004654 <HAL_FDCAN_Start>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <main+0x88>
	  return 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e09c      	b.n	8001502 <main+0x1c2>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80013c8:	2200      	movs	r2, #0
 80013ca:	2101      	movs	r1, #1
 80013cc:	4850      	ldr	r0, [pc, #320]	@ (8001510 <main+0x1d0>)
 80013ce:	f003 fb63 	bl	8004a98 <HAL_FDCAN_ActivateNotification>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <main+0x9c>
			0) != HAL_OK) {
		/* Notification Error */
		Error_Handler();
 80013d8:	f000 fa6f 	bl	80018ba <Error_Handler>
	}
  if(HAL_FDCAN_Start(&hfdcan2) != HAL_OK){
 80013dc:	484d      	ldr	r0, [pc, #308]	@ (8001514 <main+0x1d4>)
 80013de:	f003 f939 	bl	8004654 <HAL_FDCAN_Start>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <main+0xac>
	  return 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e08a      	b.n	8001502 <main+0x1c2>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE,
 80013ec:	2200      	movs	r2, #0
 80013ee:	2110      	movs	r1, #16
 80013f0:	4848      	ldr	r0, [pc, #288]	@ (8001514 <main+0x1d4>)
 80013f2:	f003 fb51 	bl	8004a98 <HAL_FDCAN_ActivateNotification>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <main+0xc0>
			0) != HAL_OK) {
		/* Notification Error */
		Error_Handler();
 80013fc:	f000 fa5d 	bl	80018ba <Error_Handler>
  }
  if(HAL_FDCAN_Start(&hfdcan3) != HAL_OK){
 8001400:	4845      	ldr	r0, [pc, #276]	@ (8001518 <main+0x1d8>)
 8001402:	f003 f927 	bl	8004654 <HAL_FDCAN_Start>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <main+0xd0>
		  return 0;
 800140c:	2300      	movs	r3, #0
 800140e:	e078      	b.n	8001502 <main+0x1c2>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8001410:	2200      	movs	r2, #0
 8001412:	2101      	movs	r1, #1
 8001414:	4840      	ldr	r0, [pc, #256]	@ (8001518 <main+0x1d8>)
 8001416:	f003 fb3f 	bl	8004a98 <HAL_FDCAN_ActivateNotification>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <main+0xe4>
				0) != HAL_OK) {
			/* Notification Error */
			Error_Handler();
 8001420:	f000 fa4b 	bl	80018ba <Error_Handler>
  }
  ///TxHeader.Identifier = 0x09;
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001424:	4b3d      	ldr	r3, [pc, #244]	@ (800151c <main+0x1dc>)
 8001426:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800142c:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <main+0x1dc>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001432:	4b3a      	ldr	r3, [pc, #232]	@ (800151c <main+0x1dc>)
 8001434:	2208      	movs	r2, #8
 8001436:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001438:	4b38      	ldr	r3, [pc, #224]	@ (800151c <main+0x1dc>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800143e:	4b37      	ldr	r3, [pc, #220]	@ (800151c <main+0x1dc>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001444:	4b35      	ldr	r3, [pc, #212]	@ (800151c <main+0x1dc>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <main+0x1dc>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8001450:	4b32      	ldr	r3, [pc, #200]	@ (800151c <main+0x1dc>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]

  PHY_CheckStatus();
 8001456:	f7ff ff13 	bl	8001280 <PHY_CheckStatus>
  udpServer_init();
 800145a:	f000 fe7f 	bl	800215c <udpServer_init>
   //EnableAllMotor();
   EnableMotorX(MOTOR_14, 2);
 800145e:	2102      	movs	r1, #2
 8001460:	200e      	movs	r0, #14
 8001462:	f000 fabb 	bl	80019dc <EnableMotorX>
   EnableMotorX(MOTOR_15, 1);
 8001466:	2101      	movs	r1, #1
 8001468:	200f      	movs	r0, #15
 800146a:	f000 fab7 	bl	80019dc <EnableMotorX>
   EnableMotorX(MOTOR_16, 1);
 800146e:	2101      	movs	r1, #1
 8001470:	2010      	movs	r0, #16
 8001472:	f000 fab3 	bl	80019dc <EnableMotorX>
   EnableMotorX(MOTOR_17, 1);
 8001476:	2101      	movs	r1, #1
 8001478:	2011      	movs	r0, #17
 800147a:	f000 faaf 	bl	80019dc <EnableMotorX>
   EnableMotorX(MOTOR_18, 1);
 800147e:	2101      	movs	r1, #1
 8001480:	2012      	movs	r0, #18
 8001482:	f000 faab 	bl	80019dc <EnableMotorX>
   EnableMotorX(MOTOR_20, 3);
 8001486:	2103      	movs	r1, #3
 8001488:	2014      	movs	r0, #20
 800148a:	f000 faa7 	bl	80019dc <EnableMotorX>
   EnableMotorX(MOTOR_21, 3);
 800148e:	2103      	movs	r1, #3
 8001490:	2015      	movs	r0, #21
 8001492:	f000 faa3 	bl	80019dc <EnableMotorX>
   EnableMotorX(MOTOR_22, 3);
 8001496:	2103      	movs	r1, #3
 8001498:	2016      	movs	r0, #22
 800149a:	f000 fa9f 	bl	80019dc <EnableMotorX>
   EnableMotorX(MOTOR_23, 3);
 800149e:	2103      	movs	r1, #3
 80014a0:	2017      	movs	r0, #23
 80014a2:	f000 fa9b 	bl	80019dc <EnableMotorX>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float t_ff = 0;
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80014ac:	481c      	ldr	r0, [pc, #112]	@ (8001520 <main+0x1e0>)
 80014ae:	f009 fb11 	bl	800aad4 <ethernetif_input>
	  sys_check_timeouts();
 80014b2:	f010 ff3d 	bl	8012330 <sys_check_timeouts>
	  //Left_Arm();
	   EnableMotorX(MOTOR_14, 2);
 80014b6:	2102      	movs	r1, #2
 80014b8:	200e      	movs	r0, #14
 80014ba:	f000 fa8f 	bl	80019dc <EnableMotorX>
	   EnableMotorX(MOTOR_15, 1);
 80014be:	2101      	movs	r1, #1
 80014c0:	200f      	movs	r0, #15
 80014c2:	f000 fa8b 	bl	80019dc <EnableMotorX>
	   EnableMotorX(MOTOR_16, 1);
 80014c6:	2101      	movs	r1, #1
 80014c8:	2010      	movs	r0, #16
 80014ca:	f000 fa87 	bl	80019dc <EnableMotorX>
	   EnableMotorX(MOTOR_17, 1);
 80014ce:	2101      	movs	r1, #1
 80014d0:	2011      	movs	r0, #17
 80014d2:	f000 fa83 	bl	80019dc <EnableMotorX>
	   EnableMotorX(MOTOR_18, 1);
 80014d6:	2101      	movs	r1, #1
 80014d8:	2012      	movs	r0, #18
 80014da:	f000 fa7f 	bl	80019dc <EnableMotorX>
	   EnableMotorX(MOTOR_20, 3);
 80014de:	2103      	movs	r1, #3
 80014e0:	2014      	movs	r0, #20
 80014e2:	f000 fa7b 	bl	80019dc <EnableMotorX>
	   EnableMotorX(MOTOR_21, 3);
 80014e6:	2103      	movs	r1, #3
 80014e8:	2015      	movs	r0, #21
 80014ea:	f000 fa77 	bl	80019dc <EnableMotorX>
	   EnableMotorX(MOTOR_22, 3);
 80014ee:	2103      	movs	r1, #3
 80014f0:	2016      	movs	r0, #22
 80014f2:	f000 fa73 	bl	80019dc <EnableMotorX>
	   EnableMotorX(MOTOR_23, 3);
 80014f6:	2103      	movs	r1, #3
 80014f8:	2017      	movs	r0, #23
 80014fa:	f000 fa6f 	bl	80019dc <EnableMotorX>
	  ethernetif_input(&gnetif);
 80014fe:	bf00      	nop
 8001500:	e7d4      	b.n	80014ac <main+0x16c>


	  //DisableMotor(0x00, 0x09);
  }
  /* USER CODE END 3 */
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	24004b98 	.word	0x24004b98
 8001514:	24004c38 	.word	0x24004c38
 8001518:	24004cd8 	.word	0x24004cd8
 800151c:	24004de0 	.word	0x24004de0
 8001520:	2400520c 	.word	0x2400520c

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b09c      	sub	sp, #112	@ 0x70
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152e:	224c      	movs	r2, #76	@ 0x4c
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f015 f81e 	bl	8016574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2220      	movs	r2, #32
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f015 f818 	bl	8016574 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001544:	2002      	movs	r0, #2
 8001546:	f004 fb3d 	bl	8005bc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <SystemClock_Config+0xd8>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a2a      	ldr	r2, [pc, #168]	@ (80015fc <SystemClock_Config+0xd8>)
 8001554:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b28      	ldr	r3, [pc, #160]	@ (80015fc <SystemClock_Config+0xd8>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001566:	bf00      	nop
 8001568:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <SystemClock_Config+0xd8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001574:	d1f8      	bne.n	8001568 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001576:	2301      	movs	r3, #1
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800157a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001580:	2302      	movs	r3, #2
 8001582:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001584:	2302      	movs	r3, #2
 8001586:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 800158c:	2344      	movs	r3, #68	@ 0x44
 800158e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001590:	2301      	movs	r3, #1
 8001592:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 11;
 8001594:	230b      	movs	r3, #11
 8001596:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001598:	2302      	movs	r3, #2
 800159a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800159c:	230c      	movs	r3, #12
 800159e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80015a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80015a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 fb42 	bl	8005c38 <HAL_RCC_OscConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015ba:	f000 f97e 	bl	80018ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015be:	233f      	movs	r3, #63	@ 0x3f
 80015c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c2:	2303      	movs	r3, #3
 80015c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015ca:	2308      	movs	r3, #8
 80015cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015ce:	2340      	movs	r3, #64	@ 0x40
 80015d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015d2:	2340      	movs	r3, #64	@ 0x40
 80015d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015dc:	2340      	movs	r3, #64	@ 0x40
 80015de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2103      	movs	r1, #3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 ff01 	bl	80063ec <HAL_RCC_ClockConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80015f0:	f000 f963 	bl	80018ba <Error_Handler>
  }
}
 80015f4:	bf00      	nop
 80015f6:	3770      	adds	r7, #112	@ 0x70
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	58024800 	.word	0x58024800

08001600 <HAL_FDCAN_RxFifo0Callback>:
//		}
//		//HAL_Delay(1000);
//	}
//
//}
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b0a0      	sub	sp, #128	@ 0x80
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8085 	beq.w	8001720 <HAL_FDCAN_RxFifo0Callback+0x120>
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8001616:	e07b      	b.n	8001710 <HAL_FDCAN_RxFifo0Callback+0x110>
            if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001618:	4b43      	ldr	r3, [pc, #268]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800161a:	4a44      	ldr	r2, [pc, #272]	@ (800172c <HAL_FDCAN_RxFifo0Callback+0x12c>)
 800161c:	2140      	movs	r1, #64	@ 0x40
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f003 f89e 	bl	8004760 <HAL_FDCAN_GetRxMessage>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_FDCAN_RxFifo0Callback+0x2e>
                Error_Handler();
 800162a:	f000 f946 	bl	80018ba <Error_Handler>
            }

            if (hfdcan->Instance == FDCAN1) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a3f      	ldr	r2, [pc, #252]	@ (8001730 <HAL_FDCAN_RxFifo0Callback+0x130>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d12d      	bne.n	8001694 <HAL_FDCAN_RxFifo0Callback+0x94>
                uint8_t canid = decode_can_id(RxHeader.Identifier);
 8001638:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <HAL_FDCAN_RxFifo0Callback+0x12c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 faab 	bl	8001b98 <decode_can_id>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                char msg[100];
                int len = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	67bb      	str	r3, [r7, #120]	@ 0x78
                switch(canid){
 800164c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001650:	3b0f      	subs	r3, #15
 8001652:	2b03      	cmp	r3, #3
 8001654:	d81e      	bhi.n	8001694 <HAL_FDCAN_RxFifo0Callback+0x94>
 8001656:	a201      	add	r2, pc, #4	@ (adr r2, 800165c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	0800166d 	.word	0x0800166d
 8001660:	08001677 	.word	0x08001677
 8001664:	08001681 	.word	0x08001681
 8001668:	0800168b 	.word	0x0800168b
                case MOTOR_15:
					MotorResponse(RxData, MOTOR_15);
 800166c:	210f      	movs	r1, #15
 800166e:	482e      	ldr	r0, [pc, #184]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8001670:	f000 f9fa 	bl	8001a68 <MotorResponse>
					char msg[100];

                	break;
 8001674:	e00e      	b.n	8001694 <HAL_FDCAN_RxFifo0Callback+0x94>
                case MOTOR_16:
                    MotorResponse(RxData, MOTOR_16);
 8001676:	2110      	movs	r1, #16
 8001678:	482b      	ldr	r0, [pc, #172]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800167a:	f000 f9f5 	bl	8001a68 <MotorResponse>
                	break;
 800167e:	e009      	b.n	8001694 <HAL_FDCAN_RxFifo0Callback+0x94>
                case MOTOR_17:
                    MotorResponse(RxData, MOTOR_17);
 8001680:	2111      	movs	r1, #17
 8001682:	4829      	ldr	r0, [pc, #164]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8001684:	f000 f9f0 	bl	8001a68 <MotorResponse>
                	break;
 8001688:	e004      	b.n	8001694 <HAL_FDCAN_RxFifo0Callback+0x94>
                case MOTOR_18:
                    MotorResponse(RxData, MOTOR_18);
 800168a:	2112      	movs	r1, #18
 800168c:	4826      	ldr	r0, [pc, #152]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800168e:	f000 f9eb 	bl	8001a68 <MotorResponse>
                	break;
 8001692:	bf00      	nop

                }

            }
            if (hfdcan->Instance == FDCAN3) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a26      	ldr	r2, [pc, #152]	@ (8001734 <HAL_FDCAN_RxFifo0Callback+0x134>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12e      	bne.n	80016fc <HAL_FDCAN_RxFifo0Callback+0xfc>
                uint8_t canid = decode_can_id(RxHeader.Identifier);
 800169e:	4b23      	ldr	r3, [pc, #140]	@ (800172c <HAL_FDCAN_RxFifo0Callback+0x12c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 fa78 	bl	8001b98 <decode_can_id>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                char msg[100];
                int len = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	673b      	str	r3, [r7, #112]	@ 0x70
                switch(canid){
 80016b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80016b6:	3b14      	subs	r3, #20
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d81f      	bhi.n	80016fc <HAL_FDCAN_RxFifo0Callback+0xfc>
 80016bc:	a201      	add	r2, pc, #4	@ (adr r2, 80016c4 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	080016d5 	.word	0x080016d5
 80016c8:	080016df 	.word	0x080016df
 80016cc:	080016e9 	.word	0x080016e9
 80016d0:	080016f3 	.word	0x080016f3
                case MOTOR_20:
					MotorResponse(RxData, MOTOR_20);
 80016d4:	2114      	movs	r1, #20
 80016d6:	4814      	ldr	r0, [pc, #80]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80016d8:	f000 f9c6 	bl	8001a68 <MotorResponse>
					char msg[100];
                	break;
 80016dc:	e00e      	b.n	80016fc <HAL_FDCAN_RxFifo0Callback+0xfc>
                case MOTOR_21:
                    MotorResponse(RxData, MOTOR_21);
 80016de:	2115      	movs	r1, #21
 80016e0:	4811      	ldr	r0, [pc, #68]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80016e2:	f000 f9c1 	bl	8001a68 <MotorResponse>
                	break;
 80016e6:	e009      	b.n	80016fc <HAL_FDCAN_RxFifo0Callback+0xfc>
                case MOTOR_22:
                    MotorResponse(RxData, MOTOR_22);
 80016e8:	2116      	movs	r1, #22
 80016ea:	480f      	ldr	r0, [pc, #60]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80016ec:	f000 f9bc 	bl	8001a68 <MotorResponse>
                	break;
 80016f0:	e004      	b.n	80016fc <HAL_FDCAN_RxFifo0Callback+0xfc>
                case MOTOR_23:
                    MotorResponse(RxData, MOTOR_23);
 80016f2:	2117      	movs	r1, #23
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80016f6:	f000 f9b7 	bl	8001a68 <MotorResponse>
                	break;
 80016fa:	bf00      	nop

                }

            }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80016fc:	2200      	movs	r2, #0
 80016fe:	2101      	movs	r1, #1
 8001700:	480d      	ldr	r0, [pc, #52]	@ (8001738 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8001702:	f003 f9c9 	bl	8004a98 <HAL_FDCAN_ActivateNotification>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_FDCAN_RxFifo0Callback+0x110>
          			0) != HAL_OK) {
          		/* Notification Error */
          		Error_Handler();
 800170c:	f000 f8d5 	bl	80018ba <Error_Handler>
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8001710:	2140      	movs	r1, #64	@ 0x40
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f003 f990 	bl	8004a38 <HAL_FDCAN_GetRxFifoFillLevel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	f47f af7c 	bne.w	8001618 <HAL_FDCAN_RxFifo0Callback+0x18>
          	}
//

        }
    }
}
 8001720:	bf00      	nop
 8001722:	3780      	adds	r7, #128	@ 0x80
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	24004dd8 	.word	0x24004dd8
 800172c:	24004e04 	.word	0x24004e04
 8001730:	4000a000 	.word	0x4000a000
 8001734:	4000d400 	.word	0x4000d400
 8001738:	24004b98 	.word	0x24004b98

0800173c <HAL_FDCAN_RxFifo1Callback>:
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b09e      	sub	sp, #120	@ 0x78
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET) {
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b00      	cmp	r3, #0
 800174e:	d040      	beq.n	80017d2 <HAL_FDCAN_RxFifo1Callback+0x96>
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8001750:	e038      	b.n	80017c4 <HAL_FDCAN_RxFifo1Callback+0x88>
            if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001752:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <HAL_FDCAN_RxFifo1Callback+0xa0>)
 8001754:	4a22      	ldr	r2, [pc, #136]	@ (80017e0 <HAL_FDCAN_RxFifo1Callback+0xa4>)
 8001756:	2140      	movs	r1, #64	@ 0x40
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f003 f801 	bl	8004760 <HAL_FDCAN_GetRxMessage>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_FDCAN_RxFifo1Callback+0x2c>
                Error_Handler();
 8001764:	f000 f8a9 	bl	80018ba <Error_Handler>
            }

            if (hfdcan->Instance == FDCAN2) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1d      	ldr	r2, [pc, #116]	@ (80017e4 <HAL_FDCAN_RxFifo1Callback+0xa8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d128      	bne.n	80017c4 <HAL_FDCAN_RxFifo1Callback+0x88>
                uint8_t canid = decode_can_id(RxHeader.Identifier);
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_FDCAN_RxFifo1Callback+0xa4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fa0e 	bl	8001b98 <decode_can_id>
 800177c:	4603      	mov	r3, r0
 800177e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                char msg[100];
                int len = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	673b      	str	r3, [r7, #112]	@ 0x70
                switch(canid){
 8001786:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800178a:	2b0e      	cmp	r3, #14
 800178c:	d11a      	bne.n	80017c4 <HAL_FDCAN_RxFifo1Callback+0x88>
                case MOTOR_14:
					MotorResponse(RxData, MOTOR_15);
 800178e:	210f      	movs	r1, #15
 8001790:	4812      	ldr	r0, [pc, #72]	@ (80017dc <HAL_FDCAN_RxFifo1Callback+0xa0>)
 8001792:	f000 f969 	bl	8001a68 <MotorResponse>
					char msg[100];
					len = sprintf(msg, "A14: %.2f\r\n", AngleCurrent[13]);
 8001796:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_FDCAN_RxFifo1Callback+0xac>)
 8001798:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800179c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017a0:	f107 000c 	add.w	r0, r7, #12
 80017a4:	ec53 2b17 	vmov	r2, r3, d7
 80017a8:	4910      	ldr	r1, [pc, #64]	@ (80017ec <HAL_FDCAN_RxFifo1Callback+0xb0>)
 80017aa:	f014 fdbf 	bl	801632c <siprintf>
 80017ae:	6738      	str	r0, [r7, #112]	@ 0x70
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80017b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	f107 010c 	add.w	r1, r7, #12
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <HAL_FDCAN_RxFifo1Callback+0xb4>)
 80017be:	f007 fcff 	bl	80091c0 <HAL_UART_Transmit>
                	break;
 80017c2:	bf00      	nop
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 80017c4:	2140      	movs	r1, #64	@ 0x40
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f003 f936 	bl	8004a38 <HAL_FDCAN_GetRxFifoFillLevel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1bf      	bne.n	8001752 <HAL_FDCAN_RxFifo1Callback+0x16>

            }

        }
    }
}
 80017d2:	bf00      	nop
 80017d4:	3778      	adds	r7, #120	@ 0x78
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	24004dd8 	.word	0x24004dd8
 80017e0:	24004e04 	.word	0x24004e04
 80017e4:	4000a400 	.word	0x4000a400
 80017e8:	24004e2c 	.word	0x24004e2c
 80017ec:	08019a20 	.word	0x08019a20
 80017f0:	24005174 	.word	0x24005174

080017f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001806:	f001 f873 	bl	80028f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800180a:	2301      	movs	r3, #1
 800180c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800180e:	2300      	movs	r3, #0
 8001810:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001816:	231f      	movs	r3, #31
 8001818:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800181a:	2387      	movs	r3, #135	@ 0x87
 800181c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800181e:	2300      	movs	r3, #0
 8001820:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001822:	2300      	movs	r3, #0
 8001824:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001826:	2301      	movs	r3, #1
 8001828:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800182a:	2301      	movs	r3, #1
 800182c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001836:	463b      	mov	r3, r7
 8001838:	4618      	mov	r0, r3
 800183a:	f001 f891 	bl	8002960 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800183e:	2301      	movs	r3, #1
 8001840:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001842:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001846:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001848:	2309      	movs	r3, #9
 800184a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800184c:	2300      	movs	r3, #0
 800184e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001850:	2303      	movs	r3, #3
 8001852:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001860:	463b      	mov	r3, r7
 8001862:	4618      	mov	r0, r3
 8001864:	f001 f87c 	bl	8002960 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001868:	2302      	movs	r3, #2
 800186a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30004000;
 800186c:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <MPU_Config+0xa4>)
 800186e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001870:	230d      	movs	r3, #13
 8001872:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001874:	2301      	movs	r3, #1
 8001876:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001878:	2301      	movs	r3, #1
 800187a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001880:	463b      	mov	r3, r7
 8001882:	4618      	mov	r0, r3
 8001884:	f001 f86c 	bl	8002960 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001888:	2004      	movs	r0, #4
 800188a:	f001 f849 	bl	8002920 <HAL_MPU_Enable>

}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	30004000 	.word	0x30004000

0800189c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ac:	d101      	bne.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80018ae:	f000 ff0b 	bl	80026c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018be:	b672      	cpsid	i
}
 80018c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c2:	bf00      	nop
 80018c4:	e7fd      	b.n	80018c2 <Error_Handler+0x8>

080018c6 <encode_can_id>:
const int can2_ids_bus[3] = {MOTOR_13, MOTOR_14, MOTOR_19};
const int can1_ids_bus[4] = {MOTOR_15,MOTOR_16,MOTOR_17,MOTOR_18};
const int can1_count = sizeof(can1_ids_bus) / sizeof(can1_ids_bus[0]);
const int can2_count = sizeof(can2_ids_bus) / sizeof(can2_ids_bus[0]);
const int can3_count = sizeof(can3_ids_bus) / sizeof(can3_ids_bus[0]);
uint32_t encode_can_id(CanId id) {
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	return ((id.reserved & 0x07) << 29) | ((id.mode & 0x1F) << 24)
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	075a      	lsls	r2, r3, #29
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	061b      	lsls	r3, r3, #24
 80018e2:	f003 53f8 	and.w	r3, r3, #520093696	@ 0x1f000000
 80018e6:	431a      	orrs	r2, r3
			| ((id.data & 0xFFFF) << 8) | ((id.targetMotorCanId & 0xFF));
 80018e8:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	4313      	orrs	r3, r2
 80018f2:	793a      	ldrb	r2, [r7, #4]
 80018f4:	4313      	orrs	r3, r2
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <uint_to_float>:
		x = x_max;
	else if (x < x_min)
		x = x_min;
	return (int) ((x - offset) * ((float) ((1 << bits) - 1)) / span);
}
float uint_to_float(uint16_t x, float x_min, float x_max, int bits) {
 8001902:	b480      	push	{r7}
 8001904:	b087      	sub	sp, #28
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	ed87 0a02 	vstr	s0, [r7, #8]
 800190e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
 8001914:	81fb      	strh	r3, [r7, #14]
	float span = x_max - x_min;
 8001916:	ed97 7a01 	vldr	s14, [r7, #4]
 800191a:	edd7 7a02 	vldr	s15, [r7, #8]
 800191e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001922:	edc7 7a05 	vstr	s15, [r7, #20]
	return x_min + (x * span) / ((1 << bits) - 1);
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001930:	edd7 7a05 	vldr	s15, [r7, #20]
 8001934:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001938:	2201      	movs	r2, #1
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	3b01      	subs	r3, #1
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800194e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001952:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	371c      	adds	r7, #28
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <CAN_Transmit_1>:
void CAN_Transmit_1() {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
//	if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData)
 8001968:	4a03      	ldr	r2, [pc, #12]	@ (8001978 <CAN_Transmit_1+0x14>)
 800196a:	4904      	ldr	r1, [pc, #16]	@ (800197c <CAN_Transmit_1+0x18>)
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <CAN_Transmit_1+0x1c>)
 800196e:	f002 fe9c 	bl	80046aa <HAL_FDCAN_AddMessageToTxFifoQ>
				!= HAL_OK) {
			//Error_Handler();
		}
//	}
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	24004dd0 	.word	0x24004dd0
 800197c:	24004de0 	.word	0x24004de0
 8001980:	24004b98 	.word	0x24004b98

08001984 <CAN_Transmit_2>:
void CAN_Transmit_2() {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) > 0) {
 8001988:	4806      	ldr	r0, [pc, #24]	@ (80019a4 <CAN_Transmit_2+0x20>)
 800198a:	f003 f873 	bl	8004a74 <HAL_FDCAN_GetTxFifoFreeLevel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d004      	beq.n	800199e <CAN_Transmit_2+0x1a>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, TxData)
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <CAN_Transmit_2+0x24>)
 8001996:	4905      	ldr	r1, [pc, #20]	@ (80019ac <CAN_Transmit_2+0x28>)
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <CAN_Transmit_2+0x20>)
 800199a:	f002 fe86 	bl	80046aa <HAL_FDCAN_AddMessageToTxFifoQ>
				!= HAL_OK) {
			//Error_Handler();
		}
	}
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	24004c38 	.word	0x24004c38
 80019a8:	24004dd0 	.word	0x24004dd0
 80019ac:	24004de0 	.word	0x24004de0

080019b0 <CAN_Transmit_3>:
void CAN_Transmit_3() {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan3) > 0) {
 80019b4:	4806      	ldr	r0, [pc, #24]	@ (80019d0 <CAN_Transmit_3+0x20>)
 80019b6:	f003 f85d 	bl	8004a74 <HAL_FDCAN_GetTxFifoFreeLevel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <CAN_Transmit_3+0x1a>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader, TxData)
 80019c0:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <CAN_Transmit_3+0x24>)
 80019c2:	4905      	ldr	r1, [pc, #20]	@ (80019d8 <CAN_Transmit_3+0x28>)
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <CAN_Transmit_3+0x20>)
 80019c6:	f002 fe70 	bl	80046aa <HAL_FDCAN_AddMessageToTxFifoQ>
				!= HAL_OK) {
			//Error_Handler();
		}
	}
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	24004cd8 	.word	0x24004cd8
 80019d4:	24004dd0 	.word	0x24004dd0
 80019d8:	24004de0 	.word	0x24004de0

080019dc <EnableMotorX>:

//////////////////
void EnableMotorX(uint16_t motor_can_id, uint8_t bus){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	460a      	mov	r2, r1
 80019e6:	80fb      	strh	r3, [r7, #6]
 80019e8:	4613      	mov	r3, r2
 80019ea:	717b      	strb	r3, [r7, #5]
	CanId canid;
	canid.data = 0x00;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f36f 2317 	bfc	r3, #8, #16
 80019f2:	60fb      	str	r3, [r7, #12]
	canid.mode = MOTOR_ENABLE_MODE;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	2203      	movs	r2, #3
 80019f8:	f362 0304 	bfi	r3, r2, #0, #5
 80019fc:	73fb      	strb	r3, [r7, #15]
	canid.targetMotorCanId = motor_can_id;
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	733b      	strb	r3, [r7, #12]
	canid.reserved = 0x00;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8001a0a:	73fb      	strb	r3, [r7, #15]

	for(int i = 0; i < 8; i++){
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e007      	b.n	8001a22 <EnableMotorX+0x46>
		TxData[i] = 0;
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <EnableMotorX+0x80>)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b07      	cmp	r3, #7
 8001a26:	ddf4      	ble.n	8001a12 <EnableMotorX+0x36>
	}
	uint32_t fullcanid = encode_can_id(canid);
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff ff4c 	bl	80018c6 <encode_can_id>
 8001a2e:	6138      	str	r0, [r7, #16]
	TxHeader.Identifier = fullcanid;
 8001a30:	4a0b      	ldr	r2, [pc, #44]	@ (8001a60 <EnableMotorX+0x84>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6013      	str	r3, [r2, #0]

	if(bus == CANBUS_1){
 8001a36:	797b      	ldrb	r3, [r7, #5]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <EnableMotorX+0x64>
		CAN_Transmit_1();
 8001a3c:	f7ff ff92 	bl	8001964 <CAN_Transmit_1>

	}
	if(bus == CANBUS_2){
 8001a40:	797b      	ldrb	r3, [r7, #5]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d101      	bne.n	8001a4a <EnableMotorX+0x6e>
		CAN_Transmit_2();
 8001a46:	f7ff ff9d 	bl	8001984 <CAN_Transmit_2>

	}
	if(bus == CANBUS_3){
 8001a4a:	797b      	ldrb	r3, [r7, #5]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d101      	bne.n	8001a54 <EnableMotorX+0x78>
		CAN_Transmit_3();
 8001a50:	f7ff ffae 	bl	80019b0 <CAN_Transmit_3>
	}

}
 8001a54:	bf00      	nop
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	24004dd0 	.word	0x24004dd0
 8001a60:	24004de0 	.word	0x24004de0
 8001a64:	00000000 	.word	0x00000000

08001a68 <MotorResponse>:

	CAN_Transmit_1();

}

void MotorResponse(uint8_t RxData[8], int motor_can_id){
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	uint16_t currentAngle = (RxData[0] << 8) | RxData[1];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	81fb      	strh	r3, [r7, #14]
	uint16_t currentSpeed = (RxData[2] << 8) | RxData[3];
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3303      	adds	r3, #3
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	81bb      	strh	r3, [r7, #12]
	uint16_t currentTorque = (RxData[4] << 8) | RxData[5];
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3305      	adds	r3, #5
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	817b      	strh	r3, [r7, #10]
	uint16_t currentTemperature = (RxData[6] << 8) | RxData[7];
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3306      	adds	r3, #6
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3307      	adds	r3, #7
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b21b      	sxth	r3, r3
 8001ad6:	813b      	strh	r3, [r7, #8]

	AngleCurrent[motor_can_id - 1] = uint_to_float(currentAngle, P_MIN, P_MAX, 16);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	1e5c      	subs	r4, r3, #1
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	2110      	movs	r1, #16
 8001ae0:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001b78 <MotorResponse+0x110>
 8001ae4:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001b7c <MotorResponse+0x114>
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff0a 	bl	8001902 <uint_to_float>
 8001aee:	eef0 7a40 	vmov.f32	s15, s0
 8001af2:	4a23      	ldr	r2, [pc, #140]	@ (8001b80 <MotorResponse+0x118>)
 8001af4:	00a3      	lsls	r3, r4, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	edc3 7a00 	vstr	s15, [r3]
	SpeedCurrent[motor_can_id - 1] = uint_to_float(currentSpeed, V_MIN_03, V_MAX_03, 16);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	1e5c      	subs	r4, r3, #1
 8001b00:	89bb      	ldrh	r3, [r7, #12]
 8001b02:	2110      	movs	r1, #16
 8001b04:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001b08:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fef8 	bl	8001902 <uint_to_float>
 8001b12:	eef0 7a40 	vmov.f32	s15, s0
 8001b16:	4a1b      	ldr	r2, [pc, #108]	@ (8001b84 <MotorResponse+0x11c>)
 8001b18:	00a3      	lsls	r3, r4, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	edc3 7a00 	vstr	s15, [r3]
	TorqueCurrent[motor_can_id - 1] = uint_to_float(currentTorque, T_MIN_03, T_MAX_03, 16);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	1e5c      	subs	r4, r3, #1
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	2110      	movs	r1, #16
 8001b28:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8001b88 <MotorResponse+0x120>
 8001b2c:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001b8c <MotorResponse+0x124>
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fee6 	bl	8001902 <uint_to_float>
 8001b36:	eef0 7a40 	vmov.f32	s15, s0
 8001b3a:	4a15      	ldr	r2, [pc, #84]	@ (8001b90 <MotorResponse+0x128>)
 8001b3c:	00a3      	lsls	r3, r4, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	edc3 7a00 	vstr	s15, [r3]
	TempCurrent[motor_can_id - 1] = (currentTemperature) * 0.1;
 8001b44:	893b      	ldrh	r3, [r7, #8]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b4e:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001b70 <MotorResponse+0x108>
 8001b52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <MotorResponse+0x12c>)
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	edc3 7a00 	vstr	s15, [r3]

}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}
 8001b70:	9999999a 	.word	0x9999999a
 8001b74:	3fb99999 	.word	0x3fb99999
 8001b78:	41491eb8 	.word	0x41491eb8
 8001b7c:	c1491eb8 	.word	0xc1491eb8
 8001b80:	24004e2c 	.word	0x24004e2c
 8001b84:	24004e88 	.word	0x24004e88
 8001b88:	42700000 	.word	0x42700000
 8001b8c:	c2700000 	.word	0xc2700000
 8001b90:	24004ee4 	.word	0x24004ee4
 8001b94:	24004f40 	.word	0x24004f40

08001b98 <decode_can_id>:
uint8_t decode_can_id(uint32_t can_id) {
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint8_t type_of_mode = (can_id >> 24) & 0x1F;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0e1b      	lsrs	r3, r3, #24
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	73fb      	strb	r3, [r7, #15]
	uint8_t current_motor_id = (can_id >> 8) & 0xFF;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	73bb      	strb	r3, [r7, #14]

	return current_motor_id;
 8001bb2:	7bbb      	ldrb	r3, [r7, #14]


}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_MspInit+0x30>)
 8001bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bcc:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <HAL_MspInit+0x30>)
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_MspInit+0x30>)
 8001bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	58024400 	.word	0x58024400

08001bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b090      	sub	sp, #64	@ 0x40
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	d827      	bhi.n	8001c52 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	201c      	movs	r0, #28
 8001c08:	f000 fe4a 	bl	80028a0 <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c0c:	201c      	movs	r0, #28
 8001c0e:	f000 fe61 	bl	80028d4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001c12:	4a29      	ldr	r2, [pc, #164]	@ (8001cb8 <HAL_InitTick+0xc4>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c18:	4b28      	ldr	r3, [pc, #160]	@ (8001cbc <HAL_InitTick+0xc8>)
 8001c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c1e:	4a27      	ldr	r2, [pc, #156]	@ (8001cbc <HAL_InitTick+0xc8>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c28:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <HAL_InitTick+0xc8>)
 8001c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c36:	f107 0210 	add.w	r2, r7, #16
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 ff5f 	bl	8006b04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c48:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d106      	bne.n	8001c5e <HAL_InitTick+0x6a>
 8001c50:	e001      	b.n	8001c56 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e02c      	b.n	8001cb0 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c56:	f004 ff29 	bl	8006aac <HAL_RCC_GetPCLK1Freq>
 8001c5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001c5c:	e004      	b.n	8001c68 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c5e:	f004 ff25 	bl	8006aac <HAL_RCC_GetPCLK1Freq>
 8001c62:	4603      	mov	r3, r0
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c6a:	4a15      	ldr	r2, [pc, #84]	@ (8001cc0 <HAL_InitTick+0xcc>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	0c9b      	lsrs	r3, r3, #18
 8001c72:	3b01      	subs	r3, #1
 8001c74:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c76:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <HAL_InitTick+0xd0>)
 8001c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c7c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_InitTick+0xd0>)
 8001c80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c84:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001c86:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <HAL_InitTick+0xd0>)
 8001c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c8a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_InitTick+0xd0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_InitTick+0xd0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001c98:	480a      	ldr	r0, [pc, #40]	@ (8001cc4 <HAL_InitTick+0xd0>)
 8001c9a:	f006 fd37 	bl	800870c <HAL_TIM_Base_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d104      	bne.n	8001cae <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001ca4:	4807      	ldr	r0, [pc, #28]	@ (8001cc4 <HAL_InitTick+0xd0>)
 8001ca6:	f006 fd89 	bl	80087bc <HAL_TIM_Base_Start_IT>
 8001caa:	4603      	mov	r3, r0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3740      	adds	r7, #64	@ 0x40
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	24000008 	.word	0x24000008
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	431bde83 	.word	0x431bde83
 8001cc4:	24004f9c 	.word	0x24004f9c

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <NMI_Handler+0x4>

08001cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  //NVIC_SystemReset();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <MemManage_Handler+0x4>

08001ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	 //NVIC_SystemReset();
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <UsageFault_Handler+0x4>

08001cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <FDCAN1_IT0_IRQHandler+0x10>)
 8001d2e:	f002 ff2d 	bl	8004b8c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	24004b98 	.word	0x24004b98

08001d3c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <FDCAN2_IT0_IRQHandler+0x10>)
 8001d42:	f002 ff23 	bl	8004b8c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	24004c38 	.word	0x24004c38

08001d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <TIM2_IRQHandler+0x10>)
 8001d56:	f006 fdb7 	bl	80088c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	24004f9c 	.word	0x24004f9c

08001d64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <I2C1_EV_IRQHandler+0x10>)
 8001d6a:	f003 fe55 	bl	8005a18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	24004d7c 	.word	0x24004d7c

08001d78 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <FDCAN3_IT0_IRQHandler+0x10>)
 8001d7e:	f002 ff05 	bl	8004b8c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	24004cd8 	.word	0x24004cd8

08001d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return 1;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_kill>:

int _kill(int pid, int sig)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <_kill+0x20>)
 8001da8:	2216      	movs	r2, #22
 8001daa:	601a      	str	r2, [r3, #0]
  return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	2400851c 	.word	0x2400851c

08001dc0 <_exit>:

void _exit (int status)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ffe5 	bl	8001d9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dd2:	bf00      	nop
 8001dd4:	e7fd      	b.n	8001dd2 <_exit+0x12>

08001dd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e00a      	b.n	8001dfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001de8:	f3af 8000 	nop.w
 8001dec:	4601      	mov	r1, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	60ba      	str	r2, [r7, #8]
 8001df4:	b2ca      	uxtb	r2, r1
 8001df6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dbf0      	blt.n	8001de8 <_read+0x12>
  }

  return len;
 8001e06:	687b      	ldr	r3, [r7, #4]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	e009      	b.n	8001e36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	60ba      	str	r2, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbf1      	blt.n	8001e22 <_write+0x12>
  }
  return len;
 8001e3e:	687b      	ldr	r3, [r7, #4]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_close>:

int _close(int file)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e70:	605a      	str	r2, [r3, #4]
  return 0;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_isatty>:

int _isatty(int file)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	@ (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	@ (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d205      	bcs.n	8001eec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <_sbrk+0x6c>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a06      	ldr	r2, [pc, #24]	@ (8001f14 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	24050000 	.word	0x24050000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	24004fe8 	.word	0x24004fe8
 8001f18:	24008530 	.word	0x24008530
 8001f1c:	2400851c 	.word	0x2400851c

08001f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f24:	4b3e      	ldr	r3, [pc, #248]	@ (8002020 <SystemInit+0x100>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8002020 <SystemInit+0x100>)
 8001f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f34:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <SystemInit+0x104>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d807      	bhi.n	8001f50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f40:	4b38      	ldr	r3, [pc, #224]	@ (8002024 <SystemInit+0x104>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 030f 	bic.w	r3, r3, #15
 8001f48:	4a36      	ldr	r2, [pc, #216]	@ (8002024 <SystemInit+0x104>)
 8001f4a:	f043 0307 	orr.w	r3, r3, #7
 8001f4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f50:	4b35      	ldr	r3, [pc, #212]	@ (8002028 <SystemInit+0x108>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a34      	ldr	r2, [pc, #208]	@ (8002028 <SystemInit+0x108>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f5c:	4b32      	ldr	r3, [pc, #200]	@ (8002028 <SystemInit+0x108>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f62:	4b31      	ldr	r3, [pc, #196]	@ (8002028 <SystemInit+0x108>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4930      	ldr	r1, [pc, #192]	@ (8002028 <SystemInit+0x108>)
 8001f68:	4b30      	ldr	r3, [pc, #192]	@ (800202c <SystemInit+0x10c>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <SystemInit+0x104>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <SystemInit+0x104>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 030f 	bic.w	r3, r3, #15
 8001f82:	4a28      	ldr	r2, [pc, #160]	@ (8002024 <SystemInit+0x104>)
 8001f84:	f043 0307 	orr.w	r3, r3, #7
 8001f88:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f8a:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <SystemInit+0x108>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f90:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <SystemInit+0x108>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <SystemInit+0x108>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f9c:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <SystemInit+0x108>)
 8001f9e:	4a24      	ldr	r2, [pc, #144]	@ (8002030 <SystemInit+0x110>)
 8001fa0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001fa2:	4b21      	ldr	r3, [pc, #132]	@ (8002028 <SystemInit+0x108>)
 8001fa4:	4a23      	ldr	r2, [pc, #140]	@ (8002034 <SystemInit+0x114>)
 8001fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <SystemInit+0x108>)
 8001faa:	4a23      	ldr	r2, [pc, #140]	@ (8002038 <SystemInit+0x118>)
 8001fac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <SystemInit+0x108>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002028 <SystemInit+0x108>)
 8001fb6:	4a20      	ldr	r2, [pc, #128]	@ (8002038 <SystemInit+0x118>)
 8001fb8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001fba:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <SystemInit+0x108>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <SystemInit+0x108>)
 8001fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002038 <SystemInit+0x118>)
 8001fc4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <SystemInit+0x108>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fcc:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <SystemInit+0x108>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a15      	ldr	r2, [pc, #84]	@ (8002028 <SystemInit+0x108>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <SystemInit+0x108>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001fde:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <SystemInit+0x108>)
 8001fe0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d113      	bne.n	8002014 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001fec:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <SystemInit+0x108>)
 8001fee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8002028 <SystemInit+0x108>)
 8001ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ff8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <SystemInit+0x11c>)
 8001ffe:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002002:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <SystemInit+0x108>)
 8002006:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800200a:	4a07      	ldr	r2, [pc, #28]	@ (8002028 <SystemInit+0x108>)
 800200c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002010:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00
 8002024:	52002000 	.word	0x52002000
 8002028:	58024400 	.word	0x58024400
 800202c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002030:	02020200 	.word	0x02020200
 8002034:	01ff0000 	.word	0x01ff0000
 8002038:	01010280 	.word	0x01010280
 800203c:	52004000 	.word	0x52004000

08002040 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <ExitRun0Mode+0x2c>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a08      	ldr	r2, [pc, #32]	@ (800206c <ExitRun0Mode+0x2c>)
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002050:	bf00      	nop
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <ExitRun0Mode+0x2c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f9      	beq.n	8002052 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	58024800 	.word	0x58024800

08002070 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800208e:	4b20      	ldr	r3, [pc, #128]	@ (8002110 <MX_TIM1_Init+0xa0>)
 8002090:	4a20      	ldr	r2, [pc, #128]	@ (8002114 <MX_TIM1_Init+0xa4>)
 8002092:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002094:	4b1e      	ldr	r3, [pc, #120]	@ (8002110 <MX_TIM1_Init+0xa0>)
 8002096:	2200      	movs	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209a:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <MX_TIM1_Init+0xa0>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <MX_TIM1_Init+0xa0>)
 80020a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a8:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <MX_TIM1_Init+0xa0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <MX_TIM1_Init+0xa0>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b4:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <MX_TIM1_Init+0xa0>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020ba:	4815      	ldr	r0, [pc, #84]	@ (8002110 <MX_TIM1_Init+0xa0>)
 80020bc:	f006 fb26 	bl	800870c <HAL_TIM_Base_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80020c6:	f7ff fbf8 	bl	80018ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	4619      	mov	r1, r3
 80020d6:	480e      	ldr	r0, [pc, #56]	@ (8002110 <MX_TIM1_Init+0xa0>)
 80020d8:	f006 fcfe 	bl	8008ad8 <HAL_TIM_ConfigClockSource>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80020e2:	f7ff fbea 	bl	80018ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	4806      	ldr	r0, [pc, #24]	@ (8002110 <MX_TIM1_Init+0xa0>)
 80020f8:	f006 ff58 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002102:	f7ff fbda 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	24004fec 	.word	0x24004fec
 8002114:	40010000 	.word	0x40010000

08002118 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0b      	ldr	r2, [pc, #44]	@ (8002154 <HAL_TIM_Base_MspInit+0x3c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800212a:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_TIM_Base_MspInit+0x40>)
 800212c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002130:	4a09      	ldr	r2, [pc, #36]	@ (8002158 <HAL_TIM_Base_MspInit+0x40>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <HAL_TIM_Base_MspInit+0x40>)
 800213c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40010000 	.word	0x40010000
 8002158:	58024400 	.word	0x58024400

0800215c <udpServer_init>:
 3. Wait until datagram packet arrives from client.
 4. Process the datagram packet and send a reply to client.
 5. Go back to Step 3.
 */

void udpServer_init(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
	// UDP Control Block structure
	//struct udp_pcb *upcb;
	err_t err;

	/* 1. Create a new UDP control block  */
	udpServerPcb = udp_new();
 8002162:	f010 fd89 	bl	8012c78 <udp_new>
 8002166:	4603      	mov	r3, r0
 8002168:	4a16      	ldr	r2, [pc, #88]	@ (80021c4 <udpServer_init+0x68>)
 800216a:	6013      	str	r3, [r2, #0]

	/* 2. Bind the upcb to the local port */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 10);
 800216c:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <udpServer_init+0x6c>)
 800216e:	60bb      	str	r3, [r7, #8]
	err = udp_bind(udpServerPcb, &myIPADDR, 8888);  // 8888 is the server UDP port
 8002170:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <udpServer_init+0x68>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f107 0108 	add.w	r1, r7, #8
 8002178:	f242 22b8 	movw	r2, #8888	@ 0x22b8
 800217c:	4618      	mov	r0, r3
 800217e:	f010 fc91 	bl	8012aa4 <udp_bind>
 8002182:	4603      	mov	r3, r0
 8002184:	73fb      	strb	r3, [r7, #15]

	ip_addr_t ClientIPADDR;
	IP_ADDR4(&ClientIPADDR, 192, 168, 1, 20);
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <udpServer_init+0x70>)
 8002188:	607b      	str	r3, [r7, #4]
	ip_addr_set(&udpClientAddr, &ClientIPADDR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a10      	ldr	r2, [pc, #64]	@ (80021d0 <udpServer_init+0x74>)
 800218e:	6013      	str	r3, [r2, #0]
	udpClientPort = 12346;
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <udpServer_init+0x78>)
 8002192:	f243 023a 	movw	r2, #12346	@ 0x303a
 8002196:	801a      	strh	r2, [r3, #0]

	/* 3. Set a receive callback for the upcb */
	if (err == ERR_OK) {
 8002198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <udpServer_init+0x54>
		udp_recv(udpServerPcb, udp_receive_callback, NULL);
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <udpServer_init+0x68>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	490c      	ldr	r1, [pc, #48]	@ (80021d8 <udpServer_init+0x7c>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f010 fd03 	bl	8012bb4 <udp_recv>
	} else {
		udp_remove(udpServerPcb);
	}
}
 80021ae:	e004      	b.n	80021ba <udpServer_init+0x5e>
		udp_remove(udpServerPcb);
 80021b0:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <udpServer_init+0x68>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f010 fd1d 	bl	8012bf4 <udp_remove>
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	24005038 	.word	0x24005038
 80021c8:	0a01a8c0 	.word	0x0a01a8c0
 80021cc:	1401a8c0 	.word	0x1401a8c0
 80021d0:	2400503c 	.word	0x2400503c
 80021d4:	24005040 	.word	0x24005040
 80021d8:	080021dd 	.word	0x080021dd

080021dc <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]

	if (p != NULL) {
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d03c      	beq.n	800226a <udp_receive_callback+0x8e>
		udp_count++;
 80021f0:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <udp_receive_callback+0x98>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002274 <udp_receive_callback+0x98>)
 80021f8:	6013      	str	r3, [r2, #0]
		memcpy(RxUDP, p->payload, p->len);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	895b      	ldrh	r3, [r3, #10]
 8002202:	461a      	mov	r2, r3
 8002204:	481c      	ldr	r0, [pc, #112]	@ (8002278 <udp_receive_callback+0x9c>)
 8002206:	f014 fa46 	bl	8016696 <memcpy>
		RxUDP[p->len] = '\0';
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	895b      	ldrh	r3, [r3, #10]
 800220e:	461a      	mov	r2, r3
 8002210:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <udp_receive_callback+0x9c>)
 8002212:	2100      	movs	r1, #0
 8002214:	5499      	strb	r1, [r3, r2]
		pbuf_free(p);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f00a fafa 	bl	800c810 <pbuf_free>
        struct pbuf *tx_buf;
        const char *reply_msg = "ACK from STM32";
 800221c:	4b17      	ldr	r3, [pc, #92]	@ (800227c <udp_receive_callback+0xa0>)
 800221e:	617b      	str	r3, [r7, #20]

        tx_buf = pbuf_alloc(PBUF_TRANSPORT, strlen(reply_msg), PBUF_RAM);
 8002220:	6978      	ldr	r0, [r7, #20]
 8002222:	f7fe f8c5 	bl	80003b0 <strlen>
 8002226:	4603      	mov	r3, r0
 8002228:	b29b      	uxth	r3, r3
 800222a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800222e:	4619      	mov	r1, r3
 8002230:	2036      	movs	r0, #54	@ 0x36
 8002232:	f00a f809 	bl	800c248 <pbuf_alloc>
 8002236:	6138      	str	r0, [r7, #16]
        if (tx_buf != NULL) {
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d012      	beq.n	8002264 <udp_receive_callback+0x88>
            pbuf_take(tx_buf, reply_msg, strlen(reply_msg));
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7fe f8b6 	bl	80003b0 <strlen>
 8002244:	4603      	mov	r3, r0
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	6979      	ldr	r1, [r7, #20]
 800224c:	6938      	ldr	r0, [r7, #16]
 800224e:	f00a fd4b 	bl	800cce8 <pbuf_take>
            udp_sendto(upcb, tx_buf, addr, port); // gửi lại đúng địa chỉ và port của client
 8002252:	8c3b      	ldrh	r3, [r7, #32]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	6939      	ldr	r1, [r7, #16]
 8002258:	68b8      	ldr	r0, [r7, #8]
 800225a:	f010 fa6d 	bl	8012738 <udp_sendto>
            pbuf_free(tx_buf);
 800225e:	6938      	ldr	r0, [r7, #16]
 8002260:	f00a fad6 	bl	800c810 <pbuf_free>
        }

        pbuf_free(p);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f00a fad3 	bl	800c810 <pbuf_free>
//		g_receive_udp = true;
//		rc++;
		//memcpy(&lowCmdPacket, RxUDP, sizeof(LowCmdPacket));
	}

}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	24005170 	.word	0x24005170
 8002278:	24005044 	.word	0x24005044
 800227c:	08019a2c 	.word	0x08019a2c

08002280 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002284:	4b22      	ldr	r3, [pc, #136]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 8002286:	4a23      	ldr	r2, [pc, #140]	@ (8002314 <MX_USART1_UART_Init+0x94>)
 8002288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800228a:	4b21      	ldr	r3, [pc, #132]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 800228c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002292:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002298:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800229e:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022aa:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022b6:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022bc:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c2:	4b13      	ldr	r3, [pc, #76]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022c8:	4811      	ldr	r0, [pc, #68]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022ca:	f006 ff29 	bl	8009120 <HAL_UART_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80022d4:	f7ff faf1 	bl	80018ba <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022d8:	2100      	movs	r1, #0
 80022da:	480d      	ldr	r0, [pc, #52]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022dc:	f008 f8c3 	bl	800a466 <HAL_UARTEx_SetTxFifoThreshold>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80022e6:	f7ff fae8 	bl	80018ba <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ea:	2100      	movs	r1, #0
 80022ec:	4808      	ldr	r0, [pc, #32]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022ee:	f008 f8f8 	bl	800a4e2 <HAL_UARTEx_SetRxFifoThreshold>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022f8:	f7ff fadf 	bl	80018ba <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022fc:	4804      	ldr	r0, [pc, #16]	@ (8002310 <MX_USART1_UART_Init+0x90>)
 80022fe:	f008 f879 	bl	800a3f4 <HAL_UARTEx_DisableFifoMode>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002308:	f7ff fad7 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	24005174 	.word	0x24005174
 8002314:	40011000 	.word	0x40011000

08002318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0b8      	sub	sp, #224	@ 0xe0
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	22b8      	movs	r2, #184	@ 0xb8
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f014 f91b 	bl	8016574 <memset>
  if(uartHandle->Instance==USART1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a27      	ldr	r2, [pc, #156]	@ (80023e0 <HAL_UART_MspInit+0xc8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d146      	bne.n	80023d6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002348:	f04f 0201 	mov.w	r2, #1
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4618      	mov	r0, r3
 8002360:	f004 fc12 	bl	8006b88 <HAL_RCCEx_PeriphCLKConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800236a:	f7ff faa6 	bl	80018ba <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800236e:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <HAL_UART_MspInit+0xcc>)
 8002370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002374:	4a1b      	ldr	r2, [pc, #108]	@ (80023e4 <HAL_UART_MspInit+0xcc>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800237e:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_UART_MspInit+0xcc>)
 8002380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_UART_MspInit+0xcc>)
 800238e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002392:	4a14      	ldr	r2, [pc, #80]	@ (80023e4 <HAL_UART_MspInit+0xcc>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <HAL_UART_MspInit+0xcc>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80023aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80023ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80023c4:	2304      	movs	r3, #4
 80023c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <HAL_UART_MspInit+0xd0>)
 80023d2:	f003 f8dd 	bl	8005590 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023d6:	bf00      	nop
 80023d8:	37e0      	adds	r7, #224	@ 0xe0
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40011000 	.word	0x40011000
 80023e4:	58024400 	.word	0x58024400
 80023e8:	58020400 	.word	0x58020400

080023ec <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 80023ec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002428 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */

  bl  ExitRun0Mode
 80023f0:	f7ff fe26 	bl	8002040 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023f4:	f7ff fd94 	bl	8001f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023fa:	490d      	ldr	r1, [pc, #52]	@ (8002430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002410:	4c0a      	ldr	r4, [pc, #40]	@ (800243c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800241e:	f014 f913 	bl	8016648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002422:	f7fe ff8d 	bl	8001340 <main>
  bx  lr
 8002426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002428:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800242c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002430:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8002434:	0801ca30 	.word	0x0801ca30
  ldr r2, =_sbss
 8002438:	24004b7c 	.word	0x24004b7c
  ldr r4, =_ebss
 800243c:	2400852c 	.word	0x2400852c

08002440 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC3_IRQHandler>

08002442 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <LAN8742_RegisterBusIO+0x28>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <LAN8742_RegisterBusIO+0x28>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <LAN8742_RegisterBusIO+0x28>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e014      	b.n	800249a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d139      	bne.n	8002536 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e01c      	b.n	8002516 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f107 020c 	add.w	r2, r7, #12
 80024e4:	2112      	movs	r1, #18
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	4798      	blx	r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da03      	bge.n	80024f8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80024f0:	f06f 0304 	mvn.w	r3, #4
 80024f4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80024f6:	e00b      	b.n	8002510 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	d105      	bne.n	8002510 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
         break;
 800250e:	e005      	b.n	800251c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b1f      	cmp	r3, #31
 800251a:	d9df      	bls.n	80024dc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b1f      	cmp	r3, #31
 8002522:	d902      	bls.n	800252a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002524:	f06f 0302 	mvn.w	r3, #2
 8002528:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002536:	693b      	ldr	r3, [r7, #16]
 }
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6810      	ldr	r0, [r2, #0]
 8002554:	f107 020c 	add.w	r2, r7, #12
 8002558:	2101      	movs	r1, #1
 800255a:	4798      	blx	r3
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	da02      	bge.n	8002568 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002562:	f06f 0304 	mvn.w	r3, #4
 8002566:	e06e      	b.n	8002646 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6810      	ldr	r0, [r2, #0]
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	2101      	movs	r1, #1
 8002576:	4798      	blx	r3
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	da02      	bge.n	8002584 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800257e:	f06f 0304 	mvn.w	r3, #4
 8002582:	e060      	b.n	8002646 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800258e:	2301      	movs	r3, #1
 8002590:	e059      	b.n	8002646 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6810      	ldr	r0, [r2, #0]
 800259a:	f107 020c 	add.w	r2, r7, #12
 800259e:	2100      	movs	r1, #0
 80025a0:	4798      	blx	r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da02      	bge.n	80025ae <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025a8:	f06f 0304 	mvn.w	r3, #4
 80025ac:	e04b      	b.n	8002646 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11b      	bne.n	80025f0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <LAN8742_GetLinkState+0x90>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80025cc:	2302      	movs	r3, #2
 80025ce:	e03a      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80025da:	2303      	movs	r3, #3
 80025dc:	e033      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80025e8:	2304      	movs	r3, #4
 80025ea:	e02c      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80025ec:	2305      	movs	r3, #5
 80025ee:	e02a      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6810      	ldr	r0, [r2, #0]
 80025f8:	f107 020c 	add.w	r2, r7, #12
 80025fc:	211f      	movs	r1, #31
 80025fe:	4798      	blx	r3
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	da02      	bge.n	800260c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002606:	f06f 0304 	mvn.w	r3, #4
 800260a:	e01c      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002616:	2306      	movs	r3, #6
 8002618:	e015      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 031c 	and.w	r3, r3, #28
 8002620:	2b18      	cmp	r3, #24
 8002622:	d101      	bne.n	8002628 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002624:	2302      	movs	r3, #2
 8002626:	e00e      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 031c 	and.w	r3, r3, #28
 800262e:	2b08      	cmp	r3, #8
 8002630:	d101      	bne.n	8002636 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002632:	2303      	movs	r3, #3
 8002634:	e007      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 031c 	and.w	r3, r3, #28
 800263c:	2b14      	cmp	r3, #20
 800263e:	d101      	bne.n	8002644 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002640:	2304      	movs	r3, #4
 8002642:	e000      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002644:	2305      	movs	r3, #5
    }
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002656:	2003      	movs	r0, #3
 8002658:	f000 f917 	bl	800288a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800265c:	f004 f87c 	bl	8006758 <HAL_RCC_GetSysClockFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_Init+0x68>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	4913      	ldr	r1, [pc, #76]	@ (80026bc <HAL_Init+0x6c>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
 8002678:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800267a:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_Init+0x68>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	4a0e      	ldr	r2, [pc, #56]	@ (80026bc <HAL_Init+0x6c>)
 8002684:	5cd3      	ldrb	r3, [r2, r3]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <HAL_Init+0x70>)
 8002692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002694:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <HAL_Init+0x74>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800269a:	200f      	movs	r0, #15
 800269c:	f7ff faaa 	bl	8001bf4 <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e002      	b.n	80026b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026aa:	f7ff fa89 	bl	8001bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	58024400 	.word	0x58024400
 80026bc:	0801c468 	.word	0x0801c468
 80026c0:	24000004 	.word	0x24000004
 80026c4:	24000000 	.word	0x24000000

080026c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_IncTick+0x20>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_IncTick+0x24>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <HAL_IncTick+0x24>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	2400000c 	.word	0x2400000c
 80026ec:	24005208 	.word	0x24005208

080026f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return uwTick;
 80026f4:	4b03      	ldr	r3, [pc, #12]	@ (8002704 <HAL_GetTick+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	24005208 	.word	0x24005208

08002708 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002718:	4904      	ldr	r1, [pc, #16]	@ (800272c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	58000400 	.word	0x58000400

08002730 <__NVIC_SetPriorityGrouping>:
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002740:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <__NVIC_SetPriorityGrouping+0x40>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800274c:	4013      	ands	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	4313      	orrs	r3, r2
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <__NVIC_SetPriorityGrouping+0x40>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00
 8002774:	05fa0000 	.word	0x05fa0000

08002778 <__NVIC_GetPriorityGrouping>:
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800277c:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <__NVIC_GetPriorityGrouping+0x18>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	f003 0307 	and.w	r3, r3, #7
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_EnableIRQ>:
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800279e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	db0b      	blt.n	80027be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	4907      	ldr	r1, [pc, #28]	@ (80027cc <__NVIC_EnableIRQ+0x38>)
 80027ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	2001      	movs	r0, #1
 80027b6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000e100 	.word	0xe000e100

080027d0 <__NVIC_SetPriority>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	db0a      	blt.n	80027fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	490c      	ldr	r1, [pc, #48]	@ (800281c <__NVIC_SetPriority+0x4c>)
 80027ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ee:	0112      	lsls	r2, r2, #4
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	440b      	add	r3, r1
 80027f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80027f8:	e00a      	b.n	8002810 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4908      	ldr	r1, [pc, #32]	@ (8002820 <__NVIC_SetPriority+0x50>)
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	3b04      	subs	r3, #4
 8002808:	0112      	lsls	r2, r2, #4
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	440b      	add	r3, r1
 800280e:	761a      	strb	r2, [r3, #24]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000e100 	.word	0xe000e100
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <NVIC_EncodePriority>:
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	@ 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f1c3 0307 	rsb	r3, r3, #7
 800283e:	2b04      	cmp	r3, #4
 8002840:	bf28      	it	cs
 8002842:	2304      	movcs	r3, #4
 8002844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3304      	adds	r3, #4
 800284a:	2b06      	cmp	r3, #6
 800284c:	d902      	bls.n	8002854 <NVIC_EncodePriority+0x30>
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3b03      	subs	r3, #3
 8002852:	e000      	b.n	8002856 <NVIC_EncodePriority+0x32>
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	401a      	ands	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	43d9      	mvns	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	4313      	orrs	r3, r2
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	@ 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ff4c 	bl	8002730 <__NVIC_SetPriorityGrouping>
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028ae:	f7ff ff63 	bl	8002778 <__NVIC_GetPriorityGrouping>
 80028b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	6978      	ldr	r0, [r7, #20]
 80028ba:	f7ff ffb3 	bl	8002824 <NVIC_EncodePriority>
 80028be:	4602      	mov	r2, r0
 80028c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff82 	bl	80027d0 <__NVIC_SetPriority>
}
 80028cc:	bf00      	nop
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ff56 	bl	8002794 <__NVIC_EnableIRQ>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028f4:	f3bf 8f5f 	dmb	sy
}
 80028f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028fa:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <HAL_MPU_Disable+0x28>)
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	4a06      	ldr	r2, [pc, #24]	@ (8002918 <HAL_MPU_Disable+0x28>)
 8002900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002904:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002906:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_MPU_Disable+0x2c>)
 8002908:	2200      	movs	r2, #0
 800290a:	605a      	str	r2, [r3, #4]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00
 800291c:	e000ed90 	.word	0xe000ed90

08002920 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002928:	4a0b      	ldr	r2, [pc, #44]	@ (8002958 <HAL_MPU_Enable+0x38>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002932:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <HAL_MPU_Enable+0x3c>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	4a09      	ldr	r2, [pc, #36]	@ (800295c <HAL_MPU_Enable+0x3c>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800293e:	f3bf 8f4f 	dsb	sy
}
 8002942:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002944:	f3bf 8f6f 	isb	sy
}
 8002948:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed90 	.word	0xe000ed90
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	785a      	ldrb	r2, [r3, #1]
 800296c:	4b1b      	ldr	r3, [pc, #108]	@ (80029dc <HAL_MPU_ConfigRegion+0x7c>)
 800296e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002970:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <HAL_MPU_ConfigRegion+0x7c>)
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	4a19      	ldr	r2, [pc, #100]	@ (80029dc <HAL_MPU_ConfigRegion+0x7c>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800297c:	4a17      	ldr	r2, [pc, #92]	@ (80029dc <HAL_MPU_ConfigRegion+0x7c>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7b1b      	ldrb	r3, [r3, #12]
 8002988:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7adb      	ldrb	r3, [r3, #11]
 800298e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002990:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7a9b      	ldrb	r3, [r3, #10]
 8002996:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002998:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7b5b      	ldrb	r3, [r3, #13]
 800299e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7b9b      	ldrb	r3, [r3, #14]
 80029a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7bdb      	ldrb	r3, [r3, #15]
 80029ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7a5b      	ldrb	r3, [r3, #9]
 80029b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7a1b      	ldrb	r3, [r3, #8]
 80029be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029c8:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029cc:	6113      	str	r3, [r2, #16]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed90 	.word	0xe000ed90

080029e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0e3      	b.n	8002bba <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f008 f8d5 	bl	800abb4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	@ (8002bc4 <HAL_ETH_Init+0x1e4>)
 8002a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a10:	4a6c      	ldr	r2, [pc, #432]	@ (8002bc4 <HAL_ETH_Init+0x1e4>)
 8002a12:	f043 0302 	orr.w	r3, r3, #2
 8002a16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc4 <HAL_ETH_Init+0x1e4>)
 8002a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7a1b      	ldrb	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7ff fe69 	bl	8002708 <HAL_SYSCFG_ETHInterfaceSelect>
 8002a36:	e003      	b.n	8002a40 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a38:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002a3c:	f7ff fe64 	bl	8002708 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002a40:	4b61      	ldr	r3, [pc, #388]	@ (8002bc8 <HAL_ETH_Init+0x1e8>)
 8002a42:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a5c:	f7ff fe48 	bl	80026f0 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a62:	e011      	b.n	8002a88 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a64:	f7ff fe44 	bl	80026f0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a72:	d909      	bls.n	8002a88 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2204      	movs	r2, #4
 8002a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	22e0      	movs	r2, #224	@ 0xe0
 8002a80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e098      	b.n	8002bba <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e4      	bne.n	8002a64 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fdb4 	bl	8003608 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002aa0:	f003 ffd4 	bl	8006a4c <HAL_RCC_GetHCLKFreq>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4a49      	ldr	r2, [pc, #292]	@ (8002bcc <HAL_ETH_Init+0x1ec>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	0c9a      	lsrs	r2, r3, #18
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3a01      	subs	r2, #1
 8002ab4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 ff97 	bl	80039ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002aca:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ad6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ada:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	22e0      	movs	r2, #224	@ 0xe0
 8002af6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e05d      	b.n	8002bba <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b06:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002b0a:	4b31      	ldr	r3, [pc, #196]	@ (8002bd0 <HAL_ETH_Init+0x1f0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6952      	ldr	r2, [r2, #20]
 8002b12:	0051      	lsls	r1, r2, #1
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b1e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 ffff 	bl	8003b26 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f001 f845 	bl	8003bb8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	3305      	adds	r3, #5
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	021a      	lsls	r2, r3, #8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4619      	mov	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	3303      	adds	r3, #3
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	061a      	lsls	r2, r3, #24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	3301      	adds	r3, #1
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b7a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b7c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <HAL_ETH_Init+0x1f4>)
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <HAL_ETH_Init+0x1f8>)
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	58000400 	.word	0x58000400
 8002bcc:	431bde83 	.word	0x431bde83
 8002bd0:	ffff8001 	.word	0xffff8001
 8002bd4:	0c020060 	.word	0x0c020060
 8002bd8:	0c20c000 	.word	0x0c20c000

08002bdc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d153      	bne.n	8002c96 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f9f3 	bl	8002fe8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0202 	orr.w	r2, r2, #2
 8002c10:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c3e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c4e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c6a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c76:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8002c82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c86:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2240      	movs	r2, #64	@ 0x40
 8002c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cae:	2b40      	cmp	r3, #64	@ 0x40
 8002cb0:	d13f      	bne.n	8002d32 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cc2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cd2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cde:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cee:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0202 	bic.w	r2, r2, #2
 8002d24:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
  }
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d58:	f043 0201 	orr.w	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e07f      	b.n	8002e66 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d6c:	2b40      	cmp	r3, #64	@ 0x40
 8002d6e:	d179      	bne.n	8002e64 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002d70:	2200      	movs	r2, #0
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 ff7d 	bl	8003c74 <ETH_Prepare_Tx_Descriptors>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e068      	b.n	8002e66 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8002d94:	f3bf 8f4f 	dsb	sy
}
 8002d98:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3206      	adds	r2, #6
 8002da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d904      	bls.n	8002dc4 <HAL_ETH_Transmit+0x84>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	1f1a      	subs	r2, r3, #4
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3106      	adds	r1, #6
 8002dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002dd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dd8:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 8002ddc:	f7ff fc88 	bl	80026f0 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002de2:	e039      	b.n	8002e58 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dec:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d012      	beq.n	8002e1e <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfe:	f043 0208 	orr.w	r2, r3, #8
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e10:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e023      	b.n	8002e66 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d018      	beq.n	8002e58 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7ff fc63 	bl	80026f0 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <HAL_ETH_Transmit+0xfc>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10d      	bne.n	8002e58 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e42:	f043 0204 	orr.w	r2, r3, #4
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002e52:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e006      	b.n	8002e66 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	dbc1      	blt.n	8002de4 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b088      	sub	sp, #32
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0a2      	b.n	8002fe0 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea0:	2b40      	cmp	r3, #64	@ 0x40
 8002ea2:	d001      	beq.n	8002ea8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e09b      	b.n	8002fe0 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	3212      	adds	r2, #18
 8002eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ebe:	f1c3 0304 	rsb	r3, r3, #4
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002ec4:	e064      	b.n	8002f90 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d103      	bne.n	8002ef6 <HAL_ETH_ReadData+0x88>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03a      	beq.n	8002f6c <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	f008 f80a 	bl	800af64 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	441a      	add	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d902      	bls.n	8002f7e <HAL_ETH_ReadData+0x110>
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	3212      	adds	r2, #18
 8002f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f88:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db06      	blt.n	8002fa6 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d202      	bcs.n	8002fa6 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8002fa0:	7cfb      	ldrb	r3, [r7, #19]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d08f      	beq.n	8002ec6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	441a      	add	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f814 	bl	8002fe8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002fc6:	7cfb      	ldrb	r3, [r7, #19]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d108      	bne.n	8002fde <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ffc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	3212      	adds	r2, #18
 8003004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003008:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800300e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003010:	e038      	b.n	8003084 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d112      	bne.n	8003040 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800301a:	f107 0308 	add.w	r3, r7, #8
 800301e:	4618      	mov	r0, r3
 8003020:	f007 ff70 	bl	800af04 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	74fb      	strb	r3, [r7, #19]
 800302e:	e007      	b.n	8003040 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	461a      	mov	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	461a      	mov	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01e      	beq.n	8003084 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	e003      	b.n	8003060 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800305e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	3301      	adds	r3, #1
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d902      	bls.n	8003072 <ETH_UpdateDescriptor+0x8a>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	3b04      	subs	r3, #4
 8003070:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	3212      	adds	r2, #18
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	617b      	str	r3, [r7, #20]
      desccount--;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3b01      	subs	r3, #1
 8003082:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <ETH_UpdateDescriptor+0xa8>
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1c0      	bne.n	8003012 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	429a      	cmp	r2, r3
 8003098:	d01b      	beq.n	80030d2 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3303      	adds	r3, #3
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80030a4:	f3bf 8f5f 	dmb	sy
}
 80030a8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6919      	ldr	r1, [r3, #16]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	18ca      	adds	r2, r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80030d2:	bf00      	nop
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e03e      	b.n	800317a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003104:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	055b      	lsls	r3, r3, #21
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f043 030c 	orr.w	r3, r3, #12
 8003128:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800313c:	f7ff fad8 	bl	80026f0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003142:	e009      	b.n	8003158 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003144:	f7ff fad4 	bl	80026f0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003152:	d901      	bls.n	8003158 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e010      	b.n	800317a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ed      	bne.n	8003144 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e03c      	b.n	8003220 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80031ae:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	055b      	lsls	r3, r3, #21
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	041b      	lsls	r3, r3, #16
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f023 030c 	bic.w	r3, r3, #12
 80031d2:	f043 0304 	orr.w	r3, r3, #4
 80031d6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <HAL_ETH_WritePHYRegister+0xa4>)
 80031e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80031ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003228 <HAL_ETH_WritePHYRegister+0xa4>)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80031f2:	f7ff fa7d 	bl	80026f0 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80031f8:	e009      	b.n	800320e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80031fa:	f7ff fa79 	bl	80026f0 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003208:	d901      	bls.n	800320e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e008      	b.n	8003220 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1ed      	bne.n	80031fa <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40028000 	.word	0x40028000

0800322c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e1c3      	b.n	80035c8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 020c 	and.w	r2, r3, #12
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf14      	ite	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	2300      	moveq	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80032ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2301      	movne	r3, #1
 8003328:	2300      	moveq	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf0c      	ite	eq
 800335a:	2301      	moveq	r3, #1
 800335c:	2300      	movne	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80033ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf14      	ite	ne
 80033c2:	2301      	movne	r3, #1
 80033c4:	2300      	moveq	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0e5b      	lsrs	r3, r3, #25
 800348a:	f003 021f 	and.w	r2, r3, #31
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 020f 	and.w	r2, r3, #15
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2300      	movne	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	b29a      	uxth	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf14      	ite	ne
 800353e:	2301      	movne	r3, #1
 8003540:	2300      	moveq	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003554:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003564:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80035b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e00b      	b.n	8003600 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d105      	bne.n	80035fe <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80035f2:	6839      	ldr	r1, [r7, #0]
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f857 	bl	80036a8 <ETH_SetMACConfig>

    return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e000      	b.n	8003600 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
  }
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003618:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003620:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003622:	f003 fa13 	bl	8006a4c <HAL_RCC_GetHCLKFreq>
 8003626:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4a1a      	ldr	r2, [pc, #104]	@ (8003694 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d804      	bhi.n	800363a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e022      	b.n	8003680 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4a16      	ldr	r2, [pc, #88]	@ (8003698 <HAL_ETH_SetMDIOClockRange+0x90>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d204      	bcs.n	800364c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e019      	b.n	8003680 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4a13      	ldr	r2, [pc, #76]	@ (800369c <HAL_ETH_SetMDIOClockRange+0x94>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d915      	bls.n	8003680 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4a12      	ldr	r2, [pc, #72]	@ (80036a0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d804      	bhi.n	8003666 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e00c      	b.n	8003680 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4a0e      	ldr	r2, [pc, #56]	@ (80036a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d804      	bhi.n	8003678 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e003      	b.n	8003680 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800367e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	02160ebf 	.word	0x02160ebf
 8003698:	03938700 	.word	0x03938700
 800369c:	05f5e0ff 	.word	0x05f5e0ff
 80036a0:	08f0d17f 	.word	0x08f0d17f
 80036a4:	0ee6b27f 	.word	0x0ee6b27f

080036a8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80036ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	791b      	ldrb	r3, [r3, #4]
 80036c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80036c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	7b1b      	ldrb	r3, [r3, #12]
 80036c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80036ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	7b5b      	ldrb	r3, [r3, #13]
 80036d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80036d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	7b9b      	ldrb	r3, [r3, #14]
 80036d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80036da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	7bdb      	ldrb	r3, [r3, #15]
 80036e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80036e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	7c12      	ldrb	r2, [r2, #16]
 80036e8:	2a00      	cmp	r2, #0
 80036ea:	d102      	bne.n	80036f2 <ETH_SetMACConfig+0x4a>
 80036ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80036f0:	e000      	b.n	80036f4 <ETH_SetMACConfig+0x4c>
 80036f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80036f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	7c52      	ldrb	r2, [r2, #17]
 80036fa:	2a00      	cmp	r2, #0
 80036fc:	d102      	bne.n	8003704 <ETH_SetMACConfig+0x5c>
 80036fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003702:	e000      	b.n	8003706 <ETH_SetMACConfig+0x5e>
 8003704:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003706:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	7c9b      	ldrb	r3, [r3, #18]
 800370c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800370e:	431a      	orrs	r2, r3
               macconf->Speed |
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003714:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800371a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	7f1b      	ldrb	r3, [r3, #28]
 8003720:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003722:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	7f5b      	ldrb	r3, [r3, #29]
 8003728:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800372a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	7f92      	ldrb	r2, [r2, #30]
 8003730:	2a00      	cmp	r2, #0
 8003732:	d102      	bne.n	800373a <ETH_SetMACConfig+0x92>
 8003734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003738:	e000      	b.n	800373c <ETH_SetMACConfig+0x94>
 800373a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800373c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	7fdb      	ldrb	r3, [r3, #31]
 8003742:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003744:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	f892 2020 	ldrb.w	r2, [r2, #32]
 800374c:	2a00      	cmp	r2, #0
 800374e:	d102      	bne.n	8003756 <ETH_SetMACConfig+0xae>
 8003750:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003754:	e000      	b.n	8003758 <ETH_SetMACConfig+0xb0>
 8003756:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003758:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800375e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003766:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003768:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b56      	ldr	r3, [pc, #344]	@ (80038d4 <ETH_SetMACConfig+0x22c>)
 800377a:	4013      	ands	r3, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	430b      	orrs	r3, r1
 8003784:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003792:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003794:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800379c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800379e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80037a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80037a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80037b0:	2a00      	cmp	r2, #0
 80037b2:	d102      	bne.n	80037ba <ETH_SetMACConfig+0x112>
 80037b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80037b8:	e000      	b.n	80037bc <ETH_SetMACConfig+0x114>
 80037ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80037bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	4b42      	ldr	r3, [pc, #264]	@ (80038d8 <ETH_SetMACConfig+0x230>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	68f9      	ldr	r1, [r7, #12]
 80037d6:	430b      	orrs	r3, r1
 80037d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	4b3a      	ldr	r3, [pc, #232]	@ (80038dc <ETH_SetMACConfig+0x234>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	68f9      	ldr	r1, [r7, #12]
 80037fa:	430b      	orrs	r3, r1
 80037fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003804:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800380a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003812:	2a00      	cmp	r2, #0
 8003814:	d101      	bne.n	800381a <ETH_SetMACConfig+0x172>
 8003816:	2280      	movs	r2, #128	@ 0x80
 8003818:	e000      	b.n	800381c <ETH_SetMACConfig+0x174>
 800381a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800381c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003822:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800382e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003832:	4013      	ands	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	68f9      	ldr	r1, [r7, #12]
 800383a:	430b      	orrs	r3, r1
 800383c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003844:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800384c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385a:	f023 0103 	bic.w	r1, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	430a      	orrs	r2, r1
 8003866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003872:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800388e:	2a00      	cmp	r2, #0
 8003890:	d101      	bne.n	8003896 <ETH_SetMACConfig+0x1ee>
 8003892:	2240      	movs	r2, #64	@ 0x40
 8003894:	e000      	b.n	8003898 <ETH_SetMACConfig+0x1f0>
 8003896:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003898:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80038a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80038a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80038aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80038b8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	00048083 	.word	0x00048083
 80038d8:	c0f88000 	.word	0xc0f88000
 80038dc:	fffffef0 	.word	0xfffffef0

080038e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b38      	ldr	r3, [pc, #224]	@ (80039d8 <ETH_SetDMAConfig+0xf8>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	6811      	ldr	r1, [r2, #0]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	430b      	orrs	r3, r1
 8003902:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003906:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	791b      	ldrb	r3, [r3, #4]
 800390c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003912:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	7b1b      	ldrb	r3, [r3, #12]
 8003918:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	4b2c      	ldr	r3, [pc, #176]	@ (80039dc <ETH_SetDMAConfig+0xfc>)
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	68f9      	ldr	r1, [r7, #12]
 8003932:	430b      	orrs	r3, r1
 8003934:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003938:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	7b5b      	ldrb	r3, [r3, #13]
 800393e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003950:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003954:	4b22      	ldr	r3, [pc, #136]	@ (80039e0 <ETH_SetDMAConfig+0x100>)
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	68f9      	ldr	r1, [r7, #12]
 800395e:	430b      	orrs	r3, r1
 8003960:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003964:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	7d1b      	ldrb	r3, [r3, #20]
 8003970:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003972:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	7f5b      	ldrb	r3, [r3, #29]
 8003978:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003986:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800398a:	4b16      	ldr	r3, [pc, #88]	@ (80039e4 <ETH_SetDMAConfig+0x104>)
 800398c:	4013      	ands	r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	430b      	orrs	r3, r1
 8003996:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800399a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	7f1b      	ldrb	r3, [r3, #28]
 80039a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80039b8:	4b0b      	ldr	r3, [pc, #44]	@ (80039e8 <ETH_SetDMAConfig+0x108>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	430b      	orrs	r3, r1
 80039c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039c8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	ffff87fd 	.word	0xffff87fd
 80039dc:	ffff2ffe 	.word	0xffff2ffe
 80039e0:	fffec000 	.word	0xfffec000
 80039e4:	ffc0efef 	.word	0xffc0efef
 80039e8:	7fc0ffff 	.word	0x7fc0ffff

080039ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b0a4      	sub	sp, #144	@ 0x90
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80039fa:	2300      	movs	r3, #0
 80039fc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003a28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a2c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003a44:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003a48:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003a50:	2300      	movs	r3, #0
 8003a52:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003a66:	2300      	movs	r3, #0
 8003a68:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003a84:	2320      	movs	r3, #32
 8003a86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003a96:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003a9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003aa0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ad0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fde6 	bl	80036a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003af6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003afa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b04:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003b0c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003b10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fee1 	bl	80038e0 <ETH_SetDMAConfig>
}
 8003b1e:	bf00      	nop
 8003b20:	3790      	adds	r7, #144	@ 0x90
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	e01d      	b.n	8003b70 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68d9      	ldr	r1, [r3, #12]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	440b      	add	r3, r1
 8003b44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	3206      	adds	r2, #6
 8003b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d9de      	bls.n	8003b34 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b84:	461a      	mov	r2, r3
 8003b86:	2303      	movs	r3, #3
 8003b88:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b98:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ba8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e023      	b.n	8003c0e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6919      	ldr	r1, [r3, #16]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2200      	movs	r2, #0
 8003be2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2200      	movs	r2, #0
 8003bee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	3212      	adds	r2, #18
 8003c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d9d8      	bls.n	8003bc6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c4e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c62:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b091      	sub	sp, #68	@ 0x44
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3318      	adds	r3, #24
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cb6:	d007      	beq.n	8003cc8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e266      	b.n	800419a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d044      	beq.n	8003d62 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	4b75      	ldr	r3, [pc, #468]	@ (8003eb4 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003d04:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d027      	beq.n	8003d62 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d22:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d40:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003d50:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003d60:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	4b51      	ldr	r3, [pc, #324]	@ (8003eb8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	6992      	ldr	r2, [r2, #24]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d036      	beq.n	8003e12 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003db0:	f3bf 8f5f 	dmb	sy
}
 8003db4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d902      	bls.n	8003dd4 <ETH_Prepare_Tx_Descriptors+0x160>
 8003dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd0:	3b04      	subs	r3, #4
 8003dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ddc:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8003dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de0:	3301      	adds	r3, #1
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003df0:	d10f      	bne.n	8003e12 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	6a3a      	ldr	r2, [r7, #32]
 8003df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003dfc:	f3bf 8f5f 	dmb	sy
}
 8003e00:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e1c3      	b.n	800419a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e14:	3301      	adds	r3, #1
 8003e16:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	4b24      	ldr	r3, [pc, #144]	@ (8003eb8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e2c:	6852      	ldr	r2, [r2, #4]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d012      	beq.n	8003e62 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <ETH_Prepare_Tx_Descriptors+0x248>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e56:	6852      	ldr	r2, [r2, #4]
 8003e58:	0412      	lsls	r2, r2, #16
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	e008      	b.n	8003e74 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	2200      	movs	r2, #0
 8003e66:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	4b13      	ldr	r3, [pc, #76]	@ (8003ebc <ETH_Prepare_Tx_Descriptors+0x248>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e72:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d021      	beq.n	8003ec4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	04db      	lsls	r3, r3, #19
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e92:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	69d2      	ldr	r2, [r2, #28]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	e02e      	b.n	8003f12 <ETH_Prepare_Tx_Descriptors+0x29e>
 8003eb4:	ffff0000 	.word	0xffff0000
 8003eb8:	ffffc000 	.word	0xffffc000
 8003ebc:	c000ffff 	.word	0xc000ffff
 8003ec0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	4b7b      	ldr	r3, [pc, #492]	@ (80040b8 <ETH_Prepare_Tx_Descriptors+0x444>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	6852      	ldr	r2, [r2, #4]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f10:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003f48:	f3bf 8f5f 	dmb	sy
}
 8003f4c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80da 	beq.w	800411c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f78:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003f7a:	e0cf      	b.n	800411c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d902      	bls.n	8003f9a <ETH_Prepare_Tx_Descriptors+0x326>
 8003f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f96:	3b04      	subs	r3, #4
 8003f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fbc:	d007      	beq.n	8003fce <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d029      	beq.n	8004022 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fda:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fe0:	e019      	b.n	8004016 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003fe2:	f3bf 8f5f 	dmb	sy
}
 8003fe6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d902      	bls.n	8004006 <ETH_Prepare_Tx_Descriptors+0x392>
 8004000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004002:	3b04      	subs	r3, #4
 8004004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800400a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800400e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004012:	3301      	adds	r3, #1
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004016:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401a:	429a      	cmp	r2, r3
 800401c:	d3e1      	bcc.n	8003fe2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800401e:	2302      	movs	r3, #2
 8004020:	e0bb      	b.n	800419a <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8004022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004024:	3301      	adds	r3, #1
 8004026:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800402e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	4b1f      	ldr	r3, [pc, #124]	@ (80040bc <ETH_Prepare_Tx_Descriptors+0x448>)
 800403e:	4013      	ands	r3, r2
 8004040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004042:	6852      	ldr	r2, [r2, #4]
 8004044:	431a      	orrs	r2, r3
 8004046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004048:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800404a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d012      	beq.n	8004078 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	4b16      	ldr	r3, [pc, #88]	@ (80040c0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004068:	4013      	ands	r3, r2
 800406a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800406c:	6852      	ldr	r2, [r2, #4]
 800406e:	0412      	lsls	r2, r2, #16
 8004070:	431a      	orrs	r2, r3
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	e008      	b.n	800408a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407a:	2200      	movs	r2, #0
 800407c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800407e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	4b0f      	ldr	r3, [pc, #60]	@ (80040c0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004084:	4013      	ands	r3, r2
 8004086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004088:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	d018      	beq.n	80040c8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	4b0a      	ldr	r3, [pc, #40]	@ (80040c4 <ETH_Prepare_Tx_Descriptors+0x450>)
 800409c:	4013      	ands	r3, r2
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	69d2      	ldr	r2, [r2, #28]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	e020      	b.n	80040f8 <ETH_Prepare_Tx_Descriptors+0x484>
 80040b6:	bf00      	nop
 80040b8:	ffff8000 	.word	0xffff8000
 80040bc:	ffffc000 	.word	0xffffc000
 80040c0:	c000ffff 	.word	0xc000ffff
 80040c4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80040c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	4b36      	ldr	r3, [pc, #216]	@ (80041a8 <ETH_Prepare_Tx_Descriptors+0x534>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	6852      	ldr	r2, [r2, #4]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80040f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fa:	3301      	adds	r3, #1
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80040fe:	f3bf 8f5f 	dmb	sy
}
 8004102:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f47f af2b 	bne.w	8003f7c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d006      	beq.n	800413a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	e005      	b.n	8004146 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800413a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004144:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004150:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004156:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800415a:	3304      	adds	r3, #4
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004166:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004168:	f3ef 8310 	mrs	r3, PRIMASK
 800416c:	61bb      	str	r3, [r7, #24]
  return(result);
 800416e:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	2301      	movs	r3, #1
 8004174:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f383 8810 	msr	PRIMASK, r3
}
 800417c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004184:	4413      	add	r3, r2
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	629a      	str	r2, [r3, #40]	@ 0x28
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f383 8810 	msr	PRIMASK, r3
}
 8004196:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3744      	adds	r7, #68	@ 0x44
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	ffff8000 	.word	0xffff8000

080041ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b098      	sub	sp, #96	@ 0x60
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80041b4:	4a84      	ldr	r2, [pc, #528]	@ (80043c8 <HAL_FDCAN_Init+0x21c>)
 80041b6:	f107 030c 	add.w	r3, r7, #12
 80041ba:	4611      	mov	r1, r2
 80041bc:	224c      	movs	r2, #76	@ 0x4c
 80041be:	4618      	mov	r0, r3
 80041c0:	f012 fa69 	bl	8016696 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e1c6      	b.n	800455c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a7e      	ldr	r2, [pc, #504]	@ (80043cc <HAL_FDCAN_Init+0x220>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d106      	bne.n	80041e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fc fdb2 	bl	8000d64 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0210 	bic.w	r2, r2, #16
 800420e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004210:	f7fe fa6e 	bl	80026f0 <HAL_GetTick>
 8004214:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004216:	e014      	b.n	8004242 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004218:	f7fe fa6a 	bl	80026f0 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b0a      	cmp	r3, #10
 8004224:	d90d      	bls.n	8004242 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800422c:	f043 0201 	orr.w	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2203      	movs	r2, #3
 800423a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e18c      	b.n	800455c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d0e3      	beq.n	8004218 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004260:	f7fe fa46 	bl	80026f0 <HAL_GetTick>
 8004264:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004266:	e014      	b.n	8004292 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004268:	f7fe fa42 	bl	80026f0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b0a      	cmp	r3, #10
 8004274:	d90d      	bls.n	8004292 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2203      	movs	r2, #3
 800428a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e164      	b.n	800455c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0e3      	beq.n	8004268 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0202 	orr.w	r2, r2, #2
 80042ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7c1b      	ldrb	r3, [r3, #16]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d108      	bne.n	80042ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c6:	619a      	str	r2, [r3, #24]
 80042c8:	e007      	b.n	80042da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	7c5b      	ldrb	r3, [r3, #17]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d108      	bne.n	80042f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699a      	ldr	r2, [r3, #24]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042f0:	619a      	str	r2, [r3, #24]
 80042f2:	e007      	b.n	8004304 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004302:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	7c9b      	ldrb	r3, [r3, #18]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d108      	bne.n	800431e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800431a:	619a      	str	r2, [r3, #24]
 800431c:	e007      	b.n	800432e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800432c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004352:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0210 	bic.w	r2, r2, #16
 8004362:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d108      	bne.n	800437e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0204 	orr.w	r2, r2, #4
 800437a:	619a      	str	r2, [r3, #24]
 800437c:	e030      	b.n	80043e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02c      	beq.n	80043e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d020      	beq.n	80043d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800439c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0210 	orr.w	r2, r2, #16
 80043ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d114      	bne.n	80043e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0220 	orr.w	r2, r2, #32
 80043c4:	619a      	str	r2, [r3, #24]
 80043c6:	e00b      	b.n	80043e0 <HAL_FDCAN_Init+0x234>
 80043c8:	08019a3c 	.word	0x08019a3c
 80043cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0220 	orr.w	r2, r2, #32
 80043de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	3b01      	subs	r3, #1
 8004402:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004408:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800440a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004414:	d115      	bne.n	8004442 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	3b01      	subs	r3, #1
 8004422:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004424:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	3b01      	subs	r3, #1
 800442c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800442e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004436:	3b01      	subs	r3, #1
 8004438:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800443e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004440:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004468:	4413      	add	r3, r2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d011      	beq.n	8004492 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004476:	f023 0107 	bic.w	r1, r3, #7
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	3360      	adds	r3, #96	@ 0x60
 8004482:	443b      	add	r3, r7
 8004484:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d011      	beq.n	80044be <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044a2:	f023 0107 	bic.w	r1, r3, #7
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	3360      	adds	r3, #96	@ 0x60
 80044ae:	443b      	add	r3, r7
 80044b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d012      	beq.n	80044ec <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044ce:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	3360      	adds	r3, #96	@ 0x60
 80044da:	443b      	add	r3, r7
 80044dc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80044e0:	011a      	lsls	r2, r3, #4
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d012      	beq.n	800451a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044fc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	3360      	adds	r3, #96	@ 0x60
 8004508:	443b      	add	r3, r7
 800450a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800450e:	021a      	lsls	r2, r3, #8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a11      	ldr	r2, [pc, #68]	@ (8004564 <HAL_FDCAN_Init+0x3b8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d107      	bne.n	8004534 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f022 0203 	bic.w	r2, r2, #3
 8004532:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fe1b 	bl	8005188 <FDCAN_CalcultateRamBlockAddresses>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004558:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800455c:	4618      	mov	r0, r3
 800455e:	3760      	adds	r7, #96	@ 0x60
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	4000a000 	.word	0x4000a000

08004568 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004578:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d002      	beq.n	8004586 <HAL_FDCAN_ConfigFilter+0x1e>
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d157      	bne.n	8004636 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d12b      	bne.n	80045e6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b07      	cmp	r3, #7
 8004594:	d10d      	bne.n	80045b2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80045a2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80045a8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80045aa:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e00e      	b.n	80045d0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80045be:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80045c6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e025      	b.n	8004632 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	075a      	lsls	r2, r3, #29
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2b07      	cmp	r3, #7
 80045fa:	d103      	bne.n	8004604 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	e006      	b.n	8004612 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	079a      	lsls	r2, r3, #30
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3304      	adds	r3, #4
 800462a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e008      	b.n	8004648 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800463c:	f043 0202 	orr.w	r2, r3, #2
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d111      	bne.n	800468c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e008      	b.n	800469e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d141      	bne.n	8004746 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80046ca:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046d8:	f043 0220 	orr.w	r2, r3, #32
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e038      	b.n	8004758 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80046ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e026      	b.n	8004758 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004712:	0c1b      	lsrs	r3, r3, #16
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 feb7 	bl	8005494 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2101      	movs	r1, #1
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	fa01 f202 	lsl.w	r2, r1, r2
 8004732:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004736:	2201      	movs	r2, #1
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	409a      	lsls	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e008      	b.n	8004758 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800474c:	f043 0208 	orr.w	r2, r3, #8
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
  }
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004760:	b480      	push	{r7}
 8004762:	b08b      	sub	sp, #44	@ 0x2c
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004778:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800477a:	7efb      	ldrb	r3, [r7, #27]
 800477c:	2b02      	cmp	r3, #2
 800477e:	f040 8149 	bne.w	8004a14 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b40      	cmp	r3, #64	@ 0x40
 8004786:	d14c      	bne.n	8004822 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004790:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800479e:	f043 0220 	orr.w	r2, r3, #32
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e13c      	b.n	8004a26 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e12a      	b.n	8004a26 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047e0:	d10a      	bne.n	80047f8 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047f2:	d101      	bne.n	80047f8 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80047f4:	2301      	movs	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004814:	69f9      	ldr	r1, [r7, #28]
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004820:	e068      	b.n	80048f4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b41      	cmp	r3, #65	@ 0x41
 8004826:	d14c      	bne.n	80048c2 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004830:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0ec      	b.n	8004a26 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004862:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0da      	b.n	8004a26 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004878:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800487c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004880:	d10a      	bne.n	8004898 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800488a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800488e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004892:	d101      	bne.n	8004898 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004894:	2301      	movs	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b4:	69f9      	ldr	r1, [r7, #28]
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c0:	e018      	b.n	80048f4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d309      	bcc.n	80048e0 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048d2:	f043 0220 	orr.w	r2, r3, #32
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0a2      	b.n	8004a26 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	0c9b      	lsrs	r3, r3, #18
 800490e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e005      	b.n	8004924 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	3304      	adds	r3, #4
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	f003 020f 	and.w	r2, r3, #15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	0e1b      	lsrs	r3, r3, #24
 8004978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0fda      	lsrs	r2, r3, #31
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	3304      	adds	r3, #4
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004994:	2300      	movs	r3, #0
 8004996:	623b      	str	r3, [r7, #32]
 8004998:	e00a      	b.n	80049b0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	441a      	add	r2, r3
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	440b      	add	r3, r1
 80049a6:	7812      	ldrb	r2, [r2, #0]
 80049a8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	3301      	adds	r3, #1
 80049ae:	623b      	str	r3, [r7, #32]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a34 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	461a      	mov	r2, r3
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	4293      	cmp	r3, r2
 80049be:	d3ec      	bcc.n	800499a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b40      	cmp	r3, #64	@ 0x40
 80049c4:	d105      	bne.n	80049d2 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80049d0:	e01e      	b.n	8004a10 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b41      	cmp	r3, #65	@ 0x41
 80049d6:	d105      	bne.n	80049e4 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80049e2:	e015      	b.n	8004a10 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b1f      	cmp	r3, #31
 80049e8:	d808      	bhi.n	80049fc <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2101      	movs	r1, #1
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	fa01 f202 	lsl.w	r2, r1, r2
 80049f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80049fa:	e009      	b.n	8004a10 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 021f 	and.w	r2, r3, #31
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2101      	movs	r1, #1
 8004a08:	fa01 f202 	lsl.w	r2, r1, r2
 8004a0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e008      	b.n	8004a26 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a1a:	f043 0208 	orr.w	r2, r3, #8
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	372c      	adds	r7, #44	@ 0x2c
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	0801c478 	.word	0x0801c478

08004a38 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b40      	cmp	r3, #64	@ 0x40
 8004a46:	d107      	bne.n	8004a58 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e006      	b.n	8004a66 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a64:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8004a66:	68fb      	ldr	r3, [r7, #12]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004aaa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d002      	beq.n	8004ab8 <HAL_FDCAN_ActivateNotification+0x20>
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d155      	bne.n	8004b64 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ad6:	e014      	b.n	8004b02 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d108      	bne.n	8004afa <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0202 	orr.w	r2, r2, #2
 8004af6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004af8:	e003      	b.n	8004b02 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2203      	movs	r2, #3
 8004b00:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	4b0f      	ldr	r3, [pc, #60]	@ (8004b84 <HAL_FDCAN_ActivateNotification+0xec>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b52:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	0f9b      	lsrs	r3, r3, #30
 8004b5a:	490b      	ldr	r1, [pc, #44]	@ (8004b88 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e008      	b.n	8004b76 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b6a:	f043 0202 	orr.w	r2, r3, #2
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	3fcfffff 	.word	0x3fcfffff
 8004b88:	4000a800 	.word	0x4000a800

08004b8c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b096      	sub	sp, #88	@ 0x58
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004b94:	4b9a      	ldr	r3, [pc, #616]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	079b      	lsls	r3, r3, #30
 8004b9a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004b9c:	4b98      	ldr	r3, [pc, #608]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	079b      	lsls	r3, r3, #30
 8004ba2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bae:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004bb2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004be2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bec:	4013      	ands	r3, r2
 8004bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c04:	4013      	ands	r3, r2
 8004c06:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c0e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004c12:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3e:	0a1b      	lsrs	r3, r3, #8
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c50:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c52:	4b6b      	ldr	r3, [pc, #428]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa49 	bl	80050f0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c60:	0a9b      	lsrs	r3, r3, #10
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01d      	beq.n	8004ca6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	0a9b      	lsrs	r3, r3, #10
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d017      	beq.n	8004ca6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c7e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c96:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c98:	4b59      	ldr	r3, [pc, #356]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004c9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f9fc 	bl	800509e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00d      	beq.n	8004cc8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cb2:	4b54      	ldr	r3, [pc, #336]	@ (8004e04 <HAL_FDCAN_IRQHandler+0x278>)
 8004cb4:	400b      	ands	r3, r1
 8004cb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cb8:	4a51      	ldr	r2, [pc, #324]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cbc:	0f9b      	lsrs	r3, r3, #30
 8004cbe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004cc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9c0 	bl	8005048 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00d      	beq.n	8004cea <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004e04 <HAL_FDCAN_IRQHandler+0x278>)
 8004cd6:	400b      	ands	r3, r1
 8004cd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cda:	4a49      	ldr	r2, [pc, #292]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cde:	0f9b      	lsrs	r3, r3, #30
 8004ce0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004ce2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f9ba 	bl	800505e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00d      	beq.n	8004d0c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004cf6:	4b43      	ldr	r3, [pc, #268]	@ (8004e04 <HAL_FDCAN_IRQHandler+0x278>)
 8004cf8:	400b      	ands	r3, r1
 8004cfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cfc:	4a40      	ldr	r2, [pc, #256]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d00:	0f9b      	lsrs	r3, r3, #30
 8004d02:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004d04:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc fc7a 	bl	8001600 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00d      	beq.n	8004d2e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004d18:	4b3a      	ldr	r3, [pc, #232]	@ (8004e04 <HAL_FDCAN_IRQHandler+0x278>)
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d1e:	4a38      	ldr	r2, [pc, #224]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d22:	0f9b      	lsrs	r3, r3, #30
 8004d24:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004d26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7fc fd07 	bl	800173c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d30:	0adb      	lsrs	r3, r3, #11
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d010      	beq.n	8004d5c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	0adb      	lsrs	r3, r3, #11
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d50:	4b2b      	ldr	r3, [pc, #172]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f98c 	bl	8005074 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d5e:	0a5b      	lsrs	r3, r3, #9
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01d      	beq.n	8004da4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6a:	0a5b      	lsrs	r3, r3, #9
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d017      	beq.n	8004da4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d88:	4013      	ands	r3, r2
 8004d8a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d94:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d96:	4b1a      	ldr	r3, [pc, #104]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004d9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f972 	bl	8005088 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da6:	0cdb      	lsrs	r3, r3, #19
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d010      	beq.n	8004dd2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db2:	0cdb      	lsrs	r3, r3, #19
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004dc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f971 	bl	80050b4 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d010      	beq.n	8004e0c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004df2:	651a      	str	r2, [r3, #80]	@ 0x50
 8004df4:	4b02      	ldr	r3, [pc, #8]	@ (8004e00 <HAL_FDCAN_IRQHandler+0x274>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	e004      	b.n	8004e08 <HAL_FDCAN_IRQHandler+0x27c>
 8004dfe:	bf00      	nop
 8004e00:	4000a800 	.word	0x4000a800
 8004e04:	3fcfffff 	.word	0x3fcfffff
 8004e08:	f000 f95e 	bl	80050c8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0e:	0c9b      	lsrs	r3, r3, #18
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1a:	0c9b      	lsrs	r3, r3, #18
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004e2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e2e:	4b83      	ldr	r3, [pc, #524]	@ (800503c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f951 	bl	80050dc <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3c:	0c5b      	lsrs	r3, r3, #17
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d015      	beq.n	8004e72 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e48:	0c5b      	lsrs	r3, r3, #17
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00f      	beq.n	8004e72 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e5c:	4b77      	ldr	r3, [pc, #476]	@ (800503c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00d      	beq.n	8004e94 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e7e:	4b70      	ldr	r3, [pc, #448]	@ (8005040 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004e80:	400b      	ands	r3, r1
 8004e82:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e84:	4a6d      	ldr	r2, [pc, #436]	@ (800503c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e88:	0f9b      	lsrs	r3, r3, #30
 8004e8a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004e8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f942 	bl	8005118 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d011      	beq.n	8004ebe <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ea0:	4b67      	ldr	r3, [pc, #412]	@ (8005040 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004ea2:	400b      	ands	r3, r1
 8004ea4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ea6:	4a65      	ldr	r2, [pc, #404]	@ (800503c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eaa:	0f9b      	lsrs	r3, r3, #30
 8004eac:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a60      	ldr	r2, [pc, #384]	@ (8005044 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	f040 80ac 	bne.w	8005022 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80a4 	beq.w	8005022 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eee:	4013      	ands	r3, r2
 8004ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004efc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f06:	4013      	ands	r3, r2
 8004f08:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f1e:	4013      	ands	r3, r2
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004f2c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	4013      	ands	r3, r2
 8004f38:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004f44:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f6e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004f70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8db 	bl	800512e <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f84:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004f86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f8db 	bl	8005144 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	099b      	lsrs	r3, r3, #6
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01a      	beq.n	8004fd0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	099b      	lsrs	r3, r3, #6
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d014      	beq.n	8004fd0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fbc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2240      	movs	r2, #64	@ 0x40
 8004fc4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	6939      	ldr	r1, [r7, #16]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8c5 	bl	800515a <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fdc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004fde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f8c6 	bl	8005172 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00b      	beq.n	8005004 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	6a3a      	ldr	r2, [r7, #32]
 8004ff2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f869 	bl	8005104 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005032:	bf00      	nop
 8005034:	3758      	adds	r7, #88	@ 0x58
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	4000a800 	.word	0x4000a800
 8005040:	3fcfffff 	.word	0x3fcfffff
 8005044:	4000a000 	.word	0x4000a000

08005048 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005194:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800519e:	4ba7      	ldr	r3, [pc, #668]	@ (800543c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	0091      	lsls	r1, r2, #2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	430b      	orrs	r3, r1
 80051ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051b8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c0:	041a      	lsls	r2, r3, #16
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	4413      	add	r3, r2
 80051d4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80051de:	4b97      	ldr	r3, [pc, #604]	@ (800543c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	0091      	lsls	r1, r2, #2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	430b      	orrs	r3, r1
 80051ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f8:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005200:	041a      	lsls	r2, r3, #16
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	4413      	add	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005220:	4b86      	ldr	r3, [pc, #536]	@ (800543c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005222:	4013      	ands	r3, r2
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	0091      	lsls	r1, r2, #2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	430b      	orrs	r3, r1
 800522e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800523a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	041a      	lsls	r2, r3, #16
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	4413      	add	r3, r2
 800525e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005268:	4b74      	ldr	r3, [pc, #464]	@ (800543c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800526a:	4013      	ands	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	0091      	lsls	r1, r2, #2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	430b      	orrs	r3, r1
 8005276:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005282:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528a:	041a      	lsls	r2, r3, #16
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4413      	add	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80052b0:	4b62      	ldr	r3, [pc, #392]	@ (800543c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	0091      	lsls	r1, r2, #2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	430b      	orrs	r3, r1
 80052be:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80052ca:	fb02 f303 	mul.w	r3, r2, r3
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	4413      	add	r3, r2
 80052d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80052dc:	4b57      	ldr	r3, [pc, #348]	@ (800543c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052de:	4013      	ands	r3, r2
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	0091      	lsls	r1, r2, #2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	430b      	orrs	r3, r1
 80052ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052f6:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fe:	041a      	lsls	r2, r3, #16
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	4413      	add	r3, r2
 8005314:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800531e:	4b47      	ldr	r3, [pc, #284]	@ (800543c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005320:	4013      	ands	r3, r2
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	0091      	lsls	r1, r2, #2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	430b      	orrs	r3, r1
 800532c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005338:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005340:	041a      	lsls	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005354:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800535c:	061a      	lsls	r2, r3, #24
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800536c:	4b34      	ldr	r3, [pc, #208]	@ (8005440 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800536e:	4413      	add	r3, r2
 8005370:	009a      	lsls	r2, r3, #2
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	441a      	add	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80053a8:	441a      	add	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80053ba:	fb01 f303 	mul.w	r3, r1, r3
 80053be:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80053c0:	441a      	add	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80053d8:	441a      	add	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	441a      	add	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005402:	fb01 f303 	mul.w	r3, r1, r3
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005424:	441a      	add	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005432:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d915      	bls.n	8005464 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005438:	e006      	b.n	8005448 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800543a:	bf00      	nop
 800543c:	ffff0003 	.word	0xffff0003
 8005440:	10002b00 	.word	0x10002b00
 8005444:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800544e:	f043 0220 	orr.w	r2, r3, #32
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2203      	movs	r2, #3
 800545c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e010      	b.n	8005486 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	e005      	b.n	8005478 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3304      	adds	r3, #4
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	429a      	cmp	r2, r3
 8005482:	d3f3      	bcc.n	800546c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop

08005494 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005494:	b480      	push	{r7}
 8005496:	b089      	sub	sp, #36	@ 0x24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80054b2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	e00a      	b.n	80054d6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80054c8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80054ce:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054d4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80054e0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80054e6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80054ec:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	3304      	adds	r3, #4
 8005518:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	3304      	adds	r3, #4
 8005524:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e020      	b.n	800556e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	3303      	adds	r3, #3
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4413      	add	r3, r2
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	3302      	adds	r3, #2
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	440b      	add	r3, r1
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005544:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	3301      	adds	r3, #1
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	440b      	add	r3, r1
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005552:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	440a      	add	r2, r1
 800555a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800555c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	3304      	adds	r3, #4
 8005566:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3304      	adds	r3, #4
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	4a06      	ldr	r2, [pc, #24]	@ (800558c <FDCAN_CopyMessageToRAM+0xf8>)
 8005574:	5cd3      	ldrb	r3, [r2, r3]
 8005576:	461a      	mov	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4293      	cmp	r3, r2
 800557c:	d3d6      	bcc.n	800552c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800557e:	bf00      	nop
 8005580:	bf00      	nop
 8005582:	3724      	adds	r7, #36	@ 0x24
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	0801c478 	.word	0x0801c478

08005590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005590:	b480      	push	{r7}
 8005592:	b089      	sub	sp, #36	@ 0x24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800559e:	4b86      	ldr	r3, [pc, #536]	@ (80057b8 <HAL_GPIO_Init+0x228>)
 80055a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055a2:	e18c      	b.n	80058be <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	fa01 f303 	lsl.w	r3, r1, r3
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 817e 	beq.w	80058b8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d005      	beq.n	80055d4 <HAL_GPIO_Init+0x44>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d130      	bne.n	8005636 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	2203      	movs	r2, #3
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800560a:	2201      	movs	r2, #1
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	091b      	lsrs	r3, r3, #4
 8005620:	f003 0201 	and.w	r2, r3, #1
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4313      	orrs	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b03      	cmp	r3, #3
 8005640:	d017      	beq.n	8005672 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	2203      	movs	r2, #3
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4013      	ands	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d123      	bne.n	80056c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	08da      	lsrs	r2, r3, #3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3208      	adds	r2, #8
 8005686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	220f      	movs	r2, #15
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	43db      	mvns	r3, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	08da      	lsrs	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3208      	adds	r2, #8
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	2203      	movs	r2, #3
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43db      	mvns	r3, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4013      	ands	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f003 0203 	and.w	r2, r3, #3
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80d8 	beq.w	80058b8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005708:	4b2c      	ldr	r3, [pc, #176]	@ (80057bc <HAL_GPIO_Init+0x22c>)
 800570a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800570e:	4a2b      	ldr	r2, [pc, #172]	@ (80057bc <HAL_GPIO_Init+0x22c>)
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005718:	4b28      	ldr	r3, [pc, #160]	@ (80057bc <HAL_GPIO_Init+0x22c>)
 800571a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005726:	4a26      	ldr	r2, [pc, #152]	@ (80057c0 <HAL_GPIO_Init+0x230>)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	089b      	lsrs	r3, r3, #2
 800572c:	3302      	adds	r3, #2
 800572e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	220f      	movs	r2, #15
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4013      	ands	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1d      	ldr	r2, [pc, #116]	@ (80057c4 <HAL_GPIO_Init+0x234>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d04a      	beq.n	80057e8 <HAL_GPIO_Init+0x258>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1c      	ldr	r2, [pc, #112]	@ (80057c8 <HAL_GPIO_Init+0x238>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d02b      	beq.n	80057b2 <HAL_GPIO_Init+0x222>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1b      	ldr	r2, [pc, #108]	@ (80057cc <HAL_GPIO_Init+0x23c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d025      	beq.n	80057ae <HAL_GPIO_Init+0x21e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1a      	ldr	r2, [pc, #104]	@ (80057d0 <HAL_GPIO_Init+0x240>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d01f      	beq.n	80057aa <HAL_GPIO_Init+0x21a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a19      	ldr	r2, [pc, #100]	@ (80057d4 <HAL_GPIO_Init+0x244>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d019      	beq.n	80057a6 <HAL_GPIO_Init+0x216>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a18      	ldr	r2, [pc, #96]	@ (80057d8 <HAL_GPIO_Init+0x248>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d013      	beq.n	80057a2 <HAL_GPIO_Init+0x212>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a17      	ldr	r2, [pc, #92]	@ (80057dc <HAL_GPIO_Init+0x24c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00d      	beq.n	800579e <HAL_GPIO_Init+0x20e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a16      	ldr	r2, [pc, #88]	@ (80057e0 <HAL_GPIO_Init+0x250>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d007      	beq.n	800579a <HAL_GPIO_Init+0x20a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a15      	ldr	r2, [pc, #84]	@ (80057e4 <HAL_GPIO_Init+0x254>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <HAL_GPIO_Init+0x206>
 8005792:	2309      	movs	r3, #9
 8005794:	e029      	b.n	80057ea <HAL_GPIO_Init+0x25a>
 8005796:	230a      	movs	r3, #10
 8005798:	e027      	b.n	80057ea <HAL_GPIO_Init+0x25a>
 800579a:	2307      	movs	r3, #7
 800579c:	e025      	b.n	80057ea <HAL_GPIO_Init+0x25a>
 800579e:	2306      	movs	r3, #6
 80057a0:	e023      	b.n	80057ea <HAL_GPIO_Init+0x25a>
 80057a2:	2305      	movs	r3, #5
 80057a4:	e021      	b.n	80057ea <HAL_GPIO_Init+0x25a>
 80057a6:	2304      	movs	r3, #4
 80057a8:	e01f      	b.n	80057ea <HAL_GPIO_Init+0x25a>
 80057aa:	2303      	movs	r3, #3
 80057ac:	e01d      	b.n	80057ea <HAL_GPIO_Init+0x25a>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e01b      	b.n	80057ea <HAL_GPIO_Init+0x25a>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e019      	b.n	80057ea <HAL_GPIO_Init+0x25a>
 80057b6:	bf00      	nop
 80057b8:	58000080 	.word	0x58000080
 80057bc:	58024400 	.word	0x58024400
 80057c0:	58000400 	.word	0x58000400
 80057c4:	58020000 	.word	0x58020000
 80057c8:	58020400 	.word	0x58020400
 80057cc:	58020800 	.word	0x58020800
 80057d0:	58020c00 	.word	0x58020c00
 80057d4:	58021000 	.word	0x58021000
 80057d8:	58021400 	.word	0x58021400
 80057dc:	58021800 	.word	0x58021800
 80057e0:	58021c00 	.word	0x58021c00
 80057e4:	58022400 	.word	0x58022400
 80057e8:	2300      	movs	r3, #0
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	f002 0203 	and.w	r2, r2, #3
 80057f0:	0092      	lsls	r2, r2, #2
 80057f2:	4093      	lsls	r3, r2
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057fa:	4938      	ldr	r1, [pc, #224]	@ (80058dc <HAL_GPIO_Init+0x34c>)
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	089b      	lsrs	r3, r3, #2
 8005800:	3302      	adds	r3, #2
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	43db      	mvns	r3, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800582e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800585c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	3301      	adds	r3, #1
 80058bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f47f ae6b 	bne.w	80055a4 <HAL_GPIO_Init+0x14>
  }
}
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	3724      	adds	r7, #36	@ 0x24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	58000400 	.word	0x58000400

080058e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e08b      	b.n	8005a0a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb fc18 	bl	800113c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	@ 0x24
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005930:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005940:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	e006      	b.n	8005968 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005966:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d108      	bne.n	8005982 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800597e:	605a      	str	r2, [r3, #4]
 8005980:	e007      	b.n	8005992 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005990:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b1d      	ldr	r3, [pc, #116]	@ (8005a14 <HAL_I2C_Init+0x134>)
 800599e:	430b      	orrs	r3, r1
 80059a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69d9      	ldr	r1, [r3, #28]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	02008000 	.word	0x02008000

08005a18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
  }
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d138      	bne.n	8005ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e032      	b.n	8005ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	@ 0x24
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6819      	ldr	r1, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d139      	bne.n	8005b6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e033      	b.n	8005b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2224      	movs	r2, #36	@ 0x24
 8005b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0201 	bic.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e000      	b.n	8005b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b6c:	2302      	movs	r3, #2
  }
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b84:	4b0d      	ldr	r3, [pc, #52]	@ (8005bbc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8005bbc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005b8c:	f043 0302 	orr.w	r3, r3, #2
 8005b90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005b94:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8005ba2:	4b07      	ldr	r3, [pc, #28]	@ (8005bc0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	4906      	ldr	r1, [pc, #24]	@ (8005bc0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]
}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	58024400 	.word	0x58024400
 8005bc0:	58000400 	.word	0x58000400

08005bc4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005bcc:	4b19      	ldr	r3, [pc, #100]	@ (8005c34 <HAL_PWREx_ConfigSupply+0x70>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d00a      	beq.n	8005bee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005bd8:	4b16      	ldr	r3, [pc, #88]	@ (8005c34 <HAL_PWREx_ConfigSupply+0x70>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d001      	beq.n	8005bea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e01f      	b.n	8005c2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e01d      	b.n	8005c2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005bee:	4b11      	ldr	r3, [pc, #68]	@ (8005c34 <HAL_PWREx_ConfigSupply+0x70>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f023 0207 	bic.w	r2, r3, #7
 8005bf6:	490f      	ldr	r1, [pc, #60]	@ (8005c34 <HAL_PWREx_ConfigSupply+0x70>)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005bfe:	f7fc fd77 	bl	80026f0 <HAL_GetTick>
 8005c02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c04:	e009      	b.n	8005c1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c06:	f7fc fd73 	bl	80026f0 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c14:	d901      	bls.n	8005c1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e007      	b.n	8005c2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c1a:	4b06      	ldr	r3, [pc, #24]	@ (8005c34 <HAL_PWREx_ConfigSupply+0x70>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c26:	d1ee      	bne.n	8005c06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	58024800 	.word	0x58024800

08005c38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08c      	sub	sp, #48	@ 0x30
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e3c8      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8087 	beq.w	8005d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c58:	4b88      	ldr	r3, [pc, #544]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c62:	4b86      	ldr	r3, [pc, #536]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6a:	2b10      	cmp	r3, #16
 8005c6c:	d007      	beq.n	8005c7e <HAL_RCC_OscConfig+0x46>
 8005c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c70:	2b18      	cmp	r3, #24
 8005c72:	d110      	bne.n	8005c96 <HAL_RCC_OscConfig+0x5e>
 8005c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d10b      	bne.n	8005c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d06c      	beq.n	8005d64 <HAL_RCC_OscConfig+0x12c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d168      	bne.n	8005d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e3a2      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c9e:	d106      	bne.n	8005cae <HAL_RCC_OscConfig+0x76>
 8005ca0:	4b76      	ldr	r3, [pc, #472]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a75      	ldr	r2, [pc, #468]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	e02e      	b.n	8005d0c <HAL_RCC_OscConfig+0xd4>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x98>
 8005cb6:	4b71      	ldr	r3, [pc, #452]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a70      	ldr	r2, [pc, #448]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a6d      	ldr	r2, [pc, #436]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005cc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e01d      	b.n	8005d0c <HAL_RCC_OscConfig+0xd4>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0xbc>
 8005cda:	4b68      	ldr	r3, [pc, #416]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a67      	ldr	r2, [pc, #412]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	4b65      	ldr	r3, [pc, #404]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a64      	ldr	r2, [pc, #400]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	e00b      	b.n	8005d0c <HAL_RCC_OscConfig+0xd4>
 8005cf4:	4b61      	ldr	r3, [pc, #388]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a60      	ldr	r2, [pc, #384]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	4b5e      	ldr	r3, [pc, #376]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a5d      	ldr	r2, [pc, #372]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d013      	beq.n	8005d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fc fcec 	bl	80026f0 <HAL_GetTick>
 8005d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d1c:	f7fc fce8 	bl	80026f0 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b64      	cmp	r3, #100	@ 0x64
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e356      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d2e:	4b53      	ldr	r3, [pc, #332]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0xe4>
 8005d3a:	e014      	b.n	8005d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fc fcd8 	bl	80026f0 <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d44:	f7fc fcd4 	bl	80026f0 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b64      	cmp	r3, #100	@ 0x64
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e342      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d56:	4b49      	ldr	r3, [pc, #292]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x10c>
 8005d62:	e000      	b.n	8005d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 808c 	beq.w	8005e8c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d74:	4b41      	ldr	r3, [pc, #260]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d82:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <HAL_RCC_OscConfig+0x162>
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	2b18      	cmp	r3, #24
 8005d8e:	d137      	bne.n	8005e00 <HAL_RCC_OscConfig+0x1c8>
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d132      	bne.n	8005e00 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d9a:	4b38      	ldr	r3, [pc, #224]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <HAL_RCC_OscConfig+0x17a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e314      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005db2:	4b32      	ldr	r3, [pc, #200]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f023 0219 	bic.w	r2, r3, #25
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	492f      	ldr	r1, [pc, #188]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fc fc94 	bl	80026f0 <HAL_GetTick>
 8005dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dcc:	f7fc fc90 	bl	80026f0 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e2fe      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dde:	4b27      	ldr	r3, [pc, #156]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dea:	4b24      	ldr	r3, [pc, #144]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	061b      	lsls	r3, r3, #24
 8005df8:	4920      	ldr	r1, [pc, #128]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dfe:	e045      	b.n	8005e8c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d026      	beq.n	8005e56 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e08:	4b1c      	ldr	r3, [pc, #112]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f023 0219 	bic.w	r2, r3, #25
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4919      	ldr	r1, [pc, #100]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1a:	f7fc fc69 	bl	80026f0 <HAL_GetTick>
 8005e1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e22:	f7fc fc65 	bl	80026f0 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e2d3      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e34:	4b11      	ldr	r3, [pc, #68]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0f0      	beq.n	8005e22 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e40:	4b0e      	ldr	r3, [pc, #56]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	061b      	lsls	r3, r3, #24
 8005e4e:	490b      	ldr	r1, [pc, #44]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	604b      	str	r3, [r1, #4]
 8005e54:	e01a      	b.n	8005e8c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e56:	4b09      	ldr	r3, [pc, #36]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a08      	ldr	r2, [pc, #32]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fc fc45 	bl	80026f0 <HAL_GetTick>
 8005e66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e68:	e00a      	b.n	8005e80 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e6a:	f7fc fc41 	bl	80026f0 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d903      	bls.n	8005e80 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e2af      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
 8005e7c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e80:	4b96      	ldr	r3, [pc, #600]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1ee      	bne.n	8005e6a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d06a      	beq.n	8005f6e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e98:	4b90      	ldr	r3, [pc, #576]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ea0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ea2:	4b8e      	ldr	r3, [pc, #568]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d007      	beq.n	8005ebe <HAL_RCC_OscConfig+0x286>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b18      	cmp	r3, #24
 8005eb2:	d11b      	bne.n	8005eec <HAL_RCC_OscConfig+0x2b4>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d116      	bne.n	8005eec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ebe:	4b87      	ldr	r3, [pc, #540]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x29e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	2b80      	cmp	r3, #128	@ 0x80
 8005ed0:	d001      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e282      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ed6:	4b81      	ldr	r3, [pc, #516]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	497d      	ldr	r1, [pc, #500]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005eea:	e040      	b.n	8005f6e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d023      	beq.n	8005f3c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ef4:	4b79      	ldr	r3, [pc, #484]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a78      	ldr	r2, [pc, #480]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f00:	f7fc fbf6 	bl	80026f0 <HAL_GetTick>
 8005f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f08:	f7fc fbf2 	bl	80026f0 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e260      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f1a:	4b70      	ldr	r3, [pc, #448]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f26:	4b6d      	ldr	r3, [pc, #436]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	061b      	lsls	r3, r3, #24
 8005f34:	4969      	ldr	r1, [pc, #420]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60cb      	str	r3, [r1, #12]
 8005f3a:	e018      	b.n	8005f6e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f3c:	4b67      	ldr	r3, [pc, #412]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a66      	ldr	r2, [pc, #408]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fc fbd2 	bl	80026f0 <HAL_GetTick>
 8005f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f50:	f7fc fbce 	bl	80026f0 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e23c      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f62:	4b5e      	ldr	r3, [pc, #376]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d036      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d019      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f82:	4b56      	ldr	r3, [pc, #344]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f86:	4a55      	ldr	r2, [pc, #340]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8e:	f7fc fbaf 	bl	80026f0 <HAL_GetTick>
 8005f92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f96:	f7fc fbab 	bl	80026f0 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e219      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0f0      	beq.n	8005f96 <HAL_RCC_OscConfig+0x35e>
 8005fb4:	e018      	b.n	8005fe8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb6:	4b49      	ldr	r3, [pc, #292]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fba:	4a48      	ldr	r2, [pc, #288]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc2:	f7fc fb95 	bl	80026f0 <HAL_GetTick>
 8005fc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fca:	f7fc fb91 	bl	80026f0 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e1ff      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1f0      	bne.n	8005fca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d036      	beq.n	8006062 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d019      	beq.n	8006030 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ffc:	4b37      	ldr	r3, [pc, #220]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a36      	ldr	r2, [pc, #216]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8006002:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006006:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006008:	f7fc fb72 	bl	80026f0 <HAL_GetTick>
 800600c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006010:	f7fc fb6e 	bl	80026f0 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e1dc      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006022:	4b2e      	ldr	r3, [pc, #184]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0f0      	beq.n	8006010 <HAL_RCC_OscConfig+0x3d8>
 800602e:	e018      	b.n	8006062 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006030:	4b2a      	ldr	r3, [pc, #168]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a29      	ldr	r2, [pc, #164]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8006036:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800603a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800603c:	f7fc fb58 	bl	80026f0 <HAL_GetTick>
 8006040:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006044:	f7fc fb54 	bl	80026f0 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e1c2      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006056:	4b21      	ldr	r3, [pc, #132]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8086 	beq.w	800617c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006070:	4b1b      	ldr	r3, [pc, #108]	@ (80060e0 <HAL_RCC_OscConfig+0x4a8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1a      	ldr	r2, [pc, #104]	@ (80060e0 <HAL_RCC_OscConfig+0x4a8>)
 8006076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800607a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800607c:	f7fc fb38 	bl	80026f0 <HAL_GetTick>
 8006080:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006084:	f7fc fb34 	bl	80026f0 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b64      	cmp	r3, #100	@ 0x64
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e1a2      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006096:	4b12      	ldr	r3, [pc, #72]	@ (80060e0 <HAL_RCC_OscConfig+0x4a8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f0      	beq.n	8006084 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d106      	bne.n	80060b8 <HAL_RCC_OscConfig+0x480>
 80060aa:	4b0c      	ldr	r3, [pc, #48]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ae:	4a0b      	ldr	r2, [pc, #44]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060b6:	e032      	b.n	800611e <HAL_RCC_OscConfig+0x4e6>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d111      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4ac>
 80060c0:	4b06      	ldr	r3, [pc, #24]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 80060c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c4:	4a05      	ldr	r2, [pc, #20]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 80060c6:	f023 0301 	bic.w	r3, r3, #1
 80060ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80060cc:	4b03      	ldr	r3, [pc, #12]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 80060ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d0:	4a02      	ldr	r2, [pc, #8]	@ (80060dc <HAL_RCC_OscConfig+0x4a4>)
 80060d2:	f023 0304 	bic.w	r3, r3, #4
 80060d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d8:	e021      	b.n	800611e <HAL_RCC_OscConfig+0x4e6>
 80060da:	bf00      	nop
 80060dc:	58024400 	.word	0x58024400
 80060e0:	58024800 	.word	0x58024800
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b05      	cmp	r3, #5
 80060ea:	d10c      	bne.n	8006106 <HAL_RCC_OscConfig+0x4ce>
 80060ec:	4b83      	ldr	r3, [pc, #524]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80060ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f0:	4a82      	ldr	r2, [pc, #520]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80060f2:	f043 0304 	orr.w	r3, r3, #4
 80060f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f8:	4b80      	ldr	r3, [pc, #512]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80060fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fc:	4a7f      	ldr	r2, [pc, #508]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	6713      	str	r3, [r2, #112]	@ 0x70
 8006104:	e00b      	b.n	800611e <HAL_RCC_OscConfig+0x4e6>
 8006106:	4b7d      	ldr	r3, [pc, #500]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610a:	4a7c      	ldr	r2, [pc, #496]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	6713      	str	r3, [r2, #112]	@ 0x70
 8006112:	4b7a      	ldr	r3, [pc, #488]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006116:	4a79      	ldr	r2, [pc, #484]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006118:	f023 0304 	bic.w	r3, r3, #4
 800611c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d015      	beq.n	8006152 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006126:	f7fc fae3 	bl	80026f0 <HAL_GetTick>
 800612a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800612c:	e00a      	b.n	8006144 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7fc fadf 	bl	80026f0 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800613c:	4293      	cmp	r3, r2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e14b      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006144:	4b6d      	ldr	r3, [pc, #436]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ee      	beq.n	800612e <HAL_RCC_OscConfig+0x4f6>
 8006150:	e014      	b.n	800617c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006152:	f7fc facd 	bl	80026f0 <HAL_GetTick>
 8006156:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006158:	e00a      	b.n	8006170 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615a:	f7fc fac9 	bl	80026f0 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006168:	4293      	cmp	r3, r2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e135      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006170:	4b62      	ldr	r3, [pc, #392]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1ee      	bne.n	800615a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 812a 	beq.w	80063da <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006186:	4b5d      	ldr	r3, [pc, #372]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800618e:	2b18      	cmp	r3, #24
 8006190:	f000 80ba 	beq.w	8006308 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006198:	2b02      	cmp	r3, #2
 800619a:	f040 8095 	bne.w	80062c8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619e:	4b57      	ldr	r3, [pc, #348]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a56      	ldr	r2, [pc, #344]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80061a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061aa:	f7fc faa1 	bl	80026f0 <HAL_GetTick>
 80061ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b2:	f7fc fa9d 	bl	80026f0 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e10b      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061c4:	4b4d      	ldr	r3, [pc, #308]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f0      	bne.n	80061b2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061d0:	4b4a      	ldr	r3, [pc, #296]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80061d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006300 <HAL_RCC_OscConfig+0x6c8>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061e0:	0112      	lsls	r2, r2, #4
 80061e2:	430a      	orrs	r2, r1
 80061e4:	4945      	ldr	r1, [pc, #276]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	628b      	str	r3, [r1, #40]	@ 0x28
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ee:	3b01      	subs	r3, #1
 80061f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f8:	3b01      	subs	r3, #1
 80061fa:	025b      	lsls	r3, r3, #9
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006204:	3b01      	subs	r3, #1
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006212:	3b01      	subs	r3, #1
 8006214:	061b      	lsls	r3, r3, #24
 8006216:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800621a:	4938      	ldr	r1, [pc, #224]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 800621c:	4313      	orrs	r3, r2
 800621e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006220:	4b36      	ldr	r3, [pc, #216]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006224:	4a35      	ldr	r2, [pc, #212]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800622c:	4b33      	ldr	r3, [pc, #204]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 800622e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006230:	4b34      	ldr	r3, [pc, #208]	@ (8006304 <HAL_RCC_OscConfig+0x6cc>)
 8006232:	4013      	ands	r3, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006238:	00d2      	lsls	r2, r2, #3
 800623a:	4930      	ldr	r1, [pc, #192]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 800623c:	4313      	orrs	r3, r2
 800623e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006240:	4b2e      	ldr	r3, [pc, #184]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	f023 020c 	bic.w	r2, r3, #12
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624c:	492b      	ldr	r1, [pc, #172]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 800624e:	4313      	orrs	r3, r2
 8006250:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006252:	4b2a      	ldr	r3, [pc, #168]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006256:	f023 0202 	bic.w	r2, r3, #2
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625e:	4927      	ldr	r1, [pc, #156]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006260:	4313      	orrs	r3, r2
 8006262:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006264:	4b25      	ldr	r3, [pc, #148]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	4a24      	ldr	r2, [pc, #144]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 800626a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800626e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006270:	4b22      	ldr	r3, [pc, #136]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006274:	4a21      	ldr	r2, [pc, #132]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800627a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800627c:	4b1f      	ldr	r3, [pc, #124]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	4a1e      	ldr	r2, [pc, #120]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006282:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006288:	4b1c      	ldr	r3, [pc, #112]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 800628a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628c:	4a1b      	ldr	r2, [pc, #108]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 800628e:	f043 0301 	orr.w	r3, r3, #1
 8006292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006294:	4b19      	ldr	r3, [pc, #100]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a18      	ldr	r2, [pc, #96]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 800629a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800629e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fc fa26 	bl	80026f0 <HAL_GetTick>
 80062a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a8:	f7fc fa22 	bl	80026f0 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e090      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062ba:	4b10      	ldr	r3, [pc, #64]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0f0      	beq.n	80062a8 <HAL_RCC_OscConfig+0x670>
 80062c6:	e088      	b.n	80063da <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062c8:	4b0c      	ldr	r3, [pc, #48]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a0b      	ldr	r2, [pc, #44]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80062ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7fc fa0c 	bl	80026f0 <HAL_GetTick>
 80062d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062dc:	f7fc fa08 	bl	80026f0 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e076      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062ee:	4b03      	ldr	r3, [pc, #12]	@ (80062fc <HAL_RCC_OscConfig+0x6c4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0x6a4>
 80062fa:	e06e      	b.n	80063da <HAL_RCC_OscConfig+0x7a2>
 80062fc:	58024400 	.word	0x58024400
 8006300:	fffffc0c 	.word	0xfffffc0c
 8006304:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006308:	4b36      	ldr	r3, [pc, #216]	@ (80063e4 <HAL_RCC_OscConfig+0x7ac>)
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800630e:	4b35      	ldr	r3, [pc, #212]	@ (80063e4 <HAL_RCC_OscConfig+0x7ac>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006312:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006318:	2b01      	cmp	r3, #1
 800631a:	d031      	beq.n	8006380 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f003 0203 	and.w	r2, r3, #3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006326:	429a      	cmp	r2, r3
 8006328:	d12a      	bne.n	8006380 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006336:	429a      	cmp	r2, r3
 8006338:	d122      	bne.n	8006380 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006344:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006346:	429a      	cmp	r2, r3
 8006348:	d11a      	bne.n	8006380 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	0a5b      	lsrs	r3, r3, #9
 800634e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006356:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006358:	429a      	cmp	r2, r3
 800635a:	d111      	bne.n	8006380 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006368:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800636a:	429a      	cmp	r2, r3
 800636c:	d108      	bne.n	8006380 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	0e1b      	lsrs	r3, r3, #24
 8006372:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800637c:	429a      	cmp	r2, r3
 800637e:	d001      	beq.n	8006384 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e02b      	b.n	80063dc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006384:	4b17      	ldr	r3, [pc, #92]	@ (80063e4 <HAL_RCC_OscConfig+0x7ac>)
 8006386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006388:	08db      	lsrs	r3, r3, #3
 800638a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800638e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	429a      	cmp	r2, r3
 8006398:	d01f      	beq.n	80063da <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800639a:	4b12      	ldr	r3, [pc, #72]	@ (80063e4 <HAL_RCC_OscConfig+0x7ac>)
 800639c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639e:	4a11      	ldr	r2, [pc, #68]	@ (80063e4 <HAL_RCC_OscConfig+0x7ac>)
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063a6:	f7fc f9a3 	bl	80026f0 <HAL_GetTick>
 80063aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80063ac:	bf00      	nop
 80063ae:	f7fc f99f 	bl	80026f0 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d0f9      	beq.n	80063ae <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063ba:	4b0a      	ldr	r3, [pc, #40]	@ (80063e4 <HAL_RCC_OscConfig+0x7ac>)
 80063bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063be:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <HAL_RCC_OscConfig+0x7b0>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80063c6:	00d2      	lsls	r2, r2, #3
 80063c8:	4906      	ldr	r1, [pc, #24]	@ (80063e4 <HAL_RCC_OscConfig+0x7ac>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80063ce:	4b05      	ldr	r3, [pc, #20]	@ (80063e4 <HAL_RCC_OscConfig+0x7ac>)
 80063d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d2:	4a04      	ldr	r2, [pc, #16]	@ (80063e4 <HAL_RCC_OscConfig+0x7ac>)
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3730      	adds	r7, #48	@ 0x30
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	58024400 	.word	0x58024400
 80063e8:	ffff0007 	.word	0xffff0007

080063ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e19c      	b.n	800673a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006400:	4b8a      	ldr	r3, [pc, #552]	@ (800662c <HAL_RCC_ClockConfig+0x240>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d910      	bls.n	8006430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800640e:	4b87      	ldr	r3, [pc, #540]	@ (800662c <HAL_RCC_ClockConfig+0x240>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f023 020f 	bic.w	r2, r3, #15
 8006416:	4985      	ldr	r1, [pc, #532]	@ (800662c <HAL_RCC_ClockConfig+0x240>)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641e:	4b83      	ldr	r3, [pc, #524]	@ (800662c <HAL_RCC_ClockConfig+0x240>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d001      	beq.n	8006430 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e184      	b.n	800673a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	d010      	beq.n	800645e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	4b7b      	ldr	r3, [pc, #492]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006448:	429a      	cmp	r2, r3
 800644a:	d908      	bls.n	800645e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800644c:	4b78      	ldr	r3, [pc, #480]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	4975      	ldr	r1, [pc, #468]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 800645a:	4313      	orrs	r3, r2
 800645c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d010      	beq.n	800648c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	4b70      	ldr	r3, [pc, #448]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006476:	429a      	cmp	r2, r3
 8006478:	d908      	bls.n	800648c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800647a:	4b6d      	ldr	r3, [pc, #436]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	496a      	ldr	r1, [pc, #424]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 8006488:	4313      	orrs	r3, r2
 800648a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b00      	cmp	r3, #0
 8006496:	d010      	beq.n	80064ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	4b64      	ldr	r3, [pc, #400]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d908      	bls.n	80064ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064a8:	4b61      	ldr	r3, [pc, #388]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	495e      	ldr	r1, [pc, #376]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d010      	beq.n	80064e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69da      	ldr	r2, [r3, #28]
 80064ca:	4b59      	ldr	r3, [pc, #356]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d908      	bls.n	80064e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064d6:	4b56      	ldr	r3, [pc, #344]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	4953      	ldr	r1, [pc, #332]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d010      	beq.n	8006516 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	429a      	cmp	r2, r3
 8006502:	d908      	bls.n	8006516 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006504:	4b4a      	ldr	r3, [pc, #296]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f023 020f 	bic.w	r2, r3, #15
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4947      	ldr	r1, [pc, #284]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 8006512:	4313      	orrs	r3, r2
 8006514:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d055      	beq.n	80065ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006522:	4b43      	ldr	r3, [pc, #268]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	4940      	ldr	r1, [pc, #256]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 8006530:	4313      	orrs	r3, r2
 8006532:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d107      	bne.n	800654c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800653c:	4b3c      	ldr	r3, [pc, #240]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d121      	bne.n	800658c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0f6      	b.n	800673a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d107      	bne.n	8006564 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006554:	4b36      	ldr	r3, [pc, #216]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d115      	bne.n	800658c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e0ea      	b.n	800673a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d107      	bne.n	800657c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800656c:	4b30      	ldr	r3, [pc, #192]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0de      	b.n	800673a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800657c:	4b2c      	ldr	r3, [pc, #176]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e0d6      	b.n	800673a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800658c:	4b28      	ldr	r3, [pc, #160]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f023 0207 	bic.w	r2, r3, #7
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4925      	ldr	r1, [pc, #148]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 800659a:	4313      	orrs	r3, r2
 800659c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659e:	f7fc f8a7 	bl	80026f0 <HAL_GetTick>
 80065a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a4:	e00a      	b.n	80065bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a6:	f7fc f8a3 	bl	80026f0 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e0be      	b.n	800673a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d1eb      	bne.n	80065a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d010      	beq.n	80065fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	4b14      	ldr	r3, [pc, #80]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d208      	bcs.n	80065fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ea:	4b11      	ldr	r3, [pc, #68]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f023 020f 	bic.w	r2, r3, #15
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	490e      	ldr	r1, [pc, #56]	@ (8006630 <HAL_RCC_ClockConfig+0x244>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065fc:	4b0b      	ldr	r3, [pc, #44]	@ (800662c <HAL_RCC_ClockConfig+0x240>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d214      	bcs.n	8006634 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800660a:	4b08      	ldr	r3, [pc, #32]	@ (800662c <HAL_RCC_ClockConfig+0x240>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f023 020f 	bic.w	r2, r3, #15
 8006612:	4906      	ldr	r1, [pc, #24]	@ (800662c <HAL_RCC_ClockConfig+0x240>)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	4313      	orrs	r3, r2
 8006618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800661a:	4b04      	ldr	r3, [pc, #16]	@ (800662c <HAL_RCC_ClockConfig+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d005      	beq.n	8006634 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e086      	b.n	800673a <HAL_RCC_ClockConfig+0x34e>
 800662c:	52002000 	.word	0x52002000
 8006630:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d010      	beq.n	8006662 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	4b3f      	ldr	r3, [pc, #252]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800664c:	429a      	cmp	r2, r3
 800664e:	d208      	bcs.n	8006662 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006650:	4b3c      	ldr	r3, [pc, #240]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	4939      	ldr	r1, [pc, #228]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 800665e:	4313      	orrs	r3, r2
 8006660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d010      	beq.n	8006690 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695a      	ldr	r2, [r3, #20]
 8006672:	4b34      	ldr	r3, [pc, #208]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800667a:	429a      	cmp	r2, r3
 800667c:	d208      	bcs.n	8006690 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800667e:	4b31      	ldr	r3, [pc, #196]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	492e      	ldr	r1, [pc, #184]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 800668c:	4313      	orrs	r3, r2
 800668e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	d010      	beq.n	80066be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	4b28      	ldr	r3, [pc, #160]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d208      	bcs.n	80066be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066ac:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	4922      	ldr	r1, [pc, #136]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d010      	beq.n	80066ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69da      	ldr	r2, [r3, #28]
 80066ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d208      	bcs.n	80066ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066da:	4b1a      	ldr	r3, [pc, #104]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	4917      	ldr	r1, [pc, #92]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066ec:	f000 f834 	bl	8006758 <HAL_RCC_GetSysClockFreq>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4b14      	ldr	r3, [pc, #80]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	0a1b      	lsrs	r3, r3, #8
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	4912      	ldr	r1, [pc, #72]	@ (8006748 <HAL_RCC_ClockConfig+0x35c>)
 80066fe:	5ccb      	ldrb	r3, [r1, r3]
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
 8006708:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800670a:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <HAL_RCC_ClockConfig+0x358>)
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	4a0d      	ldr	r2, [pc, #52]	@ (8006748 <HAL_RCC_ClockConfig+0x35c>)
 8006714:	5cd3      	ldrb	r3, [r2, r3]
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
 8006720:	4a0a      	ldr	r2, [pc, #40]	@ (800674c <HAL_RCC_ClockConfig+0x360>)
 8006722:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006724:	4a0a      	ldr	r2, [pc, #40]	@ (8006750 <HAL_RCC_ClockConfig+0x364>)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800672a:	4b0a      	ldr	r3, [pc, #40]	@ (8006754 <HAL_RCC_ClockConfig+0x368>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f7fb fa60 	bl	8001bf4 <HAL_InitTick>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006738:	7bfb      	ldrb	r3, [r7, #15]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400
 8006748:	0801c468 	.word	0x0801c468
 800674c:	24000004 	.word	0x24000004
 8006750:	24000000 	.word	0x24000000
 8006754:	24000008 	.word	0x24000008

08006758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006758:	b480      	push	{r7}
 800675a:	b089      	sub	sp, #36	@ 0x24
 800675c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800675e:	4bb3      	ldr	r3, [pc, #716]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006766:	2b18      	cmp	r3, #24
 8006768:	f200 8155 	bhi.w	8006a16 <HAL_RCC_GetSysClockFreq+0x2be>
 800676c:	a201      	add	r2, pc, #4	@ (adr r2, 8006774 <HAL_RCC_GetSysClockFreq+0x1c>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	080067d9 	.word	0x080067d9
 8006778:	08006a17 	.word	0x08006a17
 800677c:	08006a17 	.word	0x08006a17
 8006780:	08006a17 	.word	0x08006a17
 8006784:	08006a17 	.word	0x08006a17
 8006788:	08006a17 	.word	0x08006a17
 800678c:	08006a17 	.word	0x08006a17
 8006790:	08006a17 	.word	0x08006a17
 8006794:	080067ff 	.word	0x080067ff
 8006798:	08006a17 	.word	0x08006a17
 800679c:	08006a17 	.word	0x08006a17
 80067a0:	08006a17 	.word	0x08006a17
 80067a4:	08006a17 	.word	0x08006a17
 80067a8:	08006a17 	.word	0x08006a17
 80067ac:	08006a17 	.word	0x08006a17
 80067b0:	08006a17 	.word	0x08006a17
 80067b4:	08006805 	.word	0x08006805
 80067b8:	08006a17 	.word	0x08006a17
 80067bc:	08006a17 	.word	0x08006a17
 80067c0:	08006a17 	.word	0x08006a17
 80067c4:	08006a17 	.word	0x08006a17
 80067c8:	08006a17 	.word	0x08006a17
 80067cc:	08006a17 	.word	0x08006a17
 80067d0:	08006a17 	.word	0x08006a17
 80067d4:	0800680b 	.word	0x0800680b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067d8:	4b94      	ldr	r3, [pc, #592]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d009      	beq.n	80067f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067e4:	4b91      	ldr	r3, [pc, #580]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	08db      	lsrs	r3, r3, #3
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	4a90      	ldr	r2, [pc, #576]	@ (8006a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067f0:	fa22 f303 	lsr.w	r3, r2, r3
 80067f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80067f6:	e111      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067f8:	4b8d      	ldr	r3, [pc, #564]	@ (8006a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067fa:	61bb      	str	r3, [r7, #24]
      break;
 80067fc:	e10e      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80067fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006a34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006800:	61bb      	str	r3, [r7, #24]
      break;
 8006802:	e10b      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006804:	4b8c      	ldr	r3, [pc, #560]	@ (8006a38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006806:	61bb      	str	r3, [r7, #24]
      break;
 8006808:	e108      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800680a:	4b88      	ldr	r3, [pc, #544]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006814:	4b85      	ldr	r3, [pc, #532]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006818:	091b      	lsrs	r3, r3, #4
 800681a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800681e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006820:	4b82      	ldr	r3, [pc, #520]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800682a:	4b80      	ldr	r3, [pc, #512]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800682c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682e:	08db      	lsrs	r3, r3, #3
 8006830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006842:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80e1 	beq.w	8006a10 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b02      	cmp	r3, #2
 8006852:	f000 8083 	beq.w	800695c <HAL_RCC_GetSysClockFreq+0x204>
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b02      	cmp	r3, #2
 800685a:	f200 80a1 	bhi.w	80069a0 <HAL_RCC_GetSysClockFreq+0x248>
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_RCC_GetSysClockFreq+0x114>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d056      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x1c0>
 800686a:	e099      	b.n	80069a0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800686c:	4b6f      	ldr	r3, [pc, #444]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d02d      	beq.n	80068d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006878:	4b6c      	ldr	r3, [pc, #432]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	08db      	lsrs	r3, r3, #3
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	4a6b      	ldr	r2, [pc, #428]	@ (8006a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
 8006888:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	ee07 3a90 	vmov	s15, r3
 8006890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a2:	4b62      	ldr	r3, [pc, #392]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80068b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80068ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80068d2:	e087      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006a40 <HAL_RCC_GetSysClockFreq+0x2e8>
 80068e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e6:	4b51      	ldr	r3, [pc, #324]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80068fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800690a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006916:	e065      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006922:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006a44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800692a:	4b40      	ldr	r3, [pc, #256]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800692c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800693a:	ed97 6a02 	vldr	s12, [r7, #8]
 800693e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800694a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800694e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800695a:	e043      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006966:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006a48 <HAL_RCC_GetSysClockFreq+0x2f0>
 800696a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800696e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800697e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006982:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800698a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800698e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800699a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800699e:	e021      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006a44 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b2:	4b1e      	ldr	r3, [pc, #120]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80069e4:	4b11      	ldr	r3, [pc, #68]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e8:	0a5b      	lsrs	r3, r3, #9
 80069ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ee:	3301      	adds	r3, #1
 80069f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	ee07 3a90 	vmov	s15, r3
 80069f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a08:	ee17 3a90 	vmov	r3, s15
 8006a0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006a0e:	e005      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61bb      	str	r3, [r7, #24]
      break;
 8006a14:	e002      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006a16:	4b07      	ldr	r3, [pc, #28]	@ (8006a34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a18:	61bb      	str	r3, [r7, #24]
      break;
 8006a1a:	bf00      	nop
  }

  return sysclockfreq;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3724      	adds	r7, #36	@ 0x24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	03d09000 	.word	0x03d09000
 8006a34:	003d0900 	.word	0x003d0900
 8006a38:	007a1200 	.word	0x007a1200
 8006a3c:	46000000 	.word	0x46000000
 8006a40:	4c742400 	.word	0x4c742400
 8006a44:	4a742400 	.word	0x4a742400
 8006a48:	4af42400 	.word	0x4af42400

08006a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a52:	f7ff fe81 	bl	8006758 <HAL_RCC_GetSysClockFreq>
 8006a56:	4602      	mov	r2, r0
 8006a58:	4b10      	ldr	r3, [pc, #64]	@ (8006a9c <HAL_RCC_GetHCLKFreq+0x50>)
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	0a1b      	lsrs	r3, r3, #8
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	490f      	ldr	r1, [pc, #60]	@ (8006aa0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a64:	5ccb      	ldrb	r3, [r1, r3]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a70:	4b0a      	ldr	r3, [pc, #40]	@ (8006a9c <HAL_RCC_GetHCLKFreq+0x50>)
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	f003 030f 	and.w	r3, r3, #15
 8006a78:	4a09      	ldr	r2, [pc, #36]	@ (8006aa0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a7a:	5cd3      	ldrb	r3, [r2, r3]
 8006a7c:	f003 031f 	and.w	r3, r3, #31
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	fa22 f303 	lsr.w	r3, r2, r3
 8006a86:	4a07      	ldr	r2, [pc, #28]	@ (8006aa4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a8a:	4a07      	ldr	r2, [pc, #28]	@ (8006aa8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a90:	4b04      	ldr	r3, [pc, #16]	@ (8006aa4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a92:	681b      	ldr	r3, [r3, #0]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	0801c468 	.word	0x0801c468
 8006aa4:	24000004 	.word	0x24000004
 8006aa8:	24000000 	.word	0x24000000

08006aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ab0:	f7ff ffcc 	bl	8006a4c <HAL_RCC_GetHCLKFreq>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	4b06      	ldr	r3, [pc, #24]	@ (8006ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	4904      	ldr	r1, [pc, #16]	@ (8006ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ac2:	5ccb      	ldrb	r3, [r1, r3]
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	0801c468 	.word	0x0801c468

08006ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006adc:	f7ff ffb6 	bl	8006a4c <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4904      	ldr	r1, [pc, #16]	@ (8006b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	58024400 	.word	0x58024400
 8006b00:	0801c468 	.word	0x0801c468

08006b04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	223f      	movs	r2, #63	@ 0x3f
 8006b12:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b14:	4b1a      	ldr	r3, [pc, #104]	@ (8006b80 <HAL_RCC_GetClockConfig+0x7c>)
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f003 0207 	and.w	r2, r3, #7
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006b20:	4b17      	ldr	r3, [pc, #92]	@ (8006b80 <HAL_RCC_GetClockConfig+0x7c>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006b2c:	4b14      	ldr	r3, [pc, #80]	@ (8006b80 <HAL_RCC_GetClockConfig+0x7c>)
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006b38:	4b11      	ldr	r3, [pc, #68]	@ (8006b80 <HAL_RCC_GetClockConfig+0x7c>)
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006b44:	4b0e      	ldr	r3, [pc, #56]	@ (8006b80 <HAL_RCC_GetClockConfig+0x7c>)
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006b50:	4b0b      	ldr	r3, [pc, #44]	@ (8006b80 <HAL_RCC_GetClockConfig+0x7c>)
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006b5c:	4b08      	ldr	r3, [pc, #32]	@ (8006b80 <HAL_RCC_GetClockConfig+0x7c>)
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b68:	4b06      	ldr	r3, [pc, #24]	@ (8006b84 <HAL_RCC_GetClockConfig+0x80>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 020f 	and.w	r2, r3, #15
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	601a      	str	r2, [r3, #0]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	58024400 	.word	0x58024400
 8006b84:	52002000 	.word	0x52002000

08006b88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b8c:	b0c6      	sub	sp, #280	@ 0x118
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006bac:	2500      	movs	r5, #0
 8006bae:	ea54 0305 	orrs.w	r3, r4, r5
 8006bb2:	d049      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bbe:	d02f      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006bc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bc4:	d828      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006bc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bca:	d01a      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006bcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bd0:	d822      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bda:	d007      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bdc:	e01c      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bde:	4bab      	ldr	r3, [pc, #684]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be2:	4aaa      	ldr	r2, [pc, #680]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bea:	e01a      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	2102      	movs	r1, #2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 fc25 	bl	8008444 <RCCEx_PLL2_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c00:	e00f      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	3328      	adds	r3, #40	@ 0x28
 8006c08:	2102      	movs	r1, #2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 fccc 	bl	80085a8 <RCCEx_PLL3_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c16:	e004      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c1e:	e000      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c2a:	4b98      	ldr	r3, [pc, #608]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c38:	4a94      	ldr	r2, [pc, #592]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c3e:	e003      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006c54:	f04f 0900 	mov.w	r9, #0
 8006c58:	ea58 0309 	orrs.w	r3, r8, r9
 8006c5c:	d047      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d82a      	bhi.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006c68:	a201      	add	r2, pc, #4	@ (adr r2, 8006c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006c85 	.word	0x08006c85
 8006c74:	08006c93 	.word	0x08006c93
 8006c78:	08006ca9 	.word	0x08006ca9
 8006c7c:	08006cc7 	.word	0x08006cc7
 8006c80:	08006cc7 	.word	0x08006cc7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c84:	4b81      	ldr	r3, [pc, #516]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c88:	4a80      	ldr	r2, [pc, #512]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c90:	e01a      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c96:	3308      	adds	r3, #8
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 fbd2 	bl	8008444 <RCCEx_PLL2_Config>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ca6:	e00f      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	3328      	adds	r3, #40	@ 0x28
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 fc79 	bl	80085a8 <RCCEx_PLL3_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cbc:	e004      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cc4:	e000      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cd0:	4b6e      	ldr	r3, [pc, #440]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd4:	f023 0107 	bic.w	r1, r3, #7
 8006cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cde:	4a6b      	ldr	r2, [pc, #428]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ce4:	e003      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006cfa:	f04f 0b00 	mov.w	fp, #0
 8006cfe:	ea5a 030b 	orrs.w	r3, sl, fp
 8006d02:	d05b      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d0c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006d10:	d03b      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006d12:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006d16:	d834      	bhi.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006d18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d1c:	d037      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006d1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d22:	d82e      	bhi.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006d24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d28:	d033      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006d2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d2e:	d828      	bhi.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006d30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d34:	d01a      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d3a:	d822      	bhi.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006d40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d44:	d007      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006d46:	e01c      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d48:	4b50      	ldr	r3, [pc, #320]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d54:	e01e      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 fb70 	bl	8008444 <RCCEx_PLL2_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d6a:	e013      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d70:	3328      	adds	r3, #40	@ 0x28
 8006d72:	2100      	movs	r1, #0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 fc17 	bl	80085a8 <RCCEx_PLL3_Config>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d80:	e008      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d88:	e004      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006d8a:	bf00      	nop
 8006d8c:	e002      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006d8e:	bf00      	nop
 8006d90:	e000      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006dac:	4a37      	ldr	r2, [pc, #220]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006dae:	430b      	orrs	r3, r1
 8006db0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006db2:	e003      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006dd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	d05d      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006de4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006de8:	d03b      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006dea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006dee:	d834      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006df0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006df4:	d037      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006df6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006dfa:	d82e      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006dfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e00:	d033      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006e02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e06:	d828      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006e08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e0c:	d01a      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e12:	d822      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e1c:	d007      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006e1e:	e01c      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e20:	4b1a      	ldr	r3, [pc, #104]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	4a19      	ldr	r2, [pc, #100]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e2c:	e01e      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e32:	3308      	adds	r3, #8
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 fb04 	bl	8008444 <RCCEx_PLL2_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006e42:	e013      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e48:	3328      	adds	r3, #40	@ 0x28
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 fbab 	bl	80085a8 <RCCEx_PLL3_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e58:	e008      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e60:	e004      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006e62:	bf00      	nop
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10d      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e74:	4b05      	ldr	r3, [pc, #20]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e78:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e84:	4a01      	ldr	r2, [pc, #4]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e86:	430b      	orrs	r3, r1
 8006e88:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e8a:	e005      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006ea4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006eae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	d03a      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ebe:	2b30      	cmp	r3, #48	@ 0x30
 8006ec0:	d01f      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006ec2:	2b30      	cmp	r3, #48	@ 0x30
 8006ec4:	d819      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d00c      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	d815      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d019      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006ed2:	2b10      	cmp	r3, #16
 8006ed4:	d111      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed6:	4baa      	ldr	r3, [pc, #680]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eda:	4aa9      	ldr	r2, [pc, #676]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006ee2:	e011      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee8:	3308      	adds	r3, #8
 8006eea:	2102      	movs	r1, #2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 faa9 	bl	8008444 <RCCEx_PLL2_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006ef8:	e006      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f00:	e002      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006f02:	bf00      	nop
 8006f04:	e000      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006f10:	4b9b      	ldr	r3, [pc, #620]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f14:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f1e:	4a98      	ldr	r2, [pc, #608]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f20:	430b      	orrs	r3, r1
 8006f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f24:	e003      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	d051      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f58:	d035      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006f5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f5e:	d82e      	bhi.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006f60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f64:	d031      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006f66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f6a:	d828      	bhi.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f70:	d01a      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f76:	d822      	bhi.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f80:	d007      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006f82:	e01c      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f84:	4b7e      	ldr	r3, [pc, #504]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f88:	4a7d      	ldr	r2, [pc, #500]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f90:	e01c      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f96:	3308      	adds	r3, #8
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 fa52 	bl	8008444 <RCCEx_PLL2_Config>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006fa6:	e011      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fac:	3328      	adds	r3, #40	@ 0x28
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 faf9 	bl	80085a8 <RCCEx_PLL3_Config>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006fbc:	e006      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fc4:	e002      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006fc6:	bf00      	nop
 8006fc8:	e000      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe2:	4a67      	ldr	r2, [pc, #412]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fe8:	e003      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007002:	2300      	movs	r3, #0
 8007004:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007008:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800700c:	460b      	mov	r3, r1
 800700e:	4313      	orrs	r3, r2
 8007010:	d053      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800701c:	d033      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800701e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007022:	d82c      	bhi.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007024:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007028:	d02f      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800702a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800702e:	d826      	bhi.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007030:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007034:	d02b      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007036:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800703a:	d820      	bhi.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800703c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007040:	d012      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007046:	d81a      	bhi.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d022      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800704c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007050:	d115      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007056:	3308      	adds	r3, #8
 8007058:	2101      	movs	r1, #1
 800705a:	4618      	mov	r0, r3
 800705c:	f001 f9f2 	bl	8008444 <RCCEx_PLL2_Config>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007066:	e015      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	3328      	adds	r3, #40	@ 0x28
 800706e:	2101      	movs	r1, #1
 8007070:	4618      	mov	r0, r3
 8007072:	f001 fa99 	bl	80085a8 <RCCEx_PLL3_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800707c:	e00a      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007084:	e006      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007086:	bf00      	nop
 8007088:	e004      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800708a:	bf00      	nop
 800708c:	e002      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800708e:	bf00      	nop
 8007090:	e000      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800709c:	4b38      	ldr	r3, [pc, #224]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800709e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070aa:	4a35      	ldr	r2, [pc, #212]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070ac:	430b      	orrs	r3, r1
 80070ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80070c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070ca:	2300      	movs	r3, #0
 80070cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80070d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070d4:	460b      	mov	r3, r1
 80070d6:	4313      	orrs	r3, r2
 80070d8:	d058      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070e6:	d033      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80070e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070ec:	d82c      	bhi.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80070ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f2:	d02f      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80070f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f8:	d826      	bhi.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80070fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80070fe:	d02b      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007100:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007104:	d820      	bhi.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800710a:	d012      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800710c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007110:	d81a      	bhi.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d022      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800711a:	d115      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007120:	3308      	adds	r3, #8
 8007122:	2101      	movs	r1, #1
 8007124:	4618      	mov	r0, r3
 8007126:	f001 f98d 	bl	8008444 <RCCEx_PLL2_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007130:	e015      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007136:	3328      	adds	r3, #40	@ 0x28
 8007138:	2101      	movs	r1, #1
 800713a:	4618      	mov	r0, r3
 800713c:	f001 fa34 	bl	80085a8 <RCCEx_PLL3_Config>
 8007140:	4603      	mov	r3, r0
 8007142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007146:	e00a      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800714e:	e006      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007150:	bf00      	nop
 8007152:	e004      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007154:	bf00      	nop
 8007156:	e002      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007158:	bf00      	nop
 800715a:	e000      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800715c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10e      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007166:	4b06      	ldr	r3, [pc, #24]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800716a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800716e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007172:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007176:	4a02      	ldr	r2, [pc, #8]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007178:	430b      	orrs	r3, r1
 800717a:	6593      	str	r3, [r2, #88]	@ 0x58
 800717c:	e006      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800717e:	bf00      	nop
 8007180:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007184:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007188:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800719c:	2300      	movs	r3, #0
 800719e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80071a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80071a6:	460b      	mov	r3, r1
 80071a8:	4313      	orrs	r3, r2
 80071aa:	d037      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80071ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071b6:	d00e      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80071b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071bc:	d816      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d018      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80071c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071c6:	d111      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c8:	4bc4      	ldr	r3, [pc, #784]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071cc:	4ac3      	ldr	r2, [pc, #780]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80071d4:	e00f      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071da:	3308      	adds	r3, #8
 80071dc:	2101      	movs	r1, #1
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 f930 	bl	8008444 <RCCEx_PLL2_Config>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80071ea:	e004      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071f2:	e000      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80071f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071fe:	4bb7      	ldr	r3, [pc, #732]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007202:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800720c:	4ab3      	ldr	r2, [pc, #716]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800720e:	430b      	orrs	r3, r1
 8007210:	6513      	str	r3, [r2, #80]	@ 0x50
 8007212:	e003      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007218:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007228:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800722c:	2300      	movs	r3, #0
 800722e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007232:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007236:	460b      	mov	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	d039      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007242:	2b03      	cmp	r3, #3
 8007244:	d81c      	bhi.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007246:	a201      	add	r2, pc, #4	@ (adr r2, 800724c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	08007289 	.word	0x08007289
 8007250:	0800725d 	.word	0x0800725d
 8007254:	0800726b 	.word	0x0800726b
 8007258:	08007289 	.word	0x08007289
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800725c:	4b9f      	ldr	r3, [pc, #636]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800725e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007260:	4a9e      	ldr	r2, [pc, #632]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007268:	e00f      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	3308      	adds	r3, #8
 8007270:	2102      	movs	r1, #2
 8007272:	4618      	mov	r0, r3
 8007274:	f001 f8e6 	bl	8008444 <RCCEx_PLL2_Config>
 8007278:	4603      	mov	r3, r0
 800727a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800727e:	e004      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007286:	e000      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10a      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007292:	4b92      	ldr	r3, [pc, #584]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007296:	f023 0103 	bic.w	r1, r3, #3
 800729a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072a0:	4a8e      	ldr	r2, [pc, #568]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a2:	430b      	orrs	r3, r1
 80072a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072a6:	e003      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80072bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072c0:	2300      	movs	r3, #0
 80072c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f000 8099 	beq.w	8007404 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072d2:	4b83      	ldr	r3, [pc, #524]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a82      	ldr	r2, [pc, #520]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80072d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072de:	f7fb fa07 	bl	80026f0 <HAL_GetTick>
 80072e2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072e6:	e00b      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072e8:	f7fb fa02 	bl	80026f0 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b64      	cmp	r3, #100	@ 0x64
 80072f6:	d903      	bls.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072fe:	e005      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007300:	4b77      	ldr	r3, [pc, #476]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0ed      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800730c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007310:	2b00      	cmp	r3, #0
 8007312:	d173      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007314:	4b71      	ldr	r3, [pc, #452]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007316:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007320:	4053      	eors	r3, r2
 8007322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007326:	2b00      	cmp	r3, #0
 8007328:	d015      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800732a:	4b6c      	ldr	r3, [pc, #432]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800732c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800732e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007332:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007336:	4b69      	ldr	r3, [pc, #420]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800733a:	4a68      	ldr	r2, [pc, #416]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800733c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007340:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007342:	4b66      	ldr	r3, [pc, #408]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007346:	4a65      	ldr	r2, [pc, #404]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800734c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800734e:	4a63      	ldr	r2, [pc, #396]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007354:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800735e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007362:	d118      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007364:	f7fb f9c4 	bl	80026f0 <HAL_GetTick>
 8007368:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800736c:	e00d      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800736e:	f7fb f9bf 	bl	80026f0 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007378:	1ad2      	subs	r2, r2, r3
 800737a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800737e:	429a      	cmp	r2, r3
 8007380:	d903      	bls.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007388:	e005      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800738a:	4b54      	ldr	r3, [pc, #336]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800738c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0eb      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007396:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800739a:	2b00      	cmp	r3, #0
 800739c:	d129      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800739e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ae:	d10e      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80073b0:	4b4a      	ldr	r3, [pc, #296]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80073b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073c0:	091a      	lsrs	r2, r3, #4
 80073c2:	4b48      	ldr	r3, [pc, #288]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	4a45      	ldr	r2, [pc, #276]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073c8:	430b      	orrs	r3, r1
 80073ca:	6113      	str	r3, [r2, #16]
 80073cc:	e005      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80073ce:	4b43      	ldr	r3, [pc, #268]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	4a42      	ldr	r2, [pc, #264]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80073d8:	6113      	str	r3, [r2, #16]
 80073da:	4b40      	ldr	r3, [pc, #256]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ea:	4a3c      	ldr	r2, [pc, #240]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80073f0:	e008      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80073fa:	e003      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007400:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	f002 0301 	and.w	r3, r2, #1
 8007410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007414:	2300      	movs	r3, #0
 8007416:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800741a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800741e:	460b      	mov	r3, r1
 8007420:	4313      	orrs	r3, r2
 8007422:	f000 808f 	beq.w	8007544 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800742c:	2b28      	cmp	r3, #40	@ 0x28
 800742e:	d871      	bhi.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007430:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	0800751d 	.word	0x0800751d
 800743c:	08007515 	.word	0x08007515
 8007440:	08007515 	.word	0x08007515
 8007444:	08007515 	.word	0x08007515
 8007448:	08007515 	.word	0x08007515
 800744c:	08007515 	.word	0x08007515
 8007450:	08007515 	.word	0x08007515
 8007454:	08007515 	.word	0x08007515
 8007458:	080074e9 	.word	0x080074e9
 800745c:	08007515 	.word	0x08007515
 8007460:	08007515 	.word	0x08007515
 8007464:	08007515 	.word	0x08007515
 8007468:	08007515 	.word	0x08007515
 800746c:	08007515 	.word	0x08007515
 8007470:	08007515 	.word	0x08007515
 8007474:	08007515 	.word	0x08007515
 8007478:	080074ff 	.word	0x080074ff
 800747c:	08007515 	.word	0x08007515
 8007480:	08007515 	.word	0x08007515
 8007484:	08007515 	.word	0x08007515
 8007488:	08007515 	.word	0x08007515
 800748c:	08007515 	.word	0x08007515
 8007490:	08007515 	.word	0x08007515
 8007494:	08007515 	.word	0x08007515
 8007498:	0800751d 	.word	0x0800751d
 800749c:	08007515 	.word	0x08007515
 80074a0:	08007515 	.word	0x08007515
 80074a4:	08007515 	.word	0x08007515
 80074a8:	08007515 	.word	0x08007515
 80074ac:	08007515 	.word	0x08007515
 80074b0:	08007515 	.word	0x08007515
 80074b4:	08007515 	.word	0x08007515
 80074b8:	0800751d 	.word	0x0800751d
 80074bc:	08007515 	.word	0x08007515
 80074c0:	08007515 	.word	0x08007515
 80074c4:	08007515 	.word	0x08007515
 80074c8:	08007515 	.word	0x08007515
 80074cc:	08007515 	.word	0x08007515
 80074d0:	08007515 	.word	0x08007515
 80074d4:	08007515 	.word	0x08007515
 80074d8:	0800751d 	.word	0x0800751d
 80074dc:	58024400 	.word	0x58024400
 80074e0:	58024800 	.word	0x58024800
 80074e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ec:	3308      	adds	r3, #8
 80074ee:	2101      	movs	r1, #1
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 ffa7 	bl	8008444 <RCCEx_PLL2_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80074fc:	e00f      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007502:	3328      	adds	r3, #40	@ 0x28
 8007504:	2101      	movs	r1, #1
 8007506:	4618      	mov	r0, r3
 8007508:	f001 f84e 	bl	80085a8 <RCCEx_PLL3_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007512:	e004      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800751a:	e000      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800751c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007526:	4bbf      	ldr	r3, [pc, #764]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800752a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800752e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007532:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007534:	4abb      	ldr	r2, [pc, #748]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007536:	430b      	orrs	r3, r1
 8007538:	6553      	str	r3, [r2, #84]	@ 0x54
 800753a:	e003      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007540:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	f002 0302 	and.w	r3, r2, #2
 8007550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007554:	2300      	movs	r3, #0
 8007556:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800755a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800755e:	460b      	mov	r3, r1
 8007560:	4313      	orrs	r3, r2
 8007562:	d041      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800756a:	2b05      	cmp	r3, #5
 800756c:	d824      	bhi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800756e:	a201      	add	r2, pc, #4	@ (adr r2, 8007574 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	080075c1 	.word	0x080075c1
 8007578:	0800758d 	.word	0x0800758d
 800757c:	080075a3 	.word	0x080075a3
 8007580:	080075c1 	.word	0x080075c1
 8007584:	080075c1 	.word	0x080075c1
 8007588:	080075c1 	.word	0x080075c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007590:	3308      	adds	r3, #8
 8007592:	2101      	movs	r1, #1
 8007594:	4618      	mov	r0, r3
 8007596:	f000 ff55 	bl	8008444 <RCCEx_PLL2_Config>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80075a0:	e00f      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a6:	3328      	adds	r3, #40	@ 0x28
 80075a8:	2101      	movs	r1, #1
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fffc 	bl	80085a8 <RCCEx_PLL3_Config>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80075b6:	e004      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075be:	e000      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80075c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80075ca:	4b96      	ldr	r3, [pc, #600]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ce:	f023 0107 	bic.w	r1, r3, #7
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d8:	4a92      	ldr	r2, [pc, #584]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075da:	430b      	orrs	r3, r1
 80075dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80075de:	e003      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f002 0304 	and.w	r3, r2, #4
 80075f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075f8:	2300      	movs	r3, #0
 80075fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007602:	460b      	mov	r3, r1
 8007604:	4313      	orrs	r3, r2
 8007606:	d044      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007610:	2b05      	cmp	r3, #5
 8007612:	d825      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007614:	a201      	add	r2, pc, #4	@ (adr r2, 800761c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007669 	.word	0x08007669
 8007620:	08007635 	.word	0x08007635
 8007624:	0800764b 	.word	0x0800764b
 8007628:	08007669 	.word	0x08007669
 800762c:	08007669 	.word	0x08007669
 8007630:	08007669 	.word	0x08007669
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007638:	3308      	adds	r3, #8
 800763a:	2101      	movs	r1, #1
 800763c:	4618      	mov	r0, r3
 800763e:	f000 ff01 	bl	8008444 <RCCEx_PLL2_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007648:	e00f      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764e:	3328      	adds	r3, #40	@ 0x28
 8007650:	2101      	movs	r1, #1
 8007652:	4618      	mov	r0, r3
 8007654:	f000 ffa8 	bl	80085a8 <RCCEx_PLL3_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800765e:	e004      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007666:	e000      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10b      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007672:	4b6c      	ldr	r3, [pc, #432]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007676:	f023 0107 	bic.w	r1, r3, #7
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007682:	4a68      	ldr	r2, [pc, #416]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007684:	430b      	orrs	r3, r1
 8007686:	6593      	str	r3, [r2, #88]	@ 0x58
 8007688:	e003      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800768e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f002 0320 	and.w	r3, r2, #32
 800769e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076a2:	2300      	movs	r3, #0
 80076a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80076a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4313      	orrs	r3, r2
 80076b0:	d055      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076be:	d033      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80076c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076c4:	d82c      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80076c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ca:	d02f      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80076cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d0:	d826      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80076d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076d6:	d02b      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80076d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076dc:	d820      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80076de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e2:	d012      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80076e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e8:	d81a      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d022      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80076ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076f2:	d115      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f8:	3308      	adds	r3, #8
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fea1 	bl	8008444 <RCCEx_PLL2_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007708:	e015      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800770a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770e:	3328      	adds	r3, #40	@ 0x28
 8007710:	2102      	movs	r1, #2
 8007712:	4618      	mov	r0, r3
 8007714:	f000 ff48 	bl	80085a8 <RCCEx_PLL3_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800771e:	e00a      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007726:	e006      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007728:	bf00      	nop
 800772a:	e004      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800772c:	bf00      	nop
 800772e:	e002      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007730:	bf00      	nop
 8007732:	e000      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10b      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800773e:	4b39      	ldr	r3, [pc, #228]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007742:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800774e:	4a35      	ldr	r2, [pc, #212]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007750:	430b      	orrs	r3, r1
 8007752:	6553      	str	r3, [r2, #84]	@ 0x54
 8007754:	e003      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007756:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800775a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800776a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800776e:	2300      	movs	r3, #0
 8007770:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007774:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007778:	460b      	mov	r3, r1
 800777a:	4313      	orrs	r3, r2
 800777c:	d058      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800777e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007786:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800778a:	d033      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800778c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007790:	d82c      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007796:	d02f      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800779c:	d826      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800779e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077a2:	d02b      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80077a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077a8:	d820      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80077aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077ae:	d012      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80077b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077b4:	d81a      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d022      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80077ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077be:	d115      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c4:	3308      	adds	r3, #8
 80077c6:	2100      	movs	r1, #0
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fe3b 	bl	8008444 <RCCEx_PLL2_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80077d4:	e015      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077da:	3328      	adds	r3, #40	@ 0x28
 80077dc:	2102      	movs	r1, #2
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fee2 	bl	80085a8 <RCCEx_PLL3_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80077ea:	e00a      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077f2:	e006      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80077f4:	bf00      	nop
 80077f6:	e004      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80077f8:	bf00      	nop
 80077fa:	e002      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80077fc:	bf00      	nop
 80077fe:	e000      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007802:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10e      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800780a:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800780c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800780e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007816:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800781a:	4a02      	ldr	r2, [pc, #8]	@ (8007824 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800781c:	430b      	orrs	r3, r1
 800781e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007820:	e006      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007822:	bf00      	nop
 8007824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800782c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800783c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007840:	2300      	movs	r3, #0
 8007842:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007846:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800784a:	460b      	mov	r3, r1
 800784c:	4313      	orrs	r3, r2
 800784e:	d055      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007854:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007858:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800785c:	d033      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800785e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007862:	d82c      	bhi.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007868:	d02f      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800786a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800786e:	d826      	bhi.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007870:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007874:	d02b      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007876:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800787a:	d820      	bhi.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800787c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007880:	d012      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007882:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007886:	d81a      	bhi.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d022      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800788c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007890:	d115      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007896:	3308      	adds	r3, #8
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fdd2 	bl	8008444 <RCCEx_PLL2_Config>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80078a6:	e015      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ac:	3328      	adds	r3, #40	@ 0x28
 80078ae:	2102      	movs	r1, #2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fe79 	bl	80085a8 <RCCEx_PLL3_Config>
 80078b6:	4603      	mov	r3, r0
 80078b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80078bc:	e00a      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078c4:	e006      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80078c6:	bf00      	nop
 80078c8:	e004      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80078ca:	bf00      	nop
 80078cc:	e002      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80078ce:	bf00      	nop
 80078d0:	e000      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80078d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10b      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80078dc:	4ba0      	ldr	r3, [pc, #640]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078ec:	4a9c      	ldr	r2, [pc, #624]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078ee:	430b      	orrs	r3, r1
 80078f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80078f2:	e003      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80078fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f002 0308 	and.w	r3, r2, #8
 8007908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800790c:	2300      	movs	r3, #0
 800790e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007912:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007916:	460b      	mov	r3, r1
 8007918:	4313      	orrs	r3, r2
 800791a:	d01e      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007928:	d10c      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800792a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792e:	3328      	adds	r3, #40	@ 0x28
 8007930:	2102      	movs	r1, #2
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fe38 	bl	80085a8 <RCCEx_PLL3_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007944:	4b86      	ldr	r3, [pc, #536]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007948:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007954:	4a82      	ldr	r2, [pc, #520]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007956:	430b      	orrs	r3, r1
 8007958:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	f002 0310 	and.w	r3, r2, #16
 8007966:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800796a:	2300      	movs	r3, #0
 800796c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007970:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007974:	460b      	mov	r3, r1
 8007976:	4313      	orrs	r3, r2
 8007978:	d01e      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007986:	d10c      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798c:	3328      	adds	r3, #40	@ 0x28
 800798e:	2102      	movs	r1, #2
 8007990:	4618      	mov	r0, r3
 8007992:	f000 fe09 	bl	80085a8 <RCCEx_PLL3_Config>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079a2:	4b6f      	ldr	r3, [pc, #444]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80079aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079b2:	4a6b      	ldr	r2, [pc, #428]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079b4:	430b      	orrs	r3, r1
 80079b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80079c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079c6:	2300      	movs	r3, #0
 80079c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80079ce:	460b      	mov	r3, r1
 80079d0:	4313      	orrs	r3, r2
 80079d2:	d03e      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80079d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079e0:	d022      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80079e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079e6:	d81b      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f0:	d00b      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80079f2:	e015      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f8:	3308      	adds	r3, #8
 80079fa:	2100      	movs	r1, #0
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 fd21 	bl	8008444 <RCCEx_PLL2_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a08:	e00f      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0e:	3328      	adds	r3, #40	@ 0x28
 8007a10:	2102      	movs	r1, #2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 fdc8 	bl	80085a8 <RCCEx_PLL3_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a1e:	e004      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a26:	e000      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10b      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a32:	4b4b      	ldr	r3, [pc, #300]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a42:	4a47      	ldr	r2, [pc, #284]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a44:	430b      	orrs	r3, r1
 8007a46:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a48:	e003      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007a5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a60:	2300      	movs	r3, #0
 8007a62:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	d03b      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a7a:	d01f      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007a7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a80:	d818      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007a82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a86:	d003      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007a88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a8c:	d007      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007a8e:	e011      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a90:	4b33      	ldr	r3, [pc, #204]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a94:	4a32      	ldr	r2, [pc, #200]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a9c:	e00f      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa2:	3328      	adds	r3, #40	@ 0x28
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fd7e 	bl	80085a8 <RCCEx_PLL3_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ab2:	e004      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007aba:	e000      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007abe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10b      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ac6:	4b26      	ldr	r3, [pc, #152]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ad6:	4a22      	ldr	r2, [pc, #136]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ad8:	430b      	orrs	r3, r1
 8007ada:	6553      	str	r3, [r2, #84]	@ 0x54
 8007adc:	e003      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ade:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ae2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007af2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007af4:	2300      	movs	r3, #0
 8007af6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007af8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007afc:	460b      	mov	r3, r1
 8007afe:	4313      	orrs	r3, r2
 8007b00:	d034      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b10:	d007      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007b12:	e011      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b14:	4b12      	ldr	r3, [pc, #72]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	4a11      	ldr	r2, [pc, #68]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b20:	e00e      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b26:	3308      	adds	r3, #8
 8007b28:	2102      	movs	r1, #2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 fc8a 	bl	8008444 <RCCEx_PLL2_Config>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b36:	e003      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10d      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007b48:	4b05      	ldr	r3, [pc, #20]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b56:	4a02      	ldr	r2, [pc, #8]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b5c:	e006      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007b5e:	bf00      	nop
 8007b60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b7e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007b82:	460b      	mov	r3, r1
 8007b84:	4313      	orrs	r3, r2
 8007b86:	d00c      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8c:	3328      	adds	r3, #40	@ 0x28
 8007b8e:	2102      	movs	r1, #2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fd09 	bl	80085a8 <RCCEx_PLL3_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007bae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bb4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	d036      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bc8:	d018      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007bca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bce:	d811      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bd4:	d014      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bda:	d80b      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d011      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007be4:	d106      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be6:	4bb7      	ldr	r3, [pc, #732]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bea:	4ab6      	ldr	r2, [pc, #728]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007bf2:	e008      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007bfa:	e004      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007bfc:	bf00      	nop
 8007bfe:	e002      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007c00:	bf00      	nop
 8007c02:	e000      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c0e:	4bad      	ldr	r3, [pc, #692]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c1c:	4aa9      	ldr	r2, [pc, #676]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c22:	e003      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007c38:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007c42:	460b      	mov	r3, r1
 8007c44:	4313      	orrs	r3, r2
 8007c46:	d009      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c48:	4b9e      	ldr	r3, [pc, #632]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c56:	4a9b      	ldr	r2, [pc, #620]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007c68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007c72:	460b      	mov	r3, r1
 8007c74:	4313      	orrs	r3, r2
 8007c76:	d009      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c78:	4b92      	ldr	r3, [pc, #584]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c7c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c86:	4a8f      	ldr	r2, [pc, #572]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ca8:	4b86      	ldr	r3, [pc, #536]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	4a85      	ldr	r2, [pc, #532]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007cae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007cb2:	6113      	str	r3, [r2, #16]
 8007cb4:	4b83      	ldr	r3, [pc, #524]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007cb6:	6919      	ldr	r1, [r3, #16]
 8007cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cc0:	4a80      	ldr	r2, [pc, #512]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007cc2:	430b      	orrs	r3, r1
 8007cc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	d009      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ce2:	4b78      	ldr	r3, [pc, #480]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ce6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf0:	4a74      	ldr	r2, [pc, #464]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d04:	2300      	movs	r3, #0
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	d00a      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d12:	4b6c      	ldr	r3, [pc, #432]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d16:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d22:	4a68      	ldr	r2, [pc, #416]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d24:	430b      	orrs	r3, r1
 8007d26:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	2100      	movs	r1, #0
 8007d32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4313      	orrs	r3, r2
 8007d42:	d011      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d48:	3308      	adds	r3, #8
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fb79 	bl	8008444 <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	2100      	movs	r1, #0
 8007d72:	6239      	str	r1, [r7, #32]
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4313      	orrs	r3, r2
 8007d82:	d011      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d88:	3308      	adds	r3, #8
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fb59 	bl	8008444 <RCCEx_PLL2_Config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007da4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	2100      	movs	r1, #0
 8007db2:	61b9      	str	r1, [r7, #24]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	61fb      	str	r3, [r7, #28]
 8007dba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	d011      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc8:	3308      	adds	r3, #8
 8007dca:	2102      	movs	r1, #2
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fb39 	bl	8008444 <RCCEx_PLL2_Config>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007de4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	2100      	movs	r1, #0
 8007df2:	6139      	str	r1, [r7, #16]
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4313      	orrs	r3, r2
 8007e02:	d011      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e08:	3328      	adds	r3, #40	@ 0x28
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fbcb 	bl	80085a8 <RCCEx_PLL3_Config>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	2100      	movs	r1, #0
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4313      	orrs	r3, r2
 8007e42:	d011      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e48:	3328      	adds	r3, #40	@ 0x28
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fbab 	bl	80085a8 <RCCEx_PLL3_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	2100      	movs	r1, #0
 8007e72:	6039      	str	r1, [r7, #0]
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	607b      	str	r3, [r7, #4]
 8007e7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4313      	orrs	r3, r2
 8007e82:	d011      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e88:	3328      	adds	r3, #40	@ 0x28
 8007e8a:	2102      	movs	r1, #2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fb8b 	bl	80085a8 <RCCEx_PLL3_Config>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007ea8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e000      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ec2:	bf00      	nop
 8007ec4:	58024400 	.word	0x58024400

08007ec8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ecc:	f7fe fdbe 	bl	8006a4c <HAL_RCC_GetHCLKFreq>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	091b      	lsrs	r3, r3, #4
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	4904      	ldr	r1, [pc, #16]	@ (8007ef0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ede:	5ccb      	ldrb	r3, [r1, r3]
 8007ee0:	f003 031f 	and.w	r3, r3, #31
 8007ee4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	58024400 	.word	0x58024400
 8007ef0:	0801c468 	.word	0x0801c468

08007ef4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b089      	sub	sp, #36	@ 0x24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007efc:	4ba1      	ldr	r3, [pc, #644]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f06:	4b9f      	ldr	r3, [pc, #636]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0a:	0b1b      	lsrs	r3, r3, #12
 8007f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f12:	4b9c      	ldr	r3, [pc, #624]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f16:	091b      	lsrs	r3, r3, #4
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f1e:	4b99      	ldr	r3, [pc, #612]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f22:	08db      	lsrs	r3, r3, #3
 8007f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	fb02 f303 	mul.w	r3, r2, r3
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8111 	beq.w	8008164 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	f000 8083 	beq.w	8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	f200 80a1 	bhi.w	8008094 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d056      	beq.n	800800c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f5e:	e099      	b.n	8008094 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f60:	4b88      	ldr	r3, [pc, #544]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0320 	and.w	r3, r3, #32
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d02d      	beq.n	8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f6c:	4b85      	ldr	r3, [pc, #532]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	08db      	lsrs	r3, r3, #3
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	4a84      	ldr	r2, [pc, #528]	@ (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f78:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	ee07 3a90 	vmov	s15, r3
 8007f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f96:	4b7b      	ldr	r3, [pc, #492]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007faa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800818c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fc6:	e087      	b.n	80080d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fda:	4b6a      	ldr	r3, [pc, #424]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800818c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800800a:	e065      	b.n	80080d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008016:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800801a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801e:	4b59      	ldr	r3, [pc, #356]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008032:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800818c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800803e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800804e:	e043      	b.n	80080d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800805e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008062:	4b48      	ldr	r3, [pc, #288]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008072:	ed97 6a03 	vldr	s12, [r7, #12]
 8008076:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800818c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800807a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800807e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008092:	e021      	b.n	80080d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a6:	4b37      	ldr	r3, [pc, #220]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800818c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80080d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080dc:	0a5b      	lsrs	r3, r3, #9
 80080de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080fe:	ee17 2a90 	vmov	r2, s15
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008106:	4b1f      	ldr	r3, [pc, #124]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810a:	0c1b      	lsrs	r3, r3, #16
 800810c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008110:	ee07 3a90 	vmov	s15, r3
 8008114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008118:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800811c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008120:	edd7 6a07 	vldr	s13, [r7, #28]
 8008124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800812c:	ee17 2a90 	vmov	r2, s15
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008134:	4b13      	ldr	r3, [pc, #76]	@ (8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008138:	0e1b      	lsrs	r3, r3, #24
 800813a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800814a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800814e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800815a:	ee17 2a90 	vmov	r2, s15
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008162:	e008      	b.n	8008176 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	609a      	str	r2, [r3, #8]
}
 8008176:	bf00      	nop
 8008178:	3724      	adds	r7, #36	@ 0x24
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	58024400 	.word	0x58024400
 8008188:	03d09000 	.word	0x03d09000
 800818c:	46000000 	.word	0x46000000
 8008190:	4c742400 	.word	0x4c742400
 8008194:	4a742400 	.word	0x4a742400
 8008198:	4af42400 	.word	0x4af42400

0800819c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800819c:	b480      	push	{r7}
 800819e:	b089      	sub	sp, #36	@ 0x24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081a4:	4ba1      	ldr	r3, [pc, #644]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081ae:	4b9f      	ldr	r3, [pc, #636]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b2:	0d1b      	lsrs	r3, r3, #20
 80081b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081ba:	4b9c      	ldr	r3, [pc, #624]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80081c6:	4b99      	ldr	r3, [pc, #612]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ca:	08db      	lsrs	r3, r3, #3
 80081cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8111 	beq.w	800840c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	f000 8083 	beq.w	80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	f200 80a1 	bhi.w	800833c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d056      	beq.n	80082b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008206:	e099      	b.n	800833c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008208:	4b88      	ldr	r3, [pc, #544]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0320 	and.w	r3, r3, #32
 8008210:	2b00      	cmp	r3, #0
 8008212:	d02d      	beq.n	8008270 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008214:	4b85      	ldr	r3, [pc, #532]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	08db      	lsrs	r3, r3, #3
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	4a84      	ldr	r2, [pc, #528]	@ (8008430 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
 8008224:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	ee07 3a90 	vmov	s15, r3
 800822c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823e:	4b7b      	ldr	r3, [pc, #492]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008252:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800826e:	e087      	b.n	8008380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800827e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008282:	4b6a      	ldr	r3, [pc, #424]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008292:	ed97 6a03 	vldr	s12, [r7, #12]
 8008296:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800829a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082b2:	e065      	b.n	8008380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c6:	4b59      	ldr	r3, [pc, #356]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082f6:	e043      	b.n	8008380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008302:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830a:	4b48      	ldr	r3, [pc, #288]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800830e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831a:	ed97 6a03 	vldr	s12, [r7, #12]
 800831e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800832e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800833a:	e021      	b.n	8008380 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008346:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800834a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834e:	4b37      	ldr	r3, [pc, #220]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008362:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800837e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008380:	4b2a      	ldr	r3, [pc, #168]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008384:	0a5b      	lsrs	r3, r3, #9
 8008386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800839a:	edd7 6a07 	vldr	s13, [r7, #28]
 800839e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083a6:	ee17 2a90 	vmov	r2, s15
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80083ae:	4b1f      	ldr	r3, [pc, #124]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b2:	0c1b      	lsrs	r3, r3, #16
 80083b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b8:	ee07 3a90 	vmov	s15, r3
 80083bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083d4:	ee17 2a90 	vmov	r2, s15
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80083dc:	4b13      	ldr	r3, [pc, #76]	@ (800842c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e0:	0e1b      	lsrs	r3, r3, #24
 80083e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008402:	ee17 2a90 	vmov	r2, s15
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800840a:	e008      	b.n	800841e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	609a      	str	r2, [r3, #8]
}
 800841e:	bf00      	nop
 8008420:	3724      	adds	r7, #36	@ 0x24
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	58024400 	.word	0x58024400
 8008430:	03d09000 	.word	0x03d09000
 8008434:	46000000 	.word	0x46000000
 8008438:	4c742400 	.word	0x4c742400
 800843c:	4a742400 	.word	0x4a742400
 8008440:	4af42400 	.word	0x4af42400

08008444 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008452:	4b53      	ldr	r3, [pc, #332]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	2b03      	cmp	r3, #3
 800845c:	d101      	bne.n	8008462 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e099      	b.n	8008596 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008462:	4b4f      	ldr	r3, [pc, #316]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a4e      	ldr	r2, [pc, #312]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008468:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800846c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800846e:	f7fa f93f 	bl	80026f0 <HAL_GetTick>
 8008472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008474:	e008      	b.n	8008488 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008476:	f7fa f93b 	bl	80026f0 <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d901      	bls.n	8008488 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e086      	b.n	8008596 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008488:	4b45      	ldr	r3, [pc, #276]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1f0      	bne.n	8008476 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008494:	4b42      	ldr	r3, [pc, #264]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008498:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	031b      	lsls	r3, r3, #12
 80084a2:	493f      	ldr	r1, [pc, #252]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	025b      	lsls	r3, r3, #9
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	041b      	lsls	r3, r3, #16
 80084c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	061b      	lsls	r3, r3, #24
 80084d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80084d8:	4931      	ldr	r1, [pc, #196]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80084de:	4b30      	ldr	r3, [pc, #192]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	492d      	ldr	r1, [pc, #180]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80084f0:	4b2b      	ldr	r3, [pc, #172]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	f023 0220 	bic.w	r2, r3, #32
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	4928      	ldr	r1, [pc, #160]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008502:	4b27      	ldr	r3, [pc, #156]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008506:	4a26      	ldr	r2, [pc, #152]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008508:	f023 0310 	bic.w	r3, r3, #16
 800850c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800850e:	4b24      	ldr	r3, [pc, #144]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008510:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008512:	4b24      	ldr	r3, [pc, #144]	@ (80085a4 <RCCEx_PLL2_Config+0x160>)
 8008514:	4013      	ands	r3, r2
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	69d2      	ldr	r2, [r2, #28]
 800851a:	00d2      	lsls	r2, r2, #3
 800851c:	4920      	ldr	r1, [pc, #128]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 800851e:	4313      	orrs	r3, r2
 8008520:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008522:	4b1f      	ldr	r3, [pc, #124]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008526:	4a1e      	ldr	r2, [pc, #120]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008528:	f043 0310 	orr.w	r3, r3, #16
 800852c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d106      	bne.n	8008542 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008534:	4b1a      	ldr	r3, [pc, #104]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008538:	4a19      	ldr	r2, [pc, #100]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 800853a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800853e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008540:	e00f      	b.n	8008562 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d106      	bne.n	8008556 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008548:	4b15      	ldr	r3, [pc, #84]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 800854a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854c:	4a14      	ldr	r2, [pc, #80]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 800854e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008552:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008554:	e005      	b.n	8008562 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008556:	4b12      	ldr	r3, [pc, #72]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855a:	4a11      	ldr	r2, [pc, #68]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 800855c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008560:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008562:	4b0f      	ldr	r3, [pc, #60]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a0e      	ldr	r2, [pc, #56]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 8008568:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800856c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800856e:	f7fa f8bf 	bl	80026f0 <HAL_GetTick>
 8008572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008574:	e008      	b.n	8008588 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008576:	f7fa f8bb 	bl	80026f0 <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	2b02      	cmp	r3, #2
 8008582:	d901      	bls.n	8008588 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e006      	b.n	8008596 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008588:	4b05      	ldr	r3, [pc, #20]	@ (80085a0 <RCCEx_PLL2_Config+0x15c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d0f0      	beq.n	8008576 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	58024400 	.word	0x58024400
 80085a4:	ffff0007 	.word	0xffff0007

080085a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085b6:	4b53      	ldr	r3, [pc, #332]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	2b03      	cmp	r3, #3
 80085c0:	d101      	bne.n	80085c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e099      	b.n	80086fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80085c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a4e      	ldr	r2, [pc, #312]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80085cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085d2:	f7fa f88d 	bl	80026f0 <HAL_GetTick>
 80085d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085d8:	e008      	b.n	80085ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085da:	f7fa f889 	bl	80026f0 <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d901      	bls.n	80085ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e086      	b.n	80086fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085ec:	4b45      	ldr	r3, [pc, #276]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1f0      	bne.n	80085da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80085f8:	4b42      	ldr	r3, [pc, #264]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	051b      	lsls	r3, r3, #20
 8008606:	493f      	ldr	r1, [pc, #252]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 8008608:	4313      	orrs	r3, r2
 800860a:	628b      	str	r3, [r1, #40]	@ 0x28
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	3b01      	subs	r3, #1
 8008612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	3b01      	subs	r3, #1
 800861c:	025b      	lsls	r3, r3, #9
 800861e:	b29b      	uxth	r3, r3
 8008620:	431a      	orrs	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	3b01      	subs	r3, #1
 8008628:	041b      	lsls	r3, r3, #16
 800862a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	3b01      	subs	r3, #1
 8008636:	061b      	lsls	r3, r3, #24
 8008638:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800863c:	4931      	ldr	r1, [pc, #196]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 800863e:	4313      	orrs	r3, r2
 8008640:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008642:	4b30      	ldr	r3, [pc, #192]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 8008644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008646:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	492d      	ldr	r1, [pc, #180]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 8008650:	4313      	orrs	r3, r2
 8008652:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008654:	4b2b      	ldr	r3, [pc, #172]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 8008656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008658:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	4928      	ldr	r1, [pc, #160]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 8008662:	4313      	orrs	r3, r2
 8008664:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008666:	4b27      	ldr	r3, [pc, #156]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 8008668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866a:	4a26      	ldr	r2, [pc, #152]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 800866c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008672:	4b24      	ldr	r3, [pc, #144]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 8008674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008676:	4b24      	ldr	r3, [pc, #144]	@ (8008708 <RCCEx_PLL3_Config+0x160>)
 8008678:	4013      	ands	r3, r2
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	69d2      	ldr	r2, [r2, #28]
 800867e:	00d2      	lsls	r2, r2, #3
 8008680:	4920      	ldr	r1, [pc, #128]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 8008682:	4313      	orrs	r3, r2
 8008684:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008686:	4b1f      	ldr	r3, [pc, #124]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 8008688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868a:	4a1e      	ldr	r2, [pc, #120]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 800868c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008690:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008698:	4b1a      	ldr	r3, [pc, #104]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 800869a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869c:	4a19      	ldr	r2, [pc, #100]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 800869e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80086a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086a4:	e00f      	b.n	80086c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d106      	bne.n	80086ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80086ac:	4b15      	ldr	r3, [pc, #84]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80086ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b0:	4a14      	ldr	r2, [pc, #80]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80086b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80086b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086b8:	e005      	b.n	80086c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80086ba:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80086bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086be:	4a11      	ldr	r2, [pc, #68]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80086c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80086c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80086c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80086cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086d2:	f7fa f80d 	bl	80026f0 <HAL_GetTick>
 80086d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086d8:	e008      	b.n	80086ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80086da:	f7fa f809 	bl	80026f0 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d901      	bls.n	80086ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e006      	b.n	80086fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086ec:	4b05      	ldr	r3, [pc, #20]	@ (8008704 <RCCEx_PLL3_Config+0x15c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0f0      	beq.n	80086da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	58024400 	.word	0x58024400
 8008708:	ffff0007 	.word	0xffff0007

0800870c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e049      	b.n	80087b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7f9 fcf0 	bl	8002118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3304      	adds	r3, #4
 8008748:	4619      	mov	r1, r3
 800874a:	4610      	mov	r0, r2
 800874c:	f000 fae4 	bl	8008d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d001      	beq.n	80087d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e05e      	b.n	8008892 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0201 	orr.w	r2, r2, #1
 80087ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a2b      	ldr	r2, [pc, #172]	@ (80088a0 <HAL_TIM_Base_Start_IT+0xe4>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d02c      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x94>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fe:	d027      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x94>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a27      	ldr	r2, [pc, #156]	@ (80088a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d022      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x94>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a26      	ldr	r2, [pc, #152]	@ (80088a8 <HAL_TIM_Base_Start_IT+0xec>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d01d      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x94>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a24      	ldr	r2, [pc, #144]	@ (80088ac <HAL_TIM_Base_Start_IT+0xf0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d018      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x94>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a23      	ldr	r2, [pc, #140]	@ (80088b0 <HAL_TIM_Base_Start_IT+0xf4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d013      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x94>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a21      	ldr	r2, [pc, #132]	@ (80088b4 <HAL_TIM_Base_Start_IT+0xf8>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00e      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x94>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a20      	ldr	r2, [pc, #128]	@ (80088b8 <HAL_TIM_Base_Start_IT+0xfc>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d009      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x94>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a1e      	ldr	r2, [pc, #120]	@ (80088bc <HAL_TIM_Base_Start_IT+0x100>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d004      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x94>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a1d      	ldr	r2, [pc, #116]	@ (80088c0 <HAL_TIM_Base_Start_IT+0x104>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d115      	bne.n	800887c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	4b1b      	ldr	r3, [pc, #108]	@ (80088c4 <HAL_TIM_Base_Start_IT+0x108>)
 8008858:	4013      	ands	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b06      	cmp	r3, #6
 8008860:	d015      	beq.n	800888e <HAL_TIM_Base_Start_IT+0xd2>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008868:	d011      	beq.n	800888e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0201 	orr.w	r2, r2, #1
 8008878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887a:	e008      	b.n	800888e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0201 	orr.w	r2, r2, #1
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	e000      	b.n	8008890 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40010000 	.word	0x40010000
 80088a4:	40000400 	.word	0x40000400
 80088a8:	40000800 	.word	0x40000800
 80088ac:	40000c00 	.word	0x40000c00
 80088b0:	40010400 	.word	0x40010400
 80088b4:	40001800 	.word	0x40001800
 80088b8:	40014000 	.word	0x40014000
 80088bc:	4000e000 	.word	0x4000e000
 80088c0:	4000e400 	.word	0x4000e400
 80088c4:	00010007 	.word	0x00010007

080088c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d020      	beq.n	800892c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d01b      	beq.n	800892c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0202 	mvn.w	r2, #2
 80088fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f9e2 	bl	8008cdc <HAL_TIM_IC_CaptureCallback>
 8008918:	e005      	b.n	8008926 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f9d4 	bl	8008cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f9e5 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	d020      	beq.n	8008978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b00      	cmp	r3, #0
 800893e:	d01b      	beq.n	8008978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f06f 0204 	mvn.w	r2, #4
 8008948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2202      	movs	r2, #2
 800894e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9bc 	bl	8008cdc <HAL_TIM_IC_CaptureCallback>
 8008964:	e005      	b.n	8008972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f9ae 	bl	8008cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f9bf 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d020      	beq.n	80089c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f003 0308 	and.w	r3, r3, #8
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01b      	beq.n	80089c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f06f 0208 	mvn.w	r2, #8
 8008994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2204      	movs	r2, #4
 800899a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f996 	bl	8008cdc <HAL_TIM_IC_CaptureCallback>
 80089b0:	e005      	b.n	80089be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f988 	bl	8008cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f999 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f003 0310 	and.w	r3, r3, #16
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d020      	beq.n	8008a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f003 0310 	and.w	r3, r3, #16
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01b      	beq.n	8008a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f06f 0210 	mvn.w	r2, #16
 80089e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2208      	movs	r2, #8
 80089e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f970 	bl	8008cdc <HAL_TIM_IC_CaptureCallback>
 80089fc:	e005      	b.n	8008a0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f962 	bl	8008cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f973 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00c      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d007      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0201 	mvn.w	r2, #1
 8008a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7f8 ff34 	bl	800189c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d104      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00c      	beq.n	8008a62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fb4b 	bl	80090f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00c      	beq.n	8008a86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d007      	beq.n	8008a86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fb43 	bl	800910c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00c      	beq.n	8008aaa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f92d 	bl	8008d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00c      	beq.n	8008ace <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d007      	beq.n	8008ace <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f06f 0220 	mvn.w	r2, #32
 8008ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fb0b 	bl	80090e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ace:	bf00      	nop
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_TIM_ConfigClockSource+0x1c>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e0dc      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x1d6>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8008cb8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008b10:	4013      	ands	r3, r2
 8008b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a64      	ldr	r2, [pc, #400]	@ (8008cbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	f000 80a9 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b30:	4a62      	ldr	r2, [pc, #392]	@ (8008cbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	f200 80ae 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b38:	4a61      	ldr	r2, [pc, #388]	@ (8008cc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	f000 80a1 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b40:	4a5f      	ldr	r2, [pc, #380]	@ (8008cc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	f200 80a6 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b48:	4a5e      	ldr	r2, [pc, #376]	@ (8008cc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	f000 8099 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b50:	4a5c      	ldr	r2, [pc, #368]	@ (8008cc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	f200 809e 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b5c:	f000 8091 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b64:	f200 8096 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b6c:	f000 8089 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b74:	f200 808e 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b7c:	d03e      	beq.n	8008bfc <HAL_TIM_ConfigClockSource+0x124>
 8008b7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b82:	f200 8087 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b8a:	f000 8086 	beq.w	8008c9a <HAL_TIM_ConfigClockSource+0x1c2>
 8008b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b92:	d87f      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b94:	2b70      	cmp	r3, #112	@ 0x70
 8008b96:	d01a      	beq.n	8008bce <HAL_TIM_ConfigClockSource+0xf6>
 8008b98:	2b70      	cmp	r3, #112	@ 0x70
 8008b9a:	d87b      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b9c:	2b60      	cmp	r3, #96	@ 0x60
 8008b9e:	d050      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x16a>
 8008ba0:	2b60      	cmp	r3, #96	@ 0x60
 8008ba2:	d877      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ba4:	2b50      	cmp	r3, #80	@ 0x50
 8008ba6:	d03c      	beq.n	8008c22 <HAL_TIM_ConfigClockSource+0x14a>
 8008ba8:	2b50      	cmp	r3, #80	@ 0x50
 8008baa:	d873      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008bac:	2b40      	cmp	r3, #64	@ 0x40
 8008bae:	d058      	beq.n	8008c62 <HAL_TIM_ConfigClockSource+0x18a>
 8008bb0:	2b40      	cmp	r3, #64	@ 0x40
 8008bb2:	d86f      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008bb4:	2b30      	cmp	r3, #48	@ 0x30
 8008bb6:	d064      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008bb8:	2b30      	cmp	r3, #48	@ 0x30
 8008bba:	d86b      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008bbc:	2b20      	cmp	r3, #32
 8008bbe:	d060      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	d867      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d05c      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008bc8:	2b10      	cmp	r3, #16
 8008bca:	d05a      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008bcc:	e062      	b.n	8008c94 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bde:	f000 f9c5 	bl	8008f6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	609a      	str	r2, [r3, #8]
      break;
 8008bfa:	e04f      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c0c:	f000 f9ae 	bl	8008f6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689a      	ldr	r2, [r3, #8]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c1e:	609a      	str	r2, [r3, #8]
      break;
 8008c20:	e03c      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f000 f91e 	bl	8008e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2150      	movs	r1, #80	@ 0x50
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 f978 	bl	8008f30 <TIM_ITRx_SetConfig>
      break;
 8008c40:	e02c      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f000 f93d 	bl	8008ece <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2160      	movs	r1, #96	@ 0x60
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f968 	bl	8008f30 <TIM_ITRx_SetConfig>
      break;
 8008c60:	e01c      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f000 f8fe 	bl	8008e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2140      	movs	r1, #64	@ 0x40
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 f958 	bl	8008f30 <TIM_ITRx_SetConfig>
      break;
 8008c80:	e00c      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	f000 f94f 	bl	8008f30 <TIM_ITRx_SetConfig>
      break;
 8008c92:	e003      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	73fb      	strb	r3, [r7, #15]
      break;
 8008c98:	e000      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	ffceff88 	.word	0xffceff88
 8008cbc:	00100040 	.word	0x00100040
 8008cc0:	00100030 	.word	0x00100030
 8008cc4:	00100020 	.word	0x00100020

08008cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a47      	ldr	r2, [pc, #284]	@ (8008e48 <TIM_Base_SetConfig+0x130>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d013      	beq.n	8008d58 <TIM_Base_SetConfig+0x40>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d36:	d00f      	beq.n	8008d58 <TIM_Base_SetConfig+0x40>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a44      	ldr	r2, [pc, #272]	@ (8008e4c <TIM_Base_SetConfig+0x134>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00b      	beq.n	8008d58 <TIM_Base_SetConfig+0x40>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a43      	ldr	r2, [pc, #268]	@ (8008e50 <TIM_Base_SetConfig+0x138>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d007      	beq.n	8008d58 <TIM_Base_SetConfig+0x40>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a42      	ldr	r2, [pc, #264]	@ (8008e54 <TIM_Base_SetConfig+0x13c>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d003      	beq.n	8008d58 <TIM_Base_SetConfig+0x40>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a41      	ldr	r2, [pc, #260]	@ (8008e58 <TIM_Base_SetConfig+0x140>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d108      	bne.n	8008d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a36      	ldr	r2, [pc, #216]	@ (8008e48 <TIM_Base_SetConfig+0x130>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d027      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d78:	d023      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a33      	ldr	r2, [pc, #204]	@ (8008e4c <TIM_Base_SetConfig+0x134>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01f      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a32      	ldr	r2, [pc, #200]	@ (8008e50 <TIM_Base_SetConfig+0x138>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d01b      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a31      	ldr	r2, [pc, #196]	@ (8008e54 <TIM_Base_SetConfig+0x13c>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d017      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a30      	ldr	r2, [pc, #192]	@ (8008e58 <TIM_Base_SetConfig+0x140>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d013      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8008e5c <TIM_Base_SetConfig+0x144>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00f      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a2e      	ldr	r2, [pc, #184]	@ (8008e60 <TIM_Base_SetConfig+0x148>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00b      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a2d      	ldr	r2, [pc, #180]	@ (8008e64 <TIM_Base_SetConfig+0x14c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d007      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a2c      	ldr	r2, [pc, #176]	@ (8008e68 <TIM_Base_SetConfig+0x150>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d003      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8008e6c <TIM_Base_SetConfig+0x154>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d108      	bne.n	8008dd4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a14      	ldr	r2, [pc, #80]	@ (8008e48 <TIM_Base_SetConfig+0x130>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00f      	beq.n	8008e1a <TIM_Base_SetConfig+0x102>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a16      	ldr	r2, [pc, #88]	@ (8008e58 <TIM_Base_SetConfig+0x140>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d00b      	beq.n	8008e1a <TIM_Base_SetConfig+0x102>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a15      	ldr	r2, [pc, #84]	@ (8008e5c <TIM_Base_SetConfig+0x144>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d007      	beq.n	8008e1a <TIM_Base_SetConfig+0x102>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a14      	ldr	r2, [pc, #80]	@ (8008e60 <TIM_Base_SetConfig+0x148>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d003      	beq.n	8008e1a <TIM_Base_SetConfig+0x102>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a13      	ldr	r2, [pc, #76]	@ (8008e64 <TIM_Base_SetConfig+0x14c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d103      	bne.n	8008e22 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f043 0204 	orr.w	r2, r3, #4
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	601a      	str	r2, [r3, #0]
}
 8008e3a:	bf00      	nop
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40010000 	.word	0x40010000
 8008e4c:	40000400 	.word	0x40000400
 8008e50:	40000800 	.word	0x40000800
 8008e54:	40000c00 	.word	0x40000c00
 8008e58:	40010400 	.word	0x40010400
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	40014800 	.word	0x40014800
 8008e68:	4000e000 	.word	0x4000e000
 8008e6c:	4000e400 	.word	0x4000e400

08008e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	f023 0201 	bic.w	r2, r3, #1
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f023 030a 	bic.w	r3, r3, #10
 8008eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	621a      	str	r2, [r3, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	371c      	adds	r7, #28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b087      	sub	sp, #28
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a1b      	ldr	r3, [r3, #32]
 8008ee4:	f023 0210 	bic.w	r2, r3, #16
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	031b      	lsls	r3, r3, #12
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	621a      	str	r2, [r3, #32]
}
 8008f22:	bf00      	nop
 8008f24:	371c      	adds	r7, #28
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
	...

08008f30 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4b09      	ldr	r3, [pc, #36]	@ (8008f68 <TIM_ITRx_SetConfig+0x38>)
 8008f44:	4013      	ands	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	f043 0307 	orr.w	r3, r3, #7
 8008f52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	609a      	str	r2, [r3, #8]
}
 8008f5a:	bf00      	nop
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	ffcfff8f 	.word	0xffcfff8f

08008f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	021a      	lsls	r2, r3, #8
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	609a      	str	r2, [r3, #8]
}
 8008fa0:	bf00      	nop
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d101      	bne.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e077      	b.n	80090b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a35      	ldr	r2, [pc, #212]	@ (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d004      	beq.n	8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a34      	ldr	r2, [pc, #208]	@ (80090c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d108      	bne.n	800900a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008ffe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	4313      	orrs	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a25      	ldr	r2, [pc, #148]	@ (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d02c      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009036:	d027      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a22      	ldr	r2, [pc, #136]	@ (80090c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d022      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a21      	ldr	r2, [pc, #132]	@ (80090cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d01d      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a1f      	ldr	r2, [pc, #124]	@ (80090d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d018      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a1a      	ldr	r2, [pc, #104]	@ (80090c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d013      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a1b      	ldr	r2, [pc, #108]	@ (80090d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00e      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a1a      	ldr	r2, [pc, #104]	@ (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d009      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a18      	ldr	r2, [pc, #96]	@ (80090dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d004      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a17      	ldr	r2, [pc, #92]	@ (80090e0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d10c      	bne.n	80090a2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800908e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	4313      	orrs	r3, r2
 8009098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	40010000 	.word	0x40010000
 80090c4:	40010400 	.word	0x40010400
 80090c8:	40000400 	.word	0x40000400
 80090cc:	40000800 	.word	0x40000800
 80090d0:	40000c00 	.word	0x40000c00
 80090d4:	40001800 	.word	0x40001800
 80090d8:	40014000 	.word	0x40014000
 80090dc:	4000e000 	.word	0x4000e000
 80090e0:	4000e400 	.word	0x4000e400

080090e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e042      	b.n	80091b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7f9 f8e7 	bl	8002318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2224      	movs	r2, #36	@ 0x24
 800914e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 0201 	bic.w	r2, r2, #1
 8009160:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 ff22 	bl	8009fb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f8b3 	bl	80092dc <UART_SetConfig>
 8009176:	4603      	mov	r3, r0
 8009178:	2b01      	cmp	r3, #1
 800917a:	d101      	bne.n	8009180 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e01b      	b.n	80091b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800918e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800919e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0201 	orr.w	r2, r2, #1
 80091ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 ffa1 	bl	800a0f8 <UART_CheckIdleState>
 80091b6:	4603      	mov	r3, r0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08a      	sub	sp, #40	@ 0x28
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	4613      	mov	r3, r2
 80091ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	d17b      	bne.n	80092d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <HAL_UART_Transmit+0x26>
 80091e0:	88fb      	ldrh	r3, [r7, #6]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e074      	b.n	80092d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2221      	movs	r2, #33	@ 0x21
 80091f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091fa:	f7f9 fa79 	bl	80026f0 <HAL_GetTick>
 80091fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	88fa      	ldrh	r2, [r7, #6]
 8009204:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	88fa      	ldrh	r2, [r7, #6]
 800920c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009218:	d108      	bne.n	800922c <HAL_UART_Transmit+0x6c>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d104      	bne.n	800922c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	e003      	b.n	8009234 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009230:	2300      	movs	r3, #0
 8009232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009234:	e030      	b.n	8009298 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2200      	movs	r2, #0
 800923e:	2180      	movs	r1, #128	@ 0x80
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f001 f803 	bl	800a24c <UART_WaitOnFlagUntilTimeout>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2220      	movs	r2, #32
 8009250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e03d      	b.n	80092d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10b      	bne.n	8009276 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800926c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	3302      	adds	r3, #2
 8009272:	61bb      	str	r3, [r7, #24]
 8009274:	e007      	b.n	8009286 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	781a      	ldrb	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	3301      	adds	r3, #1
 8009284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800928c:	b29b      	uxth	r3, r3
 800928e:	3b01      	subs	r3, #1
 8009290:	b29a      	uxth	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800929e:	b29b      	uxth	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1c8      	bne.n	8009236 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2200      	movs	r2, #0
 80092ac:	2140      	movs	r1, #64	@ 0x40
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 ffcc 	bl	800a24c <UART_WaitOnFlagUntilTimeout>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2220      	movs	r2, #32
 80092be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e006      	b.n	80092d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	e000      	b.n	80092d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80092d2:	2302      	movs	r3, #2
  }
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3720      	adds	r7, #32
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092e0:	b092      	sub	sp, #72	@ 0x48
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	431a      	orrs	r2, r3
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	431a      	orrs	r2, r3
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	4313      	orrs	r3, r2
 8009302:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	4bbe      	ldr	r3, [pc, #760]	@ (8009604 <UART_SetConfig+0x328>)
 800930c:	4013      	ands	r3, r2
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	6812      	ldr	r2, [r2, #0]
 8009312:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009314:	430b      	orrs	r3, r1
 8009316:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4ab3      	ldr	r2, [pc, #716]	@ (8009608 <UART_SetConfig+0x32c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d004      	beq.n	8009348 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009344:	4313      	orrs	r3, r2
 8009346:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	689a      	ldr	r2, [r3, #8]
 800934e:	4baf      	ldr	r3, [pc, #700]	@ (800960c <UART_SetConfig+0x330>)
 8009350:	4013      	ands	r3, r2
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	6812      	ldr	r2, [r2, #0]
 8009356:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009358:	430b      	orrs	r3, r1
 800935a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009362:	f023 010f 	bic.w	r1, r3, #15
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4aa6      	ldr	r2, [pc, #664]	@ (8009610 <UART_SetConfig+0x334>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d177      	bne.n	800946c <UART_SetConfig+0x190>
 800937c:	4ba5      	ldr	r3, [pc, #660]	@ (8009614 <UART_SetConfig+0x338>)
 800937e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009384:	2b28      	cmp	r3, #40	@ 0x28
 8009386:	d86d      	bhi.n	8009464 <UART_SetConfig+0x188>
 8009388:	a201      	add	r2, pc, #4	@ (adr r2, 8009390 <UART_SetConfig+0xb4>)
 800938a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938e:	bf00      	nop
 8009390:	08009435 	.word	0x08009435
 8009394:	08009465 	.word	0x08009465
 8009398:	08009465 	.word	0x08009465
 800939c:	08009465 	.word	0x08009465
 80093a0:	08009465 	.word	0x08009465
 80093a4:	08009465 	.word	0x08009465
 80093a8:	08009465 	.word	0x08009465
 80093ac:	08009465 	.word	0x08009465
 80093b0:	0800943d 	.word	0x0800943d
 80093b4:	08009465 	.word	0x08009465
 80093b8:	08009465 	.word	0x08009465
 80093bc:	08009465 	.word	0x08009465
 80093c0:	08009465 	.word	0x08009465
 80093c4:	08009465 	.word	0x08009465
 80093c8:	08009465 	.word	0x08009465
 80093cc:	08009465 	.word	0x08009465
 80093d0:	08009445 	.word	0x08009445
 80093d4:	08009465 	.word	0x08009465
 80093d8:	08009465 	.word	0x08009465
 80093dc:	08009465 	.word	0x08009465
 80093e0:	08009465 	.word	0x08009465
 80093e4:	08009465 	.word	0x08009465
 80093e8:	08009465 	.word	0x08009465
 80093ec:	08009465 	.word	0x08009465
 80093f0:	0800944d 	.word	0x0800944d
 80093f4:	08009465 	.word	0x08009465
 80093f8:	08009465 	.word	0x08009465
 80093fc:	08009465 	.word	0x08009465
 8009400:	08009465 	.word	0x08009465
 8009404:	08009465 	.word	0x08009465
 8009408:	08009465 	.word	0x08009465
 800940c:	08009465 	.word	0x08009465
 8009410:	08009455 	.word	0x08009455
 8009414:	08009465 	.word	0x08009465
 8009418:	08009465 	.word	0x08009465
 800941c:	08009465 	.word	0x08009465
 8009420:	08009465 	.word	0x08009465
 8009424:	08009465 	.word	0x08009465
 8009428:	08009465 	.word	0x08009465
 800942c:	08009465 	.word	0x08009465
 8009430:	0800945d 	.word	0x0800945d
 8009434:	2301      	movs	r3, #1
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943a:	e326      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800943c:	2304      	movs	r3, #4
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e322      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009444:	2308      	movs	r3, #8
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e31e      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800944c:	2310      	movs	r3, #16
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009452:	e31a      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009454:	2320      	movs	r3, #32
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e316      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800945c:	2340      	movs	r3, #64	@ 0x40
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e312      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009464:	2380      	movs	r3, #128	@ 0x80
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e30e      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a69      	ldr	r2, [pc, #420]	@ (8009618 <UART_SetConfig+0x33c>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d130      	bne.n	80094d8 <UART_SetConfig+0x1fc>
 8009476:	4b67      	ldr	r3, [pc, #412]	@ (8009614 <UART_SetConfig+0x338>)
 8009478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800947a:	f003 0307 	and.w	r3, r3, #7
 800947e:	2b05      	cmp	r3, #5
 8009480:	d826      	bhi.n	80094d0 <UART_SetConfig+0x1f4>
 8009482:	a201      	add	r2, pc, #4	@ (adr r2, 8009488 <UART_SetConfig+0x1ac>)
 8009484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009488:	080094a1 	.word	0x080094a1
 800948c:	080094a9 	.word	0x080094a9
 8009490:	080094b1 	.word	0x080094b1
 8009494:	080094b9 	.word	0x080094b9
 8009498:	080094c1 	.word	0x080094c1
 800949c:	080094c9 	.word	0x080094c9
 80094a0:	2300      	movs	r3, #0
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e2f0      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80094a8:	2304      	movs	r3, #4
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e2ec      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80094b0:	2308      	movs	r3, #8
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e2e8      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80094b8:	2310      	movs	r3, #16
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e2e4      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80094c0:	2320      	movs	r3, #32
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e2e0      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80094c8:	2340      	movs	r3, #64	@ 0x40
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e2dc      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80094d0:	2380      	movs	r3, #128	@ 0x80
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e2d8      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a4f      	ldr	r2, [pc, #316]	@ (800961c <UART_SetConfig+0x340>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d130      	bne.n	8009544 <UART_SetConfig+0x268>
 80094e2:	4b4c      	ldr	r3, [pc, #304]	@ (8009614 <UART_SetConfig+0x338>)
 80094e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	d826      	bhi.n	800953c <UART_SetConfig+0x260>
 80094ee:	a201      	add	r2, pc, #4	@ (adr r2, 80094f4 <UART_SetConfig+0x218>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	0800950d 	.word	0x0800950d
 80094f8:	08009515 	.word	0x08009515
 80094fc:	0800951d 	.word	0x0800951d
 8009500:	08009525 	.word	0x08009525
 8009504:	0800952d 	.word	0x0800952d
 8009508:	08009535 	.word	0x08009535
 800950c:	2300      	movs	r3, #0
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e2ba      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009514:	2304      	movs	r3, #4
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e2b6      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800951c:	2308      	movs	r3, #8
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e2b2      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009524:	2310      	movs	r3, #16
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e2ae      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800952c:	2320      	movs	r3, #32
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e2aa      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009534:	2340      	movs	r3, #64	@ 0x40
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e2a6      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800953c:	2380      	movs	r3, #128	@ 0x80
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e2a2      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a35      	ldr	r2, [pc, #212]	@ (8009620 <UART_SetConfig+0x344>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d130      	bne.n	80095b0 <UART_SetConfig+0x2d4>
 800954e:	4b31      	ldr	r3, [pc, #196]	@ (8009614 <UART_SetConfig+0x338>)
 8009550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009552:	f003 0307 	and.w	r3, r3, #7
 8009556:	2b05      	cmp	r3, #5
 8009558:	d826      	bhi.n	80095a8 <UART_SetConfig+0x2cc>
 800955a:	a201      	add	r2, pc, #4	@ (adr r2, 8009560 <UART_SetConfig+0x284>)
 800955c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009560:	08009579 	.word	0x08009579
 8009564:	08009581 	.word	0x08009581
 8009568:	08009589 	.word	0x08009589
 800956c:	08009591 	.word	0x08009591
 8009570:	08009599 	.word	0x08009599
 8009574:	080095a1 	.word	0x080095a1
 8009578:	2300      	movs	r3, #0
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e284      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009580:	2304      	movs	r3, #4
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e280      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009588:	2308      	movs	r3, #8
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e27c      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009590:	2310      	movs	r3, #16
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e278      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009598:	2320      	movs	r3, #32
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e274      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80095a0:	2340      	movs	r3, #64	@ 0x40
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e270      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80095a8:	2380      	movs	r3, #128	@ 0x80
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e26c      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009624 <UART_SetConfig+0x348>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d142      	bne.n	8009640 <UART_SetConfig+0x364>
 80095ba:	4b16      	ldr	r3, [pc, #88]	@ (8009614 <UART_SetConfig+0x338>)
 80095bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	d838      	bhi.n	8009638 <UART_SetConfig+0x35c>
 80095c6:	a201      	add	r2, pc, #4	@ (adr r2, 80095cc <UART_SetConfig+0x2f0>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	080095e5 	.word	0x080095e5
 80095d0:	080095ed 	.word	0x080095ed
 80095d4:	080095f5 	.word	0x080095f5
 80095d8:	080095fd 	.word	0x080095fd
 80095dc:	08009629 	.word	0x08009629
 80095e0:	08009631 	.word	0x08009631
 80095e4:	2300      	movs	r3, #0
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e24e      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80095ec:	2304      	movs	r3, #4
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e24a      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80095f4:	2308      	movs	r3, #8
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e246      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80095fc:	2310      	movs	r3, #16
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e242      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009604:	cfff69f3 	.word	0xcfff69f3
 8009608:	58000c00 	.word	0x58000c00
 800960c:	11fff4ff 	.word	0x11fff4ff
 8009610:	40011000 	.word	0x40011000
 8009614:	58024400 	.word	0x58024400
 8009618:	40004400 	.word	0x40004400
 800961c:	40004800 	.word	0x40004800
 8009620:	40004c00 	.word	0x40004c00
 8009624:	40005000 	.word	0x40005000
 8009628:	2320      	movs	r3, #32
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962e:	e22c      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009630:	2340      	movs	r3, #64	@ 0x40
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e228      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009638:	2380      	movs	r3, #128	@ 0x80
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963e:	e224      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4ab1      	ldr	r2, [pc, #708]	@ (800990c <UART_SetConfig+0x630>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d176      	bne.n	8009738 <UART_SetConfig+0x45c>
 800964a:	4bb1      	ldr	r3, [pc, #708]	@ (8009910 <UART_SetConfig+0x634>)
 800964c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800964e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009652:	2b28      	cmp	r3, #40	@ 0x28
 8009654:	d86c      	bhi.n	8009730 <UART_SetConfig+0x454>
 8009656:	a201      	add	r2, pc, #4	@ (adr r2, 800965c <UART_SetConfig+0x380>)
 8009658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965c:	08009701 	.word	0x08009701
 8009660:	08009731 	.word	0x08009731
 8009664:	08009731 	.word	0x08009731
 8009668:	08009731 	.word	0x08009731
 800966c:	08009731 	.word	0x08009731
 8009670:	08009731 	.word	0x08009731
 8009674:	08009731 	.word	0x08009731
 8009678:	08009731 	.word	0x08009731
 800967c:	08009709 	.word	0x08009709
 8009680:	08009731 	.word	0x08009731
 8009684:	08009731 	.word	0x08009731
 8009688:	08009731 	.word	0x08009731
 800968c:	08009731 	.word	0x08009731
 8009690:	08009731 	.word	0x08009731
 8009694:	08009731 	.word	0x08009731
 8009698:	08009731 	.word	0x08009731
 800969c:	08009711 	.word	0x08009711
 80096a0:	08009731 	.word	0x08009731
 80096a4:	08009731 	.word	0x08009731
 80096a8:	08009731 	.word	0x08009731
 80096ac:	08009731 	.word	0x08009731
 80096b0:	08009731 	.word	0x08009731
 80096b4:	08009731 	.word	0x08009731
 80096b8:	08009731 	.word	0x08009731
 80096bc:	08009719 	.word	0x08009719
 80096c0:	08009731 	.word	0x08009731
 80096c4:	08009731 	.word	0x08009731
 80096c8:	08009731 	.word	0x08009731
 80096cc:	08009731 	.word	0x08009731
 80096d0:	08009731 	.word	0x08009731
 80096d4:	08009731 	.word	0x08009731
 80096d8:	08009731 	.word	0x08009731
 80096dc:	08009721 	.word	0x08009721
 80096e0:	08009731 	.word	0x08009731
 80096e4:	08009731 	.word	0x08009731
 80096e8:	08009731 	.word	0x08009731
 80096ec:	08009731 	.word	0x08009731
 80096f0:	08009731 	.word	0x08009731
 80096f4:	08009731 	.word	0x08009731
 80096f8:	08009731 	.word	0x08009731
 80096fc:	08009729 	.word	0x08009729
 8009700:	2301      	movs	r3, #1
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009706:	e1c0      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009708:	2304      	movs	r3, #4
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970e:	e1bc      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009710:	2308      	movs	r3, #8
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009716:	e1b8      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009718:	2310      	movs	r3, #16
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e1b4      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009720:	2320      	movs	r3, #32
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e1b0      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009728:	2340      	movs	r3, #64	@ 0x40
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e1ac      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009730:	2380      	movs	r3, #128	@ 0x80
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e1a8      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a75      	ldr	r2, [pc, #468]	@ (8009914 <UART_SetConfig+0x638>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d130      	bne.n	80097a4 <UART_SetConfig+0x4c8>
 8009742:	4b73      	ldr	r3, [pc, #460]	@ (8009910 <UART_SetConfig+0x634>)
 8009744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	2b05      	cmp	r3, #5
 800974c:	d826      	bhi.n	800979c <UART_SetConfig+0x4c0>
 800974e:	a201      	add	r2, pc, #4	@ (adr r2, 8009754 <UART_SetConfig+0x478>)
 8009750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009754:	0800976d 	.word	0x0800976d
 8009758:	08009775 	.word	0x08009775
 800975c:	0800977d 	.word	0x0800977d
 8009760:	08009785 	.word	0x08009785
 8009764:	0800978d 	.word	0x0800978d
 8009768:	08009795 	.word	0x08009795
 800976c:	2300      	movs	r3, #0
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e18a      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009774:	2304      	movs	r3, #4
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e186      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800977c:	2308      	movs	r3, #8
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e182      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009784:	2310      	movs	r3, #16
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e17e      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800978c:	2320      	movs	r3, #32
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e17a      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009794:	2340      	movs	r3, #64	@ 0x40
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e176      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800979c:	2380      	movs	r3, #128	@ 0x80
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e172      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a5b      	ldr	r2, [pc, #364]	@ (8009918 <UART_SetConfig+0x63c>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d130      	bne.n	8009810 <UART_SetConfig+0x534>
 80097ae:	4b58      	ldr	r3, [pc, #352]	@ (8009910 <UART_SetConfig+0x634>)
 80097b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b2:	f003 0307 	and.w	r3, r3, #7
 80097b6:	2b05      	cmp	r3, #5
 80097b8:	d826      	bhi.n	8009808 <UART_SetConfig+0x52c>
 80097ba:	a201      	add	r2, pc, #4	@ (adr r2, 80097c0 <UART_SetConfig+0x4e4>)
 80097bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c0:	080097d9 	.word	0x080097d9
 80097c4:	080097e1 	.word	0x080097e1
 80097c8:	080097e9 	.word	0x080097e9
 80097cc:	080097f1 	.word	0x080097f1
 80097d0:	080097f9 	.word	0x080097f9
 80097d4:	08009801 	.word	0x08009801
 80097d8:	2300      	movs	r3, #0
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097de:	e154      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80097e0:	2304      	movs	r3, #4
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e150      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80097e8:	2308      	movs	r3, #8
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e14c      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80097f0:	2310      	movs	r3, #16
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e148      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80097f8:	2320      	movs	r3, #32
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e144      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009800:	2340      	movs	r3, #64	@ 0x40
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e140      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009808:	2380      	movs	r3, #128	@ 0x80
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e13c      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a41      	ldr	r2, [pc, #260]	@ (800991c <UART_SetConfig+0x640>)
 8009816:	4293      	cmp	r3, r2
 8009818:	f040 8082 	bne.w	8009920 <UART_SetConfig+0x644>
 800981c:	4b3c      	ldr	r3, [pc, #240]	@ (8009910 <UART_SetConfig+0x634>)
 800981e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009820:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009824:	2b28      	cmp	r3, #40	@ 0x28
 8009826:	d86d      	bhi.n	8009904 <UART_SetConfig+0x628>
 8009828:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <UART_SetConfig+0x554>)
 800982a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982e:	bf00      	nop
 8009830:	080098d5 	.word	0x080098d5
 8009834:	08009905 	.word	0x08009905
 8009838:	08009905 	.word	0x08009905
 800983c:	08009905 	.word	0x08009905
 8009840:	08009905 	.word	0x08009905
 8009844:	08009905 	.word	0x08009905
 8009848:	08009905 	.word	0x08009905
 800984c:	08009905 	.word	0x08009905
 8009850:	080098dd 	.word	0x080098dd
 8009854:	08009905 	.word	0x08009905
 8009858:	08009905 	.word	0x08009905
 800985c:	08009905 	.word	0x08009905
 8009860:	08009905 	.word	0x08009905
 8009864:	08009905 	.word	0x08009905
 8009868:	08009905 	.word	0x08009905
 800986c:	08009905 	.word	0x08009905
 8009870:	080098e5 	.word	0x080098e5
 8009874:	08009905 	.word	0x08009905
 8009878:	08009905 	.word	0x08009905
 800987c:	08009905 	.word	0x08009905
 8009880:	08009905 	.word	0x08009905
 8009884:	08009905 	.word	0x08009905
 8009888:	08009905 	.word	0x08009905
 800988c:	08009905 	.word	0x08009905
 8009890:	080098ed 	.word	0x080098ed
 8009894:	08009905 	.word	0x08009905
 8009898:	08009905 	.word	0x08009905
 800989c:	08009905 	.word	0x08009905
 80098a0:	08009905 	.word	0x08009905
 80098a4:	08009905 	.word	0x08009905
 80098a8:	08009905 	.word	0x08009905
 80098ac:	08009905 	.word	0x08009905
 80098b0:	080098f5 	.word	0x080098f5
 80098b4:	08009905 	.word	0x08009905
 80098b8:	08009905 	.word	0x08009905
 80098bc:	08009905 	.word	0x08009905
 80098c0:	08009905 	.word	0x08009905
 80098c4:	08009905 	.word	0x08009905
 80098c8:	08009905 	.word	0x08009905
 80098cc:	08009905 	.word	0x08009905
 80098d0:	080098fd 	.word	0x080098fd
 80098d4:	2301      	movs	r3, #1
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e0d6      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80098dc:	2304      	movs	r3, #4
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e2:	e0d2      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80098e4:	2308      	movs	r3, #8
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ea:	e0ce      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80098ec:	2310      	movs	r3, #16
 80098ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f2:	e0ca      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80098f4:	2320      	movs	r3, #32
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fa:	e0c6      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80098fc:	2340      	movs	r3, #64	@ 0x40
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009902:	e0c2      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009904:	2380      	movs	r3, #128	@ 0x80
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990a:	e0be      	b.n	8009a8a <UART_SetConfig+0x7ae>
 800990c:	40011400 	.word	0x40011400
 8009910:	58024400 	.word	0x58024400
 8009914:	40007800 	.word	0x40007800
 8009918:	40007c00 	.word	0x40007c00
 800991c:	40011800 	.word	0x40011800
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4aad      	ldr	r2, [pc, #692]	@ (8009bdc <UART_SetConfig+0x900>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d176      	bne.n	8009a18 <UART_SetConfig+0x73c>
 800992a:	4bad      	ldr	r3, [pc, #692]	@ (8009be0 <UART_SetConfig+0x904>)
 800992c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800992e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009932:	2b28      	cmp	r3, #40	@ 0x28
 8009934:	d86c      	bhi.n	8009a10 <UART_SetConfig+0x734>
 8009936:	a201      	add	r2, pc, #4	@ (adr r2, 800993c <UART_SetConfig+0x660>)
 8009938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993c:	080099e1 	.word	0x080099e1
 8009940:	08009a11 	.word	0x08009a11
 8009944:	08009a11 	.word	0x08009a11
 8009948:	08009a11 	.word	0x08009a11
 800994c:	08009a11 	.word	0x08009a11
 8009950:	08009a11 	.word	0x08009a11
 8009954:	08009a11 	.word	0x08009a11
 8009958:	08009a11 	.word	0x08009a11
 800995c:	080099e9 	.word	0x080099e9
 8009960:	08009a11 	.word	0x08009a11
 8009964:	08009a11 	.word	0x08009a11
 8009968:	08009a11 	.word	0x08009a11
 800996c:	08009a11 	.word	0x08009a11
 8009970:	08009a11 	.word	0x08009a11
 8009974:	08009a11 	.word	0x08009a11
 8009978:	08009a11 	.word	0x08009a11
 800997c:	080099f1 	.word	0x080099f1
 8009980:	08009a11 	.word	0x08009a11
 8009984:	08009a11 	.word	0x08009a11
 8009988:	08009a11 	.word	0x08009a11
 800998c:	08009a11 	.word	0x08009a11
 8009990:	08009a11 	.word	0x08009a11
 8009994:	08009a11 	.word	0x08009a11
 8009998:	08009a11 	.word	0x08009a11
 800999c:	080099f9 	.word	0x080099f9
 80099a0:	08009a11 	.word	0x08009a11
 80099a4:	08009a11 	.word	0x08009a11
 80099a8:	08009a11 	.word	0x08009a11
 80099ac:	08009a11 	.word	0x08009a11
 80099b0:	08009a11 	.word	0x08009a11
 80099b4:	08009a11 	.word	0x08009a11
 80099b8:	08009a11 	.word	0x08009a11
 80099bc:	08009a01 	.word	0x08009a01
 80099c0:	08009a11 	.word	0x08009a11
 80099c4:	08009a11 	.word	0x08009a11
 80099c8:	08009a11 	.word	0x08009a11
 80099cc:	08009a11 	.word	0x08009a11
 80099d0:	08009a11 	.word	0x08009a11
 80099d4:	08009a11 	.word	0x08009a11
 80099d8:	08009a11 	.word	0x08009a11
 80099dc:	08009a09 	.word	0x08009a09
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e050      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80099e8:	2304      	movs	r3, #4
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e04c      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80099f0:	2308      	movs	r3, #8
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f6:	e048      	b.n	8009a8a <UART_SetConfig+0x7ae>
 80099f8:	2310      	movs	r3, #16
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fe:	e044      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a00:	2320      	movs	r3, #32
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a06:	e040      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a08:	2340      	movs	r3, #64	@ 0x40
 8009a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a0e:	e03c      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a10:	2380      	movs	r3, #128	@ 0x80
 8009a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a16:	e038      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a71      	ldr	r2, [pc, #452]	@ (8009be4 <UART_SetConfig+0x908>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d130      	bne.n	8009a84 <UART_SetConfig+0x7a8>
 8009a22:	4b6f      	ldr	r3, [pc, #444]	@ (8009be0 <UART_SetConfig+0x904>)
 8009a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b05      	cmp	r3, #5
 8009a2c:	d826      	bhi.n	8009a7c <UART_SetConfig+0x7a0>
 8009a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <UART_SetConfig+0x758>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a4d 	.word	0x08009a4d
 8009a38:	08009a55 	.word	0x08009a55
 8009a3c:	08009a5d 	.word	0x08009a5d
 8009a40:	08009a65 	.word	0x08009a65
 8009a44:	08009a6d 	.word	0x08009a6d
 8009a48:	08009a75 	.word	0x08009a75
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a52:	e01a      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5a:	e016      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a62:	e012      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	e00e      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a72:	e00a      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a74:	2340      	movs	r3, #64	@ 0x40
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7a:	e006      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a7c:	2380      	movs	r3, #128	@ 0x80
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a82:	e002      	b.n	8009a8a <UART_SetConfig+0x7ae>
 8009a84:	2380      	movs	r3, #128	@ 0x80
 8009a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a55      	ldr	r2, [pc, #340]	@ (8009be4 <UART_SetConfig+0x908>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	f040 80f8 	bne.w	8009c86 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	dc46      	bgt.n	8009b2c <UART_SetConfig+0x850>
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	db75      	blt.n	8009b8e <UART_SetConfig+0x8b2>
 8009aa2:	3b02      	subs	r3, #2
 8009aa4:	2b1e      	cmp	r3, #30
 8009aa6:	d872      	bhi.n	8009b8e <UART_SetConfig+0x8b2>
 8009aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab0 <UART_SetConfig+0x7d4>)
 8009aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aae:	bf00      	nop
 8009ab0:	08009b33 	.word	0x08009b33
 8009ab4:	08009b8f 	.word	0x08009b8f
 8009ab8:	08009b3b 	.word	0x08009b3b
 8009abc:	08009b8f 	.word	0x08009b8f
 8009ac0:	08009b8f 	.word	0x08009b8f
 8009ac4:	08009b8f 	.word	0x08009b8f
 8009ac8:	08009b4b 	.word	0x08009b4b
 8009acc:	08009b8f 	.word	0x08009b8f
 8009ad0:	08009b8f 	.word	0x08009b8f
 8009ad4:	08009b8f 	.word	0x08009b8f
 8009ad8:	08009b8f 	.word	0x08009b8f
 8009adc:	08009b8f 	.word	0x08009b8f
 8009ae0:	08009b8f 	.word	0x08009b8f
 8009ae4:	08009b8f 	.word	0x08009b8f
 8009ae8:	08009b5b 	.word	0x08009b5b
 8009aec:	08009b8f 	.word	0x08009b8f
 8009af0:	08009b8f 	.word	0x08009b8f
 8009af4:	08009b8f 	.word	0x08009b8f
 8009af8:	08009b8f 	.word	0x08009b8f
 8009afc:	08009b8f 	.word	0x08009b8f
 8009b00:	08009b8f 	.word	0x08009b8f
 8009b04:	08009b8f 	.word	0x08009b8f
 8009b08:	08009b8f 	.word	0x08009b8f
 8009b0c:	08009b8f 	.word	0x08009b8f
 8009b10:	08009b8f 	.word	0x08009b8f
 8009b14:	08009b8f 	.word	0x08009b8f
 8009b18:	08009b8f 	.word	0x08009b8f
 8009b1c:	08009b8f 	.word	0x08009b8f
 8009b20:	08009b8f 	.word	0x08009b8f
 8009b24:	08009b8f 	.word	0x08009b8f
 8009b28:	08009b81 	.word	0x08009b81
 8009b2c:	2b40      	cmp	r3, #64	@ 0x40
 8009b2e:	d02a      	beq.n	8009b86 <UART_SetConfig+0x8aa>
 8009b30:	e02d      	b.n	8009b8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b32:	f7fe f9c9 	bl	8007ec8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b38:	e02f      	b.n	8009b9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fe f9d8 	bl	8007ef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b48:	e027      	b.n	8009b9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b4a:	f107 0318 	add.w	r3, r7, #24
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe fb24 	bl	800819c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b58:	e01f      	b.n	8009b9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b5a:	4b21      	ldr	r3, [pc, #132]	@ (8009be0 <UART_SetConfig+0x904>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0320 	and.w	r3, r3, #32
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d009      	beq.n	8009b7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b66:	4b1e      	ldr	r3, [pc, #120]	@ (8009be0 <UART_SetConfig+0x904>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	08db      	lsrs	r3, r3, #3
 8009b6c:	f003 0303 	and.w	r3, r3, #3
 8009b70:	4a1d      	ldr	r2, [pc, #116]	@ (8009be8 <UART_SetConfig+0x90c>)
 8009b72:	fa22 f303 	lsr.w	r3, r2, r3
 8009b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b78:	e00f      	b.n	8009b9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8009be8 <UART_SetConfig+0x90c>)
 8009b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b7e:	e00c      	b.n	8009b9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b80:	4b1a      	ldr	r3, [pc, #104]	@ (8009bec <UART_SetConfig+0x910>)
 8009b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b84:	e009      	b.n	8009b9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b8c:	e005      	b.n	8009b9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 81ee 	beq.w	8009f7e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba6:	4a12      	ldr	r2, [pc, #72]	@ (8009bf0 <UART_SetConfig+0x914>)
 8009ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bac:	461a      	mov	r2, r3
 8009bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bb4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	4413      	add	r3, r2
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d305      	bcc.n	8009bd2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d910      	bls.n	8009bf4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bd8:	e1d1      	b.n	8009f7e <UART_SetConfig+0xca2>
 8009bda:	bf00      	nop
 8009bdc:	40011c00 	.word	0x40011c00
 8009be0:	58024400 	.word	0x58024400
 8009be4:	58000c00 	.word	0x58000c00
 8009be8:	03d09000 	.word	0x03d09000
 8009bec:	003d0900 	.word	0x003d0900
 8009bf0:	0801c488 	.word	0x0801c488
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	60bb      	str	r3, [r7, #8]
 8009bfa:	60fa      	str	r2, [r7, #12]
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c00:	4ac0      	ldr	r2, [pc, #768]	@ (8009f04 <UART_SetConfig+0xc28>)
 8009c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	2200      	movs	r2, #0
 8009c0a:	603b      	str	r3, [r7, #0]
 8009c0c:	607a      	str	r2, [r7, #4]
 8009c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c16:	f7f6 fd8f 	bl	8000738 <__aeabi_uldivmod>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4610      	mov	r0, r2
 8009c20:	4619      	mov	r1, r3
 8009c22:	f04f 0200 	mov.w	r2, #0
 8009c26:	f04f 0300 	mov.w	r3, #0
 8009c2a:	020b      	lsls	r3, r1, #8
 8009c2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c30:	0202      	lsls	r2, r0, #8
 8009c32:	6979      	ldr	r1, [r7, #20]
 8009c34:	6849      	ldr	r1, [r1, #4]
 8009c36:	0849      	lsrs	r1, r1, #1
 8009c38:	2000      	movs	r0, #0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	eb12 0804 	adds.w	r8, r2, r4
 8009c42:	eb43 0905 	adc.w	r9, r3, r5
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	469a      	mov	sl, r3
 8009c4e:	4693      	mov	fp, r2
 8009c50:	4652      	mov	r2, sl
 8009c52:	465b      	mov	r3, fp
 8009c54:	4640      	mov	r0, r8
 8009c56:	4649      	mov	r1, r9
 8009c58:	f7f6 fd6e 	bl	8000738 <__aeabi_uldivmod>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4613      	mov	r3, r2
 8009c62:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c6a:	d308      	bcc.n	8009c7e <UART_SetConfig+0x9a2>
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c72:	d204      	bcs.n	8009c7e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c7a:	60da      	str	r2, [r3, #12]
 8009c7c:	e17f      	b.n	8009f7e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c84:	e17b      	b.n	8009f7e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c8e:	f040 80bd 	bne.w	8009e0c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009c92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c96:	2b20      	cmp	r3, #32
 8009c98:	dc48      	bgt.n	8009d2c <UART_SetConfig+0xa50>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	db7b      	blt.n	8009d96 <UART_SetConfig+0xaba>
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	d879      	bhi.n	8009d96 <UART_SetConfig+0xaba>
 8009ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca8 <UART_SetConfig+0x9cc>)
 8009ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca8:	08009d33 	.word	0x08009d33
 8009cac:	08009d3b 	.word	0x08009d3b
 8009cb0:	08009d97 	.word	0x08009d97
 8009cb4:	08009d97 	.word	0x08009d97
 8009cb8:	08009d43 	.word	0x08009d43
 8009cbc:	08009d97 	.word	0x08009d97
 8009cc0:	08009d97 	.word	0x08009d97
 8009cc4:	08009d97 	.word	0x08009d97
 8009cc8:	08009d53 	.word	0x08009d53
 8009ccc:	08009d97 	.word	0x08009d97
 8009cd0:	08009d97 	.word	0x08009d97
 8009cd4:	08009d97 	.word	0x08009d97
 8009cd8:	08009d97 	.word	0x08009d97
 8009cdc:	08009d97 	.word	0x08009d97
 8009ce0:	08009d97 	.word	0x08009d97
 8009ce4:	08009d97 	.word	0x08009d97
 8009ce8:	08009d63 	.word	0x08009d63
 8009cec:	08009d97 	.word	0x08009d97
 8009cf0:	08009d97 	.word	0x08009d97
 8009cf4:	08009d97 	.word	0x08009d97
 8009cf8:	08009d97 	.word	0x08009d97
 8009cfc:	08009d97 	.word	0x08009d97
 8009d00:	08009d97 	.word	0x08009d97
 8009d04:	08009d97 	.word	0x08009d97
 8009d08:	08009d97 	.word	0x08009d97
 8009d0c:	08009d97 	.word	0x08009d97
 8009d10:	08009d97 	.word	0x08009d97
 8009d14:	08009d97 	.word	0x08009d97
 8009d18:	08009d97 	.word	0x08009d97
 8009d1c:	08009d97 	.word	0x08009d97
 8009d20:	08009d97 	.word	0x08009d97
 8009d24:	08009d97 	.word	0x08009d97
 8009d28:	08009d89 	.word	0x08009d89
 8009d2c:	2b40      	cmp	r3, #64	@ 0x40
 8009d2e:	d02e      	beq.n	8009d8e <UART_SetConfig+0xab2>
 8009d30:	e031      	b.n	8009d96 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d32:	f7fc febb 	bl	8006aac <HAL_RCC_GetPCLK1Freq>
 8009d36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d38:	e033      	b.n	8009da2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d3a:	f7fc fecd 	bl	8006ad8 <HAL_RCC_GetPCLK2Freq>
 8009d3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d40:	e02f      	b.n	8009da2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe f8d4 	bl	8007ef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d50:	e027      	b.n	8009da2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d52:	f107 0318 	add.w	r3, r7, #24
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fa20 	bl	800819c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d60:	e01f      	b.n	8009da2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d62:	4b69      	ldr	r3, [pc, #420]	@ (8009f08 <UART_SetConfig+0xc2c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0320 	and.w	r3, r3, #32
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d009      	beq.n	8009d82 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d6e:	4b66      	ldr	r3, [pc, #408]	@ (8009f08 <UART_SetConfig+0xc2c>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	08db      	lsrs	r3, r3, #3
 8009d74:	f003 0303 	and.w	r3, r3, #3
 8009d78:	4a64      	ldr	r2, [pc, #400]	@ (8009f0c <UART_SetConfig+0xc30>)
 8009d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d80:	e00f      	b.n	8009da2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009d82:	4b62      	ldr	r3, [pc, #392]	@ (8009f0c <UART_SetConfig+0xc30>)
 8009d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d86:	e00c      	b.n	8009da2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d88:	4b61      	ldr	r3, [pc, #388]	@ (8009f10 <UART_SetConfig+0xc34>)
 8009d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d8c:	e009      	b.n	8009da2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d94:	e005      	b.n	8009da2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009da0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 80ea 	beq.w	8009f7e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dae:	4a55      	ldr	r2, [pc, #340]	@ (8009f04 <UART_SetConfig+0xc28>)
 8009db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009db4:	461a      	mov	r2, r3
 8009db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dbc:	005a      	lsls	r2, r3, #1
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	085b      	lsrs	r3, r3, #1
 8009dc4:	441a      	add	r2, r3
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd2:	2b0f      	cmp	r3, #15
 8009dd4:	d916      	bls.n	8009e04 <UART_SetConfig+0xb28>
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ddc:	d212      	bcs.n	8009e04 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f023 030f 	bic.w	r3, r3, #15
 8009de6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dea:	085b      	lsrs	r3, r3, #1
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009df6:	4313      	orrs	r3, r2
 8009df8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009e00:	60da      	str	r2, [r3, #12]
 8009e02:	e0bc      	b.n	8009f7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e0a:	e0b8      	b.n	8009f7e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e10:	2b20      	cmp	r3, #32
 8009e12:	dc4b      	bgt.n	8009eac <UART_SetConfig+0xbd0>
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f2c0 8087 	blt.w	8009f28 <UART_SetConfig+0xc4c>
 8009e1a:	2b20      	cmp	r3, #32
 8009e1c:	f200 8084 	bhi.w	8009f28 <UART_SetConfig+0xc4c>
 8009e20:	a201      	add	r2, pc, #4	@ (adr r2, 8009e28 <UART_SetConfig+0xb4c>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009eb3 	.word	0x08009eb3
 8009e2c:	08009ebb 	.word	0x08009ebb
 8009e30:	08009f29 	.word	0x08009f29
 8009e34:	08009f29 	.word	0x08009f29
 8009e38:	08009ec3 	.word	0x08009ec3
 8009e3c:	08009f29 	.word	0x08009f29
 8009e40:	08009f29 	.word	0x08009f29
 8009e44:	08009f29 	.word	0x08009f29
 8009e48:	08009ed3 	.word	0x08009ed3
 8009e4c:	08009f29 	.word	0x08009f29
 8009e50:	08009f29 	.word	0x08009f29
 8009e54:	08009f29 	.word	0x08009f29
 8009e58:	08009f29 	.word	0x08009f29
 8009e5c:	08009f29 	.word	0x08009f29
 8009e60:	08009f29 	.word	0x08009f29
 8009e64:	08009f29 	.word	0x08009f29
 8009e68:	08009ee3 	.word	0x08009ee3
 8009e6c:	08009f29 	.word	0x08009f29
 8009e70:	08009f29 	.word	0x08009f29
 8009e74:	08009f29 	.word	0x08009f29
 8009e78:	08009f29 	.word	0x08009f29
 8009e7c:	08009f29 	.word	0x08009f29
 8009e80:	08009f29 	.word	0x08009f29
 8009e84:	08009f29 	.word	0x08009f29
 8009e88:	08009f29 	.word	0x08009f29
 8009e8c:	08009f29 	.word	0x08009f29
 8009e90:	08009f29 	.word	0x08009f29
 8009e94:	08009f29 	.word	0x08009f29
 8009e98:	08009f29 	.word	0x08009f29
 8009e9c:	08009f29 	.word	0x08009f29
 8009ea0:	08009f29 	.word	0x08009f29
 8009ea4:	08009f29 	.word	0x08009f29
 8009ea8:	08009f1b 	.word	0x08009f1b
 8009eac:	2b40      	cmp	r3, #64	@ 0x40
 8009eae:	d037      	beq.n	8009f20 <UART_SetConfig+0xc44>
 8009eb0:	e03a      	b.n	8009f28 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eb2:	f7fc fdfb 	bl	8006aac <HAL_RCC_GetPCLK1Freq>
 8009eb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009eb8:	e03c      	b.n	8009f34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eba:	f7fc fe0d 	bl	8006ad8 <HAL_RCC_GetPCLK2Freq>
 8009ebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ec0:	e038      	b.n	8009f34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe f814 	bl	8007ef4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ed0:	e030      	b.n	8009f34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed2:	f107 0318 	add.w	r3, r7, #24
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe f960 	bl	800819c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee0:	e028      	b.n	8009f34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ee2:	4b09      	ldr	r3, [pc, #36]	@ (8009f08 <UART_SetConfig+0xc2c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d012      	beq.n	8009f14 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009eee:	4b06      	ldr	r3, [pc, #24]	@ (8009f08 <UART_SetConfig+0xc2c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	08db      	lsrs	r3, r3, #3
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	4a04      	ldr	r2, [pc, #16]	@ (8009f0c <UART_SetConfig+0xc30>)
 8009efa:	fa22 f303 	lsr.w	r3, r2, r3
 8009efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f00:	e018      	b.n	8009f34 <UART_SetConfig+0xc58>
 8009f02:	bf00      	nop
 8009f04:	0801c488 	.word	0x0801c488
 8009f08:	58024400 	.word	0x58024400
 8009f0c:	03d09000 	.word	0x03d09000
 8009f10:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009f14:	4b24      	ldr	r3, [pc, #144]	@ (8009fa8 <UART_SetConfig+0xccc>)
 8009f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f18:	e00c      	b.n	8009f34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f1a:	4b24      	ldr	r3, [pc, #144]	@ (8009fac <UART_SetConfig+0xcd0>)
 8009f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f1e:	e009      	b.n	8009f34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f26:	e005      	b.n	8009f34 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f32:	bf00      	nop
    }

    if (pclk != 0U)
 8009f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d021      	beq.n	8009f7e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb0 <UART_SetConfig+0xcd4>)
 8009f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f44:	461a      	mov	r2, r3
 8009f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f48:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	085b      	lsrs	r3, r3, #1
 8009f52:	441a      	add	r2, r3
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f60:	2b0f      	cmp	r3, #15
 8009f62:	d909      	bls.n	8009f78 <UART_SetConfig+0xc9c>
 8009f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f6a:	d205      	bcs.n	8009f78 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	60da      	str	r2, [r3, #12]
 8009f76:	e002      	b.n	8009f7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2200      	movs	r2, #0
 8009f92:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	2200      	movs	r2, #0
 8009f98:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f9a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3748      	adds	r7, #72	@ 0x48
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fa8:	03d09000 	.word	0x03d09000
 8009fac:	003d0900 	.word	0x003d0900
 8009fb0:	0801c488 	.word	0x0801c488

08009fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc0:	f003 0308 	and.w	r3, r3, #8
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00a      	beq.n	8009fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00a      	beq.n	800a000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	430a      	orrs	r2, r1
 8009ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a004:	f003 0302 	and.w	r3, r3, #2
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00a      	beq.n	800a022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a026:	f003 0304 	and.w	r3, r3, #4
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00a      	beq.n	800a044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	430a      	orrs	r2, r1
 800a042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a048:	f003 0310 	and.w	r3, r3, #16
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00a      	beq.n	800a066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06a:	f003 0320 	and.w	r3, r3, #32
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00a      	beq.n	800a088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a090:	2b00      	cmp	r3, #0
 800a092:	d01a      	beq.n	800a0ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0b2:	d10a      	bne.n	800a0ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	430a      	orrs	r2, r1
 800a0c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00a      	beq.n	800a0ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	605a      	str	r2, [r3, #4]
  }
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b098      	sub	sp, #96	@ 0x60
 800a0fc:	af02      	add	r7, sp, #8
 800a0fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a108:	f7f8 faf2 	bl	80026f0 <HAL_GetTick>
 800a10c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0308 	and.w	r3, r3, #8
 800a118:	2b08      	cmp	r3, #8
 800a11a:	d12f      	bne.n	800a17c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a11c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a124:	2200      	movs	r2, #0
 800a126:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f88e 	bl	800a24c <UART_WaitOnFlagUntilTimeout>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d022      	beq.n	800a17c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13e:	e853 3f00 	ldrex	r3, [r3]
 800a142:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a146:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a14a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a154:	647b      	str	r3, [r7, #68]	@ 0x44
 800a156:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a158:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a15a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a15c:	e841 2300 	strex	r3, r2, [r1]
 800a160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e6      	bne.n	800a136 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2220      	movs	r2, #32
 800a16c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e063      	b.n	800a244 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	2b04      	cmp	r3, #4
 800a188:	d149      	bne.n	800a21e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a18a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a192:	2200      	movs	r2, #0
 800a194:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f857 	bl	800a24c <UART_WaitOnFlagUntilTimeout>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d03c      	beq.n	800a21e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e6      	bne.n	800a1a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	3308      	adds	r3, #8
 800a1dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	e853 3f00 	ldrex	r3, [r3]
 800a1e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f023 0301 	bic.w	r3, r3, #1
 800a1ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3308      	adds	r3, #8
 800a1f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1f6:	61fa      	str	r2, [r7, #28]
 800a1f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fa:	69b9      	ldr	r1, [r7, #24]
 800a1fc:	69fa      	ldr	r2, [r7, #28]
 800a1fe:	e841 2300 	strex	r3, r2, [r1]
 800a202:	617b      	str	r3, [r7, #20]
   return(result);
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1e5      	bne.n	800a1d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2220      	movs	r2, #32
 800a20e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e012      	b.n	800a244 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2220      	movs	r2, #32
 800a222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2220      	movs	r2, #32
 800a22a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3758      	adds	r7, #88	@ 0x58
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	603b      	str	r3, [r7, #0]
 800a258:	4613      	mov	r3, r2
 800a25a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a25c:	e04f      	b.n	800a2fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a264:	d04b      	beq.n	800a2fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a266:	f7f8 fa43 	bl	80026f0 <HAL_GetTick>
 800a26a:	4602      	mov	r2, r0
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	69ba      	ldr	r2, [r7, #24]
 800a272:	429a      	cmp	r2, r3
 800a274:	d302      	bcc.n	800a27c <UART_WaitOnFlagUntilTimeout+0x30>
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e04e      	b.n	800a31e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0304 	and.w	r3, r3, #4
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d037      	beq.n	800a2fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b80      	cmp	r3, #128	@ 0x80
 800a292:	d034      	beq.n	800a2fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b40      	cmp	r3, #64	@ 0x40
 800a298:	d031      	beq.n	800a2fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	69db      	ldr	r3, [r3, #28]
 800a2a0:	f003 0308 	and.w	r3, r3, #8
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	d110      	bne.n	800a2ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2208      	movs	r2, #8
 800a2ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 f839 	bl	800a328 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2208      	movs	r2, #8
 800a2ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e029      	b.n	800a31e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2d8:	d111      	bne.n	800a2fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a2e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 f81f 	bl	800a328 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2220      	movs	r2, #32
 800a2ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e00f      	b.n	800a31e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	69da      	ldr	r2, [r3, #28]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	4013      	ands	r3, r2
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	bf0c      	ite	eq
 800a30e:	2301      	moveq	r3, #1
 800a310:	2300      	movne	r3, #0
 800a312:	b2db      	uxtb	r3, r3
 800a314:	461a      	mov	r2, r3
 800a316:	79fb      	ldrb	r3, [r7, #7]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d0a0      	beq.n	800a25e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a328:	b480      	push	{r7}
 800a32a:	b095      	sub	sp, #84	@ 0x54
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a338:	e853 3f00 	ldrex	r3, [r3]
 800a33c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a34e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a350:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a352:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a354:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a356:	e841 2300 	strex	r3, r2, [r1]
 800a35a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1e6      	bne.n	800a330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3308      	adds	r3, #8
 800a368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	e853 3f00 	ldrex	r3, [r3]
 800a370:	61fb      	str	r3, [r7, #28]
   return(result);
 800a372:	69fa      	ldr	r2, [r7, #28]
 800a374:	4b1e      	ldr	r3, [pc, #120]	@ (800a3f0 <UART_EndRxTransfer+0xc8>)
 800a376:	4013      	ands	r3, r2
 800a378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3308      	adds	r3, #8
 800a380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a384:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a38a:	e841 2300 	strex	r3, r2, [r1]
 800a38e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1e5      	bne.n	800a362 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d118      	bne.n	800a3d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	e853 3f00 	ldrex	r3, [r3]
 800a3aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f023 0310 	bic.w	r3, r3, #16
 800a3b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3bc:	61bb      	str	r3, [r7, #24]
 800a3be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6979      	ldr	r1, [r7, #20]
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e6      	bne.n	800a39e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a3e4:	bf00      	nop
 800a3e6:	3754      	adds	r7, #84	@ 0x54
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	effffffe 	.word	0xeffffffe

0800a3f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a402:	2b01      	cmp	r3, #1
 800a404:	d101      	bne.n	800a40a <HAL_UARTEx_DisableFifoMode+0x16>
 800a406:	2302      	movs	r3, #2
 800a408:	e027      	b.n	800a45a <HAL_UARTEx_DisableFifoMode+0x66>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2224      	movs	r2, #36	@ 0x24
 800a416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 0201 	bic.w	r2, r2, #1
 800a430:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a438:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b084      	sub	sp, #16
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a476:	2b01      	cmp	r3, #1
 800a478:	d101      	bne.n	800a47e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a47a:	2302      	movs	r3, #2
 800a47c:	e02d      	b.n	800a4da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2224      	movs	r2, #36	@ 0x24
 800a48a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 0201 	bic.w	r2, r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f850 	bl	800a560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d101      	bne.n	800a4fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	e02d      	b.n	800a556 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2224      	movs	r2, #36	@ 0x24
 800a506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 0201 	bic.w	r2, r2, #1
 800a520:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f812 	bl	800a560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2220      	movs	r2, #32
 800a548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d108      	bne.n	800a582 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a580:	e031      	b.n	800a5e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a582:	2310      	movs	r3, #16
 800a584:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a586:	2310      	movs	r3, #16
 800a588:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	0e5b      	lsrs	r3, r3, #25
 800a592:	b2db      	uxtb	r3, r3
 800a594:	f003 0307 	and.w	r3, r3, #7
 800a598:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	0f5b      	lsrs	r3, r3, #29
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f003 0307 	and.w	r3, r3, #7
 800a5a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5aa:	7bbb      	ldrb	r3, [r7, #14]
 800a5ac:	7b3a      	ldrb	r2, [r7, #12]
 800a5ae:	4911      	ldr	r1, [pc, #68]	@ (800a5f4 <UARTEx_SetNbDataToProcess+0x94>)
 800a5b0:	5c8a      	ldrb	r2, [r1, r2]
 800a5b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5b6:	7b3a      	ldrb	r2, [r7, #12]
 800a5b8:	490f      	ldr	r1, [pc, #60]	@ (800a5f8 <UARTEx_SetNbDataToProcess+0x98>)
 800a5ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ca:	7b7a      	ldrb	r2, [r7, #13]
 800a5cc:	4909      	ldr	r1, [pc, #36]	@ (800a5f4 <UARTEx_SetNbDataToProcess+0x94>)
 800a5ce:	5c8a      	ldrb	r2, [r1, r2]
 800a5d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5d4:	7b7a      	ldrb	r2, [r7, #13]
 800a5d6:	4908      	ldr	r1, [pc, #32]	@ (800a5f8 <UARTEx_SetNbDataToProcess+0x98>)
 800a5d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5da:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a5e6:	bf00      	nop
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	0801c4a0 	.word	0x0801c4a0
 800a5f8:	0801c4a8 	.word	0x0801c4a8

0800a5fc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a602:	4b87      	ldr	r3, [pc, #540]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a604:	22c0      	movs	r2, #192	@ 0xc0
 800a606:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a608:	4b85      	ldr	r3, [pc, #532]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a60a:	22a8      	movs	r2, #168	@ 0xa8
 800a60c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a60e:	4b84      	ldr	r3, [pc, #528]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a610:	2201      	movs	r2, #1
 800a612:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800a614:	4b82      	ldr	r3, [pc, #520]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a616:	220a      	movs	r2, #10
 800a618:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a61a:	4b82      	ldr	r3, [pc, #520]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a61c:	22ff      	movs	r2, #255	@ 0xff
 800a61e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a620:	4b80      	ldr	r3, [pc, #512]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a622:	22ff      	movs	r2, #255	@ 0xff
 800a624:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a626:	4b7f      	ldr	r3, [pc, #508]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a628:	22ff      	movs	r2, #255	@ 0xff
 800a62a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a62c:	4b7d      	ldr	r3, [pc, #500]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a62e:	2200      	movs	r2, #0
 800a630:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a632:	4b7d      	ldr	r3, [pc, #500]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a634:	22c0      	movs	r2, #192	@ 0xc0
 800a636:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a638:	4b7b      	ldr	r3, [pc, #492]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a63a:	22a8      	movs	r2, #168	@ 0xa8
 800a63c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800a63e:	4b7a      	ldr	r3, [pc, #488]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a640:	2264      	movs	r2, #100	@ 0x64
 800a642:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 800a644:	4b78      	ldr	r3, [pc, #480]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a646:	2264      	movs	r2, #100	@ 0x64
 800a648:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800a64a:	f000 fdb6 	bl	800b1ba <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a64e:	4b74      	ldr	r3, [pc, #464]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	061a      	lsls	r2, r3, #24
 800a654:	4b72      	ldr	r3, [pc, #456]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a656:	785b      	ldrb	r3, [r3, #1]
 800a658:	041b      	lsls	r3, r3, #16
 800a65a:	431a      	orrs	r2, r3
 800a65c:	4b70      	ldr	r3, [pc, #448]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a65e:	789b      	ldrb	r3, [r3, #2]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	4313      	orrs	r3, r2
 800a664:	4a6e      	ldr	r2, [pc, #440]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a666:	78d2      	ldrb	r2, [r2, #3]
 800a668:	4313      	orrs	r3, r2
 800a66a:	061a      	lsls	r2, r3, #24
 800a66c:	4b6c      	ldr	r3, [pc, #432]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	0619      	lsls	r1, r3, #24
 800a672:	4b6b      	ldr	r3, [pc, #428]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	041b      	lsls	r3, r3, #16
 800a678:	4319      	orrs	r1, r3
 800a67a:	4b69      	ldr	r3, [pc, #420]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a67c:	789b      	ldrb	r3, [r3, #2]
 800a67e:	021b      	lsls	r3, r3, #8
 800a680:	430b      	orrs	r3, r1
 800a682:	4967      	ldr	r1, [pc, #412]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a684:	78c9      	ldrb	r1, [r1, #3]
 800a686:	430b      	orrs	r3, r1
 800a688:	021b      	lsls	r3, r3, #8
 800a68a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a68e:	431a      	orrs	r2, r3
 800a690:	4b63      	ldr	r3, [pc, #396]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	0619      	lsls	r1, r3, #24
 800a696:	4b62      	ldr	r3, [pc, #392]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a698:	785b      	ldrb	r3, [r3, #1]
 800a69a:	041b      	lsls	r3, r3, #16
 800a69c:	4319      	orrs	r1, r3
 800a69e:	4b60      	ldr	r3, [pc, #384]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a6a0:	789b      	ldrb	r3, [r3, #2]
 800a6a2:	021b      	lsls	r3, r3, #8
 800a6a4:	430b      	orrs	r3, r1
 800a6a6:	495e      	ldr	r1, [pc, #376]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a6a8:	78c9      	ldrb	r1, [r1, #3]
 800a6aa:	430b      	orrs	r3, r1
 800a6ac:	0a1b      	lsrs	r3, r3, #8
 800a6ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	4b5a      	ldr	r3, [pc, #360]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	0619      	lsls	r1, r3, #24
 800a6ba:	4b59      	ldr	r3, [pc, #356]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a6bc:	785b      	ldrb	r3, [r3, #1]
 800a6be:	041b      	lsls	r3, r3, #16
 800a6c0:	4319      	orrs	r1, r3
 800a6c2:	4b57      	ldr	r3, [pc, #348]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a6c4:	789b      	ldrb	r3, [r3, #2]
 800a6c6:	021b      	lsls	r3, r3, #8
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	4955      	ldr	r1, [pc, #340]	@ (800a820 <MX_LWIP_Init+0x224>)
 800a6cc:	78c9      	ldrb	r1, [r1, #3]
 800a6ce:	430b      	orrs	r3, r1
 800a6d0:	0e1b      	lsrs	r3, r3, #24
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	4a55      	ldr	r2, [pc, #340]	@ (800a82c <MX_LWIP_Init+0x230>)
 800a6d6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a6d8:	4b52      	ldr	r3, [pc, #328]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	061a      	lsls	r2, r3, #24
 800a6de:	4b51      	ldr	r3, [pc, #324]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a6e0:	785b      	ldrb	r3, [r3, #1]
 800a6e2:	041b      	lsls	r3, r3, #16
 800a6e4:	431a      	orrs	r2, r3
 800a6e6:	4b4f      	ldr	r3, [pc, #316]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a6e8:	789b      	ldrb	r3, [r3, #2]
 800a6ea:	021b      	lsls	r3, r3, #8
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	4a4d      	ldr	r2, [pc, #308]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a6f0:	78d2      	ldrb	r2, [r2, #3]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	061a      	lsls	r2, r3, #24
 800a6f6:	4b4b      	ldr	r3, [pc, #300]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	0619      	lsls	r1, r3, #24
 800a6fc:	4b49      	ldr	r3, [pc, #292]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a6fe:	785b      	ldrb	r3, [r3, #1]
 800a700:	041b      	lsls	r3, r3, #16
 800a702:	4319      	orrs	r1, r3
 800a704:	4b47      	ldr	r3, [pc, #284]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a706:	789b      	ldrb	r3, [r3, #2]
 800a708:	021b      	lsls	r3, r3, #8
 800a70a:	430b      	orrs	r3, r1
 800a70c:	4945      	ldr	r1, [pc, #276]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a70e:	78c9      	ldrb	r1, [r1, #3]
 800a710:	430b      	orrs	r3, r1
 800a712:	021b      	lsls	r3, r3, #8
 800a714:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a718:	431a      	orrs	r2, r3
 800a71a:	4b42      	ldr	r3, [pc, #264]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	0619      	lsls	r1, r3, #24
 800a720:	4b40      	ldr	r3, [pc, #256]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a722:	785b      	ldrb	r3, [r3, #1]
 800a724:	041b      	lsls	r3, r3, #16
 800a726:	4319      	orrs	r1, r3
 800a728:	4b3e      	ldr	r3, [pc, #248]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a72a:	789b      	ldrb	r3, [r3, #2]
 800a72c:	021b      	lsls	r3, r3, #8
 800a72e:	430b      	orrs	r3, r1
 800a730:	493c      	ldr	r1, [pc, #240]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a732:	78c9      	ldrb	r1, [r1, #3]
 800a734:	430b      	orrs	r3, r1
 800a736:	0a1b      	lsrs	r3, r3, #8
 800a738:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a73c:	431a      	orrs	r2, r3
 800a73e:	4b39      	ldr	r3, [pc, #228]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	0619      	lsls	r1, r3, #24
 800a744:	4b37      	ldr	r3, [pc, #220]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a746:	785b      	ldrb	r3, [r3, #1]
 800a748:	041b      	lsls	r3, r3, #16
 800a74a:	4319      	orrs	r1, r3
 800a74c:	4b35      	ldr	r3, [pc, #212]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a74e:	789b      	ldrb	r3, [r3, #2]
 800a750:	021b      	lsls	r3, r3, #8
 800a752:	430b      	orrs	r3, r1
 800a754:	4933      	ldr	r1, [pc, #204]	@ (800a824 <MX_LWIP_Init+0x228>)
 800a756:	78c9      	ldrb	r1, [r1, #3]
 800a758:	430b      	orrs	r3, r1
 800a75a:	0e1b      	lsrs	r3, r3, #24
 800a75c:	4313      	orrs	r3, r2
 800a75e:	4a34      	ldr	r2, [pc, #208]	@ (800a830 <MX_LWIP_Init+0x234>)
 800a760:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a762:	4b31      	ldr	r3, [pc, #196]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	061a      	lsls	r2, r3, #24
 800a768:	4b2f      	ldr	r3, [pc, #188]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a76a:	785b      	ldrb	r3, [r3, #1]
 800a76c:	041b      	lsls	r3, r3, #16
 800a76e:	431a      	orrs	r2, r3
 800a770:	4b2d      	ldr	r3, [pc, #180]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a772:	789b      	ldrb	r3, [r3, #2]
 800a774:	021b      	lsls	r3, r3, #8
 800a776:	4313      	orrs	r3, r2
 800a778:	4a2b      	ldr	r2, [pc, #172]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a77a:	78d2      	ldrb	r2, [r2, #3]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	061a      	lsls	r2, r3, #24
 800a780:	4b29      	ldr	r3, [pc, #164]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	0619      	lsls	r1, r3, #24
 800a786:	4b28      	ldr	r3, [pc, #160]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a788:	785b      	ldrb	r3, [r3, #1]
 800a78a:	041b      	lsls	r3, r3, #16
 800a78c:	4319      	orrs	r1, r3
 800a78e:	4b26      	ldr	r3, [pc, #152]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a790:	789b      	ldrb	r3, [r3, #2]
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	430b      	orrs	r3, r1
 800a796:	4924      	ldr	r1, [pc, #144]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a798:	78c9      	ldrb	r1, [r1, #3]
 800a79a:	430b      	orrs	r3, r1
 800a79c:	021b      	lsls	r3, r3, #8
 800a79e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	4b20      	ldr	r3, [pc, #128]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	0619      	lsls	r1, r3, #24
 800a7aa:	4b1f      	ldr	r3, [pc, #124]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a7ac:	785b      	ldrb	r3, [r3, #1]
 800a7ae:	041b      	lsls	r3, r3, #16
 800a7b0:	4319      	orrs	r1, r3
 800a7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a7b4:	789b      	ldrb	r3, [r3, #2]
 800a7b6:	021b      	lsls	r3, r3, #8
 800a7b8:	430b      	orrs	r3, r1
 800a7ba:	491b      	ldr	r1, [pc, #108]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a7bc:	78c9      	ldrb	r1, [r1, #3]
 800a7be:	430b      	orrs	r3, r1
 800a7c0:	0a1b      	lsrs	r3, r3, #8
 800a7c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a7c6:	431a      	orrs	r2, r3
 800a7c8:	4b17      	ldr	r3, [pc, #92]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	0619      	lsls	r1, r3, #24
 800a7ce:	4b16      	ldr	r3, [pc, #88]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a7d0:	785b      	ldrb	r3, [r3, #1]
 800a7d2:	041b      	lsls	r3, r3, #16
 800a7d4:	4319      	orrs	r1, r3
 800a7d6:	4b14      	ldr	r3, [pc, #80]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a7d8:	789b      	ldrb	r3, [r3, #2]
 800a7da:	021b      	lsls	r3, r3, #8
 800a7dc:	430b      	orrs	r3, r1
 800a7de:	4912      	ldr	r1, [pc, #72]	@ (800a828 <MX_LWIP_Init+0x22c>)
 800a7e0:	78c9      	ldrb	r1, [r1, #3]
 800a7e2:	430b      	orrs	r3, r1
 800a7e4:	0e1b      	lsrs	r3, r3, #24
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	4a12      	ldr	r2, [pc, #72]	@ (800a834 <MX_LWIP_Init+0x238>)
 800a7ea:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a7ec:	4b12      	ldr	r3, [pc, #72]	@ (800a838 <MX_LWIP_Init+0x23c>)
 800a7ee:	9302      	str	r3, [sp, #8]
 800a7f0:	4b12      	ldr	r3, [pc, #72]	@ (800a83c <MX_LWIP_Init+0x240>)
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a834 <MX_LWIP_Init+0x238>)
 800a7fa:	4a0d      	ldr	r2, [pc, #52]	@ (800a830 <MX_LWIP_Init+0x234>)
 800a7fc:	490b      	ldr	r1, [pc, #44]	@ (800a82c <MX_LWIP_Init+0x230>)
 800a7fe:	4810      	ldr	r0, [pc, #64]	@ (800a840 <MX_LWIP_Init+0x244>)
 800a800:	f001 f9c2 	bl	800bb88 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a804:	480e      	ldr	r0, [pc, #56]	@ (800a840 <MX_LWIP_Init+0x244>)
 800a806:	f001 fb71 	bl	800beec <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800a80a:	480d      	ldr	r0, [pc, #52]	@ (800a840 <MX_LWIP_Init+0x244>)
 800a80c:	f001 fb7e 	bl	800bf0c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a810:	490c      	ldr	r1, [pc, #48]	@ (800a844 <MX_LWIP_Init+0x248>)
 800a812:	480b      	ldr	r0, [pc, #44]	@ (800a840 <MX_LWIP_Init+0x244>)
 800a814:	f001 fc7c 	bl	800c110 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a818:	bf00      	nop
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	2400524c 	.word	0x2400524c
 800a824:	24005250 	.word	0x24005250
 800a828:	24005254 	.word	0x24005254
 800a82c:	24005240 	.word	0x24005240
 800a830:	24005244 	.word	0x24005244
 800a834:	24005248 	.word	0x24005248
 800a838:	08015135 	.word	0x08015135
 800a83c:	0800ab15 	.word	0x0800ab15
 800a840:	2400520c 	.word	0x2400520c
 800a844:	0800a849 	.word	0x0800a849

0800a848 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a868:	4b44      	ldr	r3, [pc, #272]	@ (800a97c <low_level_init+0x120>)
 800a86a:	4a45      	ldr	r2, [pc, #276]	@ (800a980 <low_level_init+0x124>)
 800a86c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a86e:	2300      	movs	r3, #0
 800a870:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a872:	2380      	movs	r3, #128	@ 0x80
 800a874:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a876:	23e1      	movs	r3, #225	@ 0xe1
 800a878:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a87a:	2300      	movs	r3, #0
 800a87c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a87e:	2300      	movs	r3, #0
 800a880:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a882:	2300      	movs	r3, #0
 800a884:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a886:	4a3d      	ldr	r2, [pc, #244]	@ (800a97c <low_level_init+0x120>)
 800a888:	f107 0308 	add.w	r3, r7, #8
 800a88c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a88e:	4b3b      	ldr	r3, [pc, #236]	@ (800a97c <low_level_init+0x120>)
 800a890:	2201      	movs	r2, #1
 800a892:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a894:	4b39      	ldr	r3, [pc, #228]	@ (800a97c <low_level_init+0x120>)
 800a896:	4a3b      	ldr	r2, [pc, #236]	@ (800a984 <low_level_init+0x128>)
 800a898:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a89a:	4b38      	ldr	r3, [pc, #224]	@ (800a97c <low_level_init+0x120>)
 800a89c:	4a3a      	ldr	r2, [pc, #232]	@ (800a988 <low_level_init+0x12c>)
 800a89e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a8a0:	4b36      	ldr	r3, [pc, #216]	@ (800a97c <low_level_init+0x120>)
 800a8a2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a8a6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a8a8:	4834      	ldr	r0, [pc, #208]	@ (800a97c <low_level_init+0x120>)
 800a8aa:	f7f8 f899 	bl	80029e0 <HAL_ETH_Init>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a8b2:	2238      	movs	r2, #56	@ 0x38
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4835      	ldr	r0, [pc, #212]	@ (800a98c <low_level_init+0x130>)
 800a8b8:	f00b fe5c 	bl	8016574 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a8bc:	4b33      	ldr	r3, [pc, #204]	@ (800a98c <low_level_init+0x130>)
 800a8be:	2221      	movs	r2, #33	@ 0x21
 800a8c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a8c2:	4b32      	ldr	r3, [pc, #200]	@ (800a98c <low_level_init+0x130>)
 800a8c4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a8c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a8ca:	4b30      	ldr	r3, [pc, #192]	@ (800a98c <low_level_init+0x130>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a8d0:	482f      	ldr	r0, [pc, #188]	@ (800a990 <low_level_init+0x134>)
 800a8d2:	f001 f821 	bl	800b918 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2206      	movs	r2, #6
 800a8da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a8de:	4b27      	ldr	r3, [pc, #156]	@ (800a97c <low_level_init+0x120>)
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	781a      	ldrb	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a8ea:	4b24      	ldr	r3, [pc, #144]	@ (800a97c <low_level_init+0x120>)
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	785a      	ldrb	r2, [r3, #1]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a8f6:	4b21      	ldr	r3, [pc, #132]	@ (800a97c <low_level_init+0x120>)
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	789a      	ldrb	r2, [r3, #2]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a902:	4b1e      	ldr	r3, [pc, #120]	@ (800a97c <low_level_init+0x120>)
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	78da      	ldrb	r2, [r3, #3]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a90e:	4b1b      	ldr	r3, [pc, #108]	@ (800a97c <low_level_init+0x120>)
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	791a      	ldrb	r2, [r3, #4]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a91a:	4b18      	ldr	r3, [pc, #96]	@ (800a97c <low_level_init+0x120>)
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	795a      	ldrb	r2, [r3, #5]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a92c:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a934:	f043 030a 	orr.w	r3, r3, #10
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a940:	4914      	ldr	r1, [pc, #80]	@ (800a994 <low_level_init+0x138>)
 800a942:	4815      	ldr	r0, [pc, #84]	@ (800a998 <low_level_init+0x13c>)
 800a944:	f7f7 fd7d 	bl	8002442 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800a948:	4813      	ldr	r0, [pc, #76]	@ (800a998 <low_level_init+0x13c>)
 800a94a:	f7f7 fdac 	bl	80024a6 <LAN8742_Init>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d006      	beq.n	800a962 <low_level_init+0x106>
  {
    netif_set_link_down(netif);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f001 fbab 	bl	800c0b0 <netif_set_link_down>
    netif_set_down(netif);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f001 fb42 	bl	800bfe4 <netif_set_down>
 800a960:	e008      	b.n	800a974 <low_level_init+0x118>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d103      	bne.n	800a970 <low_level_init+0x114>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fa3f 	bl	800adec <ethernet_link_check_state>
 800a96e:	e001      	b.n	800a974 <low_level_init+0x118>
  }
  else
  {
    Error_Handler();
 800a970:	f7f6 ffa3 	bl	80018ba <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	24005260 	.word	0x24005260
 800a980:	40028000 	.word	0x40028000
 800a984:	30000200 	.word	0x30000200
 800a988:	30000000 	.word	0x30000000
 800a98c:	24005310 	.word	0x24005310
 800a990:	0801c4b0 	.word	0x0801c4b0
 800a994:	24000010 	.word	0x24000010
 800a998:	24005348 	.word	0x24005348

0800a99c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b092      	sub	sp, #72	@ 0x48
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a9b4:	f107 030c 	add.w	r3, r7, #12
 800a9b8:	2230      	movs	r2, #48	@ 0x30
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f00b fdd9 	bl	8016574 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a9c2:	f107 030c 	add.w	r3, r7, #12
 800a9c6:	2230      	movs	r2, #48	@ 0x30
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f00b fdd2 	bl	8016574 <memset>

  for(q = p; q != NULL; q = q->next)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9d4:	e045      	b.n	800aa62 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a9d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	d902      	bls.n	800a9e2 <low_level_output+0x46>
      return ERR_IF;
 800a9dc:	f06f 030b 	mvn.w	r3, #11
 800a9e0:	e055      	b.n	800aa8e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800a9e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9e4:	6859      	ldr	r1, [r3, #4]
 800a9e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	3348      	adds	r3, #72	@ 0x48
 800a9f2:	443b      	add	r3, r7
 800a9f4:	3b3c      	subs	r3, #60	@ 0x3c
 800a9f6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a9f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9fa:	895b      	ldrh	r3, [r3, #10]
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa00:	4613      	mov	r3, r2
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	4413      	add	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	3348      	adds	r3, #72	@ 0x48
 800aa0a:	443b      	add	r3, r7
 800aa0c:	3b38      	subs	r3, #56	@ 0x38
 800aa0e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800aa10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d011      	beq.n	800aa3a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800aa16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa18:	1e5a      	subs	r2, r3, #1
 800aa1a:	f107 000c 	add.w	r0, r7, #12
 800aa1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa20:	460b      	mov	r3, r1
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	440b      	add	r3, r1
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	18c1      	adds	r1, r0, r3
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	4413      	add	r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	3348      	adds	r3, #72	@ 0x48
 800aa34:	443b      	add	r3, r7
 800aa36:	3b34      	subs	r3, #52	@ 0x34
 800aa38:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800aa3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d109      	bne.n	800aa56 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800aa42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa44:	4613      	mov	r3, r2
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	4413      	add	r3, r2
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	3348      	adds	r3, #72	@ 0x48
 800aa4e:	443b      	add	r3, r7
 800aa50:	3b34      	subs	r3, #52	@ 0x34
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
    }

    i++;
 800aa56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa58:	3301      	adds	r3, #1
 800aa5a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800aa5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1b6      	bne.n	800a9d6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	891b      	ldrh	r3, [r3, #8]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa98 <low_level_output+0xfc>)
 800aa70:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800aa72:	4a09      	ldr	r2, [pc, #36]	@ (800aa98 <low_level_output+0xfc>)
 800aa74:	f107 030c 	add.w	r3, r7, #12
 800aa78:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800aa7a:	4a07      	ldr	r2, [pc, #28]	@ (800aa98 <low_level_output+0xfc>)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800aa80:	2214      	movs	r2, #20
 800aa82:	4905      	ldr	r1, [pc, #20]	@ (800aa98 <low_level_output+0xfc>)
 800aa84:	4805      	ldr	r0, [pc, #20]	@ (800aa9c <low_level_output+0x100>)
 800aa86:	f7f8 f95b 	bl	8002d40 <HAL_ETH_Transmit>

  return errval;
 800aa8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3748      	adds	r7, #72	@ 0x48
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	24005310 	.word	0x24005310
 800aa9c:	24005260 	.word	0x24005260

0800aaa0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800aaac:	4b07      	ldr	r3, [pc, #28]	@ (800aacc <low_level_input+0x2c>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d105      	bne.n	800aac0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800aab4:	f107 030c 	add.w	r3, r7, #12
 800aab8:	4619      	mov	r1, r3
 800aaba:	4805      	ldr	r0, [pc, #20]	@ (800aad0 <low_level_input+0x30>)
 800aabc:	f7f8 f9d7 	bl	8002e6e <HAL_ETH_ReadData>
  }

  return p;
 800aac0:	68fb      	ldr	r3, [r7, #12]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	2400525c 	.word	0x2400525c
 800aad0:	24005260 	.word	0x24005260

0800aad4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800aadc:	2300      	movs	r3, #0
 800aade:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff ffdd 	bl	800aaa0 <low_level_input>
 800aae6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00a      	beq.n	800ab04 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	6879      	ldr	r1, [r7, #4]
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	4798      	blx	r3
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f001 fe86 	bl	800c810 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1ea      	bne.n	800aae0 <ethernetif_input+0xc>
}
 800ab0a:	bf00      	nop
 800ab0c:	bf00      	nop
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <ethernetif_init+0x1c>
 800ab22:	4b0e      	ldr	r3, [pc, #56]	@ (800ab5c <ethernetif_init+0x48>)
 800ab24:	f240 1289 	movw	r2, #393	@ 0x189
 800ab28:	490d      	ldr	r1, [pc, #52]	@ (800ab60 <ethernetif_init+0x4c>)
 800ab2a:	480e      	ldr	r0, [pc, #56]	@ (800ab64 <ethernetif_init+0x50>)
 800ab2c:	f00b fb8e 	bl	801624c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2273      	movs	r2, #115	@ 0x73
 800ab34:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2274      	movs	r2, #116	@ 0x74
 800ab3c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a09      	ldr	r2, [pc, #36]	@ (800ab68 <ethernetif_init+0x54>)
 800ab44:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a08      	ldr	r2, [pc, #32]	@ (800ab6c <ethernetif_init+0x58>)
 800ab4a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7ff fe85 	bl	800a85c <low_level_init>

  return ERR_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	08019a88 	.word	0x08019a88
 800ab60:	08019aa4 	.word	0x08019aa4
 800ab64:	08019ab4 	.word	0x08019ab4
 800ab68:	080135a1 	.word	0x080135a1
 800ab6c:	0800a99d 	.word	0x0800a99d

0800ab70 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ab7c:	68f9      	ldr	r1, [r7, #12]
 800ab7e:	4807      	ldr	r0, [pc, #28]	@ (800ab9c <pbuf_free_custom+0x2c>)
 800ab80:	f000 ffac 	bl	800badc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ab84:	4b06      	ldr	r3, [pc, #24]	@ (800aba0 <pbuf_free_custom+0x30>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d102      	bne.n	800ab92 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ab8c:	4b04      	ldr	r3, [pc, #16]	@ (800aba0 <pbuf_free_custom+0x30>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]
  }
}
 800ab92:	bf00      	nop
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	0801c4b0 	.word	0x0801c4b0
 800aba0:	2400525c 	.word	0x2400525c

0800aba4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aba8:	f7f7 fda2 	bl	80026f0 <HAL_GetTick>
 800abac:	4603      	mov	r3, r0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	bd80      	pop	{r7, pc}
	...

0800abb4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b08e      	sub	sp, #56	@ 0x38
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abc0:	2200      	movs	r2, #0
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	605a      	str	r2, [r3, #4]
 800abc6:	609a      	str	r2, [r3, #8]
 800abc8:	60da      	str	r2, [r3, #12]
 800abca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a59      	ldr	r2, [pc, #356]	@ (800ad38 <HAL_ETH_MspInit+0x184>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	f040 80ab 	bne.w	800ad2e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800abd8:	4b58      	ldr	r3, [pc, #352]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800abda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800abde:	4a57      	ldr	r2, [pc, #348]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800abe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abe4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800abe8:	4b54      	ldr	r3, [pc, #336]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800abea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800abee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abf2:	623b      	str	r3, [r7, #32]
 800abf4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800abf6:	4b51      	ldr	r3, [pc, #324]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800abf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800abfc:	4a4f      	ldr	r2, [pc, #316]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800abfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ac06:	4b4d      	ldr	r3, [pc, #308]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ac0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac10:	61fb      	str	r3, [r7, #28]
 800ac12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800ac14:	4b49      	ldr	r3, [pc, #292]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ac1a:	4a48      	ldr	r2, [pc, #288]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ac24:	4b45      	ldr	r3, [pc, #276]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ac2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac2e:	61bb      	str	r3, [r7, #24]
 800ac30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac32:	4b42      	ldr	r3, [pc, #264]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac38:	4a40      	ldr	r2, [pc, #256]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac3a:	f043 0304 	orr.w	r3, r3, #4
 800ac3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ac42:	4b3e      	ldr	r3, [pc, #248]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac48:	f003 0304 	and.w	r3, r3, #4
 800ac4c:	617b      	str	r3, [r7, #20]
 800ac4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac50:	4b3a      	ldr	r3, [pc, #232]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac56:	4a39      	ldr	r2, [pc, #228]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac58:	f043 0301 	orr.w	r3, r3, #1
 800ac5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ac60:	4b36      	ldr	r3, [pc, #216]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	613b      	str	r3, [r7, #16]
 800ac6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac6e:	4b33      	ldr	r3, [pc, #204]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac74:	4a31      	ldr	r2, [pc, #196]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac76:	f043 0302 	orr.w	r3, r3, #2
 800ac7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ac7e:	4b2f      	ldr	r3, [pc, #188]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	60fb      	str	r3, [r7, #12]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ac8c:	4b2b      	ldr	r3, [pc, #172]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac92:	4a2a      	ldr	r2, [pc, #168]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ac9c:	4b27      	ldr	r3, [pc, #156]	@ (800ad3c <HAL_ETH_MspInit+0x188>)
 800ac9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca6:	60bb      	str	r3, [r7, #8]
 800aca8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG12     ------> ETH_TXD1
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800acaa:	2332      	movs	r3, #50	@ 0x32
 800acac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acae:	2302      	movs	r3, #2
 800acb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acb2:	2300      	movs	r3, #0
 800acb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acb6:	2300      	movs	r3, #0
 800acb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800acba:	230b      	movs	r3, #11
 800acbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800acbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acc2:	4619      	mov	r1, r3
 800acc4:	481e      	ldr	r0, [pc, #120]	@ (800ad40 <HAL_ETH_MspInit+0x18c>)
 800acc6:	f7fa fc63 	bl	8005590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800acca:	2386      	movs	r3, #134	@ 0x86
 800accc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acce:	2302      	movs	r3, #2
 800acd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acd6:	2300      	movs	r3, #0
 800acd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800acda:	230b      	movs	r3, #11
 800acdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ace2:	4619      	mov	r1, r3
 800ace4:	4817      	ldr	r0, [pc, #92]	@ (800ad44 <HAL_ETH_MspInit+0x190>)
 800ace6:	f7fa fc53 	bl	8005590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800acea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800acee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acf0:	2302      	movs	r3, #2
 800acf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acf4:	2300      	movs	r3, #0
 800acf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acf8:	2300      	movs	r3, #0
 800acfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800acfc:	230b      	movs	r3, #11
 800acfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad04:	4619      	mov	r1, r3
 800ad06:	4810      	ldr	r0, [pc, #64]	@ (800ad48 <HAL_ETH_MspInit+0x194>)
 800ad08:	f7fa fc42 	bl	8005590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800ad0c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800ad10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad12:	2302      	movs	r3, #2
 800ad14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ad1e:	230b      	movs	r3, #11
 800ad20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ad22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad26:	4619      	mov	r1, r3
 800ad28:	4808      	ldr	r0, [pc, #32]	@ (800ad4c <HAL_ETH_MspInit+0x198>)
 800ad2a:	f7fa fc31 	bl	8005590 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ad2e:	bf00      	nop
 800ad30:	3738      	adds	r7, #56	@ 0x38
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	40028000 	.word	0x40028000
 800ad3c:	58024400 	.word	0x58024400
 800ad40:	58020800 	.word	0x58020800
 800ad44:	58020000 	.word	0x58020000
 800ad48:	58020400 	.word	0x58020400
 800ad4c:	58021800 	.word	0x58021800

0800ad50 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ad54:	4802      	ldr	r0, [pc, #8]	@ (800ad60 <ETH_PHY_IO_Init+0x10>)
 800ad56:	f7f8 fc57 	bl	8003608 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	24005260 	.word	0x24005260

0800ad64 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0
  return 0;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	68f9      	ldr	r1, [r7, #12]
 800ad86:	4807      	ldr	r0, [pc, #28]	@ (800ada4 <ETH_PHY_IO_ReadReg+0x30>)
 800ad88:	f7f8 f9a7 	bl	80030da <HAL_ETH_ReadPHYRegister>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ad92:	f04f 33ff 	mov.w	r3, #4294967295
 800ad96:	e000      	b.n	800ad9a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	24005260 	.word	0x24005260

0800ada8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	68f9      	ldr	r1, [r7, #12]
 800adba:	4807      	ldr	r0, [pc, #28]	@ (800add8 <ETH_PHY_IO_WriteReg+0x30>)
 800adbc:	f7f8 f9e2 	bl	8003184 <HAL_ETH_WritePHYRegister>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d002      	beq.n	800adcc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800adc6:	f04f 33ff 	mov.w	r3, #4294967295
 800adca:	e000      	b.n	800adce <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	24005260 	.word	0x24005260

0800addc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ade0:	f7f7 fc86 	bl	80026f0 <HAL_GetTick>
 800ade4:	4603      	mov	r3, r0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b0a0      	sub	sp, #128	@ 0x80
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800adf4:	f107 030c 	add.w	r3, r7, #12
 800adf8:	2264      	movs	r2, #100	@ 0x64
 800adfa:	2100      	movs	r1, #0
 800adfc:	4618      	mov	r0, r3
 800adfe:	f00b fbb9 	bl	8016574 <memset>
  int32_t PHYLinkState = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800ae06:	2300      	movs	r3, #0
 800ae08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae0e:	2300      	movs	r3, #0
 800ae10:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ae12:	483a      	ldr	r0, [pc, #232]	@ (800aefc <ethernet_link_check_state+0x110>)
 800ae14:	f7f7 fb94 	bl	8002540 <LAN8742_GetLinkState>
 800ae18:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae20:	089b      	lsrs	r3, r3, #2
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00c      	beq.n	800ae46 <ethernet_link_check_state+0x5a>
 800ae2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	dc09      	bgt.n	800ae46 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800ae32:	4833      	ldr	r0, [pc, #204]	@ (800af00 <ethernet_link_check_state+0x114>)
 800ae34:	f7f7 ff34 	bl	8002ca0 <HAL_ETH_Stop>
    netif_set_down(netif);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f001 f8d3 	bl	800bfe4 <netif_set_down>
    netif_set_link_down(netif);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f001 f936 	bl	800c0b0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800ae44:	e055      	b.n	800aef2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d14e      	bne.n	800aef2 <ethernet_link_check_state+0x106>
 800ae54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	dd4b      	ble.n	800aef2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800ae5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae5c:	3b02      	subs	r3, #2
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d82a      	bhi.n	800aeb8 <ethernet_link_check_state+0xcc>
 800ae62:	a201      	add	r2, pc, #4	@ (adr r2, 800ae68 <ethernet_link_check_state+0x7c>)
 800ae64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae68:	0800ae79 	.word	0x0800ae79
 800ae6c:	0800ae8b 	.word	0x0800ae8b
 800ae70:	0800ae9b 	.word	0x0800ae9b
 800ae74:	0800aeab 	.word	0x0800aeab
      duplex = ETH_FULLDUPLEX_MODE;
 800ae78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ae7c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ae7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ae82:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ae84:	2301      	movs	r3, #1
 800ae86:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ae88:	e017      	b.n	800aeba <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ae8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ae92:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ae94:	2301      	movs	r3, #1
 800ae96:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ae98:	e00f      	b.n	800aeba <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800ae9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ae9e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800aea0:	2300      	movs	r3, #0
 800aea2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800aea4:	2301      	movs	r3, #1
 800aea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800aea8:	e007      	b.n	800aeba <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800aeb6:	e000      	b.n	800aeba <ethernet_link_check_state+0xce>
      break;
 800aeb8:	bf00      	nop
    if(linkchanged)
 800aeba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d018      	beq.n	800aef2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800aec0:	f107 030c 	add.w	r3, r7, #12
 800aec4:	4619      	mov	r1, r3
 800aec6:	480e      	ldr	r0, [pc, #56]	@ (800af00 <ethernet_link_check_state+0x114>)
 800aec8:	f7f8 f9b0 	bl	800322c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800aecc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aece:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800aed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aed2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aed4:	f107 030c 	add.w	r3, r7, #12
 800aed8:	4619      	mov	r1, r3
 800aeda:	4809      	ldr	r0, [pc, #36]	@ (800af00 <ethernet_link_check_state+0x114>)
 800aedc:	f7f8 fb7a 	bl	80035d4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800aee0:	4807      	ldr	r0, [pc, #28]	@ (800af00 <ethernet_link_check_state+0x114>)
 800aee2:	f7f7 fe7b 	bl	8002bdc <HAL_ETH_Start>
      netif_set_up(netif);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f001 f810 	bl	800bf0c <netif_set_up>
      netif_set_link_up(netif);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f001 f8ab 	bl	800c048 <netif_set_link_up>
}
 800aef2:	bf00      	nop
 800aef4:	3780      	adds	r7, #128	@ 0x80
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	24005348 	.word	0x24005348
 800af00:	24005260 	.word	0x24005260

0800af04 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af02      	add	r7, sp, #8
 800af0a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800af0c:	4812      	ldr	r0, [pc, #72]	@ (800af58 <HAL_ETH_RxAllocateCallback+0x54>)
 800af0e:	f000 fd77 	bl	800ba00 <memp_malloc_pool>
 800af12:	60f8      	str	r0, [r7, #12]
  if (p)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d014      	beq.n	800af44 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f103 0220 	add.w	r2, r3, #32
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	4a0d      	ldr	r2, [pc, #52]	@ (800af5c <HAL_ETH_RxAllocateCallback+0x58>)
 800af28:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800af32:	9201      	str	r2, [sp, #4]
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2241      	movs	r2, #65	@ 0x41
 800af3a:	2100      	movs	r1, #0
 800af3c:	2000      	movs	r0, #0
 800af3e:	f001 faad 	bl	800c49c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800af42:	e005      	b.n	800af50 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800af44:	4b06      	ldr	r3, [pc, #24]	@ (800af60 <HAL_ETH_RxAllocateCallback+0x5c>)
 800af46:	2201      	movs	r2, #1
 800af48:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	601a      	str	r2, [r3, #0]
}
 800af50:	bf00      	nop
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	0801c4b0 	.word	0x0801c4b0
 800af5c:	0800ab71 	.word	0x0800ab71
 800af60:	2400525c 	.word	0x2400525c

0800af64 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800af64:	b480      	push	{r7}
 800af66:	b089      	sub	sp, #36	@ 0x24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3b20      	subs	r3, #32
 800af82:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	2200      	movs	r2, #0
 800af8e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	887a      	ldrh	r2, [r7, #2]
 800af94:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d103      	bne.n	800afa6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	69fa      	ldr	r2, [r7, #28]
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	e003      	b.n	800afae <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	69fa      	ldr	r2, [r7, #28]
 800afac:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	69fa      	ldr	r2, [r7, #28]
 800afb2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	61fb      	str	r3, [r7, #28]
 800afba:	e009      	b.n	800afd0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	891a      	ldrh	r2, [r3, #8]
 800afc0:	887b      	ldrh	r3, [r7, #2]
 800afc2:	4413      	add	r3, r2
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	61fb      	str	r3, [r7, #28]
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1f2      	bne.n	800afbc <HAL_ETH_RxLinkCallback+0x58>

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  //SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 800afd6:	bf00      	nop
 800afd8:	bf00      	nop
 800afda:	3724      	adds	r7, #36	@ 0x24
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	4603      	mov	r3, r0
 800afec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800afee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aff2:	021b      	lsls	r3, r3, #8
 800aff4:	b21a      	sxth	r2, r3
 800aff6:	88fb      	ldrh	r3, [r7, #6]
 800aff8:	0a1b      	lsrs	r3, r3, #8
 800affa:	b29b      	uxth	r3, r3
 800affc:	b21b      	sxth	r3, r3
 800affe:	4313      	orrs	r3, r2
 800b000:	b21b      	sxth	r3, r3
 800b002:	b29b      	uxth	r3, r3
}
 800b004:	4618      	mov	r0, r3
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	061a      	lsls	r2, r3, #24
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	021b      	lsls	r3, r3, #8
 800b020:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b024:	431a      	orrs	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	0a1b      	lsrs	r3, r3, #8
 800b02a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b02e:	431a      	orrs	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	0e1b      	lsrs	r3, r3, #24
 800b034:	4313      	orrs	r3, r2
}
 800b036:	4618      	mov	r0, r3
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b042:	b480      	push	{r7}
 800b044:	b089      	sub	sp, #36	@ 0x24
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b050:	2300      	movs	r3, #0
 800b052:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00d      	beq.n	800b082 <lwip_standard_chksum+0x40>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	dd0a      	ble.n	800b082 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b06c:	69fa      	ldr	r2, [r7, #28]
 800b06e:	1c53      	adds	r3, r2, #1
 800b070:	61fb      	str	r3, [r7, #28]
 800b072:	f107 030e 	add.w	r3, r7, #14
 800b076:	3301      	adds	r3, #1
 800b078:	7812      	ldrb	r2, [r2, #0]
 800b07a:	701a      	strb	r2, [r3, #0]
    len--;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	3b01      	subs	r3, #1
 800b080:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b086:	e00a      	b.n	800b09e <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	1c9a      	adds	r2, r3, #2
 800b08c:	61ba      	str	r2, [r7, #24]
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	461a      	mov	r2, r3
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	4413      	add	r3, r2
 800b096:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	3b02      	subs	r3, #2
 800b09c:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	dcf1      	bgt.n	800b088 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dd04      	ble.n	800b0b4 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b0aa:	f107 030e 	add.w	r3, r7, #14
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	7812      	ldrb	r2, [r2, #0]
 800b0b2:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b0b4:	89fb      	ldrh	r3, [r7, #14]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	0c1a      	lsrs	r2, r3, #16
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	4413      	add	r3, r2
 800b0c8:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	0c1a      	lsrs	r2, r3, #16
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	4413      	add	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d007      	beq.n	800b0ec <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	021b      	lsls	r3, r3, #8
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	0a1b      	lsrs	r3, r3, #8
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	b29b      	uxth	r3, r3
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3724      	adds	r7, #36	@ 0x24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b108:	887b      	ldrh	r3, [r7, #2]
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff ff98 	bl	800b042 <lwip_standard_chksum>
 800b112:	4603      	mov	r3, r0
 800b114:	43db      	mvns	r3, r3
 800b116:	b29b      	uxth	r3, r3
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	613b      	str	r3, [r7, #16]
 800b134:	e02b      	b.n	800b18e <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	895b      	ldrh	r3, [r3, #10]
 800b13e:	4619      	mov	r1, r3
 800b140:	4610      	mov	r0, r2
 800b142:	f7ff ff7e 	bl	800b042 <lwip_standard_chksum>
 800b146:	4603      	mov	r3, r0
 800b148:	461a      	mov	r2, r3
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	4413      	add	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	0c1a      	lsrs	r2, r3, #16
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	b29b      	uxth	r3, r3
 800b158:	4413      	add	r3, r2
 800b15a:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	895b      	ldrh	r3, [r3, #10]
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	b29b      	uxth	r3, r3
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00e      	beq.n	800b188 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	bf0c      	ite	eq
 800b170:	2301      	moveq	r3, #1
 800b172:	2300      	movne	r3, #0
 800b174:	b2db      	uxtb	r3, r3
 800b176:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	021b      	lsls	r3, r3, #8
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	0a1b      	lsrs	r3, r3, #8
 800b182:	b2db      	uxtb	r3, r3
 800b184:	4313      	orrs	r3, r2
 800b186:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	613b      	str	r3, [r7, #16]
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1d0      	bne.n	800b136 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d007      	beq.n	800b1aa <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	021b      	lsls	r3, r3, #8
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	0a1b      	lsrs	r3, r3, #8
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	43db      	mvns	r3, r3
 800b1b0:	b29b      	uxth	r3, r3
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b082      	sub	sp, #8
 800b1be:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800b1c4:	f000 f8d4 	bl	800b370 <mem_init>
  memp_init();
 800b1c8:	f000 fbd6 	bl	800b978 <memp_init>
  pbuf_init();
  netif_init();
 800b1cc:	f000 fcd4 	bl	800bb78 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b1d0:	f007 f8f0 	bl	80123b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b1d4:	f001 fe4c 	bl	800ce70 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b1d8:	f007 f862 	bl	80122a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b1dc:	bf00      	nop
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b1ee:	4b05      	ldr	r3, [pc, #20]	@ (800b204 <ptr_to_mem+0x20>)
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	88fb      	ldrh	r3, [r7, #6]
 800b1f4:	4413      	add	r3, r2
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	24005380 	.word	0x24005380

0800b208 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b210:	4b05      	ldr	r3, [pc, #20]	@ (800b228 <mem_to_ptr+0x20>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	b29b      	uxth	r3, r3
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	370c      	adds	r7, #12
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	24005380 	.word	0x24005380

0800b22c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b22c:	b590      	push	{r4, r7, lr}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b234:	4b45      	ldr	r3, [pc, #276]	@ (800b34c <plug_holes+0x120>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d206      	bcs.n	800b24c <plug_holes+0x20>
 800b23e:	4b44      	ldr	r3, [pc, #272]	@ (800b350 <plug_holes+0x124>)
 800b240:	f240 12df 	movw	r2, #479	@ 0x1df
 800b244:	4943      	ldr	r1, [pc, #268]	@ (800b354 <plug_holes+0x128>)
 800b246:	4844      	ldr	r0, [pc, #272]	@ (800b358 <plug_holes+0x12c>)
 800b248:	f00b f800 	bl	801624c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b24c:	4b43      	ldr	r3, [pc, #268]	@ (800b35c <plug_holes+0x130>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	429a      	cmp	r2, r3
 800b254:	d306      	bcc.n	800b264 <plug_holes+0x38>
 800b256:	4b3e      	ldr	r3, [pc, #248]	@ (800b350 <plug_holes+0x124>)
 800b258:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b25c:	4940      	ldr	r1, [pc, #256]	@ (800b360 <plug_holes+0x134>)
 800b25e:	483e      	ldr	r0, [pc, #248]	@ (800b358 <plug_holes+0x12c>)
 800b260:	f00a fff4 	bl	801624c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	791b      	ldrb	r3, [r3, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d006      	beq.n	800b27a <plug_holes+0x4e>
 800b26c:	4b38      	ldr	r3, [pc, #224]	@ (800b350 <plug_holes+0x124>)
 800b26e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b272:	493c      	ldr	r1, [pc, #240]	@ (800b364 <plug_holes+0x138>)
 800b274:	4838      	ldr	r0, [pc, #224]	@ (800b358 <plug_holes+0x12c>)
 800b276:	f00a ffe9 	bl	801624c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	881b      	ldrh	r3, [r3, #0]
 800b27e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b282:	d906      	bls.n	800b292 <plug_holes+0x66>
 800b284:	4b32      	ldr	r3, [pc, #200]	@ (800b350 <plug_holes+0x124>)
 800b286:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b28a:	4937      	ldr	r1, [pc, #220]	@ (800b368 <plug_holes+0x13c>)
 800b28c:	4832      	ldr	r0, [pc, #200]	@ (800b358 <plug_holes+0x12c>)
 800b28e:	f00a ffdd 	bl	801624c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	4618      	mov	r0, r3
 800b298:	f7ff ffa4 	bl	800b1e4 <ptr_to_mem>
 800b29c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d024      	beq.n	800b2f0 <plug_holes+0xc4>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	791b      	ldrb	r3, [r3, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d120      	bne.n	800b2f0 <plug_holes+0xc4>
 800b2ae:	4b2b      	ldr	r3, [pc, #172]	@ (800b35c <plug_holes+0x130>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d01b      	beq.n	800b2f0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b2b8:	4b2c      	ldr	r3, [pc, #176]	@ (800b36c <plug_holes+0x140>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d102      	bne.n	800b2c8 <plug_holes+0x9c>
      lfree = mem;
 800b2c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b36c <plug_holes+0x140>)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	881a      	ldrh	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b2d8:	d00a      	beq.n	800b2f0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7ff ff80 	bl	800b1e4 <ptr_to_mem>
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff ff8e 	bl	800b208 <mem_to_ptr>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	885b      	ldrh	r3, [r3, #2]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff ff75 	bl	800b1e4 <ptr_to_mem>
 800b2fa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	429a      	cmp	r2, r3
 800b302:	d01f      	beq.n	800b344 <plug_holes+0x118>
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	791b      	ldrb	r3, [r3, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d11b      	bne.n	800b344 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b30c:	4b17      	ldr	r3, [pc, #92]	@ (800b36c <plug_holes+0x140>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	429a      	cmp	r2, r3
 800b314:	d102      	bne.n	800b31c <plug_holes+0xf0>
      lfree = pmem;
 800b316:	4a15      	ldr	r2, [pc, #84]	@ (800b36c <plug_holes+0x140>)
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	881a      	ldrh	r2, [r3, #0]
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	881b      	ldrh	r3, [r3, #0]
 800b328:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b32c:	d00a      	beq.n	800b344 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff ff56 	bl	800b1e4 <ptr_to_mem>
 800b338:	4604      	mov	r4, r0
 800b33a:	68b8      	ldr	r0, [r7, #8]
 800b33c:	f7ff ff64 	bl	800b208 <mem_to_ptr>
 800b340:	4603      	mov	r3, r0
 800b342:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b344:	bf00      	nop
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd90      	pop	{r4, r7, pc}
 800b34c:	24005380 	.word	0x24005380
 800b350:	08019adc 	.word	0x08019adc
 800b354:	08019b0c 	.word	0x08019b0c
 800b358:	08019b24 	.word	0x08019b24
 800b35c:	24005384 	.word	0x24005384
 800b360:	08019b4c 	.word	0x08019b4c
 800b364:	08019b68 	.word	0x08019b68
 800b368:	08019b84 	.word	0x08019b84
 800b36c:	24005388 	.word	0x24005388

0800b370 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b376:	4b16      	ldr	r3, [pc, #88]	@ (800b3d0 <mem_init+0x60>)
 800b378:	4a16      	ldr	r2, [pc, #88]	@ (800b3d4 <mem_init+0x64>)
 800b37a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b37c:	4b14      	ldr	r3, [pc, #80]	@ (800b3d0 <mem_init+0x60>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b388:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b396:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800b39a:	f7ff ff23 	bl	800b1e4 <ptr_to_mem>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	4a0d      	ldr	r2, [pc, #52]	@ (800b3d8 <mem_init+0x68>)
 800b3a2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b3d8 <mem_init+0x68>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b3d8 <mem_init+0x68>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b3b4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b3b6:	4b08      	ldr	r3, [pc, #32]	@ (800b3d8 <mem_init+0x68>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b3be:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b3c0:	4b03      	ldr	r3, [pc, #12]	@ (800b3d0 <mem_init+0x60>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a05      	ldr	r2, [pc, #20]	@ (800b3dc <mem_init+0x6c>)
 800b3c6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800b3c8:	bf00      	nop
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	24005380 	.word	0x24005380
 800b3d4:	30004000 	.word	0x30004000
 800b3d8:	24005384 	.word	0x24005384
 800b3dc:	24005388 	.word	0x24005388

0800b3e0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff ff0d 	bl	800b208 <mem_to_ptr>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	881b      	ldrh	r3, [r3, #0]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff fef4 	bl	800b1e4 <ptr_to_mem>
 800b3fc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	885b      	ldrh	r3, [r3, #2]
 800b402:	4618      	mov	r0, r3
 800b404:	f7ff feee 	bl	800b1e4 <ptr_to_mem>
 800b408:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b412:	d818      	bhi.n	800b446 <mem_link_valid+0x66>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	885b      	ldrh	r3, [r3, #2]
 800b418:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b41c:	d813      	bhi.n	800b446 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b422:	8afa      	ldrh	r2, [r7, #22]
 800b424:	429a      	cmp	r2, r3
 800b426:	d004      	beq.n	800b432 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	881b      	ldrh	r3, [r3, #0]
 800b42c:	8afa      	ldrh	r2, [r7, #22]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d109      	bne.n	800b446 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b432:	4b08      	ldr	r3, [pc, #32]	@ (800b454 <mem_link_valid+0x74>)
 800b434:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d006      	beq.n	800b44a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	885b      	ldrh	r3, [r3, #2]
 800b440:	8afa      	ldrh	r2, [r7, #22]
 800b442:	429a      	cmp	r2, r3
 800b444:	d001      	beq.n	800b44a <mem_link_valid+0x6a>
    return 0;
 800b446:	2300      	movs	r3, #0
 800b448:	e000      	b.n	800b44c <mem_link_valid+0x6c>
  }
  return 1;
 800b44a:	2301      	movs	r3, #1
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3718      	adds	r7, #24
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	24005384 	.word	0x24005384

0800b458 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d04c      	beq.n	800b500 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f003 0303 	and.w	r3, r3, #3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d007      	beq.n	800b480 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b470:	4b25      	ldr	r3, [pc, #148]	@ (800b508 <mem_free+0xb0>)
 800b472:	f240 2273 	movw	r2, #627	@ 0x273
 800b476:	4925      	ldr	r1, [pc, #148]	@ (800b50c <mem_free+0xb4>)
 800b478:	4825      	ldr	r0, [pc, #148]	@ (800b510 <mem_free+0xb8>)
 800b47a:	f00a fee7 	bl	801624c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b47e:	e040      	b.n	800b502 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3b08      	subs	r3, #8
 800b484:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b486:	4b23      	ldr	r3, [pc, #140]	@ (800b514 <mem_free+0xbc>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d306      	bcc.n	800b49e <mem_free+0x46>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f103 020c 	add.w	r2, r3, #12
 800b496:	4b20      	ldr	r3, [pc, #128]	@ (800b518 <mem_free+0xc0>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d907      	bls.n	800b4ae <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b49e:	4b1a      	ldr	r3, [pc, #104]	@ (800b508 <mem_free+0xb0>)
 800b4a0:	f240 227f 	movw	r2, #639	@ 0x27f
 800b4a4:	491d      	ldr	r1, [pc, #116]	@ (800b51c <mem_free+0xc4>)
 800b4a6:	481a      	ldr	r0, [pc, #104]	@ (800b510 <mem_free+0xb8>)
 800b4a8:	f00a fed0 	bl	801624c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b4ac:	e029      	b.n	800b502 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	791b      	ldrb	r3, [r3, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d107      	bne.n	800b4c6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b4b6:	4b14      	ldr	r3, [pc, #80]	@ (800b508 <mem_free+0xb0>)
 800b4b8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b4bc:	4918      	ldr	r1, [pc, #96]	@ (800b520 <mem_free+0xc8>)
 800b4be:	4814      	ldr	r0, [pc, #80]	@ (800b510 <mem_free+0xb8>)
 800b4c0:	f00a fec4 	bl	801624c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b4c4:	e01d      	b.n	800b502 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f7ff ff8a 	bl	800b3e0 <mem_link_valid>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d107      	bne.n	800b4e2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b508 <mem_free+0xb0>)
 800b4d4:	f240 2295 	movw	r2, #661	@ 0x295
 800b4d8:	4912      	ldr	r1, [pc, #72]	@ (800b524 <mem_free+0xcc>)
 800b4da:	480d      	ldr	r0, [pc, #52]	@ (800b510 <mem_free+0xb8>)
 800b4dc:	f00a feb6 	bl	801624c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b4e0:	e00f      	b.n	800b502 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b4e8:	4b0f      	ldr	r3, [pc, #60]	@ (800b528 <mem_free+0xd0>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d202      	bcs.n	800b4f8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b4f2:	4a0d      	ldr	r2, [pc, #52]	@ (800b528 <mem_free+0xd0>)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f7ff fe97 	bl	800b22c <plug_holes>
 800b4fe:	e000      	b.n	800b502 <mem_free+0xaa>
    return;
 800b500:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	08019adc 	.word	0x08019adc
 800b50c:	08019bb0 	.word	0x08019bb0
 800b510:	08019b24 	.word	0x08019b24
 800b514:	24005380 	.word	0x24005380
 800b518:	24005384 	.word	0x24005384
 800b51c:	08019bd4 	.word	0x08019bd4
 800b520:	08019bf0 	.word	0x08019bf0
 800b524:	08019c18 	.word	0x08019c18
 800b528:	24005388 	.word	0x24005388

0800b52c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b088      	sub	sp, #32
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b538:	887b      	ldrh	r3, [r7, #2]
 800b53a:	3303      	adds	r3, #3
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f023 0303 	bic.w	r3, r3, #3
 800b542:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b544:	8bfb      	ldrh	r3, [r7, #30]
 800b546:	2b0b      	cmp	r3, #11
 800b548:	d801      	bhi.n	800b54e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b54a:	230c      	movs	r3, #12
 800b54c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b54e:	8bfb      	ldrh	r3, [r7, #30]
 800b550:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b554:	d803      	bhi.n	800b55e <mem_trim+0x32>
 800b556:	8bfa      	ldrh	r2, [r7, #30]
 800b558:	887b      	ldrh	r3, [r7, #2]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d201      	bcs.n	800b562 <mem_trim+0x36>
    return NULL;
 800b55e:	2300      	movs	r3, #0
 800b560:	e0cc      	b.n	800b6fc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b562:	4b68      	ldr	r3, [pc, #416]	@ (800b704 <mem_trim+0x1d8>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d304      	bcc.n	800b576 <mem_trim+0x4a>
 800b56c:	4b66      	ldr	r3, [pc, #408]	@ (800b708 <mem_trim+0x1dc>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	429a      	cmp	r2, r3
 800b574:	d306      	bcc.n	800b584 <mem_trim+0x58>
 800b576:	4b65      	ldr	r3, [pc, #404]	@ (800b70c <mem_trim+0x1e0>)
 800b578:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b57c:	4964      	ldr	r1, [pc, #400]	@ (800b710 <mem_trim+0x1e4>)
 800b57e:	4865      	ldr	r0, [pc, #404]	@ (800b714 <mem_trim+0x1e8>)
 800b580:	f00a fe64 	bl	801624c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b584:	4b5f      	ldr	r3, [pc, #380]	@ (800b704 <mem_trim+0x1d8>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d304      	bcc.n	800b598 <mem_trim+0x6c>
 800b58e:	4b5e      	ldr	r3, [pc, #376]	@ (800b708 <mem_trim+0x1dc>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	429a      	cmp	r2, r3
 800b596:	d301      	bcc.n	800b59c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	e0af      	b.n	800b6fc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3b08      	subs	r3, #8
 800b5a0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b5a2:	69b8      	ldr	r0, [r7, #24]
 800b5a4:	f7ff fe30 	bl	800b208 <mem_to_ptr>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	881a      	ldrh	r2, [r3, #0]
 800b5b0:	8afb      	ldrh	r3, [r7, #22]
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	3b08      	subs	r3, #8
 800b5b8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b5ba:	8bfa      	ldrh	r2, [r7, #30]
 800b5bc:	8abb      	ldrh	r3, [r7, #20]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d906      	bls.n	800b5d0 <mem_trim+0xa4>
 800b5c2:	4b52      	ldr	r3, [pc, #328]	@ (800b70c <mem_trim+0x1e0>)
 800b5c4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b5c8:	4953      	ldr	r1, [pc, #332]	@ (800b718 <mem_trim+0x1ec>)
 800b5ca:	4852      	ldr	r0, [pc, #328]	@ (800b714 <mem_trim+0x1e8>)
 800b5cc:	f00a fe3e 	bl	801624c <iprintf>
  if (newsize > size) {
 800b5d0:	8bfa      	ldrh	r2, [r7, #30]
 800b5d2:	8abb      	ldrh	r3, [r7, #20]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d901      	bls.n	800b5dc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e08f      	b.n	800b6fc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b5dc:	8bfa      	ldrh	r2, [r7, #30]
 800b5de:	8abb      	ldrh	r3, [r7, #20]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d101      	bne.n	800b5e8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	e089      	b.n	800b6fc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff fdf9 	bl	800b1e4 <ptr_to_mem>
 800b5f2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	791b      	ldrb	r3, [r3, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d13f      	bne.n	800b67c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	881b      	ldrh	r3, [r3, #0]
 800b600:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b604:	d106      	bne.n	800b614 <mem_trim+0xe8>
 800b606:	4b41      	ldr	r3, [pc, #260]	@ (800b70c <mem_trim+0x1e0>)
 800b608:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b60c:	4943      	ldr	r1, [pc, #268]	@ (800b71c <mem_trim+0x1f0>)
 800b60e:	4841      	ldr	r0, [pc, #260]	@ (800b714 <mem_trim+0x1e8>)
 800b610:	f00a fe1c 	bl	801624c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b61a:	8afa      	ldrh	r2, [r7, #22]
 800b61c:	8bfb      	ldrh	r3, [r7, #30]
 800b61e:	4413      	add	r3, r2
 800b620:	b29b      	uxth	r3, r3
 800b622:	3308      	adds	r3, #8
 800b624:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b626:	4b3e      	ldr	r3, [pc, #248]	@ (800b720 <mem_trim+0x1f4>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d106      	bne.n	800b63e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b630:	89fb      	ldrh	r3, [r7, #14]
 800b632:	4618      	mov	r0, r3
 800b634:	f7ff fdd6 	bl	800b1e4 <ptr_to_mem>
 800b638:	4603      	mov	r3, r0
 800b63a:	4a39      	ldr	r2, [pc, #228]	@ (800b720 <mem_trim+0x1f4>)
 800b63c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b63e:	89fb      	ldrh	r3, [r7, #14]
 800b640:	4618      	mov	r0, r3
 800b642:	f7ff fdcf 	bl	800b1e4 <ptr_to_mem>
 800b646:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	2200      	movs	r2, #0
 800b64c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	89ba      	ldrh	r2, [r7, #12]
 800b652:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	8afa      	ldrh	r2, [r7, #22]
 800b658:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	89fa      	ldrh	r2, [r7, #14]
 800b65e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	881b      	ldrh	r3, [r3, #0]
 800b664:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b668:	d047      	beq.n	800b6fa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff fdb8 	bl	800b1e4 <ptr_to_mem>
 800b674:	4602      	mov	r2, r0
 800b676:	89fb      	ldrh	r3, [r7, #14]
 800b678:	8053      	strh	r3, [r2, #2]
 800b67a:	e03e      	b.n	800b6fa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b67c:	8bfb      	ldrh	r3, [r7, #30]
 800b67e:	f103 0214 	add.w	r2, r3, #20
 800b682:	8abb      	ldrh	r3, [r7, #20]
 800b684:	429a      	cmp	r2, r3
 800b686:	d838      	bhi.n	800b6fa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b688:	8afa      	ldrh	r2, [r7, #22]
 800b68a:	8bfb      	ldrh	r3, [r7, #30]
 800b68c:	4413      	add	r3, r2
 800b68e:	b29b      	uxth	r3, r3
 800b690:	3308      	adds	r3, #8
 800b692:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b69c:	d106      	bne.n	800b6ac <mem_trim+0x180>
 800b69e:	4b1b      	ldr	r3, [pc, #108]	@ (800b70c <mem_trim+0x1e0>)
 800b6a0:	f240 3216 	movw	r2, #790	@ 0x316
 800b6a4:	491d      	ldr	r1, [pc, #116]	@ (800b71c <mem_trim+0x1f0>)
 800b6a6:	481b      	ldr	r0, [pc, #108]	@ (800b714 <mem_trim+0x1e8>)
 800b6a8:	f00a fdd0 	bl	801624c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b6ac:	89fb      	ldrh	r3, [r7, #14]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff fd98 	bl	800b1e4 <ptr_to_mem>
 800b6b4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b6b6:	4b1a      	ldr	r3, [pc, #104]	@ (800b720 <mem_trim+0x1f4>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d202      	bcs.n	800b6c6 <mem_trim+0x19a>
      lfree = mem2;
 800b6c0:	4a17      	ldr	r2, [pc, #92]	@ (800b720 <mem_trim+0x1f4>)
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	881a      	ldrh	r2, [r3, #0]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	8afa      	ldrh	r2, [r7, #22]
 800b6d8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	89fa      	ldrh	r2, [r7, #14]
 800b6de:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	881b      	ldrh	r3, [r3, #0]
 800b6e4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b6e8:	d007      	beq.n	800b6fa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7ff fd78 	bl	800b1e4 <ptr_to_mem>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	89fb      	ldrh	r3, [r7, #14]
 800b6f8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b6fa:	687b      	ldr	r3, [r7, #4]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3720      	adds	r7, #32
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	24005380 	.word	0x24005380
 800b708:	24005384 	.word	0x24005384
 800b70c:	08019adc 	.word	0x08019adc
 800b710:	08019c4c 	.word	0x08019c4c
 800b714:	08019b24 	.word	0x08019b24
 800b718:	08019c64 	.word	0x08019c64
 800b71c:	08019c84 	.word	0x08019c84
 800b720:	24005388 	.word	0x24005388

0800b724 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b088      	sub	sp, #32
 800b728:	af00      	add	r7, sp, #0
 800b72a:	4603      	mov	r3, r0
 800b72c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b72e:	88fb      	ldrh	r3, [r7, #6]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <mem_malloc+0x14>
    return NULL;
 800b734:	2300      	movs	r3, #0
 800b736:	e0d9      	b.n	800b8ec <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b738:	88fb      	ldrh	r3, [r7, #6]
 800b73a:	3303      	adds	r3, #3
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	f023 0303 	bic.w	r3, r3, #3
 800b742:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b744:	8bbb      	ldrh	r3, [r7, #28]
 800b746:	2b0b      	cmp	r3, #11
 800b748:	d801      	bhi.n	800b74e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b74a:	230c      	movs	r3, #12
 800b74c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b74e:	8bbb      	ldrh	r3, [r7, #28]
 800b750:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b754:	d803      	bhi.n	800b75e <mem_malloc+0x3a>
 800b756:	8bba      	ldrh	r2, [r7, #28]
 800b758:	88fb      	ldrh	r3, [r7, #6]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d201      	bcs.n	800b762 <mem_malloc+0x3e>
    return NULL;
 800b75e:	2300      	movs	r3, #0
 800b760:	e0c4      	b.n	800b8ec <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b762:	4b64      	ldr	r3, [pc, #400]	@ (800b8f4 <mem_malloc+0x1d0>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff fd4e 	bl	800b208 <mem_to_ptr>
 800b76c:	4603      	mov	r3, r0
 800b76e:	83fb      	strh	r3, [r7, #30]
 800b770:	e0b4      	b.n	800b8dc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b772:	8bfb      	ldrh	r3, [r7, #30]
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff fd35 	bl	800b1e4 <ptr_to_mem>
 800b77a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	791b      	ldrb	r3, [r3, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	f040 80a4 	bne.w	800b8ce <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	461a      	mov	r2, r3
 800b78c:	8bfb      	ldrh	r3, [r7, #30]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	f1a3 0208 	sub.w	r2, r3, #8
 800b794:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b796:	429a      	cmp	r2, r3
 800b798:	f0c0 8099 	bcc.w	800b8ce <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	8bfb      	ldrh	r3, [r7, #30]
 800b7a4:	1ad3      	subs	r3, r2, r3
 800b7a6:	f1a3 0208 	sub.w	r2, r3, #8
 800b7aa:	8bbb      	ldrh	r3, [r7, #28]
 800b7ac:	3314      	adds	r3, #20
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d333      	bcc.n	800b81a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b7b2:	8bfa      	ldrh	r2, [r7, #30]
 800b7b4:	8bbb      	ldrh	r3, [r7, #28]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	3308      	adds	r3, #8
 800b7bc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b7be:	8a7b      	ldrh	r3, [r7, #18]
 800b7c0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b7c4:	d106      	bne.n	800b7d4 <mem_malloc+0xb0>
 800b7c6:	4b4c      	ldr	r3, [pc, #304]	@ (800b8f8 <mem_malloc+0x1d4>)
 800b7c8:	f240 3287 	movw	r2, #903	@ 0x387
 800b7cc:	494b      	ldr	r1, [pc, #300]	@ (800b8fc <mem_malloc+0x1d8>)
 800b7ce:	484c      	ldr	r0, [pc, #304]	@ (800b900 <mem_malloc+0x1dc>)
 800b7d0:	f00a fd3c 	bl	801624c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b7d4:	8a7b      	ldrh	r3, [r7, #18]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff fd04 	bl	800b1e4 <ptr_to_mem>
 800b7dc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	881a      	ldrh	r2, [r3, #0]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	8bfa      	ldrh	r2, [r7, #30]
 800b7f0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	8a7a      	ldrh	r2, [r7, #18]
 800b7f6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	881b      	ldrh	r3, [r3, #0]
 800b802:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b806:	d00b      	beq.n	800b820 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fce9 	bl	800b1e4 <ptr_to_mem>
 800b812:	4602      	mov	r2, r0
 800b814:	8a7b      	ldrh	r3, [r7, #18]
 800b816:	8053      	strh	r3, [r2, #2]
 800b818:	e002      	b.n	800b820 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2201      	movs	r2, #1
 800b81e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b820:	4b34      	ldr	r3, [pc, #208]	@ (800b8f4 <mem_malloc+0x1d0>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	429a      	cmp	r2, r3
 800b828:	d127      	bne.n	800b87a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b82a:	4b32      	ldr	r3, [pc, #200]	@ (800b8f4 <mem_malloc+0x1d0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b830:	e005      	b.n	800b83e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	4618      	mov	r0, r3
 800b838:	f7ff fcd4 	bl	800b1e4 <ptr_to_mem>
 800b83c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	791b      	ldrb	r3, [r3, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d004      	beq.n	800b850 <mem_malloc+0x12c>
 800b846:	4b2f      	ldr	r3, [pc, #188]	@ (800b904 <mem_malloc+0x1e0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	69ba      	ldr	r2, [r7, #24]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d1f0      	bne.n	800b832 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b850:	4a28      	ldr	r2, [pc, #160]	@ (800b8f4 <mem_malloc+0x1d0>)
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b856:	4b27      	ldr	r3, [pc, #156]	@ (800b8f4 <mem_malloc+0x1d0>)
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	4b2a      	ldr	r3, [pc, #168]	@ (800b904 <mem_malloc+0x1e0>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d00b      	beq.n	800b87a <mem_malloc+0x156>
 800b862:	4b24      	ldr	r3, [pc, #144]	@ (800b8f4 <mem_malloc+0x1d0>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	791b      	ldrb	r3, [r3, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d006      	beq.n	800b87a <mem_malloc+0x156>
 800b86c:	4b22      	ldr	r3, [pc, #136]	@ (800b8f8 <mem_malloc+0x1d4>)
 800b86e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b872:	4925      	ldr	r1, [pc, #148]	@ (800b908 <mem_malloc+0x1e4>)
 800b874:	4822      	ldr	r0, [pc, #136]	@ (800b900 <mem_malloc+0x1dc>)
 800b876:	f00a fce9 	bl	801624c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b87a:	8bba      	ldrh	r2, [r7, #28]
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	4413      	add	r3, r2
 800b880:	3308      	adds	r3, #8
 800b882:	4a20      	ldr	r2, [pc, #128]	@ (800b904 <mem_malloc+0x1e0>)
 800b884:	6812      	ldr	r2, [r2, #0]
 800b886:	4293      	cmp	r3, r2
 800b888:	d906      	bls.n	800b898 <mem_malloc+0x174>
 800b88a:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f8 <mem_malloc+0x1d4>)
 800b88c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b890:	491e      	ldr	r1, [pc, #120]	@ (800b90c <mem_malloc+0x1e8>)
 800b892:	481b      	ldr	r0, [pc, #108]	@ (800b900 <mem_malloc+0x1dc>)
 800b894:	f00a fcda 	bl	801624c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f003 0303 	and.w	r3, r3, #3
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d006      	beq.n	800b8b0 <mem_malloc+0x18c>
 800b8a2:	4b15      	ldr	r3, [pc, #84]	@ (800b8f8 <mem_malloc+0x1d4>)
 800b8a4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b8a8:	4919      	ldr	r1, [pc, #100]	@ (800b910 <mem_malloc+0x1ec>)
 800b8aa:	4815      	ldr	r0, [pc, #84]	@ (800b900 <mem_malloc+0x1dc>)
 800b8ac:	f00a fcce 	bl	801624c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	f003 0303 	and.w	r3, r3, #3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d006      	beq.n	800b8c8 <mem_malloc+0x1a4>
 800b8ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f8 <mem_malloc+0x1d4>)
 800b8bc:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b8c0:	4914      	ldr	r1, [pc, #80]	@ (800b914 <mem_malloc+0x1f0>)
 800b8c2:	480f      	ldr	r0, [pc, #60]	@ (800b900 <mem_malloc+0x1dc>)
 800b8c4:	f00a fcc2 	bl	801624c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	e00e      	b.n	800b8ec <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b8ce:	8bfb      	ldrh	r3, [r7, #30]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7ff fc87 	bl	800b1e4 <ptr_to_mem>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b8dc:	8bfa      	ldrh	r2, [r7, #30]
 800b8de:	8bbb      	ldrh	r3, [r7, #28]
 800b8e0:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	f4ff af44 	bcc.w	800b772 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3720      	adds	r7, #32
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	24005388 	.word	0x24005388
 800b8f8:	08019adc 	.word	0x08019adc
 800b8fc:	08019c84 	.word	0x08019c84
 800b900:	08019b24 	.word	0x08019b24
 800b904:	24005384 	.word	0x24005384
 800b908:	08019c98 	.word	0x08019c98
 800b90c:	08019cb4 	.word	0x08019cb4
 800b910:	08019ce4 	.word	0x08019ce4
 800b914:	08019d14 	.word	0x08019d14

0800b918 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	2200      	movs	r2, #0
 800b926:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	3303      	adds	r3, #3
 800b92e:	f023 0303 	bic.w	r3, r3, #3
 800b932:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b934:	2300      	movs	r3, #0
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	e011      	b.n	800b95e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	881b      	ldrh	r3, [r3, #0]
 800b950:	461a      	mov	r2, r3
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	4413      	add	r3, r2
 800b956:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	3301      	adds	r3, #1
 800b95c:	60fb      	str	r3, [r7, #12]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	885b      	ldrh	r3, [r3, #2]
 800b962:	461a      	mov	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	4293      	cmp	r3, r2
 800b968:	dbe7      	blt.n	800b93a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b96a:	bf00      	nop
 800b96c:	bf00      	nop
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b97e:	2300      	movs	r3, #0
 800b980:	80fb      	strh	r3, [r7, #6]
 800b982:	e009      	b.n	800b998 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b984:	88fb      	ldrh	r3, [r7, #6]
 800b986:	4a08      	ldr	r2, [pc, #32]	@ (800b9a8 <memp_init+0x30>)
 800b988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7ff ffc3 	bl	800b918 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b992:	88fb      	ldrh	r3, [r7, #6]
 800b994:	3301      	adds	r3, #1
 800b996:	80fb      	strh	r3, [r7, #6]
 800b998:	88fb      	ldrh	r3, [r7, #6]
 800b99a:	2b08      	cmp	r3, #8
 800b99c:	d9f2      	bls.n	800b984 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b99e:	bf00      	nop
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	0801c528 	.word	0x0801c528

0800b9ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d012      	beq.n	800b9e8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	6812      	ldr	r2, [r2, #0]
 800b9ca:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f003 0303 	and.w	r3, r3, #3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d006      	beq.n	800b9e4 <do_memp_malloc_pool+0x38>
 800b9d6:	4b07      	ldr	r3, [pc, #28]	@ (800b9f4 <do_memp_malloc_pool+0x48>)
 800b9d8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b9dc:	4906      	ldr	r1, [pc, #24]	@ (800b9f8 <do_memp_malloc_pool+0x4c>)
 800b9de:	4807      	ldr	r0, [pc, #28]	@ (800b9fc <do_memp_malloc_pool+0x50>)
 800b9e0:	f00a fc34 	bl	801624c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	e000      	b.n	800b9ea <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	08019d38 	.word	0x08019d38
 800b9f8:	08019d68 	.word	0x08019d68
 800b9fc:	08019d8c 	.word	0x08019d8c

0800ba00 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d106      	bne.n	800ba1c <memp_malloc_pool+0x1c>
 800ba0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba38 <memp_malloc_pool+0x38>)
 800ba10:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ba14:	4909      	ldr	r1, [pc, #36]	@ (800ba3c <memp_malloc_pool+0x3c>)
 800ba16:	480a      	ldr	r0, [pc, #40]	@ (800ba40 <memp_malloc_pool+0x40>)
 800ba18:	f00a fc18 	bl	801624c <iprintf>
  if (desc == NULL) {
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <memp_malloc_pool+0x26>
    return NULL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	e003      	b.n	800ba2e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7ff ffc0 	bl	800b9ac <do_memp_malloc_pool>
 800ba2c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	08019d38 	.word	0x08019d38
 800ba3c:	08019db4 	.word	0x08019db4
 800ba40:	08019d8c 	.word	0x08019d8c

0800ba44 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ba4e:	79fb      	ldrb	r3, [r7, #7]
 800ba50:	2b08      	cmp	r3, #8
 800ba52:	d908      	bls.n	800ba66 <memp_malloc+0x22>
 800ba54:	4b0a      	ldr	r3, [pc, #40]	@ (800ba80 <memp_malloc+0x3c>)
 800ba56:	f240 1257 	movw	r2, #343	@ 0x157
 800ba5a:	490a      	ldr	r1, [pc, #40]	@ (800ba84 <memp_malloc+0x40>)
 800ba5c:	480a      	ldr	r0, [pc, #40]	@ (800ba88 <memp_malloc+0x44>)
 800ba5e:	f00a fbf5 	bl	801624c <iprintf>
 800ba62:	2300      	movs	r3, #0
 800ba64:	e008      	b.n	800ba78 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ba66:	79fb      	ldrb	r3, [r7, #7]
 800ba68:	4a08      	ldr	r2, [pc, #32]	@ (800ba8c <memp_malloc+0x48>)
 800ba6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff ff9c 	bl	800b9ac <do_memp_malloc_pool>
 800ba74:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ba76:	68fb      	ldr	r3, [r7, #12]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	08019d38 	.word	0x08019d38
 800ba84:	08019dc8 	.word	0x08019dc8
 800ba88:	08019d8c 	.word	0x08019d8c
 800ba8c:	0801c528 	.word	0x0801c528

0800ba90 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	f003 0303 	and.w	r3, r3, #3
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d006      	beq.n	800bab2 <do_memp_free_pool+0x22>
 800baa4:	4b0a      	ldr	r3, [pc, #40]	@ (800bad0 <do_memp_free_pool+0x40>)
 800baa6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800baaa:	490a      	ldr	r1, [pc, #40]	@ (800bad4 <do_memp_free_pool+0x44>)
 800baac:	480a      	ldr	r0, [pc, #40]	@ (800bad8 <do_memp_free_pool+0x48>)
 800baae:	f00a fbcd 	bl	801624c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800bac8:	bf00      	nop
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	08019d38 	.word	0x08019d38
 800bad4:	08019de8 	.word	0x08019de8
 800bad8:	08019d8c 	.word	0x08019d8c

0800badc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d106      	bne.n	800bafa <memp_free_pool+0x1e>
 800baec:	4b0a      	ldr	r3, [pc, #40]	@ (800bb18 <memp_free_pool+0x3c>)
 800baee:	f240 1295 	movw	r2, #405	@ 0x195
 800baf2:	490a      	ldr	r1, [pc, #40]	@ (800bb1c <memp_free_pool+0x40>)
 800baf4:	480a      	ldr	r0, [pc, #40]	@ (800bb20 <memp_free_pool+0x44>)
 800baf6:	f00a fba9 	bl	801624c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d007      	beq.n	800bb10 <memp_free_pool+0x34>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d004      	beq.n	800bb10 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800bb06:	6839      	ldr	r1, [r7, #0]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff ffc1 	bl	800ba90 <do_memp_free_pool>
 800bb0e:	e000      	b.n	800bb12 <memp_free_pool+0x36>
    return;
 800bb10:	bf00      	nop
}
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	08019d38 	.word	0x08019d38
 800bb1c:	08019db4 	.word	0x08019db4
 800bb20:	08019d8c 	.word	0x08019d8c

0800bb24 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	6039      	str	r1, [r7, #0]
 800bb2e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bb30:	79fb      	ldrb	r3, [r7, #7]
 800bb32:	2b08      	cmp	r3, #8
 800bb34:	d907      	bls.n	800bb46 <memp_free+0x22>
 800bb36:	4b0c      	ldr	r3, [pc, #48]	@ (800bb68 <memp_free+0x44>)
 800bb38:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800bb3c:	490b      	ldr	r1, [pc, #44]	@ (800bb6c <memp_free+0x48>)
 800bb3e:	480c      	ldr	r0, [pc, #48]	@ (800bb70 <memp_free+0x4c>)
 800bb40:	f00a fb84 	bl	801624c <iprintf>
 800bb44:	e00c      	b.n	800bb60 <memp_free+0x3c>

  if (mem == NULL) {
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d008      	beq.n	800bb5e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bb4c:	79fb      	ldrb	r3, [r7, #7]
 800bb4e:	4a09      	ldr	r2, [pc, #36]	@ (800bb74 <memp_free+0x50>)
 800bb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7ff ff9a 	bl	800ba90 <do_memp_free_pool>
 800bb5c:	e000      	b.n	800bb60 <memp_free+0x3c>
    return;
 800bb5e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	08019d38 	.word	0x08019d38
 800bb6c:	08019e08 	.word	0x08019e08
 800bb70:	08019d8c 	.word	0x08019d8c
 800bb74:	0801c528 	.word	0x0801c528

0800bb78 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bb7c:	bf00      	nop
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
	...

0800bb88 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d108      	bne.n	800bbae <netif_add+0x26>
 800bb9c:	4b57      	ldr	r3, [pc, #348]	@ (800bcfc <netif_add+0x174>)
 800bb9e:	f240 1227 	movw	r2, #295	@ 0x127
 800bba2:	4957      	ldr	r1, [pc, #348]	@ (800bd00 <netif_add+0x178>)
 800bba4:	4857      	ldr	r0, [pc, #348]	@ (800bd04 <netif_add+0x17c>)
 800bba6:	f00a fb51 	bl	801624c <iprintf>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	e0a2      	b.n	800bcf4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d108      	bne.n	800bbc6 <netif_add+0x3e>
 800bbb4:	4b51      	ldr	r3, [pc, #324]	@ (800bcfc <netif_add+0x174>)
 800bbb6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800bbba:	4953      	ldr	r1, [pc, #332]	@ (800bd08 <netif_add+0x180>)
 800bbbc:	4851      	ldr	r0, [pc, #324]	@ (800bd04 <netif_add+0x17c>)
 800bbbe:	f00a fb45 	bl	801624c <iprintf>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	e096      	b.n	800bcf4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bbcc:	4b4f      	ldr	r3, [pc, #316]	@ (800bd0c <netif_add+0x184>)
 800bbce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d101      	bne.n	800bbda <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bbd6:	4b4d      	ldr	r3, [pc, #308]	@ (800bd0c <netif_add+0x184>)
 800bbd8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bbe0:	4b4a      	ldr	r3, [pc, #296]	@ (800bd0c <netif_add+0x184>)
 800bbe2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4a45      	ldr	r2, [pc, #276]	@ (800bd10 <netif_add+0x188>)
 800bbfa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6a3a      	ldr	r2, [r7, #32]
 800bc14:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bc16:	4b3f      	ldr	r3, [pc, #252]	@ (800bd14 <netif_add+0x18c>)
 800bc18:	781a      	ldrb	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc24:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	68b9      	ldr	r1, [r7, #8]
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f000 f913 	bl	800be58 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	4798      	blx	r3
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d001      	beq.n	800bc42 <netif_add+0xba>
    return NULL;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e058      	b.n	800bcf4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc48:	2bff      	cmp	r3, #255	@ 0xff
 800bc4a:	d103      	bne.n	800bc54 <netif_add+0xcc>
        netif->num = 0;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800bc54:	2300      	movs	r3, #0
 800bc56:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bc58:	4b2f      	ldr	r3, [pc, #188]	@ (800bd18 <netif_add+0x190>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	617b      	str	r3, [r7, #20]
 800bc5e:	e02b      	b.n	800bcb8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d106      	bne.n	800bc76 <netif_add+0xee>
 800bc68:	4b24      	ldr	r3, [pc, #144]	@ (800bcfc <netif_add+0x174>)
 800bc6a:	f240 128b 	movw	r2, #395	@ 0x18b
 800bc6e:	492b      	ldr	r1, [pc, #172]	@ (800bd1c <netif_add+0x194>)
 800bc70:	4824      	ldr	r0, [pc, #144]	@ (800bd04 <netif_add+0x17c>)
 800bc72:	f00a faeb 	bl	801624c <iprintf>
        num_netifs++;
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	2bff      	cmp	r3, #255	@ 0xff
 800bc80:	dd06      	ble.n	800bc90 <netif_add+0x108>
 800bc82:	4b1e      	ldr	r3, [pc, #120]	@ (800bcfc <netif_add+0x174>)
 800bc84:	f240 128d 	movw	r2, #397	@ 0x18d
 800bc88:	4925      	ldr	r1, [pc, #148]	@ (800bd20 <netif_add+0x198>)
 800bc8a:	481e      	ldr	r0, [pc, #120]	@ (800bd04 <netif_add+0x17c>)
 800bc8c:	f00a fade 	bl	801624c <iprintf>
        if (netif2->num == netif->num) {
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d108      	bne.n	800bcb2 <netif_add+0x12a>
          netif->num++;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bca6:	3301      	adds	r3, #1
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800bcb0:	e005      	b.n	800bcbe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	617b      	str	r3, [r7, #20]
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1d0      	bne.n	800bc60 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1be      	bne.n	800bc42 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bcca:	2bfe      	cmp	r3, #254	@ 0xfe
 800bccc:	d103      	bne.n	800bcd6 <netif_add+0x14e>
    netif_num = 0;
 800bcce:	4b11      	ldr	r3, [pc, #68]	@ (800bd14 <netif_add+0x18c>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	701a      	strb	r2, [r3, #0]
 800bcd4:	e006      	b.n	800bce4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bcdc:	3301      	adds	r3, #1
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	4b0c      	ldr	r3, [pc, #48]	@ (800bd14 <netif_add+0x18c>)
 800bce2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bce4:	4b0c      	ldr	r3, [pc, #48]	@ (800bd18 <netif_add+0x190>)
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bcec:	4a0a      	ldr	r2, [pc, #40]	@ (800bd18 <netif_add+0x190>)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3718      	adds	r7, #24
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	08019e24 	.word	0x08019e24
 800bd00:	08019eb8 	.word	0x08019eb8
 800bd04:	08019e74 	.word	0x08019e74
 800bd08:	08019ed4 	.word	0x08019ed4
 800bd0c:	0801c58c 	.word	0x0801c58c
 800bd10:	0800c133 	.word	0x0800c133
 800bd14:	24008280 	.word	0x24008280
 800bd18:	24008278 	.word	0x24008278
 800bd1c:	08019ef8 	.word	0x08019ef8
 800bd20:	08019f0c 	.word	0x08019f0c

0800bd24 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f002 fbe7 	bl	800e504 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f006 ffb5 	bl	8012ca8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bd3e:	bf00      	nop
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
	...

0800bd48 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b086      	sub	sp, #24
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d106      	bne.n	800bd68 <netif_do_set_ipaddr+0x20>
 800bd5a:	4b1d      	ldr	r3, [pc, #116]	@ (800bdd0 <netif_do_set_ipaddr+0x88>)
 800bd5c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800bd60:	491c      	ldr	r1, [pc, #112]	@ (800bdd4 <netif_do_set_ipaddr+0x8c>)
 800bd62:	481d      	ldr	r0, [pc, #116]	@ (800bdd8 <netif_do_set_ipaddr+0x90>)
 800bd64:	f00a fa72 	bl	801624c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d106      	bne.n	800bd7c <netif_do_set_ipaddr+0x34>
 800bd6e:	4b18      	ldr	r3, [pc, #96]	@ (800bdd0 <netif_do_set_ipaddr+0x88>)
 800bd70:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800bd74:	4917      	ldr	r1, [pc, #92]	@ (800bdd4 <netif_do_set_ipaddr+0x8c>)
 800bd76:	4818      	ldr	r0, [pc, #96]	@ (800bdd8 <netif_do_set_ipaddr+0x90>)
 800bd78:	f00a fa68 	bl	801624c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	3304      	adds	r3, #4
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d01c      	beq.n	800bdc4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	3304      	adds	r3, #4
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bd9a:	f107 0314 	add.w	r3, r7, #20
 800bd9e:	4619      	mov	r1, r3
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7ff ffbf 	bl	800bd24 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d002      	beq.n	800bdb2 <netif_do_set_ipaddr+0x6a>
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	e000      	b.n	800bdb4 <netif_do_set_ipaddr+0x6c>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bdb8:	2101      	movs	r1, #1
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f000 f8d2 	bl	800bf64 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e000      	b.n	800bdc6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	08019e24 	.word	0x08019e24
 800bdd4:	08019f3c 	.word	0x08019f3c
 800bdd8:	08019e74 	.word	0x08019e74

0800bddc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3308      	adds	r3, #8
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d00a      	beq.n	800be0c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <netif_do_set_netmask+0x26>
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	e000      	b.n	800be04 <netif_do_set_netmask+0x28>
 800be02:	2300      	movs	r3, #0
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800be08:	2301      	movs	r3, #1
 800be0a:	e000      	b.n	800be0e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3714      	adds	r7, #20
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800be1a:	b480      	push	{r7}
 800be1c:	b085      	sub	sp, #20
 800be1e:	af00      	add	r7, sp, #0
 800be20:	60f8      	str	r0, [r7, #12]
 800be22:	60b9      	str	r1, [r7, #8]
 800be24:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	330c      	adds	r3, #12
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d00a      	beq.n	800be4a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d002      	beq.n	800be40 <netif_do_set_gw+0x26>
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	e000      	b.n	800be42 <netif_do_set_gw+0x28>
 800be40:	2300      	movs	r3, #0
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800be46:	2301      	movs	r3, #1
 800be48:	e000      	b.n	800be4c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800be74:	4b1c      	ldr	r3, [pc, #112]	@ (800bee8 <netif_set_addr+0x90>)
 800be76:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800be7e:	4b1a      	ldr	r3, [pc, #104]	@ (800bee8 <netif_set_addr+0x90>)
 800be80:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800be88:	4b17      	ldr	r3, [pc, #92]	@ (800bee8 <netif_set_addr+0x90>)
 800be8a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <netif_set_addr+0x42>
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <netif_set_addr+0x46>
 800be9a:	2301      	movs	r3, #1
 800be9c:	e000      	b.n	800bea0 <netif_set_addr+0x48>
 800be9e:	2300      	movs	r3, #0
 800bea0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d006      	beq.n	800beb6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bea8:	f107 0310 	add.w	r3, r7, #16
 800beac:	461a      	mov	r2, r3
 800beae:	68b9      	ldr	r1, [r7, #8]
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f7ff ff49 	bl	800bd48 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800beb6:	69fa      	ldr	r2, [r7, #28]
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f7ff ff8e 	bl	800bddc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bec0:	69ba      	ldr	r2, [r7, #24]
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f7ff ffa8 	bl	800be1a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d106      	bne.n	800bede <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bed0:	f107 0310 	add.w	r3, r7, #16
 800bed4:	461a      	mov	r2, r3
 800bed6:	68b9      	ldr	r1, [r7, #8]
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f7ff ff35 	bl	800bd48 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bede:	bf00      	nop
 800bee0:	3720      	adds	r7, #32
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	0801c58c 	.word	0x0801c58c

0800beec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bef4:	4a04      	ldr	r2, [pc, #16]	@ (800bf08 <netif_set_default+0x1c>)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	2400827c 	.word	0x2400827c

0800bf0c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d107      	bne.n	800bf2a <netif_set_up+0x1e>
 800bf1a:	4b0f      	ldr	r3, [pc, #60]	@ (800bf58 <netif_set_up+0x4c>)
 800bf1c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800bf20:	490e      	ldr	r1, [pc, #56]	@ (800bf5c <netif_set_up+0x50>)
 800bf22:	480f      	ldr	r0, [pc, #60]	@ (800bf60 <netif_set_up+0x54>)
 800bf24:	f00a f992 	bl	801624c <iprintf>
 800bf28:	e013      	b.n	800bf52 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10c      	bne.n	800bf52 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf3e:	f043 0301 	orr.w	r3, r3, #1
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bf4a:	2103      	movs	r1, #3
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f809 	bl	800bf64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	08019e24 	.word	0x08019e24
 800bf5c:	08019fac 	.word	0x08019fac
 800bf60:	08019e74 	.word	0x08019e74

0800bf64 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <netif_issue_reports+0x20>
 800bf76:	4b18      	ldr	r3, [pc, #96]	@ (800bfd8 <netif_issue_reports+0x74>)
 800bf78:	f240 326d 	movw	r2, #877	@ 0x36d
 800bf7c:	4917      	ldr	r1, [pc, #92]	@ (800bfdc <netif_issue_reports+0x78>)
 800bf7e:	4818      	ldr	r0, [pc, #96]	@ (800bfe0 <netif_issue_reports+0x7c>)
 800bf80:	f00a f964 	bl	801624c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf8a:	f003 0304 	and.w	r3, r3, #4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d01e      	beq.n	800bfd0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf98:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d017      	beq.n	800bfd0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bfa0:	78fb      	ldrb	r3, [r7, #3]
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d013      	beq.n	800bfd2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	3304      	adds	r3, #4
 800bfae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00e      	beq.n	800bfd2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bfba:	f003 0308 	and.w	r3, r3, #8
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d007      	beq.n	800bfd2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f007 fdd7 	bl	8013b7c <etharp_request>
 800bfce:	e000      	b.n	800bfd2 <netif_issue_reports+0x6e>
    return;
 800bfd0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	08019e24 	.word	0x08019e24
 800bfdc:	08019fc8 	.word	0x08019fc8
 800bfe0:	08019e74 	.word	0x08019e74

0800bfe4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d107      	bne.n	800c002 <netif_set_down+0x1e>
 800bff2:	4b12      	ldr	r3, [pc, #72]	@ (800c03c <netif_set_down+0x58>)
 800bff4:	f240 329b 	movw	r2, #923	@ 0x39b
 800bff8:	4911      	ldr	r1, [pc, #68]	@ (800c040 <netif_set_down+0x5c>)
 800bffa:	4812      	ldr	r0, [pc, #72]	@ (800c044 <netif_set_down+0x60>)
 800bffc:	f00a f926 	bl	801624c <iprintf>
 800c000:	e019      	b.n	800c036 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d012      	beq.n	800c036 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c016:	f023 0301 	bic.w	r3, r3, #1
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c028:	f003 0308 	and.w	r3, r3, #8
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d002      	beq.n	800c036 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f007 f961 	bl	80132f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	08019e24 	.word	0x08019e24
 800c040:	08019fec 	.word	0x08019fec
 800c044:	08019e74 	.word	0x08019e74

0800c048 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d107      	bne.n	800c066 <netif_set_link_up+0x1e>
 800c056:	4b13      	ldr	r3, [pc, #76]	@ (800c0a4 <netif_set_link_up+0x5c>)
 800c058:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c05c:	4912      	ldr	r1, [pc, #72]	@ (800c0a8 <netif_set_link_up+0x60>)
 800c05e:	4813      	ldr	r0, [pc, #76]	@ (800c0ac <netif_set_link_up+0x64>)
 800c060:	f00a f8f4 	bl	801624c <iprintf>
 800c064:	e01b      	b.n	800c09e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d114      	bne.n	800c09e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c07a:	f043 0304 	orr.w	r3, r3, #4
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c086:	2103      	movs	r1, #3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7ff ff6b 	bl	800bf64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	69db      	ldr	r3, [r3, #28]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d003      	beq.n	800c09e <netif_set_link_up+0x56>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	69db      	ldr	r3, [r3, #28]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	08019e24 	.word	0x08019e24
 800c0a8:	0801a00c 	.word	0x0801a00c
 800c0ac:	08019e74 	.word	0x08019e74

0800c0b0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d107      	bne.n	800c0ce <netif_set_link_down+0x1e>
 800c0be:	4b11      	ldr	r3, [pc, #68]	@ (800c104 <netif_set_link_down+0x54>)
 800c0c0:	f240 4206 	movw	r2, #1030	@ 0x406
 800c0c4:	4910      	ldr	r1, [pc, #64]	@ (800c108 <netif_set_link_down+0x58>)
 800c0c6:	4811      	ldr	r0, [pc, #68]	@ (800c10c <netif_set_link_down+0x5c>)
 800c0c8:	f00a f8c0 	bl	801624c <iprintf>
 800c0cc:	e017      	b.n	800c0fe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c0d4:	f003 0304 	and.w	r3, r3, #4
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d010      	beq.n	800c0fe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c0e2:	f023 0304 	bic.w	r3, r3, #4
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	69db      	ldr	r3, [r3, #28]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <netif_set_link_down+0x4e>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	69db      	ldr	r3, [r3, #28]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	08019e24 	.word	0x08019e24
 800c108:	0801a030 	.word	0x0801a030
 800c10c:	08019e74 	.word	0x08019e74

0800c110 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d002      	beq.n	800c126 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	61da      	str	r2, [r3, #28]
  }
}
 800c126:	bf00      	nop
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c132:	b480      	push	{r7}
 800c134:	b085      	sub	sp, #20
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c13e:	f06f 030b 	mvn.w	r3, #11
}
 800c142:	4618      	mov	r0, r3
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
	...

0800c150 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	4603      	mov	r3, r0
 800c158:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c15a:	79fb      	ldrb	r3, [r7, #7]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d013      	beq.n	800c188 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c160:	4b0d      	ldr	r3, [pc, #52]	@ (800c198 <netif_get_by_index+0x48>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	e00c      	b.n	800c182 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c16e:	3301      	adds	r3, #1
 800c170:	b2db      	uxtb	r3, r3
 800c172:	79fa      	ldrb	r2, [r7, #7]
 800c174:	429a      	cmp	r2, r3
 800c176:	d101      	bne.n	800c17c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	e006      	b.n	800c18a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	60fb      	str	r3, [r7, #12]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1ef      	bne.n	800c168 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3714      	adds	r7, #20
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop
 800c198:	24008278 	.word	0x24008278

0800c19c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c1d4 <pbuf_free_ooseq+0x38>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c1a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c1d8 <pbuf_free_ooseq+0x3c>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	607b      	str	r3, [r7, #4]
 800c1ae:	e00a      	b.n	800c1c6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d003      	beq.n	800c1c0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f002 f9e1 	bl	800e580 <tcp_free_ooseq>
      return;
 800c1be:	e005      	b.n	800c1cc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	607b      	str	r3, [r7, #4]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1f1      	bne.n	800c1b0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	24008281 	.word	0x24008281
 800c1d8:	24008290 	.word	0x24008290

0800c1dc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800c1e0:	4b03      	ldr	r3, [pc, #12]	@ (800c1f0 <pbuf_pool_is_empty+0x14>)
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c1e6:	bf00      	nop
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	24008281 	.word	0x24008281

0800c1f4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	4611      	mov	r1, r2
 800c200:	461a      	mov	r2, r3
 800c202:	460b      	mov	r3, r1
 800c204:	80fb      	strh	r3, [r7, #6]
 800c206:	4613      	mov	r3, r2
 800c208:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	88fa      	ldrh	r2, [r7, #6]
 800c21a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	88ba      	ldrh	r2, [r7, #4]
 800c220:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c222:	8b3b      	ldrh	r3, [r7, #24]
 800c224:	b2da      	uxtb	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	7f3a      	ldrb	r2, [r7, #28]
 800c22e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2201      	movs	r2, #1
 800c234:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	73da      	strb	r2, [r3, #15]
}
 800c23c:	bf00      	nop
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08c      	sub	sp, #48	@ 0x30
 800c24c:	af02      	add	r7, sp, #8
 800c24e:	4603      	mov	r3, r0
 800c250:	71fb      	strb	r3, [r7, #7]
 800c252:	460b      	mov	r3, r1
 800c254:	80bb      	strh	r3, [r7, #4]
 800c256:	4613      	mov	r3, r2
 800c258:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c25e:	887b      	ldrh	r3, [r7, #2]
 800c260:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c264:	d07f      	beq.n	800c366 <pbuf_alloc+0x11e>
 800c266:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c26a:	f300 80c8 	bgt.w	800c3fe <pbuf_alloc+0x1b6>
 800c26e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c272:	d010      	beq.n	800c296 <pbuf_alloc+0x4e>
 800c274:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c278:	f300 80c1 	bgt.w	800c3fe <pbuf_alloc+0x1b6>
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d002      	beq.n	800c286 <pbuf_alloc+0x3e>
 800c280:	2b41      	cmp	r3, #65	@ 0x41
 800c282:	f040 80bc 	bne.w	800c3fe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c286:	887a      	ldrh	r2, [r7, #2]
 800c288:	88bb      	ldrh	r3, [r7, #4]
 800c28a:	4619      	mov	r1, r3
 800c28c:	2000      	movs	r0, #0
 800c28e:	f000 f8d1 	bl	800c434 <pbuf_alloc_reference>
 800c292:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c294:	e0bd      	b.n	800c412 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c296:	2300      	movs	r3, #0
 800c298:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c29e:	88bb      	ldrh	r3, [r7, #4]
 800c2a0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c2a2:	2008      	movs	r0, #8
 800c2a4:	f7ff fbce 	bl	800ba44 <memp_malloc>
 800c2a8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d109      	bne.n	800c2c4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c2b0:	f7ff ff94 	bl	800c1dc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d002      	beq.n	800c2c0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c2ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c2bc:	f000 faa8 	bl	800c810 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e0a7      	b.n	800c414 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2c6:	3303      	adds	r3, #3
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	f023 0303 	bic.w	r3, r3, #3
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	8b7a      	ldrh	r2, [r7, #26]
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	bf28      	it	cs
 800c2dc:	4613      	movcs	r3, r2
 800c2de:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c2e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2e2:	3310      	adds	r3, #16
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	3303      	adds	r3, #3
 800c2ea:	f023 0303 	bic.w	r3, r3, #3
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	89f9      	ldrh	r1, [r7, #14]
 800c2f2:	8b7a      	ldrh	r2, [r7, #26]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	887b      	ldrh	r3, [r7, #2]
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	4601      	mov	r1, r0
 800c300:	6938      	ldr	r0, [r7, #16]
 800c302:	f7ff ff77 	bl	800c1f4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	f003 0303 	and.w	r3, r3, #3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d006      	beq.n	800c320 <pbuf_alloc+0xd8>
 800c312:	4b42      	ldr	r3, [pc, #264]	@ (800c41c <pbuf_alloc+0x1d4>)
 800c314:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c318:	4941      	ldr	r1, [pc, #260]	@ (800c420 <pbuf_alloc+0x1d8>)
 800c31a:	4842      	ldr	r0, [pc, #264]	@ (800c424 <pbuf_alloc+0x1dc>)
 800c31c:	f009 ff96 	bl	801624c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c320:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c322:	3303      	adds	r3, #3
 800c324:	f023 0303 	bic.w	r3, r3, #3
 800c328:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c32c:	d106      	bne.n	800c33c <pbuf_alloc+0xf4>
 800c32e:	4b3b      	ldr	r3, [pc, #236]	@ (800c41c <pbuf_alloc+0x1d4>)
 800c330:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c334:	493c      	ldr	r1, [pc, #240]	@ (800c428 <pbuf_alloc+0x1e0>)
 800c336:	483b      	ldr	r0, [pc, #236]	@ (800c424 <pbuf_alloc+0x1dc>)
 800c338:	f009 ff88 	bl	801624c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d102      	bne.n	800c348 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	627b      	str	r3, [r7, #36]	@ 0x24
 800c346:	e002      	b.n	800c34e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c352:	8b7a      	ldrh	r2, [r7, #26]
 800c354:	89fb      	ldrh	r3, [r7, #14]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c35e:	8b7b      	ldrh	r3, [r7, #26]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d19e      	bne.n	800c2a2 <pbuf_alloc+0x5a>
      break;
 800c364:	e055      	b.n	800c412 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c366:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c368:	3303      	adds	r3, #3
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	f023 0303 	bic.w	r3, r3, #3
 800c370:	b29a      	uxth	r2, r3
 800c372:	88bb      	ldrh	r3, [r7, #4]
 800c374:	3303      	adds	r3, #3
 800c376:	b29b      	uxth	r3, r3
 800c378:	f023 0303 	bic.w	r3, r3, #3
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	4413      	add	r3, r2
 800c380:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c382:	8b3b      	ldrh	r3, [r7, #24]
 800c384:	3310      	adds	r3, #16
 800c386:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c388:	8b3a      	ldrh	r2, [r7, #24]
 800c38a:	88bb      	ldrh	r3, [r7, #4]
 800c38c:	3303      	adds	r3, #3
 800c38e:	f023 0303 	bic.w	r3, r3, #3
 800c392:	429a      	cmp	r2, r3
 800c394:	d306      	bcc.n	800c3a4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c396:	8afa      	ldrh	r2, [r7, #22]
 800c398:	88bb      	ldrh	r3, [r7, #4]
 800c39a:	3303      	adds	r3, #3
 800c39c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d201      	bcs.n	800c3a8 <pbuf_alloc+0x160>
        return NULL;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	e035      	b.n	800c414 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c3a8:	8afb      	ldrh	r3, [r7, #22]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff f9ba 	bl	800b724 <mem_malloc>
 800c3b0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d101      	bne.n	800c3bc <pbuf_alloc+0x174>
        return NULL;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	e02b      	b.n	800c414 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c3bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c3be:	3310      	adds	r3, #16
 800c3c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3c2:	4413      	add	r3, r2
 800c3c4:	3303      	adds	r3, #3
 800c3c6:	f023 0303 	bic.w	r3, r3, #3
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	88b9      	ldrh	r1, [r7, #4]
 800c3ce:	88ba      	ldrh	r2, [r7, #4]
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	9301      	str	r3, [sp, #4]
 800c3d4:	887b      	ldrh	r3, [r7, #2]
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4601      	mov	r1, r0
 800c3dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3de:	f7ff ff09 	bl	800c1f4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	f003 0303 	and.w	r3, r3, #3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d010      	beq.n	800c410 <pbuf_alloc+0x1c8>
 800c3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c41c <pbuf_alloc+0x1d4>)
 800c3f0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c3f4:	490d      	ldr	r1, [pc, #52]	@ (800c42c <pbuf_alloc+0x1e4>)
 800c3f6:	480b      	ldr	r0, [pc, #44]	@ (800c424 <pbuf_alloc+0x1dc>)
 800c3f8:	f009 ff28 	bl	801624c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c3fc:	e008      	b.n	800c410 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c3fe:	4b07      	ldr	r3, [pc, #28]	@ (800c41c <pbuf_alloc+0x1d4>)
 800c400:	f240 1227 	movw	r2, #295	@ 0x127
 800c404:	490a      	ldr	r1, [pc, #40]	@ (800c430 <pbuf_alloc+0x1e8>)
 800c406:	4807      	ldr	r0, [pc, #28]	@ (800c424 <pbuf_alloc+0x1dc>)
 800c408:	f009 ff20 	bl	801624c <iprintf>
      return NULL;
 800c40c:	2300      	movs	r3, #0
 800c40e:	e001      	b.n	800c414 <pbuf_alloc+0x1cc>
      break;
 800c410:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c414:	4618      	mov	r0, r3
 800c416:	3728      	adds	r7, #40	@ 0x28
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	0801a054 	.word	0x0801a054
 800c420:	0801a084 	.word	0x0801a084
 800c424:	0801a0b4 	.word	0x0801a0b4
 800c428:	0801a0dc 	.word	0x0801a0dc
 800c42c:	0801a110 	.word	0x0801a110
 800c430:	0801a13c 	.word	0x0801a13c

0800c434 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b086      	sub	sp, #24
 800c438:	af02      	add	r7, sp, #8
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	460b      	mov	r3, r1
 800c43e:	807b      	strh	r3, [r7, #2]
 800c440:	4613      	mov	r3, r2
 800c442:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c444:	883b      	ldrh	r3, [r7, #0]
 800c446:	2b41      	cmp	r3, #65	@ 0x41
 800c448:	d009      	beq.n	800c45e <pbuf_alloc_reference+0x2a>
 800c44a:	883b      	ldrh	r3, [r7, #0]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d006      	beq.n	800c45e <pbuf_alloc_reference+0x2a>
 800c450:	4b0f      	ldr	r3, [pc, #60]	@ (800c490 <pbuf_alloc_reference+0x5c>)
 800c452:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c456:	490f      	ldr	r1, [pc, #60]	@ (800c494 <pbuf_alloc_reference+0x60>)
 800c458:	480f      	ldr	r0, [pc, #60]	@ (800c498 <pbuf_alloc_reference+0x64>)
 800c45a:	f009 fef7 	bl	801624c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c45e:	2007      	movs	r0, #7
 800c460:	f7ff faf0 	bl	800ba44 <memp_malloc>
 800c464:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d101      	bne.n	800c470 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c46c:	2300      	movs	r3, #0
 800c46e:	e00b      	b.n	800c488 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c470:	8879      	ldrh	r1, [r7, #2]
 800c472:	887a      	ldrh	r2, [r7, #2]
 800c474:	2300      	movs	r3, #0
 800c476:	9301      	str	r3, [sp, #4]
 800c478:	883b      	ldrh	r3, [r7, #0]
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	460b      	mov	r3, r1
 800c47e:	6879      	ldr	r1, [r7, #4]
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f7ff feb7 	bl	800c1f4 <pbuf_init_alloced_pbuf>
  return p;
 800c486:	68fb      	ldr	r3, [r7, #12]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3710      	adds	r7, #16
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	0801a054 	.word	0x0801a054
 800c494:	0801a158 	.word	0x0801a158
 800c498:	0801a0b4 	.word	0x0801a0b4

0800c49c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b088      	sub	sp, #32
 800c4a0:	af02      	add	r7, sp, #8
 800c4a2:	607b      	str	r3, [r7, #4]
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	73fb      	strb	r3, [r7, #15]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	81bb      	strh	r3, [r7, #12]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c4b4:	8a7b      	ldrh	r3, [r7, #18]
 800c4b6:	3303      	adds	r3, #3
 800c4b8:	f023 0203 	bic.w	r2, r3, #3
 800c4bc:	89bb      	ldrh	r3, [r7, #12]
 800c4be:	441a      	add	r2, r3
 800c4c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d901      	bls.n	800c4ca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e018      	b.n	800c4fc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c4ca:	6a3b      	ldr	r3, [r7, #32]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d007      	beq.n	800c4e0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c4d0:	8a7b      	ldrh	r3, [r7, #18]
 800c4d2:	3303      	adds	r3, #3
 800c4d4:	f023 0303 	bic.w	r3, r3, #3
 800c4d8:	6a3a      	ldr	r2, [r7, #32]
 800c4da:	4413      	add	r3, r2
 800c4dc:	617b      	str	r3, [r7, #20]
 800c4de:	e001      	b.n	800c4e4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	89b9      	ldrh	r1, [r7, #12]
 800c4e8:	89ba      	ldrh	r2, [r7, #12]
 800c4ea:	2302      	movs	r3, #2
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	897b      	ldrh	r3, [r7, #10]
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	6979      	ldr	r1, [r7, #20]
 800c4f6:	f7ff fe7d 	bl	800c1f4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c4fa:	687b      	ldr	r3, [r7, #4]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d106      	bne.n	800c524 <pbuf_realloc+0x20>
 800c516:	4b3a      	ldr	r3, [pc, #232]	@ (800c600 <pbuf_realloc+0xfc>)
 800c518:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c51c:	4939      	ldr	r1, [pc, #228]	@ (800c604 <pbuf_realloc+0x100>)
 800c51e:	483a      	ldr	r0, [pc, #232]	@ (800c608 <pbuf_realloc+0x104>)
 800c520:	f009 fe94 	bl	801624c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	891b      	ldrh	r3, [r3, #8]
 800c528:	887a      	ldrh	r2, [r7, #2]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d263      	bcs.n	800c5f6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	891a      	ldrh	r2, [r3, #8]
 800c532:	887b      	ldrh	r3, [r7, #2]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c538:	887b      	ldrh	r3, [r7, #2]
 800c53a:	817b      	strh	r3, [r7, #10]
  q = p;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c540:	e018      	b.n	800c574 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	895b      	ldrh	r3, [r3, #10]
 800c546:	897a      	ldrh	r2, [r7, #10]
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	891a      	ldrh	r2, [r3, #8]
 800c550:	893b      	ldrh	r3, [r7, #8]
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	b29a      	uxth	r2, r3
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d106      	bne.n	800c574 <pbuf_realloc+0x70>
 800c566:	4b26      	ldr	r3, [pc, #152]	@ (800c600 <pbuf_realloc+0xfc>)
 800c568:	f240 12af 	movw	r2, #431	@ 0x1af
 800c56c:	4927      	ldr	r1, [pc, #156]	@ (800c60c <pbuf_realloc+0x108>)
 800c56e:	4826      	ldr	r0, [pc, #152]	@ (800c608 <pbuf_realloc+0x104>)
 800c570:	f009 fe6c 	bl	801624c <iprintf>
  while (rem_len > q->len) {
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	895b      	ldrh	r3, [r3, #10]
 800c578:	897a      	ldrh	r2, [r7, #10]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d8e1      	bhi.n	800c542 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	7b1b      	ldrb	r3, [r3, #12]
 800c582:	f003 030f 	and.w	r3, r3, #15
 800c586:	2b00      	cmp	r3, #0
 800c588:	d121      	bne.n	800c5ce <pbuf_realloc+0xca>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	895b      	ldrh	r3, [r3, #10]
 800c58e:	897a      	ldrh	r2, [r7, #10]
 800c590:	429a      	cmp	r2, r3
 800c592:	d01c      	beq.n	800c5ce <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	7b5b      	ldrb	r3, [r3, #13]
 800c598:	f003 0302 	and.w	r3, r3, #2
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d116      	bne.n	800c5ce <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	897b      	ldrh	r3, [r7, #10]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f7fe ffba 	bl	800b52c <mem_trim>
 800c5b8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d106      	bne.n	800c5ce <pbuf_realloc+0xca>
 800c5c0:	4b0f      	ldr	r3, [pc, #60]	@ (800c600 <pbuf_realloc+0xfc>)
 800c5c2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c5c6:	4912      	ldr	r1, [pc, #72]	@ (800c610 <pbuf_realloc+0x10c>)
 800c5c8:	480f      	ldr	r0, [pc, #60]	@ (800c608 <pbuf_realloc+0x104>)
 800c5ca:	f009 fe3f 	bl	801624c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	897a      	ldrh	r2, [r7, #10]
 800c5d2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	895a      	ldrh	r2, [r3, #10]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d004      	beq.n	800c5ee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 f911 	bl	800c810 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	601a      	str	r2, [r3, #0]
 800c5f4:	e000      	b.n	800c5f8 <pbuf_realloc+0xf4>
    return;
 800c5f6:	bf00      	nop

}
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	0801a054 	.word	0x0801a054
 800c604:	0801a16c 	.word	0x0801a16c
 800c608:	0801a0b4 	.word	0x0801a0b4
 800c60c:	0801a184 	.word	0x0801a184
 800c610:	0801a19c 	.word	0x0801a19c

0800c614 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b086      	sub	sp, #24
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	4613      	mov	r3, r2
 800c620:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d106      	bne.n	800c636 <pbuf_add_header_impl+0x22>
 800c628:	4b2b      	ldr	r3, [pc, #172]	@ (800c6d8 <pbuf_add_header_impl+0xc4>)
 800c62a:	f240 12df 	movw	r2, #479	@ 0x1df
 800c62e:	492b      	ldr	r1, [pc, #172]	@ (800c6dc <pbuf_add_header_impl+0xc8>)
 800c630:	482b      	ldr	r0, [pc, #172]	@ (800c6e0 <pbuf_add_header_impl+0xcc>)
 800c632:	f009 fe0b 	bl	801624c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d003      	beq.n	800c644 <pbuf_add_header_impl+0x30>
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c642:	d301      	bcc.n	800c648 <pbuf_add_header_impl+0x34>
    return 1;
 800c644:	2301      	movs	r3, #1
 800c646:	e043      	b.n	800c6d0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d101      	bne.n	800c652 <pbuf_add_header_impl+0x3e>
    return 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	e03e      	b.n	800c6d0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	891a      	ldrh	r2, [r3, #8]
 800c65a:	8a7b      	ldrh	r3, [r7, #18]
 800c65c:	4413      	add	r3, r2
 800c65e:	b29b      	uxth	r3, r3
 800c660:	8a7a      	ldrh	r2, [r7, #18]
 800c662:	429a      	cmp	r2, r3
 800c664:	d901      	bls.n	800c66a <pbuf_add_header_impl+0x56>
    return 1;
 800c666:	2301      	movs	r3, #1
 800c668:	e032      	b.n	800c6d0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	7b1b      	ldrb	r3, [r3, #12]
 800c66e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c670:	8a3b      	ldrh	r3, [r7, #16]
 800c672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00c      	beq.n	800c694 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	685a      	ldr	r2, [r3, #4]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	425b      	negs	r3, r3
 800c682:	4413      	add	r3, r2
 800c684:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	3310      	adds	r3, #16
 800c68a:	697a      	ldr	r2, [r7, #20]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d20d      	bcs.n	800c6ac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c690:	2301      	movs	r3, #1
 800c692:	e01d      	b.n	800c6d0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c694:	79fb      	ldrb	r3, [r7, #7]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d006      	beq.n	800c6a8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	425b      	negs	r3, r3
 800c6a2:	4413      	add	r3, r2
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	e001      	b.n	800c6ac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e011      	b.n	800c6d0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	895a      	ldrh	r2, [r3, #10]
 800c6b6:	8a7b      	ldrh	r3, [r7, #18]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	891a      	ldrh	r2, [r3, #8]
 800c6c4:	8a7b      	ldrh	r3, [r7, #18]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	811a      	strh	r2, [r3, #8]


  return 0;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3718      	adds	r7, #24
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	0801a054 	.word	0x0801a054
 800c6dc:	0801a1b8 	.word	0x0801a1b8
 800c6e0:	0801a0b4 	.word	0x0801a0b4

0800c6e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7ff ff8e 	bl	800c614 <pbuf_add_header_impl>
 800c6f8:	4603      	mov	r3, r0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d106      	bne.n	800c722 <pbuf_remove_header+0x1e>
 800c714:	4b20      	ldr	r3, [pc, #128]	@ (800c798 <pbuf_remove_header+0x94>)
 800c716:	f240 224b 	movw	r2, #587	@ 0x24b
 800c71a:	4920      	ldr	r1, [pc, #128]	@ (800c79c <pbuf_remove_header+0x98>)
 800c71c:	4820      	ldr	r0, [pc, #128]	@ (800c7a0 <pbuf_remove_header+0x9c>)
 800c71e:	f009 fd95 	bl	801624c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d003      	beq.n	800c730 <pbuf_remove_header+0x2c>
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c72e:	d301      	bcc.n	800c734 <pbuf_remove_header+0x30>
    return 1;
 800c730:	2301      	movs	r3, #1
 800c732:	e02c      	b.n	800c78e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d101      	bne.n	800c73e <pbuf_remove_header+0x3a>
    return 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	e027      	b.n	800c78e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	895b      	ldrh	r3, [r3, #10]
 800c746:	89fa      	ldrh	r2, [r7, #14]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d908      	bls.n	800c75e <pbuf_remove_header+0x5a>
 800c74c:	4b12      	ldr	r3, [pc, #72]	@ (800c798 <pbuf_remove_header+0x94>)
 800c74e:	f240 2255 	movw	r2, #597	@ 0x255
 800c752:	4914      	ldr	r1, [pc, #80]	@ (800c7a4 <pbuf_remove_header+0xa0>)
 800c754:	4812      	ldr	r0, [pc, #72]	@ (800c7a0 <pbuf_remove_header+0x9c>)
 800c756:	f009 fd79 	bl	801624c <iprintf>
 800c75a:	2301      	movs	r3, #1
 800c75c:	e017      	b.n	800c78e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	441a      	add	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	895a      	ldrh	r2, [r3, #10]
 800c774:	89fb      	ldrh	r3, [r7, #14]
 800c776:	1ad3      	subs	r3, r2, r3
 800c778:	b29a      	uxth	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	891a      	ldrh	r2, [r3, #8]
 800c782:	89fb      	ldrh	r3, [r7, #14]
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	b29a      	uxth	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	0801a054 	.word	0x0801a054
 800c79c:	0801a1b8 	.word	0x0801a1b8
 800c7a0:	0801a0b4 	.word	0x0801a0b4
 800c7a4:	0801a1c4 	.word	0x0801a1c4

0800c7a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	807b      	strh	r3, [r7, #2]
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c7b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	da08      	bge.n	800c7d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c7c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7ff ff9b 	bl	800c704 <pbuf_remove_header>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	e007      	b.n	800c7e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c7d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7d6:	787a      	ldrb	r2, [r7, #1]
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff ff1a 	bl	800c614 <pbuf_add_header_impl>
 800c7e0:	4603      	mov	r3, r0
  }
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b082      	sub	sp, #8
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c7f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff ffd2 	bl	800c7a8 <pbuf_header_impl>
 800c804:	4603      	mov	r3, r0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
	...

0800c810 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10b      	bne.n	800c836 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d106      	bne.n	800c832 <pbuf_free+0x22>
 800c824:	4b38      	ldr	r3, [pc, #224]	@ (800c908 <pbuf_free+0xf8>)
 800c826:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c82a:	4938      	ldr	r1, [pc, #224]	@ (800c90c <pbuf_free+0xfc>)
 800c82c:	4838      	ldr	r0, [pc, #224]	@ (800c910 <pbuf_free+0x100>)
 800c82e:	f009 fd0d 	bl	801624c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c832:	2300      	movs	r3, #0
 800c834:	e063      	b.n	800c8fe <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c83a:	e05c      	b.n	800c8f6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	7b9b      	ldrb	r3, [r3, #14]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d106      	bne.n	800c852 <pbuf_free+0x42>
 800c844:	4b30      	ldr	r3, [pc, #192]	@ (800c908 <pbuf_free+0xf8>)
 800c846:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c84a:	4932      	ldr	r1, [pc, #200]	@ (800c914 <pbuf_free+0x104>)
 800c84c:	4830      	ldr	r0, [pc, #192]	@ (800c910 <pbuf_free+0x100>)
 800c84e:	f009 fcfd 	bl	801624c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	7b9b      	ldrb	r3, [r3, #14]
 800c856:	3b01      	subs	r3, #1
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	739a      	strb	r2, [r3, #14]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	7b9b      	ldrb	r3, [r3, #14]
 800c862:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c864:	7dbb      	ldrb	r3, [r7, #22]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d143      	bne.n	800c8f2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	7b1b      	ldrb	r3, [r3, #12]
 800c874:	f003 030f 	and.w	r3, r3, #15
 800c878:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	7b5b      	ldrb	r3, [r3, #13]
 800c87e:	f003 0302 	and.w	r3, r3, #2
 800c882:	2b00      	cmp	r3, #0
 800c884:	d011      	beq.n	800c8aa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d106      	bne.n	800c8a0 <pbuf_free+0x90>
 800c892:	4b1d      	ldr	r3, [pc, #116]	@ (800c908 <pbuf_free+0xf8>)
 800c894:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c898:	491f      	ldr	r1, [pc, #124]	@ (800c918 <pbuf_free+0x108>)
 800c89a:	481d      	ldr	r0, [pc, #116]	@ (800c910 <pbuf_free+0x100>)
 800c89c:	f009 fcd6 	bl	801624c <iprintf>
        pc->custom_free_function(p);
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	691b      	ldr	r3, [r3, #16]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	4798      	blx	r3
 800c8a8:	e01d      	b.n	800c8e6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d104      	bne.n	800c8ba <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c8b0:	6879      	ldr	r1, [r7, #4]
 800c8b2:	2008      	movs	r0, #8
 800c8b4:	f7ff f936 	bl	800bb24 <memp_free>
 800c8b8:	e015      	b.n	800c8e6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c8ba:	7bfb      	ldrb	r3, [r7, #15]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d104      	bne.n	800c8ca <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c8c0:	6879      	ldr	r1, [r7, #4]
 800c8c2:	2007      	movs	r0, #7
 800c8c4:	f7ff f92e 	bl	800bb24 <memp_free>
 800c8c8:	e00d      	b.n	800c8e6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c8ca:	7bfb      	ldrb	r3, [r7, #15]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d103      	bne.n	800c8d8 <pbuf_free+0xc8>
          mem_free(p);
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f7fe fdc1 	bl	800b458 <mem_free>
 800c8d6:	e006      	b.n	800c8e6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c8d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c908 <pbuf_free+0xf8>)
 800c8da:	f240 320f 	movw	r2, #783	@ 0x30f
 800c8de:	490f      	ldr	r1, [pc, #60]	@ (800c91c <pbuf_free+0x10c>)
 800c8e0:	480b      	ldr	r0, [pc, #44]	@ (800c910 <pbuf_free+0x100>)
 800c8e2:	f009 fcb3 	bl	801624c <iprintf>
        }
      }
      count++;
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	607b      	str	r3, [r7, #4]
 800c8f0:	e001      	b.n	800c8f6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d19f      	bne.n	800c83c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	0801a054 	.word	0x0801a054
 800c90c:	0801a1b8 	.word	0x0801a1b8
 800c910:	0801a0b4 	.word	0x0801a0b4
 800c914:	0801a1e4 	.word	0x0801a1e4
 800c918:	0801a1fc 	.word	0x0801a1fc
 800c91c:	0801a220 	.word	0x0801a220

0800c920 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c928:	2300      	movs	r3, #0
 800c92a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c92c:	e005      	b.n	800c93a <pbuf_clen+0x1a>
    ++len;
 800c92e:	89fb      	ldrh	r3, [r7, #14]
 800c930:	3301      	adds	r3, #1
 800c932:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1f6      	bne.n	800c92e <pbuf_clen+0xe>
  }
  return len;
 800c940:	89fb      	ldrh	r3, [r7, #14]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
	...

0800c950 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d010      	beq.n	800c980 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	7b9b      	ldrb	r3, [r3, #14]
 800c962:	3301      	adds	r3, #1
 800c964:	b2da      	uxtb	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	7b9b      	ldrb	r3, [r3, #14]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d106      	bne.n	800c980 <pbuf_ref+0x30>
 800c972:	4b05      	ldr	r3, [pc, #20]	@ (800c988 <pbuf_ref+0x38>)
 800c974:	f240 3242 	movw	r2, #834	@ 0x342
 800c978:	4904      	ldr	r1, [pc, #16]	@ (800c98c <pbuf_ref+0x3c>)
 800c97a:	4805      	ldr	r0, [pc, #20]	@ (800c990 <pbuf_ref+0x40>)
 800c97c:	f009 fc66 	bl	801624c <iprintf>
  }
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	0801a054 	.word	0x0801a054
 800c98c:	0801a234 	.word	0x0801a234
 800c990:	0801a0b4 	.word	0x0801a0b4

0800c994 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d002      	beq.n	800c9aa <pbuf_cat+0x16>
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d107      	bne.n	800c9ba <pbuf_cat+0x26>
 800c9aa:	4b20      	ldr	r3, [pc, #128]	@ (800ca2c <pbuf_cat+0x98>)
 800c9ac:	f240 3259 	movw	r2, #857	@ 0x359
 800c9b0:	491f      	ldr	r1, [pc, #124]	@ (800ca30 <pbuf_cat+0x9c>)
 800c9b2:	4820      	ldr	r0, [pc, #128]	@ (800ca34 <pbuf_cat+0xa0>)
 800c9b4:	f009 fc4a 	bl	801624c <iprintf>
 800c9b8:	e034      	b.n	800ca24 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	60fb      	str	r3, [r7, #12]
 800c9be:	e00a      	b.n	800c9d6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	891a      	ldrh	r2, [r3, #8]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	891b      	ldrh	r3, [r3, #8]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	60fb      	str	r3, [r7, #12]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1f0      	bne.n	800c9c0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	891a      	ldrh	r2, [r3, #8]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	895b      	ldrh	r3, [r3, #10]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d006      	beq.n	800c9f8 <pbuf_cat+0x64>
 800c9ea:	4b10      	ldr	r3, [pc, #64]	@ (800ca2c <pbuf_cat+0x98>)
 800c9ec:	f240 3262 	movw	r2, #866	@ 0x362
 800c9f0:	4911      	ldr	r1, [pc, #68]	@ (800ca38 <pbuf_cat+0xa4>)
 800c9f2:	4810      	ldr	r0, [pc, #64]	@ (800ca34 <pbuf_cat+0xa0>)
 800c9f4:	f009 fc2a 	bl	801624c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d006      	beq.n	800ca0e <pbuf_cat+0x7a>
 800ca00:	4b0a      	ldr	r3, [pc, #40]	@ (800ca2c <pbuf_cat+0x98>)
 800ca02:	f240 3263 	movw	r2, #867	@ 0x363
 800ca06:	490d      	ldr	r1, [pc, #52]	@ (800ca3c <pbuf_cat+0xa8>)
 800ca08:	480a      	ldr	r0, [pc, #40]	@ (800ca34 <pbuf_cat+0xa0>)
 800ca0a:	f009 fc1f 	bl	801624c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	891a      	ldrh	r2, [r3, #8]
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	891b      	ldrh	r3, [r3, #8]
 800ca16:	4413      	add	r3, r2
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	0801a054 	.word	0x0801a054
 800ca30:	0801a248 	.word	0x0801a248
 800ca34:	0801a0b4 	.word	0x0801a0b4
 800ca38:	0801a280 	.word	0x0801a280
 800ca3c:	0801a2b0 	.word	0x0801a2b0

0800ca40 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f7ff ffa1 	bl	800c994 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ca52:	6838      	ldr	r0, [r7, #0]
 800ca54:	f7ff ff7c 	bl	800c950 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ca58:	bf00      	nop
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	617b      	str	r3, [r7, #20]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d008      	beq.n	800ca8a <pbuf_copy+0x2a>
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d005      	beq.n	800ca8a <pbuf_copy+0x2a>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	891a      	ldrh	r2, [r3, #8]
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	891b      	ldrh	r3, [r3, #8]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d209      	bcs.n	800ca9e <pbuf_copy+0x3e>
 800ca8a:	4b57      	ldr	r3, [pc, #348]	@ (800cbe8 <pbuf_copy+0x188>)
 800ca8c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800ca90:	4956      	ldr	r1, [pc, #344]	@ (800cbec <pbuf_copy+0x18c>)
 800ca92:	4857      	ldr	r0, [pc, #348]	@ (800cbf0 <pbuf_copy+0x190>)
 800ca94:	f009 fbda 	bl	801624c <iprintf>
 800ca98:	f06f 030f 	mvn.w	r3, #15
 800ca9c:	e09f      	b.n	800cbde <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	895b      	ldrh	r3, [r3, #10]
 800caa2:	461a      	mov	r2, r3
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	1ad2      	subs	r2, r2, r3
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	895b      	ldrh	r3, [r3, #10]
 800caac:	4619      	mov	r1, r3
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	1acb      	subs	r3, r1, r3
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d306      	bcc.n	800cac4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	895b      	ldrh	r3, [r3, #10]
 800caba:	461a      	mov	r2, r3
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	60fb      	str	r3, [r7, #12]
 800cac2:	e005      	b.n	800cad0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	895b      	ldrh	r3, [r3, #10]
 800cac8:	461a      	mov	r2, r3
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	685a      	ldr	r2, [r3, #4]
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	18d0      	adds	r0, r2, r3
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	685a      	ldr	r2, [r3, #4]
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	4413      	add	r3, r2
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	4619      	mov	r1, r3
 800cae4:	f009 fdd7 	bl	8016696 <memcpy>
    offset_to += len;
 800cae8:	697a      	ldr	r2, [r7, #20]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	4413      	add	r3, r2
 800caee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	4413      	add	r3, r2
 800caf6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	895b      	ldrh	r3, [r3, #10]
 800cafc:	461a      	mov	r2, r3
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d906      	bls.n	800cb12 <pbuf_copy+0xb2>
 800cb04:	4b38      	ldr	r3, [pc, #224]	@ (800cbe8 <pbuf_copy+0x188>)
 800cb06:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800cb0a:	493a      	ldr	r1, [pc, #232]	@ (800cbf4 <pbuf_copy+0x194>)
 800cb0c:	4838      	ldr	r0, [pc, #224]	@ (800cbf0 <pbuf_copy+0x190>)
 800cb0e:	f009 fb9d 	bl	801624c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	895b      	ldrh	r3, [r3, #10]
 800cb16:	461a      	mov	r2, r3
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d906      	bls.n	800cb2c <pbuf_copy+0xcc>
 800cb1e:	4b32      	ldr	r3, [pc, #200]	@ (800cbe8 <pbuf_copy+0x188>)
 800cb20:	f240 32da 	movw	r2, #986	@ 0x3da
 800cb24:	4934      	ldr	r1, [pc, #208]	@ (800cbf8 <pbuf_copy+0x198>)
 800cb26:	4832      	ldr	r0, [pc, #200]	@ (800cbf0 <pbuf_copy+0x190>)
 800cb28:	f009 fb90 	bl	801624c <iprintf>
    if (offset_from >= p_from->len) {
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	895b      	ldrh	r3, [r3, #10]
 800cb30:	461a      	mov	r2, r3
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d304      	bcc.n	800cb42 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	895b      	ldrh	r3, [r3, #10]
 800cb46:	461a      	mov	r2, r3
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d114      	bne.n	800cb78 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10c      	bne.n	800cb78 <pbuf_copy+0x118>
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d009      	beq.n	800cb78 <pbuf_copy+0x118>
 800cb64:	4b20      	ldr	r3, [pc, #128]	@ (800cbe8 <pbuf_copy+0x188>)
 800cb66:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800cb6a:	4924      	ldr	r1, [pc, #144]	@ (800cbfc <pbuf_copy+0x19c>)
 800cb6c:	4820      	ldr	r0, [pc, #128]	@ (800cbf0 <pbuf_copy+0x190>)
 800cb6e:	f009 fb6d 	bl	801624c <iprintf>
 800cb72:	f06f 030f 	mvn.w	r3, #15
 800cb76:	e032      	b.n	800cbde <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d013      	beq.n	800cba6 <pbuf_copy+0x146>
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	895a      	ldrh	r2, [r3, #10]
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	891b      	ldrh	r3, [r3, #8]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d10d      	bne.n	800cba6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d009      	beq.n	800cba6 <pbuf_copy+0x146>
 800cb92:	4b15      	ldr	r3, [pc, #84]	@ (800cbe8 <pbuf_copy+0x188>)
 800cb94:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800cb98:	4919      	ldr	r1, [pc, #100]	@ (800cc00 <pbuf_copy+0x1a0>)
 800cb9a:	4815      	ldr	r0, [pc, #84]	@ (800cbf0 <pbuf_copy+0x190>)
 800cb9c:	f009 fb56 	bl	801624c <iprintf>
 800cba0:	f06f 0305 	mvn.w	r3, #5
 800cba4:	e01b      	b.n	800cbde <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d013      	beq.n	800cbd4 <pbuf_copy+0x174>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	895a      	ldrh	r2, [r3, #10]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	891b      	ldrh	r3, [r3, #8]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d10d      	bne.n	800cbd4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d009      	beq.n	800cbd4 <pbuf_copy+0x174>
 800cbc0:	4b09      	ldr	r3, [pc, #36]	@ (800cbe8 <pbuf_copy+0x188>)
 800cbc2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800cbc6:	490e      	ldr	r1, [pc, #56]	@ (800cc00 <pbuf_copy+0x1a0>)
 800cbc8:	4809      	ldr	r0, [pc, #36]	@ (800cbf0 <pbuf_copy+0x190>)
 800cbca:	f009 fb3f 	bl	801624c <iprintf>
 800cbce:	f06f 0305 	mvn.w	r3, #5
 800cbd2:	e004      	b.n	800cbde <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f47f af61 	bne.w	800ca9e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3718      	adds	r7, #24
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	0801a054 	.word	0x0801a054
 800cbec:	0801a2fc 	.word	0x0801a2fc
 800cbf0:	0801a0b4 	.word	0x0801a0b4
 800cbf4:	0801a32c 	.word	0x0801a32c
 800cbf8:	0801a344 	.word	0x0801a344
 800cbfc:	0801a360 	.word	0x0801a360
 800cc00:	0801a370 	.word	0x0801a370

0800cc04 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	461a      	mov	r2, r3
 800cc12:	460b      	mov	r3, r1
 800cc14:	80fb      	strh	r3, [r7, #6]
 800cc16:	4613      	mov	r3, r2
 800cc18:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d108      	bne.n	800cc3a <pbuf_copy_partial+0x36>
 800cc28:	4b2b      	ldr	r3, [pc, #172]	@ (800ccd8 <pbuf_copy_partial+0xd4>)
 800cc2a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800cc2e:	492b      	ldr	r1, [pc, #172]	@ (800ccdc <pbuf_copy_partial+0xd8>)
 800cc30:	482b      	ldr	r0, [pc, #172]	@ (800cce0 <pbuf_copy_partial+0xdc>)
 800cc32:	f009 fb0b 	bl	801624c <iprintf>
 800cc36:	2300      	movs	r3, #0
 800cc38:	e04a      	b.n	800ccd0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d108      	bne.n	800cc52 <pbuf_copy_partial+0x4e>
 800cc40:	4b25      	ldr	r3, [pc, #148]	@ (800ccd8 <pbuf_copy_partial+0xd4>)
 800cc42:	f240 420b 	movw	r2, #1035	@ 0x40b
 800cc46:	4927      	ldr	r1, [pc, #156]	@ (800cce4 <pbuf_copy_partial+0xe0>)
 800cc48:	4825      	ldr	r0, [pc, #148]	@ (800cce0 <pbuf_copy_partial+0xdc>)
 800cc4a:	f009 faff 	bl	801624c <iprintf>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	e03e      	b.n	800ccd0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	61fb      	str	r3, [r7, #28]
 800cc56:	e034      	b.n	800ccc2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cc58:	88bb      	ldrh	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00a      	beq.n	800cc74 <pbuf_copy_partial+0x70>
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	895b      	ldrh	r3, [r3, #10]
 800cc62:	88ba      	ldrh	r2, [r7, #4]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d305      	bcc.n	800cc74 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	895b      	ldrh	r3, [r3, #10]
 800cc6c:	88ba      	ldrh	r2, [r7, #4]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	80bb      	strh	r3, [r7, #4]
 800cc72:	e023      	b.n	800ccbc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	895a      	ldrh	r2, [r3, #10]
 800cc78:	88bb      	ldrh	r3, [r7, #4]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cc7e:	8b3a      	ldrh	r2, [r7, #24]
 800cc80:	88fb      	ldrh	r3, [r7, #6]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d901      	bls.n	800cc8a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cc86:	88fb      	ldrh	r3, [r7, #6]
 800cc88:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cc8a:	8b7b      	ldrh	r3, [r7, #26]
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	18d0      	adds	r0, r2, r3
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	685a      	ldr	r2, [r3, #4]
 800cc94:	88bb      	ldrh	r3, [r7, #4]
 800cc96:	4413      	add	r3, r2
 800cc98:	8b3a      	ldrh	r2, [r7, #24]
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	f009 fcfb 	bl	8016696 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cca0:	8afa      	ldrh	r2, [r7, #22]
 800cca2:	8b3b      	ldrh	r3, [r7, #24]
 800cca4:	4413      	add	r3, r2
 800cca6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cca8:	8b7a      	ldrh	r2, [r7, #26]
 800ccaa:	8b3b      	ldrh	r3, [r7, #24]
 800ccac:	4413      	add	r3, r2
 800ccae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ccb0:	88fa      	ldrh	r2, [r7, #6]
 800ccb2:	8b3b      	ldrh	r3, [r7, #24]
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	61fb      	str	r3, [r7, #28]
 800ccc2:	88fb      	ldrh	r3, [r7, #6]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <pbuf_copy_partial+0xca>
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1c4      	bne.n	800cc58 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ccce:	8afb      	ldrh	r3, [r7, #22]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3720      	adds	r7, #32
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	0801a054 	.word	0x0801a054
 800ccdc:	0801a39c 	.word	0x0801a39c
 800cce0:	0801a0b4 	.word	0x0801a0b4
 800cce4:	0801a3bc 	.word	0x0801a3bc

0800cce8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b088      	sub	sp, #32
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800ccf6:	88fb      	ldrh	r3, [r7, #6]
 800ccf8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d109      	bne.n	800cd18 <pbuf_take+0x30>
 800cd04:	4b3a      	ldr	r3, [pc, #232]	@ (800cdf0 <pbuf_take+0x108>)
 800cd06:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800cd0a:	493a      	ldr	r1, [pc, #232]	@ (800cdf4 <pbuf_take+0x10c>)
 800cd0c:	483a      	ldr	r0, [pc, #232]	@ (800cdf8 <pbuf_take+0x110>)
 800cd0e:	f009 fa9d 	bl	801624c <iprintf>
 800cd12:	f06f 030f 	mvn.w	r3, #15
 800cd16:	e067      	b.n	800cde8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d109      	bne.n	800cd32 <pbuf_take+0x4a>
 800cd1e:	4b34      	ldr	r3, [pc, #208]	@ (800cdf0 <pbuf_take+0x108>)
 800cd20:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800cd24:	4935      	ldr	r1, [pc, #212]	@ (800cdfc <pbuf_take+0x114>)
 800cd26:	4834      	ldr	r0, [pc, #208]	@ (800cdf8 <pbuf_take+0x110>)
 800cd28:	f009 fa90 	bl	801624c <iprintf>
 800cd2c:	f06f 030f 	mvn.w	r3, #15
 800cd30:	e05a      	b.n	800cde8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	891b      	ldrh	r3, [r3, #8]
 800cd36:	88fa      	ldrh	r2, [r7, #6]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d909      	bls.n	800cd50 <pbuf_take+0x68>
 800cd3c:	4b2c      	ldr	r3, [pc, #176]	@ (800cdf0 <pbuf_take+0x108>)
 800cd3e:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800cd42:	492f      	ldr	r1, [pc, #188]	@ (800ce00 <pbuf_take+0x118>)
 800cd44:	482c      	ldr	r0, [pc, #176]	@ (800cdf8 <pbuf_take+0x110>)
 800cd46:	f009 fa81 	bl	801624c <iprintf>
 800cd4a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd4e:	e04b      	b.n	800cde8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d007      	beq.n	800cd66 <pbuf_take+0x7e>
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d004      	beq.n	800cd66 <pbuf_take+0x7e>
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	891b      	ldrh	r3, [r3, #8]
 800cd60:	88fa      	ldrh	r2, [r7, #6]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d902      	bls.n	800cd6c <pbuf_take+0x84>
    return ERR_ARG;
 800cd66:	f06f 030f 	mvn.w	r3, #15
 800cd6a:	e03d      	b.n	800cde8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	61fb      	str	r3, [r7, #28]
 800cd70:	e028      	b.n	800cdc4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d106      	bne.n	800cd86 <pbuf_take+0x9e>
 800cd78:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf0 <pbuf_take+0x108>)
 800cd7a:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800cd7e:	4921      	ldr	r1, [pc, #132]	@ (800ce04 <pbuf_take+0x11c>)
 800cd80:	481d      	ldr	r0, [pc, #116]	@ (800cdf8 <pbuf_take+0x110>)
 800cd82:	f009 fa63 	bl	801624c <iprintf>
    buf_copy_len = total_copy_len;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	895b      	ldrh	r3, [r3, #10]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d902      	bls.n	800cd9c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	895b      	ldrh	r3, [r3, #10]
 800cd9a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	6858      	ldr	r0, [r3, #4]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	4413      	add	r3, r2
 800cda6:	69ba      	ldr	r2, [r7, #24]
 800cda8:	4619      	mov	r1, r3
 800cdaa:	f009 fc74 	bl	8016696 <memcpy>
    total_copy_len -= buf_copy_len;
 800cdae:	697a      	ldr	r2, [r7, #20]
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800cdb6:	693a      	ldr	r2, [r7, #16]
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	4413      	add	r3, r2
 800cdbc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	61fb      	str	r3, [r7, #28]
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1d3      	bne.n	800cd72 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d103      	bne.n	800cdd8 <pbuf_take+0xf0>
 800cdd0:	88fb      	ldrh	r3, [r7, #6]
 800cdd2:	693a      	ldr	r2, [r7, #16]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d006      	beq.n	800cde6 <pbuf_take+0xfe>
 800cdd8:	4b05      	ldr	r3, [pc, #20]	@ (800cdf0 <pbuf_take+0x108>)
 800cdda:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800cdde:	490a      	ldr	r1, [pc, #40]	@ (800ce08 <pbuf_take+0x120>)
 800cde0:	4805      	ldr	r0, [pc, #20]	@ (800cdf8 <pbuf_take+0x110>)
 800cde2:	f009 fa33 	bl	801624c <iprintf>
  return ERR_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3720      	adds	r7, #32
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	0801a054 	.word	0x0801a054
 800cdf4:	0801a42c 	.word	0x0801a42c
 800cdf8:	0801a0b4 	.word	0x0801a0b4
 800cdfc:	0801a444 	.word	0x0801a444
 800ce00:	0801a460 	.word	0x0801a460
 800ce04:	0801a480 	.word	0x0801a480
 800ce08:	0801a498 	.word	0x0801a498

0800ce0c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	4603      	mov	r3, r0
 800ce14:	603a      	str	r2, [r7, #0]
 800ce16:	71fb      	strb	r3, [r7, #7]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	8919      	ldrh	r1, [r3, #8]
 800ce20:	88ba      	ldrh	r2, [r7, #4]
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7ff fa0f 	bl	800c248 <pbuf_alloc>
 800ce2a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <pbuf_clone+0x2a>
    return NULL;
 800ce32:	2300      	movs	r3, #0
 800ce34:	e011      	b.n	800ce5a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f7ff fe11 	bl	800ca60 <pbuf_copy>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ce42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d006      	beq.n	800ce58 <pbuf_clone+0x4c>
 800ce4a:	4b06      	ldr	r3, [pc, #24]	@ (800ce64 <pbuf_clone+0x58>)
 800ce4c:	f240 5224 	movw	r2, #1316	@ 0x524
 800ce50:	4905      	ldr	r1, [pc, #20]	@ (800ce68 <pbuf_clone+0x5c>)
 800ce52:	4806      	ldr	r0, [pc, #24]	@ (800ce6c <pbuf_clone+0x60>)
 800ce54:	f009 f9fa 	bl	801624c <iprintf>
  return q;
 800ce58:	68fb      	ldr	r3, [r7, #12]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	0801a054 	.word	0x0801a054
 800ce68:	0801a4c8 	.word	0x0801a4c8
 800ce6c:	0801a0b4 	.word	0x0801a0b4

0800ce70 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ce74:	f008 fa34 	bl	80152e0 <rand>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	4b01      	ldr	r3, [pc, #4]	@ (800ce90 <tcp_init+0x20>)
 800ce8a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ce8c:	bf00      	nop
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	24000024 	.word	0x24000024

0800ce94 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	7d1b      	ldrb	r3, [r3, #20]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d105      	bne.n	800ceb0 <tcp_free+0x1c>
 800cea4:	4b06      	ldr	r3, [pc, #24]	@ (800cec0 <tcp_free+0x2c>)
 800cea6:	22d4      	movs	r2, #212	@ 0xd4
 800cea8:	4906      	ldr	r1, [pc, #24]	@ (800cec4 <tcp_free+0x30>)
 800ceaa:	4807      	ldr	r0, [pc, #28]	@ (800cec8 <tcp_free+0x34>)
 800ceac:	f009 f9ce 	bl	801624c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ceb0:	6879      	ldr	r1, [r7, #4]
 800ceb2:	2001      	movs	r0, #1
 800ceb4:	f7fe fe36 	bl	800bb24 <memp_free>
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	0801a554 	.word	0x0801a554
 800cec4:	0801a584 	.word	0x0801a584
 800cec8:	0801a598 	.word	0x0801a598

0800cecc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	7d1b      	ldrb	r3, [r3, #20]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d105      	bne.n	800cee8 <tcp_free_listen+0x1c>
 800cedc:	4b06      	ldr	r3, [pc, #24]	@ (800cef8 <tcp_free_listen+0x2c>)
 800cede:	22df      	movs	r2, #223	@ 0xdf
 800cee0:	4906      	ldr	r1, [pc, #24]	@ (800cefc <tcp_free_listen+0x30>)
 800cee2:	4807      	ldr	r0, [pc, #28]	@ (800cf00 <tcp_free_listen+0x34>)
 800cee4:	f009 f9b2 	bl	801624c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cee8:	6879      	ldr	r1, [r7, #4]
 800ceea:	2002      	movs	r0, #2
 800ceec:	f7fe fe1a 	bl	800bb24 <memp_free>
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	0801a554 	.word	0x0801a554
 800cefc:	0801a5c0 	.word	0x0801a5c0
 800cf00:	0801a598 	.word	0x0801a598

0800cf04 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cf08:	f000 fea4 	bl	800dc54 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cf0c:	4b07      	ldr	r3, [pc, #28]	@ (800cf2c <tcp_tmr+0x28>)
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	3301      	adds	r3, #1
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	4b05      	ldr	r3, [pc, #20]	@ (800cf2c <tcp_tmr+0x28>)
 800cf16:	701a      	strb	r2, [r3, #0]
 800cf18:	4b04      	ldr	r3, [pc, #16]	@ (800cf2c <tcp_tmr+0x28>)
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cf24:	f000 fb54 	bl	800d5d0 <tcp_slowtmr>
  }
}
 800cf28:	bf00      	nop
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	24008299 	.word	0x24008299

0800cf30 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d105      	bne.n	800cf4c <tcp_remove_listener+0x1c>
 800cf40:	4b0d      	ldr	r3, [pc, #52]	@ (800cf78 <tcp_remove_listener+0x48>)
 800cf42:	22ff      	movs	r2, #255	@ 0xff
 800cf44:	490d      	ldr	r1, [pc, #52]	@ (800cf7c <tcp_remove_listener+0x4c>)
 800cf46:	480e      	ldr	r0, [pc, #56]	@ (800cf80 <tcp_remove_listener+0x50>)
 800cf48:	f009 f980 	bl	801624c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	60fb      	str	r3, [r7, #12]
 800cf50:	e00a      	b.n	800cf68 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf56:	683a      	ldr	r2, [r7, #0]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d102      	bne.n	800cf62 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1f1      	bne.n	800cf52 <tcp_remove_listener+0x22>
    }
  }
}
 800cf6e:	bf00      	nop
 800cf70:	bf00      	nop
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	0801a554 	.word	0x0801a554
 800cf7c:	0801a5dc 	.word	0x0801a5dc
 800cf80:	0801a598 	.word	0x0801a598

0800cf84 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d106      	bne.n	800cfa0 <tcp_listen_closed+0x1c>
 800cf92:	4b14      	ldr	r3, [pc, #80]	@ (800cfe4 <tcp_listen_closed+0x60>)
 800cf94:	f240 1211 	movw	r2, #273	@ 0x111
 800cf98:	4913      	ldr	r1, [pc, #76]	@ (800cfe8 <tcp_listen_closed+0x64>)
 800cf9a:	4814      	ldr	r0, [pc, #80]	@ (800cfec <tcp_listen_closed+0x68>)
 800cf9c:	f009 f956 	bl	801624c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	7d1b      	ldrb	r3, [r3, #20]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d006      	beq.n	800cfb6 <tcp_listen_closed+0x32>
 800cfa8:	4b0e      	ldr	r3, [pc, #56]	@ (800cfe4 <tcp_listen_closed+0x60>)
 800cfaa:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800cfae:	4910      	ldr	r1, [pc, #64]	@ (800cff0 <tcp_listen_closed+0x6c>)
 800cfb0:	480e      	ldr	r0, [pc, #56]	@ (800cfec <tcp_listen_closed+0x68>)
 800cfb2:	f009 f94b 	bl	801624c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	60fb      	str	r3, [r7, #12]
 800cfba:	e00b      	b.n	800cfd4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cfbc:	4a0d      	ldr	r2, [pc, #52]	@ (800cff4 <tcp_listen_closed+0x70>)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	6879      	ldr	r1, [r7, #4]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7ff ffb1 	bl	800cf30 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	60fb      	str	r3, [r7, #12]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b03      	cmp	r3, #3
 800cfd8:	d9f0      	bls.n	800cfbc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cfda:	bf00      	nop
 800cfdc:	bf00      	nop
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	0801a554 	.word	0x0801a554
 800cfe8:	0801a604 	.word	0x0801a604
 800cfec:	0801a598 	.word	0x0801a598
 800cff0:	0801a610 	.word	0x0801a610
 800cff4:	0801c564 	.word	0x0801c564

0800cff8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cff8:	b5b0      	push	{r4, r5, r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af04      	add	r7, sp, #16
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	460b      	mov	r3, r1
 800d002:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <tcp_close_shutdown+0x20>
 800d00a:	4b63      	ldr	r3, [pc, #396]	@ (800d198 <tcp_close_shutdown+0x1a0>)
 800d00c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d010:	4962      	ldr	r1, [pc, #392]	@ (800d19c <tcp_close_shutdown+0x1a4>)
 800d012:	4863      	ldr	r0, [pc, #396]	@ (800d1a0 <tcp_close_shutdown+0x1a8>)
 800d014:	f009 f91a 	bl	801624c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d066      	beq.n	800d0ec <tcp_close_shutdown+0xf4>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	7d1b      	ldrb	r3, [r3, #20]
 800d022:	2b04      	cmp	r3, #4
 800d024:	d003      	beq.n	800d02e <tcp_close_shutdown+0x36>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	7d1b      	ldrb	r3, [r3, #20]
 800d02a:	2b07      	cmp	r3, #7
 800d02c:	d15e      	bne.n	800d0ec <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d032:	2b00      	cmp	r3, #0
 800d034:	d104      	bne.n	800d040 <tcp_close_shutdown+0x48>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d03a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d03e:	d055      	beq.n	800d0ec <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	8b5b      	ldrh	r3, [r3, #26]
 800d044:	f003 0310 	and.w	r3, r3, #16
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d106      	bne.n	800d05a <tcp_close_shutdown+0x62>
 800d04c:	4b52      	ldr	r3, [pc, #328]	@ (800d198 <tcp_close_shutdown+0x1a0>)
 800d04e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d052:	4954      	ldr	r1, [pc, #336]	@ (800d1a4 <tcp_close_shutdown+0x1ac>)
 800d054:	4852      	ldr	r0, [pc, #328]	@ (800d1a0 <tcp_close_shutdown+0x1a8>)
 800d056:	f009 f8f9 	bl	801624c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d062:	687d      	ldr	r5, [r7, #4]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	3304      	adds	r3, #4
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	8ad2      	ldrh	r2, [r2, #22]
 800d06c:	6879      	ldr	r1, [r7, #4]
 800d06e:	8b09      	ldrh	r1, [r1, #24]
 800d070:	9102      	str	r1, [sp, #8]
 800d072:	9201      	str	r2, [sp, #4]
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	462b      	mov	r3, r5
 800d078:	4622      	mov	r2, r4
 800d07a:	4601      	mov	r1, r0
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f004 fe8d 	bl	8011d9c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f001 f8c8 	bl	800e218 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d088:	4b47      	ldr	r3, [pc, #284]	@ (800d1a8 <tcp_close_shutdown+0x1b0>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d105      	bne.n	800d09e <tcp_close_shutdown+0xa6>
 800d092:	4b45      	ldr	r3, [pc, #276]	@ (800d1a8 <tcp_close_shutdown+0x1b0>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	4a43      	ldr	r2, [pc, #268]	@ (800d1a8 <tcp_close_shutdown+0x1b0>)
 800d09a:	6013      	str	r3, [r2, #0]
 800d09c:	e013      	b.n	800d0c6 <tcp_close_shutdown+0xce>
 800d09e:	4b42      	ldr	r3, [pc, #264]	@ (800d1a8 <tcp_close_shutdown+0x1b0>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	60fb      	str	r3, [r7, #12]
 800d0a4:	e00c      	b.n	800d0c0 <tcp_close_shutdown+0xc8>
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d104      	bne.n	800d0ba <tcp_close_shutdown+0xc2>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	68da      	ldr	r2, [r3, #12]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	60da      	str	r2, [r3, #12]
 800d0b8:	e005      	b.n	800d0c6 <tcp_close_shutdown+0xce>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	60fb      	str	r3, [r7, #12]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1ef      	bne.n	800d0a6 <tcp_close_shutdown+0xae>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	60da      	str	r2, [r3, #12]
 800d0cc:	4b37      	ldr	r3, [pc, #220]	@ (800d1ac <tcp_close_shutdown+0x1b4>)
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d0d2:	4b37      	ldr	r3, [pc, #220]	@ (800d1b0 <tcp_close_shutdown+0x1b8>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d102      	bne.n	800d0e2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d0dc:	f003 fd5c 	bl	8010b98 <tcp_trigger_input_pcb_close>
 800d0e0:	e002      	b.n	800d0e8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7ff fed6 	bl	800ce94 <tcp_free>
      }
      return ERR_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	e050      	b.n	800d18e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	7d1b      	ldrb	r3, [r3, #20]
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	d03b      	beq.n	800d16c <tcp_close_shutdown+0x174>
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	dc44      	bgt.n	800d182 <tcp_close_shutdown+0x18a>
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <tcp_close_shutdown+0x10a>
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d02a      	beq.n	800d156 <tcp_close_shutdown+0x15e>
 800d100:	e03f      	b.n	800d182 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	8adb      	ldrh	r3, [r3, #22]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d021      	beq.n	800d14e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d10a:	4b2a      	ldr	r3, [pc, #168]	@ (800d1b4 <tcp_close_shutdown+0x1bc>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	429a      	cmp	r2, r3
 800d112:	d105      	bne.n	800d120 <tcp_close_shutdown+0x128>
 800d114:	4b27      	ldr	r3, [pc, #156]	@ (800d1b4 <tcp_close_shutdown+0x1bc>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	4a26      	ldr	r2, [pc, #152]	@ (800d1b4 <tcp_close_shutdown+0x1bc>)
 800d11c:	6013      	str	r3, [r2, #0]
 800d11e:	e013      	b.n	800d148 <tcp_close_shutdown+0x150>
 800d120:	4b24      	ldr	r3, [pc, #144]	@ (800d1b4 <tcp_close_shutdown+0x1bc>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	60bb      	str	r3, [r7, #8]
 800d126:	e00c      	b.n	800d142 <tcp_close_shutdown+0x14a>
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d104      	bne.n	800d13c <tcp_close_shutdown+0x144>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	68da      	ldr	r2, [r3, #12]
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	60da      	str	r2, [r3, #12]
 800d13a:	e005      	b.n	800d148 <tcp_close_shutdown+0x150>
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	60bb      	str	r3, [r7, #8]
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1ef      	bne.n	800d128 <tcp_close_shutdown+0x130>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7ff fea0 	bl	800ce94 <tcp_free>
      break;
 800d154:	e01a      	b.n	800d18c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff ff14 	bl	800cf84 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d15c:	6879      	ldr	r1, [r7, #4]
 800d15e:	4816      	ldr	r0, [pc, #88]	@ (800d1b8 <tcp_close_shutdown+0x1c0>)
 800d160:	f001 f8aa 	bl	800e2b8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff feb1 	bl	800cecc <tcp_free_listen>
      break;
 800d16a:	e00f      	b.n	800d18c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d16c:	6879      	ldr	r1, [r7, #4]
 800d16e:	480e      	ldr	r0, [pc, #56]	@ (800d1a8 <tcp_close_shutdown+0x1b0>)
 800d170:	f001 f8a2 	bl	800e2b8 <tcp_pcb_remove>
 800d174:	4b0d      	ldr	r3, [pc, #52]	@ (800d1ac <tcp_close_shutdown+0x1b4>)
 800d176:	2201      	movs	r2, #1
 800d178:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7ff fe8a 	bl	800ce94 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d180:	e004      	b.n	800d18c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f81a 	bl	800d1bc <tcp_close_shutdown_fin>
 800d188:	4603      	mov	r3, r0
 800d18a:	e000      	b.n	800d18e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bdb0      	pop	{r4, r5, r7, pc}
 800d196:	bf00      	nop
 800d198:	0801a554 	.word	0x0801a554
 800d19c:	0801a628 	.word	0x0801a628
 800d1a0:	0801a598 	.word	0x0801a598
 800d1a4:	0801a648 	.word	0x0801a648
 800d1a8:	24008290 	.word	0x24008290
 800d1ac:	24008298 	.word	0x24008298
 800d1b0:	240082d0 	.word	0x240082d0
 800d1b4:	24008288 	.word	0x24008288
 800d1b8:	2400828c 	.word	0x2400828c

0800d1bc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d106      	bne.n	800d1d8 <tcp_close_shutdown_fin+0x1c>
 800d1ca:	4b2e      	ldr	r3, [pc, #184]	@ (800d284 <tcp_close_shutdown_fin+0xc8>)
 800d1cc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d1d0:	492d      	ldr	r1, [pc, #180]	@ (800d288 <tcp_close_shutdown_fin+0xcc>)
 800d1d2:	482e      	ldr	r0, [pc, #184]	@ (800d28c <tcp_close_shutdown_fin+0xd0>)
 800d1d4:	f009 f83a 	bl	801624c <iprintf>

  switch (pcb->state) {
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	7d1b      	ldrb	r3, [r3, #20]
 800d1dc:	2b07      	cmp	r3, #7
 800d1de:	d020      	beq.n	800d222 <tcp_close_shutdown_fin+0x66>
 800d1e0:	2b07      	cmp	r3, #7
 800d1e2:	dc2b      	bgt.n	800d23c <tcp_close_shutdown_fin+0x80>
 800d1e4:	2b03      	cmp	r3, #3
 800d1e6:	d002      	beq.n	800d1ee <tcp_close_shutdown_fin+0x32>
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	d00d      	beq.n	800d208 <tcp_close_shutdown_fin+0x4c>
 800d1ec:	e026      	b.n	800d23c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f003 fee2 	bl	8010fb8 <tcp_send_fin>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d1f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d11f      	bne.n	800d240 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2205      	movs	r2, #5
 800d204:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d206:	e01b      	b.n	800d240 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f003 fed5 	bl	8010fb8 <tcp_send_fin>
 800d20e:	4603      	mov	r3, r0
 800d210:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d114      	bne.n	800d244 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2205      	movs	r2, #5
 800d21e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d220:	e010      	b.n	800d244 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f003 fec8 	bl	8010fb8 <tcp_send_fin>
 800d228:	4603      	mov	r3, r0
 800d22a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d22c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d109      	bne.n	800d248 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2209      	movs	r2, #9
 800d238:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d23a:	e005      	b.n	800d248 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	e01c      	b.n	800d27a <tcp_close_shutdown_fin+0xbe>
      break;
 800d240:	bf00      	nop
 800d242:	e002      	b.n	800d24a <tcp_close_shutdown_fin+0x8e>
      break;
 800d244:	bf00      	nop
 800d246:	e000      	b.n	800d24a <tcp_close_shutdown_fin+0x8e>
      break;
 800d248:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d103      	bne.n	800d25a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f003 ffee 	bl	8011234 <tcp_output>
 800d258:	e00d      	b.n	800d276 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d262:	d108      	bne.n	800d276 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	8b5b      	ldrh	r3, [r3, #26]
 800d268:	f043 0308 	orr.w	r3, r3, #8
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d272:	2300      	movs	r3, #0
 800d274:	e001      	b.n	800d27a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	0801a554 	.word	0x0801a554
 800d288:	0801a604 	.word	0x0801a604
 800d28c:	0801a598 	.word	0x0801a598

0800d290 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d109      	bne.n	800d2b2 <tcp_close+0x22>
 800d29e:	4b0f      	ldr	r3, [pc, #60]	@ (800d2dc <tcp_close+0x4c>)
 800d2a0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d2a4:	490e      	ldr	r1, [pc, #56]	@ (800d2e0 <tcp_close+0x50>)
 800d2a6:	480f      	ldr	r0, [pc, #60]	@ (800d2e4 <tcp_close+0x54>)
 800d2a8:	f008 ffd0 	bl	801624c <iprintf>
 800d2ac:	f06f 030f 	mvn.w	r3, #15
 800d2b0:	e00f      	b.n	800d2d2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	7d1b      	ldrb	r3, [r3, #20]
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d006      	beq.n	800d2c8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	8b5b      	ldrh	r3, [r3, #26]
 800d2be:	f043 0310 	orr.w	r3, r3, #16
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d2c8:	2101      	movs	r1, #1
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f7ff fe94 	bl	800cff8 <tcp_close_shutdown>
 800d2d0:	4603      	mov	r3, r0
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	0801a554 	.word	0x0801a554
 800d2e0:	0801a664 	.word	0x0801a664
 800d2e4:	0801a598 	.word	0x0801a598

0800d2e8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08e      	sub	sp, #56	@ 0x38
 800d2ec:	af04      	add	r7, sp, #16
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d107      	bne.n	800d308 <tcp_abandon+0x20>
 800d2f8:	4b52      	ldr	r3, [pc, #328]	@ (800d444 <tcp_abandon+0x15c>)
 800d2fa:	f240 223d 	movw	r2, #573	@ 0x23d
 800d2fe:	4952      	ldr	r1, [pc, #328]	@ (800d448 <tcp_abandon+0x160>)
 800d300:	4852      	ldr	r0, [pc, #328]	@ (800d44c <tcp_abandon+0x164>)
 800d302:	f008 ffa3 	bl	801624c <iprintf>
 800d306:	e099      	b.n	800d43c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	7d1b      	ldrb	r3, [r3, #20]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d106      	bne.n	800d31e <tcp_abandon+0x36>
 800d310:	4b4c      	ldr	r3, [pc, #304]	@ (800d444 <tcp_abandon+0x15c>)
 800d312:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d316:	494e      	ldr	r1, [pc, #312]	@ (800d450 <tcp_abandon+0x168>)
 800d318:	484c      	ldr	r0, [pc, #304]	@ (800d44c <tcp_abandon+0x164>)
 800d31a:	f008 ff97 	bl	801624c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	7d1b      	ldrb	r3, [r3, #20]
 800d322:	2b0a      	cmp	r3, #10
 800d324:	d107      	bne.n	800d336 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d326:	6879      	ldr	r1, [r7, #4]
 800d328:	484a      	ldr	r0, [pc, #296]	@ (800d454 <tcp_abandon+0x16c>)
 800d32a:	f000 ffc5 	bl	800e2b8 <tcp_pcb_remove>
    tcp_free(pcb);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7ff fdb0 	bl	800ce94 <tcp_free>
 800d334:	e082      	b.n	800d43c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d342:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d348:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d350:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	7d1b      	ldrb	r3, [r3, #20]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d126      	bne.n	800d3ae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	8adb      	ldrh	r3, [r3, #22]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d02e      	beq.n	800d3c6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d368:	4b3b      	ldr	r3, [pc, #236]	@ (800d458 <tcp_abandon+0x170>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d105      	bne.n	800d37e <tcp_abandon+0x96>
 800d372:	4b39      	ldr	r3, [pc, #228]	@ (800d458 <tcp_abandon+0x170>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	4a37      	ldr	r2, [pc, #220]	@ (800d458 <tcp_abandon+0x170>)
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	e013      	b.n	800d3a6 <tcp_abandon+0xbe>
 800d37e:	4b36      	ldr	r3, [pc, #216]	@ (800d458 <tcp_abandon+0x170>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	61fb      	str	r3, [r7, #28]
 800d384:	e00c      	b.n	800d3a0 <tcp_abandon+0xb8>
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d104      	bne.n	800d39a <tcp_abandon+0xb2>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	68da      	ldr	r2, [r3, #12]
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	60da      	str	r2, [r3, #12]
 800d398:	e005      	b.n	800d3a6 <tcp_abandon+0xbe>
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	61fb      	str	r3, [r7, #28]
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1ef      	bne.n	800d386 <tcp_abandon+0x9e>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	60da      	str	r2, [r3, #12]
 800d3ac:	e00b      	b.n	800d3c6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	8adb      	ldrh	r3, [r3, #22]
 800d3b6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	4828      	ldr	r0, [pc, #160]	@ (800d45c <tcp_abandon+0x174>)
 800d3bc:	f000 ff7c 	bl	800e2b8 <tcp_pcb_remove>
 800d3c0:	4b27      	ldr	r3, [pc, #156]	@ (800d460 <tcp_abandon+0x178>)
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d004      	beq.n	800d3d8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 fd1e 	bl	800de14 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d004      	beq.n	800d3ea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 fd15 	bl	800de14 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d004      	beq.n	800d3fc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 fd0c 	bl	800de14 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00e      	beq.n	800d420 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d402:	6879      	ldr	r1, [r7, #4]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3304      	adds	r3, #4
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	8b12      	ldrh	r2, [r2, #24]
 800d40c:	9202      	str	r2, [sp, #8]
 800d40e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d410:	9201      	str	r2, [sp, #4]
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	460b      	mov	r3, r1
 800d416:	697a      	ldr	r2, [r7, #20]
 800d418:	69b9      	ldr	r1, [r7, #24]
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f004 fcbe 	bl	8011d9c <tcp_rst>
    }
    last_state = pcb->state;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	7d1b      	ldrb	r3, [r3, #20]
 800d424:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff fd34 	bl	800ce94 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d004      	beq.n	800d43c <tcp_abandon+0x154>
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	f06f 010c 	mvn.w	r1, #12
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	4798      	blx	r3
  }
}
 800d43c:	3728      	adds	r7, #40	@ 0x28
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	0801a554 	.word	0x0801a554
 800d448:	0801a698 	.word	0x0801a698
 800d44c:	0801a598 	.word	0x0801a598
 800d450:	0801a6b4 	.word	0x0801a6b4
 800d454:	24008294 	.word	0x24008294
 800d458:	24008288 	.word	0x24008288
 800d45c:	24008290 	.word	0x24008290
 800d460:	24008298 	.word	0x24008298

0800d464 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d46c:	2101      	movs	r1, #1
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f7ff ff3a 	bl	800d2e8 <tcp_abandon>
}
 800d474:	bf00      	nop
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d106      	bne.n	800d498 <tcp_update_rcv_ann_wnd+0x1c>
 800d48a:	4b25      	ldr	r3, [pc, #148]	@ (800d520 <tcp_update_rcv_ann_wnd+0xa4>)
 800d48c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d490:	4924      	ldr	r1, [pc, #144]	@ (800d524 <tcp_update_rcv_ann_wnd+0xa8>)
 800d492:	4825      	ldr	r0, [pc, #148]	@ (800d528 <tcp_update_rcv_ann_wnd+0xac>)
 800d494:	f008 feda 	bl	801624c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d4a0:	4413      	add	r3, r2
 800d4a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800d4ac:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800d4b0:	bf28      	it	cs
 800d4b2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800d4b6:	b292      	uxth	r2, r2
 800d4b8:	4413      	add	r3, r2
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	1ad3      	subs	r3, r2, r3
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	db08      	blt.n	800d4d4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ce:	68fa      	ldr	r2, [r7, #12]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	e020      	b.n	800d516 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	dd03      	ble.n	800d4ea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d4e8:	e014      	b.n	800d514 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4fc:	d306      	bcc.n	800d50c <tcp_update_rcv_ann_wnd+0x90>
 800d4fe:	4b08      	ldr	r3, [pc, #32]	@ (800d520 <tcp_update_rcv_ann_wnd+0xa4>)
 800d500:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800d504:	4909      	ldr	r1, [pc, #36]	@ (800d52c <tcp_update_rcv_ann_wnd+0xb0>)
 800d506:	4808      	ldr	r0, [pc, #32]	@ (800d528 <tcp_update_rcv_ann_wnd+0xac>)
 800d508:	f008 fea0 	bl	801624c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	b29a      	uxth	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800d514:	2300      	movs	r3, #0
  }
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	0801a554 	.word	0x0801a554
 800d524:	0801a7b0 	.word	0x0801a7b0
 800d528:	0801a598 	.word	0x0801a598
 800d52c:	0801a7d4 	.word	0x0801a7d4

0800d530 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	460b      	mov	r3, r1
 800d53a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d107      	bne.n	800d552 <tcp_recved+0x22>
 800d542:	4b1f      	ldr	r3, [pc, #124]	@ (800d5c0 <tcp_recved+0x90>)
 800d544:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800d548:	491e      	ldr	r1, [pc, #120]	@ (800d5c4 <tcp_recved+0x94>)
 800d54a:	481f      	ldr	r0, [pc, #124]	@ (800d5c8 <tcp_recved+0x98>)
 800d54c:	f008 fe7e 	bl	801624c <iprintf>
 800d550:	e032      	b.n	800d5b8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	7d1b      	ldrb	r3, [r3, #20]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d106      	bne.n	800d568 <tcp_recved+0x38>
 800d55a:	4b19      	ldr	r3, [pc, #100]	@ (800d5c0 <tcp_recved+0x90>)
 800d55c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800d560:	491a      	ldr	r1, [pc, #104]	@ (800d5cc <tcp_recved+0x9c>)
 800d562:	4819      	ldr	r0, [pc, #100]	@ (800d5c8 <tcp_recved+0x98>)
 800d564:	f008 fe72 	bl	801624c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d56c:	887b      	ldrh	r3, [r7, #2]
 800d56e:	4413      	add	r3, r2
 800d570:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d572:	89fb      	ldrh	r3, [r7, #14]
 800d574:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d578:	d804      	bhi.n	800d584 <tcp_recved+0x54>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d57e:	89fa      	ldrh	r2, [r7, #14]
 800d580:	429a      	cmp	r2, r3
 800d582:	d204      	bcs.n	800d58e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d58a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d58c:	e002      	b.n	800d594 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	89fa      	ldrh	r2, [r7, #14]
 800d592:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff ff71 	bl	800d47c <tcp_update_rcv_ann_wnd>
 800d59a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d5a2:	d309      	bcc.n	800d5b8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	8b5b      	ldrh	r3, [r3, #26]
 800d5a8:	f043 0302 	orr.w	r3, r3, #2
 800d5ac:	b29a      	uxth	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f003 fe3e 	bl	8011234 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	0801a554 	.word	0x0801a554
 800d5c4:	0801a7f0 	.word	0x0801a7f0
 800d5c8:	0801a598 	.word	0x0801a598
 800d5cc:	0801a808 	.word	0x0801a808

0800d5d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d5d0:	b5b0      	push	{r4, r5, r7, lr}
 800d5d2:	b090      	sub	sp, #64	@ 0x40
 800d5d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d5dc:	4b95      	ldr	r3, [pc, #596]	@ (800d834 <tcp_slowtmr+0x264>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	4a94      	ldr	r2, [pc, #592]	@ (800d834 <tcp_slowtmr+0x264>)
 800d5e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d5e6:	4b94      	ldr	r3, [pc, #592]	@ (800d838 <tcp_slowtmr+0x268>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	4b92      	ldr	r3, [pc, #584]	@ (800d838 <tcp_slowtmr+0x268>)
 800d5f0:	701a      	strb	r2, [r3, #0]
 800d5f2:	e000      	b.n	800d5f6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d5f4:	bf00      	nop
  prev = NULL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d5fa:	4b90      	ldr	r3, [pc, #576]	@ (800d83c <tcp_slowtmr+0x26c>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d600:	e29d      	b.n	800db3e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d604:	7d1b      	ldrb	r3, [r3, #20]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d106      	bne.n	800d618 <tcp_slowtmr+0x48>
 800d60a:	4b8d      	ldr	r3, [pc, #564]	@ (800d840 <tcp_slowtmr+0x270>)
 800d60c:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d610:	498c      	ldr	r1, [pc, #560]	@ (800d844 <tcp_slowtmr+0x274>)
 800d612:	488d      	ldr	r0, [pc, #564]	@ (800d848 <tcp_slowtmr+0x278>)
 800d614:	f008 fe1a 	bl	801624c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61a:	7d1b      	ldrb	r3, [r3, #20]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d106      	bne.n	800d62e <tcp_slowtmr+0x5e>
 800d620:	4b87      	ldr	r3, [pc, #540]	@ (800d840 <tcp_slowtmr+0x270>)
 800d622:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d626:	4989      	ldr	r1, [pc, #548]	@ (800d84c <tcp_slowtmr+0x27c>)
 800d628:	4887      	ldr	r0, [pc, #540]	@ (800d848 <tcp_slowtmr+0x278>)
 800d62a:	f008 fe0f 	bl	801624c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d630:	7d1b      	ldrb	r3, [r3, #20]
 800d632:	2b0a      	cmp	r3, #10
 800d634:	d106      	bne.n	800d644 <tcp_slowtmr+0x74>
 800d636:	4b82      	ldr	r3, [pc, #520]	@ (800d840 <tcp_slowtmr+0x270>)
 800d638:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d63c:	4984      	ldr	r1, [pc, #528]	@ (800d850 <tcp_slowtmr+0x280>)
 800d63e:	4882      	ldr	r0, [pc, #520]	@ (800d848 <tcp_slowtmr+0x278>)
 800d640:	f008 fe04 	bl	801624c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d646:	7f9a      	ldrb	r2, [r3, #30]
 800d648:	4b7b      	ldr	r3, [pc, #492]	@ (800d838 <tcp_slowtmr+0x268>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d105      	bne.n	800d65c <tcp_slowtmr+0x8c>
      prev = pcb;
 800d650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d652:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d65a:	e270      	b.n	800db3e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800d65c:	4b76      	ldr	r3, [pc, #472]	@ (800d838 <tcp_slowtmr+0x268>)
 800d65e:	781a      	ldrb	r2, [r3, #0]
 800d660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d662:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d664:	2300      	movs	r3, #0
 800d666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d672:	7d1b      	ldrb	r3, [r3, #20]
 800d674:	2b02      	cmp	r3, #2
 800d676:	d10a      	bne.n	800d68e <tcp_slowtmr+0xbe>
 800d678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d67a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d67e:	2b05      	cmp	r3, #5
 800d680:	d905      	bls.n	800d68e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d682:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d686:	3301      	adds	r3, #1
 800d688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d68c:	e11e      	b.n	800d8cc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d690:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d694:	2b0b      	cmp	r3, #11
 800d696:	d905      	bls.n	800d6a4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d69c:	3301      	adds	r3, #1
 800d69e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d6a2:	e113      	b.n	800d8cc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d075      	beq.n	800d79a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d006      	beq.n	800d6c4 <tcp_slowtmr+0xf4>
 800d6b6:	4b62      	ldr	r3, [pc, #392]	@ (800d840 <tcp_slowtmr+0x270>)
 800d6b8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800d6bc:	4965      	ldr	r1, [pc, #404]	@ (800d854 <tcp_slowtmr+0x284>)
 800d6be:	4862      	ldr	r0, [pc, #392]	@ (800d848 <tcp_slowtmr+0x278>)
 800d6c0:	f008 fdc4 	bl	801624c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d106      	bne.n	800d6da <tcp_slowtmr+0x10a>
 800d6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800d840 <tcp_slowtmr+0x270>)
 800d6ce:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d6d2:	4961      	ldr	r1, [pc, #388]	@ (800d858 <tcp_slowtmr+0x288>)
 800d6d4:	485c      	ldr	r0, [pc, #368]	@ (800d848 <tcp_slowtmr+0x278>)
 800d6d6:	f008 fdb9 	bl	801624c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6dc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d6e0:	2b0b      	cmp	r3, #11
 800d6e2:	d905      	bls.n	800d6f0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d6ee:	e0ed      	b.n	800d8cc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	4a58      	ldr	r2, [pc, #352]	@ (800d85c <tcp_slowtmr+0x28c>)
 800d6fa:	5cd3      	ldrb	r3, [r2, r3]
 800d6fc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d700:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d704:	7c7a      	ldrb	r2, [r7, #17]
 800d706:	429a      	cmp	r2, r3
 800d708:	d907      	bls.n	800d71a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d710:	3301      	adds	r3, #1
 800d712:	b2da      	uxtb	r2, r3
 800d714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d716:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d720:	7c7a      	ldrb	r2, [r7, #17]
 800d722:	429a      	cmp	r2, r3
 800d724:	f200 80d2 	bhi.w	800d8cc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d728:	2301      	movs	r3, #1
 800d72a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d732:	2b00      	cmp	r3, #0
 800d734:	d108      	bne.n	800d748 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d736:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d738:	f004 fc24 	bl	8011f84 <tcp_zero_window_probe>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d014      	beq.n	800d76c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d742:	2300      	movs	r3, #0
 800d744:	623b      	str	r3, [r7, #32]
 800d746:	e011      	b.n	800d76c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d74e:	4619      	mov	r1, r3
 800d750:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d752:	f003 fae9 	bl	8010d28 <tcp_split_unsent_seg>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d107      	bne.n	800d76c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d75c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d75e:	f003 fd69 	bl	8011234 <tcp_output>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d101      	bne.n	800d76c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 80ac 	beq.w	800d8cc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d776:	2200      	movs	r2, #0
 800d778:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d782:	2b06      	cmp	r3, #6
 800d784:	f200 80a2 	bhi.w	800d8cc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d78e:	3301      	adds	r3, #1
 800d790:	b2da      	uxtb	r2, r3
 800d792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d794:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d798:	e098      	b.n	800d8cc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d79c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	db0f      	blt.n	800d7c4 <tcp_slowtmr+0x1f4>
 800d7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d7aa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d008      	beq.n	800d7c4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	b21a      	sxth	r2, r3
 800d7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	db7b      	blt.n	800d8cc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d7d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7d6:	f004 f821 	bl	801181c <tcp_rexmit_rto_prepare>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d007      	beq.n	800d7f0 <tcp_slowtmr+0x220>
 800d7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d171      	bne.n	800d8cc <tcp_slowtmr+0x2fc>
 800d7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d06d      	beq.n	800d8cc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f2:	7d1b      	ldrb	r3, [r3, #20]
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d03a      	beq.n	800d86e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d7fe:	2b0c      	cmp	r3, #12
 800d800:	bf28      	it	cs
 800d802:	230c      	movcs	r3, #12
 800d804:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d808:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d80c:	10db      	asrs	r3, r3, #3
 800d80e:	b21b      	sxth	r3, r3
 800d810:	461a      	mov	r2, r3
 800d812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d814:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d818:	4413      	add	r3, r2
 800d81a:	7efa      	ldrb	r2, [r7, #27]
 800d81c:	4910      	ldr	r1, [pc, #64]	@ (800d860 <tcp_slowtmr+0x290>)
 800d81e:	5c8a      	ldrb	r2, [r1, r2]
 800d820:	4093      	lsls	r3, r2
 800d822:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d82a:	4293      	cmp	r3, r2
 800d82c:	dc1a      	bgt.n	800d864 <tcp_slowtmr+0x294>
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	b21a      	sxth	r2, r3
 800d832:	e019      	b.n	800d868 <tcp_slowtmr+0x298>
 800d834:	24008284 	.word	0x24008284
 800d838:	2400829a 	.word	0x2400829a
 800d83c:	24008290 	.word	0x24008290
 800d840:	0801a554 	.word	0x0801a554
 800d844:	0801a898 	.word	0x0801a898
 800d848:	0801a598 	.word	0x0801a598
 800d84c:	0801a8c4 	.word	0x0801a8c4
 800d850:	0801a8f0 	.word	0x0801a8f0
 800d854:	0801a920 	.word	0x0801a920
 800d858:	0801a954 	.word	0x0801a954
 800d85c:	0801c55c 	.word	0x0801c55c
 800d860:	0801c54c 	.word	0x0801c54c
 800d864:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d870:	2200      	movs	r2, #0
 800d872:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d876:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d880:	4293      	cmp	r3, r2
 800d882:	bf28      	it	cs
 800d884:	4613      	movcs	r3, r2
 800d886:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d888:	8a7b      	ldrh	r3, [r7, #18]
 800d88a:	085b      	lsrs	r3, r3, #1
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d890:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d896:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d206      	bcs.n	800d8b4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d8aa:	005b      	lsls	r3, r3, #1
 800d8ac:	b29a      	uxth	r2, r3
 800d8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d8c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8c8:	f004 f818 	bl	80118fc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ce:	7d1b      	ldrb	r3, [r3, #20]
 800d8d0:	2b06      	cmp	r3, #6
 800d8d2:	d111      	bne.n	800d8f8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d6:	8b5b      	ldrh	r3, [r3, #26]
 800d8d8:	f003 0310 	and.w	r3, r3, #16
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00b      	beq.n	800d8f8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d8e0:	4b9c      	ldr	r3, [pc, #624]	@ (800db54 <tcp_slowtmr+0x584>)
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e6:	6a1b      	ldr	r3, [r3, #32]
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	2b28      	cmp	r3, #40	@ 0x28
 800d8ec:	d904      	bls.n	800d8f8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d8ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8fa:	7a5b      	ldrb	r3, [r3, #9]
 800d8fc:	f003 0308 	and.w	r3, r3, #8
 800d900:	2b00      	cmp	r3, #0
 800d902:	d04a      	beq.n	800d99a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d906:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d908:	2b04      	cmp	r3, #4
 800d90a:	d003      	beq.n	800d914 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d910:	2b07      	cmp	r3, #7
 800d912:	d142      	bne.n	800d99a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d914:	4b8f      	ldr	r3, [pc, #572]	@ (800db54 <tcp_slowtmr+0x584>)
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d920:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d924:	4b8c      	ldr	r3, [pc, #560]	@ (800db58 <tcp_slowtmr+0x588>)
 800d926:	440b      	add	r3, r1
 800d928:	498c      	ldr	r1, [pc, #560]	@ (800db5c <tcp_slowtmr+0x58c>)
 800d92a:	fba1 1303 	umull	r1, r3, r1, r3
 800d92e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d930:	429a      	cmp	r2, r3
 800d932:	d90a      	bls.n	800d94a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800d934:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d938:	3301      	adds	r3, #1
 800d93a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d93e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d942:	3301      	adds	r3, #1
 800d944:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d948:	e027      	b.n	800d99a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d94a:	4b82      	ldr	r3, [pc, #520]	@ (800db54 <tcp_slowtmr+0x584>)
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d956:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d95a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d960:	4618      	mov	r0, r3
 800d962:	4b7f      	ldr	r3, [pc, #508]	@ (800db60 <tcp_slowtmr+0x590>)
 800d964:	fb00 f303 	mul.w	r3, r0, r3
 800d968:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d96a:	497c      	ldr	r1, [pc, #496]	@ (800db5c <tcp_slowtmr+0x58c>)
 800d96c:	fba1 1303 	umull	r1, r3, r1, r3
 800d970:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d972:	429a      	cmp	r2, r3
 800d974:	d911      	bls.n	800d99a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d978:	f004 fac4 	bl	8011f04 <tcp_keepalive>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d982:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d986:	2b00      	cmp	r3, #0
 800d988:	d107      	bne.n	800d99a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d98c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d990:	3301      	adds	r3, #1
 800d992:	b2da      	uxtb	r2, r3
 800d994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d996:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800d99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d011      	beq.n	800d9c6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d9a2:	4b6c      	ldr	r3, [pc, #432]	@ (800db54 <tcp_slowtmr+0x584>)
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a8:	6a1b      	ldr	r3, [r3, #32]
 800d9aa:	1ad2      	subs	r2, r2, r3
 800d9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	440b      	add	r3, r1
 800d9ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d302      	bcc.n	800d9c6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800d9c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9c2:	f000 fddd 	bl	800e580 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800d9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ca:	2b03      	cmp	r3, #3
 800d9cc:	d10b      	bne.n	800d9e6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9ce:	4b61      	ldr	r3, [pc, #388]	@ (800db54 <tcp_slowtmr+0x584>)
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d4:	6a1b      	ldr	r3, [r3, #32]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	2b28      	cmp	r3, #40	@ 0x28
 800d9da:	d904      	bls.n	800d9e6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800d9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9e8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ea:	2b09      	cmp	r3, #9
 800d9ec:	d10b      	bne.n	800da06 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d9ee:	4b59      	ldr	r3, [pc, #356]	@ (800db54 <tcp_slowtmr+0x584>)
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f4:	6a1b      	ldr	r3, [r3, #32]
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	2bf0      	cmp	r3, #240	@ 0xf0
 800d9fa:	d904      	bls.n	800da06 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da00:	3301      	adds	r3, #1
 800da02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800da06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d060      	beq.n	800dad0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800da0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da14:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800da16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da18:	f000 fbfe 	bl	800e218 <tcp_pcb_purge>
      if (prev != NULL) {
 800da1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d010      	beq.n	800da44 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800da22:	4b50      	ldr	r3, [pc, #320]	@ (800db64 <tcp_slowtmr+0x594>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da28:	429a      	cmp	r2, r3
 800da2a:	d106      	bne.n	800da3a <tcp_slowtmr+0x46a>
 800da2c:	4b4e      	ldr	r3, [pc, #312]	@ (800db68 <tcp_slowtmr+0x598>)
 800da2e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800da32:	494e      	ldr	r1, [pc, #312]	@ (800db6c <tcp_slowtmr+0x59c>)
 800da34:	484e      	ldr	r0, [pc, #312]	@ (800db70 <tcp_slowtmr+0x5a0>)
 800da36:	f008 fc09 	bl	801624c <iprintf>
        prev->next = pcb->next;
 800da3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da3c:	68da      	ldr	r2, [r3, #12]
 800da3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da40:	60da      	str	r2, [r3, #12]
 800da42:	e00f      	b.n	800da64 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800da44:	4b47      	ldr	r3, [pc, #284]	@ (800db64 <tcp_slowtmr+0x594>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d006      	beq.n	800da5c <tcp_slowtmr+0x48c>
 800da4e:	4b46      	ldr	r3, [pc, #280]	@ (800db68 <tcp_slowtmr+0x598>)
 800da50:	f240 5271 	movw	r2, #1393	@ 0x571
 800da54:	4947      	ldr	r1, [pc, #284]	@ (800db74 <tcp_slowtmr+0x5a4>)
 800da56:	4846      	ldr	r0, [pc, #280]	@ (800db70 <tcp_slowtmr+0x5a0>)
 800da58:	f008 fbf8 	bl	801624c <iprintf>
        tcp_active_pcbs = pcb->next;
 800da5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	4a40      	ldr	r2, [pc, #256]	@ (800db64 <tcp_slowtmr+0x594>)
 800da62:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800da64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d013      	beq.n	800da94 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800da6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da6e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800da70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da72:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800da74:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800da76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da78:	3304      	adds	r3, #4
 800da7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da7c:	8ad2      	ldrh	r2, [r2, #22]
 800da7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da80:	8b09      	ldrh	r1, [r1, #24]
 800da82:	9102      	str	r1, [sp, #8]
 800da84:	9201      	str	r2, [sp, #4]
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	462b      	mov	r3, r5
 800da8a:	4622      	mov	r2, r4
 800da8c:	4601      	mov	r1, r0
 800da8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da90:	f004 f984 	bl	8011d9c <tcp_rst>
      err_arg = pcb->callback_arg;
 800da94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800da9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da9c:	7d1b      	ldrb	r3, [r3, #20]
 800da9e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800daa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800daa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800daaa:	6838      	ldr	r0, [r7, #0]
 800daac:	f7ff f9f2 	bl	800ce94 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800dab0:	4b31      	ldr	r3, [pc, #196]	@ (800db78 <tcp_slowtmr+0x5a8>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d004      	beq.n	800dac6 <tcp_slowtmr+0x4f6>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f06f 010c 	mvn.w	r1, #12
 800dac2:	68b8      	ldr	r0, [r7, #8]
 800dac4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dac6:	4b2c      	ldr	r3, [pc, #176]	@ (800db78 <tcp_slowtmr+0x5a8>)
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d037      	beq.n	800db3e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800dace:	e592      	b.n	800d5f6 <tcp_slowtmr+0x26>
      prev = pcb;
 800dad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800dad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800dada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dadc:	7f1b      	ldrb	r3, [r3, #28]
 800dade:	3301      	adds	r3, #1
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800dae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae8:	7f1a      	ldrb	r2, [r3, #28]
 800daea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daec:	7f5b      	ldrb	r3, [r3, #29]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d325      	bcc.n	800db3e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800daf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf4:	2200      	movs	r2, #0
 800daf6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800daf8:	4b1f      	ldr	r3, [pc, #124]	@ (800db78 <tcp_slowtmr+0x5a8>)
 800dafa:	2200      	movs	r2, #0
 800dafc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00b      	beq.n	800db20 <tcp_slowtmr+0x550>
 800db08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800db0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db10:	6912      	ldr	r2, [r2, #16]
 800db12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db14:	4610      	mov	r0, r2
 800db16:	4798      	blx	r3
 800db18:	4603      	mov	r3, r0
 800db1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800db1e:	e002      	b.n	800db26 <tcp_slowtmr+0x556>
 800db20:	2300      	movs	r3, #0
 800db22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800db26:	4b14      	ldr	r3, [pc, #80]	@ (800db78 <tcp_slowtmr+0x5a8>)
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f47f ad62 	bne.w	800d5f4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800db30:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800db34:	2b00      	cmp	r3, #0
 800db36:	d102      	bne.n	800db3e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800db38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db3a:	f003 fb7b 	bl	8011234 <tcp_output>
  while (pcb != NULL) {
 800db3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db40:	2b00      	cmp	r3, #0
 800db42:	f47f ad5e 	bne.w	800d602 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800db46:	2300      	movs	r3, #0
 800db48:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800db4a:	4b0c      	ldr	r3, [pc, #48]	@ (800db7c <tcp_slowtmr+0x5ac>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800db50:	e069      	b.n	800dc26 <tcp_slowtmr+0x656>
 800db52:	bf00      	nop
 800db54:	24008284 	.word	0x24008284
 800db58:	000a4cb8 	.word	0x000a4cb8
 800db5c:	10624dd3 	.word	0x10624dd3
 800db60:	000124f8 	.word	0x000124f8
 800db64:	24008290 	.word	0x24008290
 800db68:	0801a554 	.word	0x0801a554
 800db6c:	0801a98c 	.word	0x0801a98c
 800db70:	0801a598 	.word	0x0801a598
 800db74:	0801a9b8 	.word	0x0801a9b8
 800db78:	24008298 	.word	0x24008298
 800db7c:	24008294 	.word	0x24008294
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800db80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db82:	7d1b      	ldrb	r3, [r3, #20]
 800db84:	2b0a      	cmp	r3, #10
 800db86:	d006      	beq.n	800db96 <tcp_slowtmr+0x5c6>
 800db88:	4b2b      	ldr	r3, [pc, #172]	@ (800dc38 <tcp_slowtmr+0x668>)
 800db8a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800db8e:	492b      	ldr	r1, [pc, #172]	@ (800dc3c <tcp_slowtmr+0x66c>)
 800db90:	482b      	ldr	r0, [pc, #172]	@ (800dc40 <tcp_slowtmr+0x670>)
 800db92:	f008 fb5b 	bl	801624c <iprintf>
    pcb_remove = 0;
 800db96:	2300      	movs	r3, #0
 800db98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800db9c:	4b29      	ldr	r3, [pc, #164]	@ (800dc44 <tcp_slowtmr+0x674>)
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba2:	6a1b      	ldr	r3, [r3, #32]
 800dba4:	1ad3      	subs	r3, r2, r3
 800dba6:	2bf0      	cmp	r3, #240	@ 0xf0
 800dba8:	d904      	bls.n	800dbb4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800dbaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbae:	3301      	adds	r3, #1
 800dbb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dbb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d02f      	beq.n	800dc1c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dbbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbbe:	f000 fb2b 	bl	800e218 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d010      	beq.n	800dbea <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dbc8:	4b1f      	ldr	r3, [pc, #124]	@ (800dc48 <tcp_slowtmr+0x678>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d106      	bne.n	800dbe0 <tcp_slowtmr+0x610>
 800dbd2:	4b19      	ldr	r3, [pc, #100]	@ (800dc38 <tcp_slowtmr+0x668>)
 800dbd4:	f240 52af 	movw	r2, #1455	@ 0x5af
 800dbd8:	491c      	ldr	r1, [pc, #112]	@ (800dc4c <tcp_slowtmr+0x67c>)
 800dbda:	4819      	ldr	r0, [pc, #100]	@ (800dc40 <tcp_slowtmr+0x670>)
 800dbdc:	f008 fb36 	bl	801624c <iprintf>
        prev->next = pcb->next;
 800dbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe2:	68da      	ldr	r2, [r3, #12]
 800dbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe6:	60da      	str	r2, [r3, #12]
 800dbe8:	e00f      	b.n	800dc0a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dbea:	4b17      	ldr	r3, [pc, #92]	@ (800dc48 <tcp_slowtmr+0x678>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d006      	beq.n	800dc02 <tcp_slowtmr+0x632>
 800dbf4:	4b10      	ldr	r3, [pc, #64]	@ (800dc38 <tcp_slowtmr+0x668>)
 800dbf6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800dbfa:	4915      	ldr	r1, [pc, #84]	@ (800dc50 <tcp_slowtmr+0x680>)
 800dbfc:	4810      	ldr	r0, [pc, #64]	@ (800dc40 <tcp_slowtmr+0x670>)
 800dbfe:	f008 fb25 	bl	801624c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	4a10      	ldr	r2, [pc, #64]	@ (800dc48 <tcp_slowtmr+0x678>)
 800dc08:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dc0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800dc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800dc14:	69f8      	ldr	r0, [r7, #28]
 800dc16:	f7ff f93d 	bl	800ce94 <tcp_free>
 800dc1a:	e004      	b.n	800dc26 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800dc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800dc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800dc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1a9      	bne.n	800db80 <tcp_slowtmr+0x5b0>
    }
  }
}
 800dc2c:	bf00      	nop
 800dc2e:	bf00      	nop
 800dc30:	3730      	adds	r7, #48	@ 0x30
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bdb0      	pop	{r4, r5, r7, pc}
 800dc36:	bf00      	nop
 800dc38:	0801a554 	.word	0x0801a554
 800dc3c:	0801a9e4 	.word	0x0801a9e4
 800dc40:	0801a598 	.word	0x0801a598
 800dc44:	24008284 	.word	0x24008284
 800dc48:	24008294 	.word	0x24008294
 800dc4c:	0801aa14 	.word	0x0801aa14
 800dc50:	0801aa3c 	.word	0x0801aa3c

0800dc54 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dc5a:	4b2d      	ldr	r3, [pc, #180]	@ (800dd10 <tcp_fasttmr+0xbc>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	3301      	adds	r3, #1
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	4b2b      	ldr	r3, [pc, #172]	@ (800dd10 <tcp_fasttmr+0xbc>)
 800dc64:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dc66:	4b2b      	ldr	r3, [pc, #172]	@ (800dd14 <tcp_fasttmr+0xc0>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dc6c:	e048      	b.n	800dd00 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	7f9a      	ldrb	r2, [r3, #30]
 800dc72:	4b27      	ldr	r3, [pc, #156]	@ (800dd10 <tcp_fasttmr+0xbc>)
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d03f      	beq.n	800dcfa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dc7a:	4b25      	ldr	r3, [pc, #148]	@ (800dd10 <tcp_fasttmr+0xbc>)
 800dc7c:	781a      	ldrb	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	8b5b      	ldrh	r3, [r3, #26]
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d010      	beq.n	800dcb0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	8b5b      	ldrh	r3, [r3, #26]
 800dc92:	f043 0302 	orr.w	r3, r3, #2
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f003 fac9 	bl	8011234 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	8b5b      	ldrh	r3, [r3, #26]
 800dca6:	f023 0303 	bic.w	r3, r3, #3
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	8b5b      	ldrh	r3, [r3, #26]
 800dcb4:	f003 0308 	and.w	r3, r3, #8
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d009      	beq.n	800dcd0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	8b5b      	ldrh	r3, [r3, #26]
 800dcc0:	f023 0308 	bic.w	r3, r3, #8
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f7ff fa76 	bl	800d1bc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00a      	beq.n	800dcf4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dcde:	4b0e      	ldr	r3, [pc, #56]	@ (800dd18 <tcp_fasttmr+0xc4>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 f819 	bl	800dd1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dcea:	4b0b      	ldr	r3, [pc, #44]	@ (800dd18 <tcp_fasttmr+0xc4>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d000      	beq.n	800dcf4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dcf2:	e7b8      	b.n	800dc66 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	607b      	str	r3, [r7, #4]
 800dcf8:	e002      	b.n	800dd00 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1b3      	bne.n	800dc6e <tcp_fasttmr+0x1a>
    }
  }
}
 800dd06:	bf00      	nop
 800dd08:	bf00      	nop
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	2400829a 	.word	0x2400829a
 800dd14:	24008290 	.word	0x24008290
 800dd18:	24008298 	.word	0x24008298

0800dd1c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dd1c:	b590      	push	{r4, r7, lr}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d109      	bne.n	800dd3e <tcp_process_refused_data+0x22>
 800dd2a:	4b37      	ldr	r3, [pc, #220]	@ (800de08 <tcp_process_refused_data+0xec>)
 800dd2c:	f240 6209 	movw	r2, #1545	@ 0x609
 800dd30:	4936      	ldr	r1, [pc, #216]	@ (800de0c <tcp_process_refused_data+0xf0>)
 800dd32:	4837      	ldr	r0, [pc, #220]	@ (800de10 <tcp_process_refused_data+0xf4>)
 800dd34:	f008 fa8a 	bl	801624c <iprintf>
 800dd38:	f06f 030f 	mvn.w	r3, #15
 800dd3c:	e060      	b.n	800de00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd42:	7b5b      	ldrb	r3, [r3, #13]
 800dd44:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd4a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00b      	beq.n	800dd74 <tcp_process_refused_data+0x58>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6918      	ldr	r0, [r3, #16]
 800dd66:	2300      	movs	r3, #0
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	6879      	ldr	r1, [r7, #4]
 800dd6c:	47a0      	blx	r4
 800dd6e:	4603      	mov	r3, r0
 800dd70:	73fb      	strb	r3, [r7, #15]
 800dd72:	e007      	b.n	800dd84 <tcp_process_refused_data+0x68>
 800dd74:	2300      	movs	r3, #0
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	6879      	ldr	r1, [r7, #4]
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	f000 f8a4 	bl	800dec8 <tcp_recv_null>
 800dd80:	4603      	mov	r3, r0
 800dd82:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dd84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d12a      	bne.n	800dde2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dd8c:	7bbb      	ldrb	r3, [r7, #14]
 800dd8e:	f003 0320 	and.w	r3, r3, #32
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d033      	beq.n	800ddfe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd9a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dd9e:	d005      	beq.n	800ddac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dda4:	3301      	adds	r3, #1
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00b      	beq.n	800ddce <tcp_process_refused_data+0xb2>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6918      	ldr	r0, [r3, #16]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	6879      	ldr	r1, [r7, #4]
 800ddc6:	47a0      	blx	r4
 800ddc8:	4603      	mov	r3, r0
 800ddca:	73fb      	strb	r3, [r7, #15]
 800ddcc:	e001      	b.n	800ddd2 <tcp_process_refused_data+0xb6>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ddd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddd6:	f113 0f0d 	cmn.w	r3, #13
 800ddda:	d110      	bne.n	800ddfe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800dddc:	f06f 030c 	mvn.w	r3, #12
 800dde0:	e00e      	b.n	800de00 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800dde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dde6:	f113 0f0d 	cmn.w	r3, #13
 800ddea:	d102      	bne.n	800ddf2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ddec:	f06f 030c 	mvn.w	r3, #12
 800ddf0:	e006      	b.n	800de00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ddf8:	f06f 0304 	mvn.w	r3, #4
 800ddfc:	e000      	b.n	800de00 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3714      	adds	r7, #20
 800de04:	46bd      	mov	sp, r7
 800de06:	bd90      	pop	{r4, r7, pc}
 800de08:	0801a554 	.word	0x0801a554
 800de0c:	0801aa64 	.word	0x0801aa64
 800de10:	0801a598 	.word	0x0801a598

0800de14 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800de1c:	e007      	b.n	800de2e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 f80a 	bl	800de3e <tcp_seg_free>
    seg = next;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1f4      	bne.n	800de1e <tcp_segs_free+0xa>
  }
}
 800de34:	bf00      	nop
 800de36:	bf00      	nop
 800de38:	3710      	adds	r7, #16
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b082      	sub	sp, #8
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00c      	beq.n	800de66 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d004      	beq.n	800de5e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fe fcd9 	bl	800c810 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800de5e:	6879      	ldr	r1, [r7, #4]
 800de60:	2003      	movs	r0, #3
 800de62:	f7fd fe5f 	bl	800bb24 <memp_free>
  }
}
 800de66:	bf00      	nop
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
	...

0800de70 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d106      	bne.n	800de8c <tcp_seg_copy+0x1c>
 800de7e:	4b0f      	ldr	r3, [pc, #60]	@ (800debc <tcp_seg_copy+0x4c>)
 800de80:	f240 6282 	movw	r2, #1666	@ 0x682
 800de84:	490e      	ldr	r1, [pc, #56]	@ (800dec0 <tcp_seg_copy+0x50>)
 800de86:	480f      	ldr	r0, [pc, #60]	@ (800dec4 <tcp_seg_copy+0x54>)
 800de88:	f008 f9e0 	bl	801624c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800de8c:	2003      	movs	r0, #3
 800de8e:	f7fd fdd9 	bl	800ba44 <memp_malloc>
 800de92:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d101      	bne.n	800de9e <tcp_seg_copy+0x2e>
    return NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	e00a      	b.n	800deb4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800de9e:	2210      	movs	r2, #16
 800dea0:	6879      	ldr	r1, [r7, #4]
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f008 fbf7 	bl	8016696 <memcpy>
  pbuf_ref(cseg->p);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	f7fe fd4f 	bl	800c950 <pbuf_ref>
  return cseg;
 800deb2:	68fb      	ldr	r3, [r7, #12]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3710      	adds	r7, #16
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	0801a554 	.word	0x0801a554
 800dec0:	0801aaa8 	.word	0x0801aaa8
 800dec4:	0801a598 	.word	0x0801a598

0800dec8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	607a      	str	r2, [r7, #4]
 800ded4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d109      	bne.n	800def0 <tcp_recv_null+0x28>
 800dedc:	4b12      	ldr	r3, [pc, #72]	@ (800df28 <tcp_recv_null+0x60>)
 800dede:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800dee2:	4912      	ldr	r1, [pc, #72]	@ (800df2c <tcp_recv_null+0x64>)
 800dee4:	4812      	ldr	r0, [pc, #72]	@ (800df30 <tcp_recv_null+0x68>)
 800dee6:	f008 f9b1 	bl	801624c <iprintf>
 800deea:	f06f 030f 	mvn.w	r3, #15
 800deee:	e016      	b.n	800df1e <tcp_recv_null+0x56>

  if (p != NULL) {
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d009      	beq.n	800df0a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	891b      	ldrh	r3, [r3, #8]
 800defa:	4619      	mov	r1, r3
 800defc:	68b8      	ldr	r0, [r7, #8]
 800defe:	f7ff fb17 	bl	800d530 <tcp_recved>
    pbuf_free(p);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7fe fc84 	bl	800c810 <pbuf_free>
 800df08:	e008      	b.n	800df1c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800df0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d104      	bne.n	800df1c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800df12:	68b8      	ldr	r0, [r7, #8]
 800df14:	f7ff f9bc 	bl	800d290 <tcp_close>
 800df18:	4603      	mov	r3, r0
 800df1a:	e000      	b.n	800df1e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	0801a554 	.word	0x0801a554
 800df2c:	0801aac4 	.word	0x0801aac4
 800df30:	0801a598 	.word	0x0801a598

0800df34 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b086      	sub	sp, #24
 800df38:	af00      	add	r7, sp, #0
 800df3a:	4603      	mov	r3, r0
 800df3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800df3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df42:	2b00      	cmp	r3, #0
 800df44:	db01      	blt.n	800df4a <tcp_kill_prio+0x16>
 800df46:	79fb      	ldrb	r3, [r7, #7]
 800df48:	e000      	b.n	800df4c <tcp_kill_prio+0x18>
 800df4a:	237f      	movs	r3, #127	@ 0x7f
 800df4c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800df4e:	7afb      	ldrb	r3, [r7, #11]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d034      	beq.n	800dfbe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800df54:	7afb      	ldrb	r3, [r7, #11]
 800df56:	3b01      	subs	r3, #1
 800df58:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800df5e:	2300      	movs	r3, #0
 800df60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df62:	4b19      	ldr	r3, [pc, #100]	@ (800dfc8 <tcp_kill_prio+0x94>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	617b      	str	r3, [r7, #20]
 800df68:	e01f      	b.n	800dfaa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	7d5b      	ldrb	r3, [r3, #21]
 800df6e:	7afa      	ldrb	r2, [r7, #11]
 800df70:	429a      	cmp	r2, r3
 800df72:	d80c      	bhi.n	800df8e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800df78:	7afa      	ldrb	r2, [r7, #11]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d112      	bne.n	800dfa4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800df7e:	4b13      	ldr	r3, [pc, #76]	@ (800dfcc <tcp_kill_prio+0x98>)
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	6a1b      	ldr	r3, [r3, #32]
 800df86:	1ad3      	subs	r3, r2, r3
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d80a      	bhi.n	800dfa4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800df8e:	4b0f      	ldr	r3, [pc, #60]	@ (800dfcc <tcp_kill_prio+0x98>)
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	6a1b      	ldr	r3, [r3, #32]
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	7d5b      	ldrb	r3, [r3, #21]
 800dfa2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	617b      	str	r3, [r7, #20]
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1dc      	bne.n	800df6a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d004      	beq.n	800dfc0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dfb6:	6938      	ldr	r0, [r7, #16]
 800dfb8:	f7ff fa54 	bl	800d464 <tcp_abort>
 800dfbc:	e000      	b.n	800dfc0 <tcp_kill_prio+0x8c>
    return;
 800dfbe:	bf00      	nop
  }
}
 800dfc0:	3718      	adds	r7, #24
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	24008290 	.word	0x24008290
 800dfcc:	24008284 	.word	0x24008284

0800dfd0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dfda:	79fb      	ldrb	r3, [r7, #7]
 800dfdc:	2b08      	cmp	r3, #8
 800dfde:	d009      	beq.n	800dff4 <tcp_kill_state+0x24>
 800dfe0:	79fb      	ldrb	r3, [r7, #7]
 800dfe2:	2b09      	cmp	r3, #9
 800dfe4:	d006      	beq.n	800dff4 <tcp_kill_state+0x24>
 800dfe6:	4b1a      	ldr	r3, [pc, #104]	@ (800e050 <tcp_kill_state+0x80>)
 800dfe8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800dfec:	4919      	ldr	r1, [pc, #100]	@ (800e054 <tcp_kill_state+0x84>)
 800dfee:	481a      	ldr	r0, [pc, #104]	@ (800e058 <tcp_kill_state+0x88>)
 800dff0:	f008 f92c 	bl	801624c <iprintf>

  inactivity = 0;
 800dff4:	2300      	movs	r3, #0
 800dff6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dff8:	2300      	movs	r3, #0
 800dffa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dffc:	4b17      	ldr	r3, [pc, #92]	@ (800e05c <tcp_kill_state+0x8c>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	617b      	str	r3, [r7, #20]
 800e002:	e017      	b.n	800e034 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	7d1b      	ldrb	r3, [r3, #20]
 800e008:	79fa      	ldrb	r2, [r7, #7]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d10f      	bne.n	800e02e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e00e:	4b14      	ldr	r3, [pc, #80]	@ (800e060 <tcp_kill_state+0x90>)
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	6a1b      	ldr	r3, [r3, #32]
 800e016:	1ad3      	subs	r3, r2, r3
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d807      	bhi.n	800e02e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e01e:	4b10      	ldr	r3, [pc, #64]	@ (800e060 <tcp_kill_state+0x90>)
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	6a1b      	ldr	r3, [r3, #32]
 800e026:	1ad3      	subs	r3, r2, r3
 800e028:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	617b      	str	r3, [r7, #20]
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1e4      	bne.n	800e004 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d003      	beq.n	800e048 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e040:	2100      	movs	r1, #0
 800e042:	6938      	ldr	r0, [r7, #16]
 800e044:	f7ff f950 	bl	800d2e8 <tcp_abandon>
  }
}
 800e048:	bf00      	nop
 800e04a:	3718      	adds	r7, #24
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	0801a554 	.word	0x0801a554
 800e054:	0801aae0 	.word	0x0801aae0
 800e058:	0801a598 	.word	0x0801a598
 800e05c:	24008290 	.word	0x24008290
 800e060:	24008284 	.word	0x24008284

0800e064 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e072:	4b12      	ldr	r3, [pc, #72]	@ (800e0bc <tcp_kill_timewait+0x58>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	60fb      	str	r3, [r7, #12]
 800e078:	e012      	b.n	800e0a0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e07a:	4b11      	ldr	r3, [pc, #68]	@ (800e0c0 <tcp_kill_timewait+0x5c>)
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	429a      	cmp	r2, r3
 800e088:	d807      	bhi.n	800e09a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e08a:	4b0d      	ldr	r3, [pc, #52]	@ (800e0c0 <tcp_kill_timewait+0x5c>)
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6a1b      	ldr	r3, [r3, #32]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1e9      	bne.n	800e07a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e0ac:	68b8      	ldr	r0, [r7, #8]
 800e0ae:	f7ff f9d9 	bl	800d464 <tcp_abort>
  }
}
 800e0b2:	bf00      	nop
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	24008294 	.word	0x24008294
 800e0c0:	24008284 	.word	0x24008284

0800e0c4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e0ca:	4b10      	ldr	r3, [pc, #64]	@ (800e10c <tcp_handle_closepend+0x48>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e0d0:	e014      	b.n	800e0fc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	8b5b      	ldrh	r3, [r3, #26]
 800e0dc:	f003 0308 	and.w	r3, r3, #8
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d009      	beq.n	800e0f8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	8b5b      	ldrh	r3, [r3, #26]
 800e0e8:	f023 0308 	bic.w	r3, r3, #8
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7ff f862 	bl	800d1bc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d1e7      	bne.n	800e0d2 <tcp_handle_closepend+0xe>
  }
}
 800e102:	bf00      	nop
 800e104:	bf00      	nop
 800e106:	3708      	adds	r7, #8
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	24008290 	.word	0x24008290

0800e110 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e11a:	2001      	movs	r0, #1
 800e11c:	f7fd fc92 	bl	800ba44 <memp_malloc>
 800e120:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d126      	bne.n	800e176 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e128:	f7ff ffcc 	bl	800e0c4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e12c:	f7ff ff9a 	bl	800e064 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e130:	2001      	movs	r0, #1
 800e132:	f7fd fc87 	bl	800ba44 <memp_malloc>
 800e136:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d11b      	bne.n	800e176 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e13e:	2009      	movs	r0, #9
 800e140:	f7ff ff46 	bl	800dfd0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e144:	2001      	movs	r0, #1
 800e146:	f7fd fc7d 	bl	800ba44 <memp_malloc>
 800e14a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d111      	bne.n	800e176 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e152:	2008      	movs	r0, #8
 800e154:	f7ff ff3c 	bl	800dfd0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e158:	2001      	movs	r0, #1
 800e15a:	f7fd fc73 	bl	800ba44 <memp_malloc>
 800e15e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d107      	bne.n	800e176 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e166:	79fb      	ldrb	r3, [r7, #7]
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff fee3 	bl	800df34 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e16e:	2001      	movs	r0, #1
 800e170:	f7fd fc68 	bl	800ba44 <memp_malloc>
 800e174:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d03f      	beq.n	800e1fc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e17c:	229c      	movs	r2, #156	@ 0x9c
 800e17e:	2100      	movs	r1, #0
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f008 f9f7 	bl	8016574 <memset>
    pcb->prio = prio;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	79fa      	ldrb	r2, [r7, #7]
 800e18a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e192:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e19c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	22ff      	movs	r2, #255	@ 0xff
 800e1aa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e1b2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2206      	movs	r2, #6
 800e1b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2206      	movs	r2, #6
 800e1c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e1c8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800e1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e208 <tcp_alloc+0xf8>)
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e1da:	4b0c      	ldr	r3, [pc, #48]	@ (800e20c <tcp_alloc+0xfc>)
 800e1dc:	781a      	ldrb	r2, [r3, #0]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e1e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	4a08      	ldr	r2, [pc, #32]	@ (800e210 <tcp_alloc+0x100>)
 800e1f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	4a07      	ldr	r2, [pc, #28]	@ (800e214 <tcp_alloc+0x104>)
 800e1f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	24008284 	.word	0x24008284
 800e20c:	2400829a 	.word	0x2400829a
 800e210:	0800dec9 	.word	0x0800dec9
 800e214:	006ddd00 	.word	0x006ddd00

0800e218 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d107      	bne.n	800e236 <tcp_pcb_purge+0x1e>
 800e226:	4b21      	ldr	r3, [pc, #132]	@ (800e2ac <tcp_pcb_purge+0x94>)
 800e228:	f640 0251 	movw	r2, #2129	@ 0x851
 800e22c:	4920      	ldr	r1, [pc, #128]	@ (800e2b0 <tcp_pcb_purge+0x98>)
 800e22e:	4821      	ldr	r0, [pc, #132]	@ (800e2b4 <tcp_pcb_purge+0x9c>)
 800e230:	f008 f80c 	bl	801624c <iprintf>
 800e234:	e037      	b.n	800e2a6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	7d1b      	ldrb	r3, [r3, #20]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d033      	beq.n	800e2a6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e242:	2b0a      	cmp	r3, #10
 800e244:	d02f      	beq.n	800e2a6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d02b      	beq.n	800e2a6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e252:	2b00      	cmp	r3, #0
 800e254:	d007      	beq.n	800e266 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe fad8 	bl	800c810 <pbuf_free>
      pcb->refused_data = NULL;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 f986 	bl	800e580 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e27a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e280:	4618      	mov	r0, r3
 800e282:	f7ff fdc7 	bl	800de14 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7ff fdc2 	bl	800de14 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e2a6:	3708      	adds	r7, #8
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	0801a554 	.word	0x0801a554
 800e2b0:	0801aba0 	.word	0x0801aba0
 800e2b4:	0801a598 	.word	0x0801a598

0800e2b8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d106      	bne.n	800e2d6 <tcp_pcb_remove+0x1e>
 800e2c8:	4b3e      	ldr	r3, [pc, #248]	@ (800e3c4 <tcp_pcb_remove+0x10c>)
 800e2ca:	f640 0283 	movw	r2, #2179	@ 0x883
 800e2ce:	493e      	ldr	r1, [pc, #248]	@ (800e3c8 <tcp_pcb_remove+0x110>)
 800e2d0:	483e      	ldr	r0, [pc, #248]	@ (800e3cc <tcp_pcb_remove+0x114>)
 800e2d2:	f007 ffbb 	bl	801624c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d106      	bne.n	800e2ea <tcp_pcb_remove+0x32>
 800e2dc:	4b39      	ldr	r3, [pc, #228]	@ (800e3c4 <tcp_pcb_remove+0x10c>)
 800e2de:	f640 0284 	movw	r2, #2180	@ 0x884
 800e2e2:	493b      	ldr	r1, [pc, #236]	@ (800e3d0 <tcp_pcb_remove+0x118>)
 800e2e4:	4839      	ldr	r0, [pc, #228]	@ (800e3cc <tcp_pcb_remove+0x114>)
 800e2e6:	f007 ffb1 	bl	801624c <iprintf>

  TCP_RMV(pcblist, pcb);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	683a      	ldr	r2, [r7, #0]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d105      	bne.n	800e300 <tcp_pcb_remove+0x48>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	68da      	ldr	r2, [r3, #12]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	601a      	str	r2, [r3, #0]
 800e2fe:	e013      	b.n	800e328 <tcp_pcb_remove+0x70>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	60fb      	str	r3, [r7, #12]
 800e306:	e00c      	b.n	800e322 <tcp_pcb_remove+0x6a>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	683a      	ldr	r2, [r7, #0]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d104      	bne.n	800e31c <tcp_pcb_remove+0x64>
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	68da      	ldr	r2, [r3, #12]
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	60da      	str	r2, [r3, #12]
 800e31a:	e005      	b.n	800e328 <tcp_pcb_remove+0x70>
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	60fb      	str	r3, [r7, #12]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1ef      	bne.n	800e308 <tcp_pcb_remove+0x50>
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	2200      	movs	r2, #0
 800e32c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e32e:	6838      	ldr	r0, [r7, #0]
 800e330:	f7ff ff72 	bl	800e218 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	7d1b      	ldrb	r3, [r3, #20]
 800e338:	2b0a      	cmp	r3, #10
 800e33a:	d013      	beq.n	800e364 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e340:	2b01      	cmp	r3, #1
 800e342:	d00f      	beq.n	800e364 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	8b5b      	ldrh	r3, [r3, #26]
 800e348:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d009      	beq.n	800e364 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	8b5b      	ldrh	r3, [r3, #26]
 800e354:	f043 0302 	orr.w	r3, r3, #2
 800e358:	b29a      	uxth	r2, r3
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e35e:	6838      	ldr	r0, [r7, #0]
 800e360:	f002 ff68 	bl	8011234 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	7d1b      	ldrb	r3, [r3, #20]
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d020      	beq.n	800e3ae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e370:	2b00      	cmp	r3, #0
 800e372:	d006      	beq.n	800e382 <tcp_pcb_remove+0xca>
 800e374:	4b13      	ldr	r3, [pc, #76]	@ (800e3c4 <tcp_pcb_remove+0x10c>)
 800e376:	f640 0293 	movw	r2, #2195	@ 0x893
 800e37a:	4916      	ldr	r1, [pc, #88]	@ (800e3d4 <tcp_pcb_remove+0x11c>)
 800e37c:	4813      	ldr	r0, [pc, #76]	@ (800e3cc <tcp_pcb_remove+0x114>)
 800e37e:	f007 ff65 	bl	801624c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e386:	2b00      	cmp	r3, #0
 800e388:	d006      	beq.n	800e398 <tcp_pcb_remove+0xe0>
 800e38a:	4b0e      	ldr	r3, [pc, #56]	@ (800e3c4 <tcp_pcb_remove+0x10c>)
 800e38c:	f640 0294 	movw	r2, #2196	@ 0x894
 800e390:	4911      	ldr	r1, [pc, #68]	@ (800e3d8 <tcp_pcb_remove+0x120>)
 800e392:	480e      	ldr	r0, [pc, #56]	@ (800e3cc <tcp_pcb_remove+0x114>)
 800e394:	f007 ff5a 	bl	801624c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d006      	beq.n	800e3ae <tcp_pcb_remove+0xf6>
 800e3a0:	4b08      	ldr	r3, [pc, #32]	@ (800e3c4 <tcp_pcb_remove+0x10c>)
 800e3a2:	f640 0296 	movw	r2, #2198	@ 0x896
 800e3a6:	490d      	ldr	r1, [pc, #52]	@ (800e3dc <tcp_pcb_remove+0x124>)
 800e3a8:	4808      	ldr	r0, [pc, #32]	@ (800e3cc <tcp_pcb_remove+0x114>)
 800e3aa:	f007 ff4f 	bl	801624c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e3ba:	bf00      	nop
 800e3bc:	3710      	adds	r7, #16
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	0801a554 	.word	0x0801a554
 800e3c8:	0801abbc 	.word	0x0801abbc
 800e3cc:	0801a598 	.word	0x0801a598
 800e3d0:	0801abd8 	.word	0x0801abd8
 800e3d4:	0801abf8 	.word	0x0801abf8
 800e3d8:	0801ac10 	.word	0x0801ac10
 800e3dc:	0801ac2c 	.word	0x0801ac2c

0800e3e0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d106      	bne.n	800e3fc <tcp_next_iss+0x1c>
 800e3ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e418 <tcp_next_iss+0x38>)
 800e3f0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800e3f4:	4909      	ldr	r1, [pc, #36]	@ (800e41c <tcp_next_iss+0x3c>)
 800e3f6:	480a      	ldr	r0, [pc, #40]	@ (800e420 <tcp_next_iss+0x40>)
 800e3f8:	f007 ff28 	bl	801624c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e3fc:	4b09      	ldr	r3, [pc, #36]	@ (800e424 <tcp_next_iss+0x44>)
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	4b09      	ldr	r3, [pc, #36]	@ (800e428 <tcp_next_iss+0x48>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4413      	add	r3, r2
 800e406:	4a07      	ldr	r2, [pc, #28]	@ (800e424 <tcp_next_iss+0x44>)
 800e408:	6013      	str	r3, [r2, #0]
  return iss;
 800e40a:	4b06      	ldr	r3, [pc, #24]	@ (800e424 <tcp_next_iss+0x44>)
 800e40c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	0801a554 	.word	0x0801a554
 800e41c:	0801ac44 	.word	0x0801ac44
 800e420:	0801a598 	.word	0x0801a598
 800e424:	24000028 	.word	0x24000028
 800e428:	24008284 	.word	0x24008284

0800e42c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b086      	sub	sp, #24
 800e430:	af00      	add	r7, sp, #0
 800e432:	4603      	mov	r3, r0
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	607a      	str	r2, [r7, #4]
 800e438:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d106      	bne.n	800e44e <tcp_eff_send_mss_netif+0x22>
 800e440:	4b14      	ldr	r3, [pc, #80]	@ (800e494 <tcp_eff_send_mss_netif+0x68>)
 800e442:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800e446:	4914      	ldr	r1, [pc, #80]	@ (800e498 <tcp_eff_send_mss_netif+0x6c>)
 800e448:	4814      	ldr	r0, [pc, #80]	@ (800e49c <tcp_eff_send_mss_netif+0x70>)
 800e44a:	f007 feff 	bl	801624c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d101      	bne.n	800e458 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e454:	89fb      	ldrh	r3, [r7, #14]
 800e456:	e019      	b.n	800e48c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e45c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e45e:	8afb      	ldrh	r3, [r7, #22]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d012      	beq.n	800e48a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e464:	2328      	movs	r3, #40	@ 0x28
 800e466:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e468:	8afa      	ldrh	r2, [r7, #22]
 800e46a:	8abb      	ldrh	r3, [r7, #20]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d904      	bls.n	800e47a <tcp_eff_send_mss_netif+0x4e>
 800e470:	8afa      	ldrh	r2, [r7, #22]
 800e472:	8abb      	ldrh	r3, [r7, #20]
 800e474:	1ad3      	subs	r3, r2, r3
 800e476:	b29b      	uxth	r3, r3
 800e478:	e000      	b.n	800e47c <tcp_eff_send_mss_netif+0x50>
 800e47a:	2300      	movs	r3, #0
 800e47c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e47e:	8a7a      	ldrh	r2, [r7, #18]
 800e480:	89fb      	ldrh	r3, [r7, #14]
 800e482:	4293      	cmp	r3, r2
 800e484:	bf28      	it	cs
 800e486:	4613      	movcs	r3, r2
 800e488:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e48a:	89fb      	ldrh	r3, [r7, #14]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3718      	adds	r7, #24
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	0801a554 	.word	0x0801a554
 800e498:	0801ac60 	.word	0x0801ac60
 800e49c:	0801a598 	.word	0x0801a598

0800e4a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d119      	bne.n	800e4e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e4b4:	4b10      	ldr	r3, [pc, #64]	@ (800e4f8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e4b6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800e4ba:	4910      	ldr	r1, [pc, #64]	@ (800e4fc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e4bc:	4810      	ldr	r0, [pc, #64]	@ (800e500 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e4be:	f007 fec5 	bl	801624c <iprintf>

  while (pcb != NULL) {
 800e4c2:	e011      	b.n	800e4e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d108      	bne.n	800e4e2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f7fe ffc4 	bl	800d464 <tcp_abort>
      pcb = next;
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	60fb      	str	r3, [r7, #12]
 800e4e0:	e002      	b.n	800e4e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1ea      	bne.n	800e4c4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e4ee:	bf00      	nop
 800e4f0:	bf00      	nop
 800e4f2:	3710      	adds	r7, #16
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	0801a554 	.word	0x0801a554
 800e4fc:	0801ac88 	.word	0x0801ac88
 800e500:	0801a598 	.word	0x0801a598

0800e504 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d02a      	beq.n	800e56a <tcp_netif_ip_addr_changed+0x66>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d026      	beq.n	800e56a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e51c:	4b15      	ldr	r3, [pc, #84]	@ (800e574 <tcp_netif_ip_addr_changed+0x70>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4619      	mov	r1, r3
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f7ff ffbc 	bl	800e4a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e528:	4b13      	ldr	r3, [pc, #76]	@ (800e578 <tcp_netif_ip_addr_changed+0x74>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4619      	mov	r1, r3
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7ff ffb6 	bl	800e4a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d017      	beq.n	800e56a <tcp_netif_ip_addr_changed+0x66>
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d013      	beq.n	800e56a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e542:	4b0e      	ldr	r3, [pc, #56]	@ (800e57c <tcp_netif_ip_addr_changed+0x78>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	60fb      	str	r3, [r7, #12]
 800e548:	e00c      	b.n	800e564 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	429a      	cmp	r2, r3
 800e554:	d103      	bne.n	800e55e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	60fb      	str	r3, [r7, #12]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1ef      	bne.n	800e54a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e56a:	bf00      	nop
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	24008290 	.word	0x24008290
 800e578:	24008288 	.word	0x24008288
 800e57c:	2400828c 	.word	0x2400828c

0800e580 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d007      	beq.n	800e5a0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e594:	4618      	mov	r0, r3
 800e596:	f7ff fc3d 	bl	800de14 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e5a8:	b590      	push	{r4, r7, lr}
 800e5aa:	b08d      	sub	sp, #52	@ 0x34
 800e5ac:	af04      	add	r7, sp, #16
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d105      	bne.n	800e5c4 <tcp_input+0x1c>
 800e5b8:	4b9b      	ldr	r3, [pc, #620]	@ (800e828 <tcp_input+0x280>)
 800e5ba:	2283      	movs	r2, #131	@ 0x83
 800e5bc:	499b      	ldr	r1, [pc, #620]	@ (800e82c <tcp_input+0x284>)
 800e5be:	489c      	ldr	r0, [pc, #624]	@ (800e830 <tcp_input+0x288>)
 800e5c0:	f007 fe44 	bl	801624c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	4a9a      	ldr	r2, [pc, #616]	@ (800e834 <tcp_input+0x28c>)
 800e5ca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	895b      	ldrh	r3, [r3, #10]
 800e5d0:	2b13      	cmp	r3, #19
 800e5d2:	f240 83d1 	bls.w	800ed78 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e5d6:	4b98      	ldr	r3, [pc, #608]	@ (800e838 <tcp_input+0x290>)
 800e5d8:	695b      	ldr	r3, [r3, #20]
 800e5da:	4a97      	ldr	r2, [pc, #604]	@ (800e838 <tcp_input+0x290>)
 800e5dc:	6812      	ldr	r2, [r2, #0]
 800e5de:	4611      	mov	r1, r2
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f005 ff27 	bl	8014434 <ip4_addr_isbroadcast_u32>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f040 83c7 	bne.w	800ed7c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e5ee:	4b92      	ldr	r3, [pc, #584]	@ (800e838 <tcp_input+0x290>)
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e5f6:	2be0      	cmp	r3, #224	@ 0xe0
 800e5f8:	f000 83c0 	beq.w	800ed7c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e5fc:	4b8d      	ldr	r3, [pc, #564]	@ (800e834 <tcp_input+0x28c>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	899b      	ldrh	r3, [r3, #12]
 800e602:	b29b      	uxth	r3, r3
 800e604:	4618      	mov	r0, r3
 800e606:	f7fc fced 	bl	800afe4 <lwip_htons>
 800e60a:	4603      	mov	r3, r0
 800e60c:	0b1b      	lsrs	r3, r3, #12
 800e60e:	b29b      	uxth	r3, r3
 800e610:	b2db      	uxtb	r3, r3
 800e612:	009b      	lsls	r3, r3, #2
 800e614:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e616:	7cbb      	ldrb	r3, [r7, #18]
 800e618:	2b13      	cmp	r3, #19
 800e61a:	f240 83b1 	bls.w	800ed80 <tcp_input+0x7d8>
 800e61e:	7cbb      	ldrb	r3, [r7, #18]
 800e620:	b29a      	uxth	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	891b      	ldrh	r3, [r3, #8]
 800e626:	429a      	cmp	r2, r3
 800e628:	f200 83aa 	bhi.w	800ed80 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e62c:	7cbb      	ldrb	r3, [r7, #18]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	3b14      	subs	r3, #20
 800e632:	b29a      	uxth	r2, r3
 800e634:	4b81      	ldr	r3, [pc, #516]	@ (800e83c <tcp_input+0x294>)
 800e636:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e638:	4b81      	ldr	r3, [pc, #516]	@ (800e840 <tcp_input+0x298>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	895a      	ldrh	r2, [r3, #10]
 800e642:	7cbb      	ldrb	r3, [r7, #18]
 800e644:	b29b      	uxth	r3, r3
 800e646:	429a      	cmp	r2, r3
 800e648:	d309      	bcc.n	800e65e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e64a:	4b7c      	ldr	r3, [pc, #496]	@ (800e83c <tcp_input+0x294>)
 800e64c:	881a      	ldrh	r2, [r3, #0]
 800e64e:	4b7d      	ldr	r3, [pc, #500]	@ (800e844 <tcp_input+0x29c>)
 800e650:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e652:	7cbb      	ldrb	r3, [r7, #18]
 800e654:	4619      	mov	r1, r3
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7fe f854 	bl	800c704 <pbuf_remove_header>
 800e65c:	e04e      	b.n	800e6fc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d105      	bne.n	800e672 <tcp_input+0xca>
 800e666:	4b70      	ldr	r3, [pc, #448]	@ (800e828 <tcp_input+0x280>)
 800e668:	22c2      	movs	r2, #194	@ 0xc2
 800e66a:	4977      	ldr	r1, [pc, #476]	@ (800e848 <tcp_input+0x2a0>)
 800e66c:	4870      	ldr	r0, [pc, #448]	@ (800e830 <tcp_input+0x288>)
 800e66e:	f007 fded 	bl	801624c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e672:	2114      	movs	r1, #20
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7fe f845 	bl	800c704 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	895a      	ldrh	r2, [r3, #10]
 800e67e:	4b71      	ldr	r3, [pc, #452]	@ (800e844 <tcp_input+0x29c>)
 800e680:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e682:	4b6e      	ldr	r3, [pc, #440]	@ (800e83c <tcp_input+0x294>)
 800e684:	881a      	ldrh	r2, [r3, #0]
 800e686:	4b6f      	ldr	r3, [pc, #444]	@ (800e844 <tcp_input+0x29c>)
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	1ad3      	subs	r3, r2, r3
 800e68c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e68e:	4b6d      	ldr	r3, [pc, #436]	@ (800e844 <tcp_input+0x29c>)
 800e690:	881b      	ldrh	r3, [r3, #0]
 800e692:	4619      	mov	r1, r3
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7fe f835 	bl	800c704 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	895b      	ldrh	r3, [r3, #10]
 800e6a0:	8a3a      	ldrh	r2, [r7, #16]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	f200 836e 	bhi.w	800ed84 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	4a64      	ldr	r2, [pc, #400]	@ (800e840 <tcp_input+0x298>)
 800e6b0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	8a3a      	ldrh	r2, [r7, #16]
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fe f822 	bl	800c704 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	891a      	ldrh	r2, [r3, #8]
 800e6c4:	8a3b      	ldrh	r3, [r7, #16]
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	895b      	ldrh	r3, [r3, #10]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d005      	beq.n	800e6e2 <tcp_input+0x13a>
 800e6d6:	4b54      	ldr	r3, [pc, #336]	@ (800e828 <tcp_input+0x280>)
 800e6d8:	22df      	movs	r2, #223	@ 0xdf
 800e6da:	495c      	ldr	r1, [pc, #368]	@ (800e84c <tcp_input+0x2a4>)
 800e6dc:	4854      	ldr	r0, [pc, #336]	@ (800e830 <tcp_input+0x288>)
 800e6de:	f007 fdb5 	bl	801624c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	891a      	ldrh	r2, [r3, #8]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	891b      	ldrh	r3, [r3, #8]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d005      	beq.n	800e6fc <tcp_input+0x154>
 800e6f0:	4b4d      	ldr	r3, [pc, #308]	@ (800e828 <tcp_input+0x280>)
 800e6f2:	22e0      	movs	r2, #224	@ 0xe0
 800e6f4:	4956      	ldr	r1, [pc, #344]	@ (800e850 <tcp_input+0x2a8>)
 800e6f6:	484e      	ldr	r0, [pc, #312]	@ (800e830 <tcp_input+0x288>)
 800e6f8:	f007 fda8 	bl	801624c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e6fc:	4b4d      	ldr	r3, [pc, #308]	@ (800e834 <tcp_input+0x28c>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	881b      	ldrh	r3, [r3, #0]
 800e702:	b29b      	uxth	r3, r3
 800e704:	4a4b      	ldr	r2, [pc, #300]	@ (800e834 <tcp_input+0x28c>)
 800e706:	6814      	ldr	r4, [r2, #0]
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fc fc6b 	bl	800afe4 <lwip_htons>
 800e70e:	4603      	mov	r3, r0
 800e710:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e712:	4b48      	ldr	r3, [pc, #288]	@ (800e834 <tcp_input+0x28c>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	885b      	ldrh	r3, [r3, #2]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	4a46      	ldr	r2, [pc, #280]	@ (800e834 <tcp_input+0x28c>)
 800e71c:	6814      	ldr	r4, [r2, #0]
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fc fc60 	bl	800afe4 <lwip_htons>
 800e724:	4603      	mov	r3, r0
 800e726:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e728:	4b42      	ldr	r3, [pc, #264]	@ (800e834 <tcp_input+0x28c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	4a41      	ldr	r2, [pc, #260]	@ (800e834 <tcp_input+0x28c>)
 800e730:	6814      	ldr	r4, [r2, #0]
 800e732:	4618      	mov	r0, r3
 800e734:	f7fc fc6c 	bl	800b010 <lwip_htonl>
 800e738:	4603      	mov	r3, r0
 800e73a:	6063      	str	r3, [r4, #4]
 800e73c:	6863      	ldr	r3, [r4, #4]
 800e73e:	4a45      	ldr	r2, [pc, #276]	@ (800e854 <tcp_input+0x2ac>)
 800e740:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e742:	4b3c      	ldr	r3, [pc, #240]	@ (800e834 <tcp_input+0x28c>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	4a3a      	ldr	r2, [pc, #232]	@ (800e834 <tcp_input+0x28c>)
 800e74a:	6814      	ldr	r4, [r2, #0]
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7fc fc5f 	bl	800b010 <lwip_htonl>
 800e752:	4603      	mov	r3, r0
 800e754:	60a3      	str	r3, [r4, #8]
 800e756:	68a3      	ldr	r3, [r4, #8]
 800e758:	4a3f      	ldr	r2, [pc, #252]	@ (800e858 <tcp_input+0x2b0>)
 800e75a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e75c:	4b35      	ldr	r3, [pc, #212]	@ (800e834 <tcp_input+0x28c>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	89db      	ldrh	r3, [r3, #14]
 800e762:	b29b      	uxth	r3, r3
 800e764:	4a33      	ldr	r2, [pc, #204]	@ (800e834 <tcp_input+0x28c>)
 800e766:	6814      	ldr	r4, [r2, #0]
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fc fc3b 	bl	800afe4 <lwip_htons>
 800e76e:	4603      	mov	r3, r0
 800e770:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e772:	4b30      	ldr	r3, [pc, #192]	@ (800e834 <tcp_input+0x28c>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	899b      	ldrh	r3, [r3, #12]
 800e778:	b29b      	uxth	r3, r3
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fc fc32 	bl	800afe4 <lwip_htons>
 800e780:	4603      	mov	r3, r0
 800e782:	b2db      	uxtb	r3, r3
 800e784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	4b34      	ldr	r3, [pc, #208]	@ (800e85c <tcp_input+0x2b4>)
 800e78c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	891a      	ldrh	r2, [r3, #8]
 800e792:	4b33      	ldr	r3, [pc, #204]	@ (800e860 <tcp_input+0x2b8>)
 800e794:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e796:	4b31      	ldr	r3, [pc, #196]	@ (800e85c <tcp_input+0x2b4>)
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	f003 0303 	and.w	r3, r3, #3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00c      	beq.n	800e7bc <tcp_input+0x214>
    tcplen++;
 800e7a2:	4b2f      	ldr	r3, [pc, #188]	@ (800e860 <tcp_input+0x2b8>)
 800e7a4:	881b      	ldrh	r3, [r3, #0]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	4b2d      	ldr	r3, [pc, #180]	@ (800e860 <tcp_input+0x2b8>)
 800e7ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	891a      	ldrh	r2, [r3, #8]
 800e7b2:	4b2b      	ldr	r3, [pc, #172]	@ (800e860 <tcp_input+0x2b8>)
 800e7b4:	881b      	ldrh	r3, [r3, #0]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	f200 82e6 	bhi.w	800ed88 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7c0:	4b28      	ldr	r3, [pc, #160]	@ (800e864 <tcp_input+0x2bc>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	61fb      	str	r3, [r7, #28]
 800e7c6:	e09d      	b.n	800e904 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	7d1b      	ldrb	r3, [r3, #20]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d105      	bne.n	800e7dc <tcp_input+0x234>
 800e7d0:	4b15      	ldr	r3, [pc, #84]	@ (800e828 <tcp_input+0x280>)
 800e7d2:	22fb      	movs	r2, #251	@ 0xfb
 800e7d4:	4924      	ldr	r1, [pc, #144]	@ (800e868 <tcp_input+0x2c0>)
 800e7d6:	4816      	ldr	r0, [pc, #88]	@ (800e830 <tcp_input+0x288>)
 800e7d8:	f007 fd38 	bl	801624c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	7d1b      	ldrb	r3, [r3, #20]
 800e7e0:	2b0a      	cmp	r3, #10
 800e7e2:	d105      	bne.n	800e7f0 <tcp_input+0x248>
 800e7e4:	4b10      	ldr	r3, [pc, #64]	@ (800e828 <tcp_input+0x280>)
 800e7e6:	22fc      	movs	r2, #252	@ 0xfc
 800e7e8:	4920      	ldr	r1, [pc, #128]	@ (800e86c <tcp_input+0x2c4>)
 800e7ea:	4811      	ldr	r0, [pc, #68]	@ (800e830 <tcp_input+0x288>)
 800e7ec:	f007 fd2e 	bl	801624c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	7d1b      	ldrb	r3, [r3, #20]
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d105      	bne.n	800e804 <tcp_input+0x25c>
 800e7f8:	4b0b      	ldr	r3, [pc, #44]	@ (800e828 <tcp_input+0x280>)
 800e7fa:	22fd      	movs	r2, #253	@ 0xfd
 800e7fc:	491c      	ldr	r1, [pc, #112]	@ (800e870 <tcp_input+0x2c8>)
 800e7fe:	480c      	ldr	r0, [pc, #48]	@ (800e830 <tcp_input+0x288>)
 800e800:	f007 fd24 	bl	801624c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	7a1b      	ldrb	r3, [r3, #8]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d033      	beq.n	800e874 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	7a1a      	ldrb	r2, [r3, #8]
 800e810:	4b09      	ldr	r3, [pc, #36]	@ (800e838 <tcp_input+0x290>)
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e818:	3301      	adds	r3, #1
 800e81a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d029      	beq.n	800e874 <tcp_input+0x2cc>
      prev = pcb;
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	61bb      	str	r3, [r7, #24]
      continue;
 800e824:	e06b      	b.n	800e8fe <tcp_input+0x356>
 800e826:	bf00      	nop
 800e828:	0801acbc 	.word	0x0801acbc
 800e82c:	0801acf0 	.word	0x0801acf0
 800e830:	0801ad08 	.word	0x0801ad08
 800e834:	240082ac 	.word	0x240082ac
 800e838:	24005368 	.word	0x24005368
 800e83c:	240082b0 	.word	0x240082b0
 800e840:	240082b4 	.word	0x240082b4
 800e844:	240082b2 	.word	0x240082b2
 800e848:	0801ad30 	.word	0x0801ad30
 800e84c:	0801ad40 	.word	0x0801ad40
 800e850:	0801ad4c 	.word	0x0801ad4c
 800e854:	240082bc 	.word	0x240082bc
 800e858:	240082c0 	.word	0x240082c0
 800e85c:	240082c8 	.word	0x240082c8
 800e860:	240082c6 	.word	0x240082c6
 800e864:	24008290 	.word	0x24008290
 800e868:	0801ad6c 	.word	0x0801ad6c
 800e86c:	0801ad94 	.word	0x0801ad94
 800e870:	0801adc0 	.word	0x0801adc0
    }

    if (pcb->remote_port == tcphdr->src &&
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	8b1a      	ldrh	r2, [r3, #24]
 800e878:	4b72      	ldr	r3, [pc, #456]	@ (800ea44 <tcp_input+0x49c>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	881b      	ldrh	r3, [r3, #0]
 800e87e:	b29b      	uxth	r3, r3
 800e880:	429a      	cmp	r2, r3
 800e882:	d13a      	bne.n	800e8fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	8ada      	ldrh	r2, [r3, #22]
 800e888:	4b6e      	ldr	r3, [pc, #440]	@ (800ea44 <tcp_input+0x49c>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	885b      	ldrh	r3, [r3, #2]
 800e88e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e890:	429a      	cmp	r2, r3
 800e892:	d132      	bne.n	800e8fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	685a      	ldr	r2, [r3, #4]
 800e898:	4b6b      	ldr	r3, [pc, #428]	@ (800ea48 <tcp_input+0x4a0>)
 800e89a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d12c      	bne.n	800e8fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	4b68      	ldr	r3, [pc, #416]	@ (800ea48 <tcp_input+0x4a0>)
 800e8a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d126      	bne.n	800e8fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	69fa      	ldr	r2, [r7, #28]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d106      	bne.n	800e8c4 <tcp_input+0x31c>
 800e8b6:	4b65      	ldr	r3, [pc, #404]	@ (800ea4c <tcp_input+0x4a4>)
 800e8b8:	f240 120d 	movw	r2, #269	@ 0x10d
 800e8bc:	4964      	ldr	r1, [pc, #400]	@ (800ea50 <tcp_input+0x4a8>)
 800e8be:	4865      	ldr	r0, [pc, #404]	@ (800ea54 <tcp_input+0x4ac>)
 800e8c0:	f007 fcc4 	bl	801624c <iprintf>
      if (prev != NULL) {
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d00a      	beq.n	800e8e0 <tcp_input+0x338>
        prev->next = pcb->next;
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	68da      	ldr	r2, [r3, #12]
 800e8ce:	69bb      	ldr	r3, [r7, #24]
 800e8d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e8d2:	4b61      	ldr	r3, [pc, #388]	@ (800ea58 <tcp_input+0x4b0>)
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e8da:	4a5f      	ldr	r2, [pc, #380]	@ (800ea58 <tcp_input+0x4b0>)
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	69fa      	ldr	r2, [r7, #28]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d111      	bne.n	800e90e <tcp_input+0x366>
 800e8ea:	4b58      	ldr	r3, [pc, #352]	@ (800ea4c <tcp_input+0x4a4>)
 800e8ec:	f240 1215 	movw	r2, #277	@ 0x115
 800e8f0:	495a      	ldr	r1, [pc, #360]	@ (800ea5c <tcp_input+0x4b4>)
 800e8f2:	4858      	ldr	r0, [pc, #352]	@ (800ea54 <tcp_input+0x4ac>)
 800e8f4:	f007 fcaa 	bl	801624c <iprintf>
      break;
 800e8f8:	e009      	b.n	800e90e <tcp_input+0x366>
    }
    prev = pcb;
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	61fb      	str	r3, [r7, #28]
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	2b00      	cmp	r3, #0
 800e908:	f47f af5e 	bne.w	800e7c8 <tcp_input+0x220>
 800e90c:	e000      	b.n	800e910 <tcp_input+0x368>
      break;
 800e90e:	bf00      	nop
  }

  if (pcb == NULL) {
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	2b00      	cmp	r3, #0
 800e914:	f040 80aa 	bne.w	800ea6c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e918:	4b51      	ldr	r3, [pc, #324]	@ (800ea60 <tcp_input+0x4b8>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	61fb      	str	r3, [r7, #28]
 800e91e:	e03f      	b.n	800e9a0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	7d1b      	ldrb	r3, [r3, #20]
 800e924:	2b0a      	cmp	r3, #10
 800e926:	d006      	beq.n	800e936 <tcp_input+0x38e>
 800e928:	4b48      	ldr	r3, [pc, #288]	@ (800ea4c <tcp_input+0x4a4>)
 800e92a:	f240 121f 	movw	r2, #287	@ 0x11f
 800e92e:	494d      	ldr	r1, [pc, #308]	@ (800ea64 <tcp_input+0x4bc>)
 800e930:	4848      	ldr	r0, [pc, #288]	@ (800ea54 <tcp_input+0x4ac>)
 800e932:	f007 fc8b 	bl	801624c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	7a1b      	ldrb	r3, [r3, #8]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d009      	beq.n	800e952 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	7a1a      	ldrb	r2, [r3, #8]
 800e942:	4b41      	ldr	r3, [pc, #260]	@ (800ea48 <tcp_input+0x4a0>)
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e94a:	3301      	adds	r3, #1
 800e94c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e94e:	429a      	cmp	r2, r3
 800e950:	d122      	bne.n	800e998 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	8b1a      	ldrh	r2, [r3, #24]
 800e956:	4b3b      	ldr	r3, [pc, #236]	@ (800ea44 <tcp_input+0x49c>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	881b      	ldrh	r3, [r3, #0]
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	429a      	cmp	r2, r3
 800e960:	d11b      	bne.n	800e99a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	8ada      	ldrh	r2, [r3, #22]
 800e966:	4b37      	ldr	r3, [pc, #220]	@ (800ea44 <tcp_input+0x49c>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	885b      	ldrh	r3, [r3, #2]
 800e96c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e96e:	429a      	cmp	r2, r3
 800e970:	d113      	bne.n	800e99a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	4b34      	ldr	r3, [pc, #208]	@ (800ea48 <tcp_input+0x4a0>)
 800e978:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d10d      	bne.n	800e99a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	4b31      	ldr	r3, [pc, #196]	@ (800ea48 <tcp_input+0x4a0>)
 800e984:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e986:	429a      	cmp	r2, r3
 800e988:	d107      	bne.n	800e99a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e98a:	69f8      	ldr	r0, [r7, #28]
 800e98c:	f000 fb56 	bl	800f03c <tcp_timewait_input>
        }
        pbuf_free(p);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7fd ff3d 	bl	800c810 <pbuf_free>
        return;
 800e996:	e1fd      	b.n	800ed94 <tcp_input+0x7ec>
        continue;
 800e998:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	61fb      	str	r3, [r7, #28]
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1bc      	bne.n	800e920 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e9aa:	4b2f      	ldr	r3, [pc, #188]	@ (800ea68 <tcp_input+0x4c0>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	617b      	str	r3, [r7, #20]
 800e9b0:	e02a      	b.n	800ea08 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	7a1b      	ldrb	r3, [r3, #8]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d00c      	beq.n	800e9d4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	7a1a      	ldrb	r2, [r3, #8]
 800e9be:	4b22      	ldr	r3, [pc, #136]	@ (800ea48 <tcp_input+0x4a0>)
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d002      	beq.n	800e9d4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	61bb      	str	r3, [r7, #24]
        continue;
 800e9d2:	e016      	b.n	800ea02 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	8ada      	ldrh	r2, [r3, #22]
 800e9d8:	4b1a      	ldr	r3, [pc, #104]	@ (800ea44 <tcp_input+0x49c>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	885b      	ldrh	r3, [r3, #2]
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d10c      	bne.n	800e9fe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	681a      	ldr	r2, [r3, #0]
 800e9e8:	4b17      	ldr	r3, [pc, #92]	@ (800ea48 <tcp_input+0x4a0>)
 800e9ea:	695b      	ldr	r3, [r3, #20]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d00f      	beq.n	800ea10 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d00d      	beq.n	800ea12 <tcp_input+0x46a>
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d009      	beq.n	800ea12 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	617b      	str	r3, [r7, #20]
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1d1      	bne.n	800e9b2 <tcp_input+0x40a>
 800ea0e:	e000      	b.n	800ea12 <tcp_input+0x46a>
            break;
 800ea10:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d029      	beq.n	800ea6c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00a      	beq.n	800ea34 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	68da      	ldr	r2, [r3, #12]
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ea26:	4b10      	ldr	r3, [pc, #64]	@ (800ea68 <tcp_input+0x4c0>)
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ea2e:	4a0e      	ldr	r2, [pc, #56]	@ (800ea68 <tcp_input+0x4c0>)
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ea34:	6978      	ldr	r0, [r7, #20]
 800ea36:	f000 fa03 	bl	800ee40 <tcp_listen_input>
      }
      pbuf_free(p);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f7fd fee8 	bl	800c810 <pbuf_free>
      return;
 800ea40:	e1a8      	b.n	800ed94 <tcp_input+0x7ec>
 800ea42:	bf00      	nop
 800ea44:	240082ac 	.word	0x240082ac
 800ea48:	24005368 	.word	0x24005368
 800ea4c:	0801acbc 	.word	0x0801acbc
 800ea50:	0801ade8 	.word	0x0801ade8
 800ea54:	0801ad08 	.word	0x0801ad08
 800ea58:	24008290 	.word	0x24008290
 800ea5c:	0801ae14 	.word	0x0801ae14
 800ea60:	24008294 	.word	0x24008294
 800ea64:	0801ae40 	.word	0x0801ae40
 800ea68:	2400828c 	.word	0x2400828c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	f000 8158 	beq.w	800ed24 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ea74:	4b95      	ldr	r3, [pc, #596]	@ (800eccc <tcp_input+0x724>)
 800ea76:	2200      	movs	r2, #0
 800ea78:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	891a      	ldrh	r2, [r3, #8]
 800ea7e:	4b93      	ldr	r3, [pc, #588]	@ (800eccc <tcp_input+0x724>)
 800ea80:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ea82:	4a92      	ldr	r2, [pc, #584]	@ (800eccc <tcp_input+0x724>)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ea88:	4b91      	ldr	r3, [pc, #580]	@ (800ecd0 <tcp_input+0x728>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4a8f      	ldr	r2, [pc, #572]	@ (800eccc <tcp_input+0x724>)
 800ea8e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ea90:	4b90      	ldr	r3, [pc, #576]	@ (800ecd4 <tcp_input+0x72c>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ea96:	4b90      	ldr	r3, [pc, #576]	@ (800ecd8 <tcp_input+0x730>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ea9c:	4b8f      	ldr	r3, [pc, #572]	@ (800ecdc <tcp_input+0x734>)
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800eaa2:	4b8f      	ldr	r3, [pc, #572]	@ (800ece0 <tcp_input+0x738>)
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	f003 0308 	and.w	r3, r3, #8
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d006      	beq.n	800eabc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	7b5b      	ldrb	r3, [r3, #13]
 800eab2:	f043 0301 	orr.w	r3, r3, #1
 800eab6:	b2da      	uxtb	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d017      	beq.n	800eaf4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eac4:	69f8      	ldr	r0, [r7, #28]
 800eac6:	f7ff f929 	bl	800dd1c <tcp_process_refused_data>
 800eaca:	4603      	mov	r3, r0
 800eacc:	f113 0f0d 	cmn.w	r3, #13
 800ead0:	d007      	beq.n	800eae2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00c      	beq.n	800eaf4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eada:	4b82      	ldr	r3, [pc, #520]	@ (800ece4 <tcp_input+0x73c>)
 800eadc:	881b      	ldrh	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d008      	beq.n	800eaf4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	f040 80e3 	bne.w	800ecb2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800eaec:	69f8      	ldr	r0, [r7, #28]
 800eaee:	f003 f9a7 	bl	8011e40 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eaf2:	e0de      	b.n	800ecb2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800eaf4:	4a7c      	ldr	r2, [pc, #496]	@ (800ece8 <tcp_input+0x740>)
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eafa:	69f8      	ldr	r0, [r7, #28]
 800eafc:	f000 fb18 	bl	800f130 <tcp_process>
 800eb00:	4603      	mov	r3, r0
 800eb02:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eb04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb08:	f113 0f0d 	cmn.w	r3, #13
 800eb0c:	f000 80d3 	beq.w	800ecb6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800eb10:	4b71      	ldr	r3, [pc, #452]	@ (800ecd8 <tcp_input+0x730>)
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	f003 0308 	and.w	r3, r3, #8
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d015      	beq.n	800eb48 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d008      	beq.n	800eb38 <tcp_input+0x590>
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb2c:	69fa      	ldr	r2, [r7, #28]
 800eb2e:	6912      	ldr	r2, [r2, #16]
 800eb30:	f06f 010d 	mvn.w	r1, #13
 800eb34:	4610      	mov	r0, r2
 800eb36:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb38:	69f9      	ldr	r1, [r7, #28]
 800eb3a:	486c      	ldr	r0, [pc, #432]	@ (800ecec <tcp_input+0x744>)
 800eb3c:	f7ff fbbc 	bl	800e2b8 <tcp_pcb_remove>
        tcp_free(pcb);
 800eb40:	69f8      	ldr	r0, [r7, #28]
 800eb42:	f7fe f9a7 	bl	800ce94 <tcp_free>
 800eb46:	e0da      	b.n	800ecfe <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800eb4c:	4b63      	ldr	r3, [pc, #396]	@ (800ecdc <tcp_input+0x734>)
 800eb4e:	881b      	ldrh	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d01d      	beq.n	800eb90 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800eb54:	4b61      	ldr	r3, [pc, #388]	@ (800ecdc <tcp_input+0x734>)
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00a      	beq.n	800eb7a <tcp_input+0x5d2>
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb6a:	69fa      	ldr	r2, [r7, #28]
 800eb6c:	6910      	ldr	r0, [r2, #16]
 800eb6e:	89fa      	ldrh	r2, [r7, #14]
 800eb70:	69f9      	ldr	r1, [r7, #28]
 800eb72:	4798      	blx	r3
 800eb74:	4603      	mov	r3, r0
 800eb76:	74fb      	strb	r3, [r7, #19]
 800eb78:	e001      	b.n	800eb7e <tcp_input+0x5d6>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eb7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb82:	f113 0f0d 	cmn.w	r3, #13
 800eb86:	f000 8098 	beq.w	800ecba <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800eb8a:	4b54      	ldr	r3, [pc, #336]	@ (800ecdc <tcp_input+0x734>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800eb90:	69f8      	ldr	r0, [r7, #28]
 800eb92:	f000 f915 	bl	800edc0 <tcp_input_delayed_close>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f040 8090 	bne.w	800ecbe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800eb9e:	4b4d      	ldr	r3, [pc, #308]	@ (800ecd4 <tcp_input+0x72c>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d041      	beq.n	800ec2a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d006      	beq.n	800ebbc <tcp_input+0x614>
 800ebae:	4b50      	ldr	r3, [pc, #320]	@ (800ecf0 <tcp_input+0x748>)
 800ebb0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ebb4:	494f      	ldr	r1, [pc, #316]	@ (800ecf4 <tcp_input+0x74c>)
 800ebb6:	4850      	ldr	r0, [pc, #320]	@ (800ecf8 <tcp_input+0x750>)
 800ebb8:	f007 fb48 	bl	801624c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	8b5b      	ldrh	r3, [r3, #26]
 800ebc0:	f003 0310 	and.w	r3, r3, #16
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d008      	beq.n	800ebda <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ebc8:	4b42      	ldr	r3, [pc, #264]	@ (800ecd4 <tcp_input+0x72c>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fd fe1f 	bl	800c810 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ebd2:	69f8      	ldr	r0, [r7, #28]
 800ebd4:	f7fe fc46 	bl	800d464 <tcp_abort>
            goto aborted;
 800ebd8:	e091      	b.n	800ecfe <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00c      	beq.n	800ebfe <tcp_input+0x656>
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	6918      	ldr	r0, [r3, #16]
 800ebee:	4b39      	ldr	r3, [pc, #228]	@ (800ecd4 <tcp_input+0x72c>)
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	69f9      	ldr	r1, [r7, #28]
 800ebf6:	47a0      	blx	r4
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	74fb      	strb	r3, [r7, #19]
 800ebfc:	e008      	b.n	800ec10 <tcp_input+0x668>
 800ebfe:	4b35      	ldr	r3, [pc, #212]	@ (800ecd4 <tcp_input+0x72c>)
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	2300      	movs	r3, #0
 800ec04:	69f9      	ldr	r1, [r7, #28]
 800ec06:	2000      	movs	r0, #0
 800ec08:	f7ff f95e 	bl	800dec8 <tcp_recv_null>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ec10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec14:	f113 0f0d 	cmn.w	r3, #13
 800ec18:	d053      	beq.n	800ecc2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ec1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d003      	beq.n	800ec2a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ec22:	4b2c      	ldr	r3, [pc, #176]	@ (800ecd4 <tcp_input+0x72c>)
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	69fb      	ldr	r3, [r7, #28]
 800ec28:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ec2a:	4b2b      	ldr	r3, [pc, #172]	@ (800ecd8 <tcp_input+0x730>)
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	f003 0320 	and.w	r3, r3, #32
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d030      	beq.n	800ec98 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ec36:	69fb      	ldr	r3, [r7, #28]
 800ec38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d009      	beq.n	800ec52 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec42:	7b5a      	ldrb	r2, [r3, #13]
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec48:	f042 0220 	orr.w	r2, r2, #32
 800ec4c:	b2d2      	uxtb	r2, r2
 800ec4e:	735a      	strb	r2, [r3, #13]
 800ec50:	e022      	b.n	800ec98 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec56:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ec5a:	d005      	beq.n	800ec68 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec60:	3301      	adds	r3, #1
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d00b      	beq.n	800ec8a <tcp_input+0x6e2>
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	6918      	ldr	r0, [r3, #16]
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	2200      	movs	r2, #0
 800ec80:	69f9      	ldr	r1, [r7, #28]
 800ec82:	47a0      	blx	r4
 800ec84:	4603      	mov	r3, r0
 800ec86:	74fb      	strb	r3, [r7, #19]
 800ec88:	e001      	b.n	800ec8e <tcp_input+0x6e6>
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ec8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec92:	f113 0f0d 	cmn.w	r3, #13
 800ec96:	d016      	beq.n	800ecc6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ec98:	4b13      	ldr	r3, [pc, #76]	@ (800ece8 <tcp_input+0x740>)
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ec9e:	69f8      	ldr	r0, [r7, #28]
 800eca0:	f000 f88e 	bl	800edc0 <tcp_input_delayed_close>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d128      	bne.n	800ecfc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ecaa:	69f8      	ldr	r0, [r7, #28]
 800ecac:	f002 fac2 	bl	8011234 <tcp_output>
 800ecb0:	e025      	b.n	800ecfe <tcp_input+0x756>
        goto aborted;
 800ecb2:	bf00      	nop
 800ecb4:	e023      	b.n	800ecfe <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ecb6:	bf00      	nop
 800ecb8:	e021      	b.n	800ecfe <tcp_input+0x756>
              goto aborted;
 800ecba:	bf00      	nop
 800ecbc:	e01f      	b.n	800ecfe <tcp_input+0x756>
          goto aborted;
 800ecbe:	bf00      	nop
 800ecc0:	e01d      	b.n	800ecfe <tcp_input+0x756>
            goto aborted;
 800ecc2:	bf00      	nop
 800ecc4:	e01b      	b.n	800ecfe <tcp_input+0x756>
              goto aborted;
 800ecc6:	bf00      	nop
 800ecc8:	e019      	b.n	800ecfe <tcp_input+0x756>
 800ecca:	bf00      	nop
 800eccc:	2400829c 	.word	0x2400829c
 800ecd0:	240082ac 	.word	0x240082ac
 800ecd4:	240082cc 	.word	0x240082cc
 800ecd8:	240082c9 	.word	0x240082c9
 800ecdc:	240082c4 	.word	0x240082c4
 800ece0:	240082c8 	.word	0x240082c8
 800ece4:	240082c6 	.word	0x240082c6
 800ece8:	240082d0 	.word	0x240082d0
 800ecec:	24008290 	.word	0x24008290
 800ecf0:	0801acbc 	.word	0x0801acbc
 800ecf4:	0801ae70 	.word	0x0801ae70
 800ecf8:	0801ad08 	.word	0x0801ad08
          goto aborted;
 800ecfc:	bf00      	nop
    tcp_input_pcb = NULL;
 800ecfe:	4b27      	ldr	r3, [pc, #156]	@ (800ed9c <tcp_input+0x7f4>)
 800ed00:	2200      	movs	r2, #0
 800ed02:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ed04:	4b26      	ldr	r3, [pc, #152]	@ (800eda0 <tcp_input+0x7f8>)
 800ed06:	2200      	movs	r2, #0
 800ed08:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ed0a:	4b26      	ldr	r3, [pc, #152]	@ (800eda4 <tcp_input+0x7fc>)
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d03f      	beq.n	800ed92 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ed12:	4b24      	ldr	r3, [pc, #144]	@ (800eda4 <tcp_input+0x7fc>)
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fd fd7a 	bl	800c810 <pbuf_free>
      inseg.p = NULL;
 800ed1c:	4b21      	ldr	r3, [pc, #132]	@ (800eda4 <tcp_input+0x7fc>)
 800ed1e:	2200      	movs	r2, #0
 800ed20:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ed22:	e036      	b.n	800ed92 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ed24:	4b20      	ldr	r3, [pc, #128]	@ (800eda8 <tcp_input+0x800>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	899b      	ldrh	r3, [r3, #12]
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7fc f959 	bl	800afe4 <lwip_htons>
 800ed32:	4603      	mov	r3, r0
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	f003 0304 	and.w	r3, r3, #4
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d118      	bne.n	800ed70 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed3e:	4b1b      	ldr	r3, [pc, #108]	@ (800edac <tcp_input+0x804>)
 800ed40:	6819      	ldr	r1, [r3, #0]
 800ed42:	4b1b      	ldr	r3, [pc, #108]	@ (800edb0 <tcp_input+0x808>)
 800ed44:	881b      	ldrh	r3, [r3, #0]
 800ed46:	461a      	mov	r2, r3
 800ed48:	4b1a      	ldr	r3, [pc, #104]	@ (800edb4 <tcp_input+0x80c>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed4e:	4b16      	ldr	r3, [pc, #88]	@ (800eda8 <tcp_input+0x800>)
 800ed50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed52:	885b      	ldrh	r3, [r3, #2]
 800ed54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed56:	4a14      	ldr	r2, [pc, #80]	@ (800eda8 <tcp_input+0x800>)
 800ed58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed5a:	8812      	ldrh	r2, [r2, #0]
 800ed5c:	b292      	uxth	r2, r2
 800ed5e:	9202      	str	r2, [sp, #8]
 800ed60:	9301      	str	r3, [sp, #4]
 800ed62:	4b15      	ldr	r3, [pc, #84]	@ (800edb8 <tcp_input+0x810>)
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	4b15      	ldr	r3, [pc, #84]	@ (800edbc <tcp_input+0x814>)
 800ed68:	4602      	mov	r2, r0
 800ed6a:	2000      	movs	r0, #0
 800ed6c:	f003 f816 	bl	8011d9c <tcp_rst>
    pbuf_free(p);
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f7fd fd4d 	bl	800c810 <pbuf_free>
  return;
 800ed76:	e00c      	b.n	800ed92 <tcp_input+0x7ea>
    goto dropped;
 800ed78:	bf00      	nop
 800ed7a:	e006      	b.n	800ed8a <tcp_input+0x7e2>
    goto dropped;
 800ed7c:	bf00      	nop
 800ed7e:	e004      	b.n	800ed8a <tcp_input+0x7e2>
    goto dropped;
 800ed80:	bf00      	nop
 800ed82:	e002      	b.n	800ed8a <tcp_input+0x7e2>
      goto dropped;
 800ed84:	bf00      	nop
 800ed86:	e000      	b.n	800ed8a <tcp_input+0x7e2>
      goto dropped;
 800ed88:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7fd fd40 	bl	800c810 <pbuf_free>
 800ed90:	e000      	b.n	800ed94 <tcp_input+0x7ec>
  return;
 800ed92:	bf00      	nop
}
 800ed94:	3724      	adds	r7, #36	@ 0x24
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd90      	pop	{r4, r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	240082d0 	.word	0x240082d0
 800eda0:	240082cc 	.word	0x240082cc
 800eda4:	2400829c 	.word	0x2400829c
 800eda8:	240082ac 	.word	0x240082ac
 800edac:	240082c0 	.word	0x240082c0
 800edb0:	240082c6 	.word	0x240082c6
 800edb4:	240082bc 	.word	0x240082bc
 800edb8:	24005378 	.word	0x24005378
 800edbc:	2400537c 	.word	0x2400537c

0800edc0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d106      	bne.n	800eddc <tcp_input_delayed_close+0x1c>
 800edce:	4b17      	ldr	r3, [pc, #92]	@ (800ee2c <tcp_input_delayed_close+0x6c>)
 800edd0:	f240 225a 	movw	r2, #602	@ 0x25a
 800edd4:	4916      	ldr	r1, [pc, #88]	@ (800ee30 <tcp_input_delayed_close+0x70>)
 800edd6:	4817      	ldr	r0, [pc, #92]	@ (800ee34 <tcp_input_delayed_close+0x74>)
 800edd8:	f007 fa38 	bl	801624c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800eddc:	4b16      	ldr	r3, [pc, #88]	@ (800ee38 <tcp_input_delayed_close+0x78>)
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	f003 0310 	and.w	r3, r3, #16
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d01c      	beq.n	800ee22 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	8b5b      	ldrh	r3, [r3, #26]
 800edec:	f003 0310 	and.w	r3, r3, #16
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d10d      	bne.n	800ee10 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d008      	beq.n	800ee10 <tcp_input_delayed_close+0x50>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	6912      	ldr	r2, [r2, #16]
 800ee08:	f06f 010e 	mvn.w	r1, #14
 800ee0c:	4610      	mov	r0, r2
 800ee0e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ee10:	6879      	ldr	r1, [r7, #4]
 800ee12:	480a      	ldr	r0, [pc, #40]	@ (800ee3c <tcp_input_delayed_close+0x7c>)
 800ee14:	f7ff fa50 	bl	800e2b8 <tcp_pcb_remove>
    tcp_free(pcb);
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f7fe f83b 	bl	800ce94 <tcp_free>
    return 1;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e000      	b.n	800ee24 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ee22:	2300      	movs	r3, #0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	0801acbc 	.word	0x0801acbc
 800ee30:	0801ae8c 	.word	0x0801ae8c
 800ee34:	0801ad08 	.word	0x0801ad08
 800ee38:	240082c9 	.word	0x240082c9
 800ee3c:	24008290 	.word	0x24008290

0800ee40 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ee40:	b590      	push	{r4, r7, lr}
 800ee42:	b08b      	sub	sp, #44	@ 0x2c
 800ee44:	af04      	add	r7, sp, #16
 800ee46:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ee48:	4b6f      	ldr	r3, [pc, #444]	@ (800f008 <tcp_listen_input+0x1c8>)
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	f003 0304 	and.w	r3, r3, #4
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f040 80d2 	bne.w	800effa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d106      	bne.n	800ee6a <tcp_listen_input+0x2a>
 800ee5c:	4b6b      	ldr	r3, [pc, #428]	@ (800f00c <tcp_listen_input+0x1cc>)
 800ee5e:	f240 2281 	movw	r2, #641	@ 0x281
 800ee62:	496b      	ldr	r1, [pc, #428]	@ (800f010 <tcp_listen_input+0x1d0>)
 800ee64:	486b      	ldr	r0, [pc, #428]	@ (800f014 <tcp_listen_input+0x1d4>)
 800ee66:	f007 f9f1 	bl	801624c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ee6a:	4b67      	ldr	r3, [pc, #412]	@ (800f008 <tcp_listen_input+0x1c8>)
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	f003 0310 	and.w	r3, r3, #16
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d019      	beq.n	800eeaa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee76:	4b68      	ldr	r3, [pc, #416]	@ (800f018 <tcp_listen_input+0x1d8>)
 800ee78:	6819      	ldr	r1, [r3, #0]
 800ee7a:	4b68      	ldr	r3, [pc, #416]	@ (800f01c <tcp_listen_input+0x1dc>)
 800ee7c:	881b      	ldrh	r3, [r3, #0]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	4b67      	ldr	r3, [pc, #412]	@ (800f020 <tcp_listen_input+0x1e0>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee86:	4b67      	ldr	r3, [pc, #412]	@ (800f024 <tcp_listen_input+0x1e4>)
 800ee88:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee8a:	885b      	ldrh	r3, [r3, #2]
 800ee8c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee8e:	4a65      	ldr	r2, [pc, #404]	@ (800f024 <tcp_listen_input+0x1e4>)
 800ee90:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee92:	8812      	ldrh	r2, [r2, #0]
 800ee94:	b292      	uxth	r2, r2
 800ee96:	9202      	str	r2, [sp, #8]
 800ee98:	9301      	str	r3, [sp, #4]
 800ee9a:	4b63      	ldr	r3, [pc, #396]	@ (800f028 <tcp_listen_input+0x1e8>)
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	4b63      	ldr	r3, [pc, #396]	@ (800f02c <tcp_listen_input+0x1ec>)
 800eea0:	4602      	mov	r2, r0
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f002 ff7a 	bl	8011d9c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800eea8:	e0a9      	b.n	800effe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800eeaa:	4b57      	ldr	r3, [pc, #348]	@ (800f008 <tcp_listen_input+0x1c8>)
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	f003 0302 	and.w	r3, r3, #2
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	f000 80a3 	beq.w	800effe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	7d5b      	ldrb	r3, [r3, #21]
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7ff f927 	bl	800e110 <tcp_alloc>
 800eec2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d111      	bne.n	800eeee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	699b      	ldr	r3, [r3, #24]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00a      	beq.n	800eee8 <tcp_listen_input+0xa8>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	699b      	ldr	r3, [r3, #24]
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	6910      	ldr	r0, [r2, #16]
 800eeda:	f04f 32ff 	mov.w	r2, #4294967295
 800eede:	2100      	movs	r1, #0
 800eee0:	4798      	blx	r3
 800eee2:	4603      	mov	r3, r0
 800eee4:	73bb      	strb	r3, [r7, #14]
      return;
 800eee6:	e08b      	b.n	800f000 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eee8:	23f0      	movs	r3, #240	@ 0xf0
 800eeea:	73bb      	strb	r3, [r7, #14]
      return;
 800eeec:	e088      	b.n	800f000 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800eeee:	4b50      	ldr	r3, [pc, #320]	@ (800f030 <tcp_listen_input+0x1f0>)
 800eef0:	695a      	ldr	r2, [r3, #20]
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800eef6:	4b4e      	ldr	r3, [pc, #312]	@ (800f030 <tcp_listen_input+0x1f0>)
 800eef8:	691a      	ldr	r2, [r3, #16]
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	8ada      	ldrh	r2, [r3, #22]
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ef06:	4b47      	ldr	r3, [pc, #284]	@ (800f024 <tcp_listen_input+0x1e4>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	881b      	ldrh	r3, [r3, #0]
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	2203      	movs	r2, #3
 800ef16:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ef18:	4b41      	ldr	r3, [pc, #260]	@ (800f020 <tcp_listen_input+0x1e0>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	1c5a      	adds	r2, r3, #1
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ef2a:	6978      	ldr	r0, [r7, #20]
 800ef2c:	f7ff fa58 	bl	800e3e0 <tcp_next_iss>
 800ef30:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	693a      	ldr	r2, [r7, #16]
 800ef36:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	693a      	ldr	r2, [r7, #16]
 800ef3c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	693a      	ldr	r2, [r7, #16]
 800ef42:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	693a      	ldr	r2, [r7, #16]
 800ef48:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ef4a:	4b35      	ldr	r3, [pc, #212]	@ (800f020 <tcp_listen_input+0x1e0>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	1e5a      	subs	r2, r3, #1
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	691a      	ldr	r2, [r3, #16]
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7a5b      	ldrb	r3, [r3, #9]
 800ef66:	f003 030c 	and.w	r3, r3, #12
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	7a1a      	ldrb	r2, [r3, #8]
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ef78:	4b2e      	ldr	r3, [pc, #184]	@ (800f034 <tcp_listen_input+0x1f4>)
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	60da      	str	r2, [r3, #12]
 800ef80:	4a2c      	ldr	r2, [pc, #176]	@ (800f034 <tcp_listen_input+0x1f4>)
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	6013      	str	r3, [r2, #0]
 800ef86:	f003 f8cb 	bl	8012120 <tcp_timer_needed>
 800ef8a:	4b2b      	ldr	r3, [pc, #172]	@ (800f038 <tcp_listen_input+0x1f8>)
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ef90:	6978      	ldr	r0, [r7, #20]
 800ef92:	f001 fd8b 	bl	8010aac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ef96:	4b23      	ldr	r3, [pc, #140]	@ (800f024 <tcp_listen_input+0x1e4>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	89db      	ldrh	r3, [r3, #14]
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	3304      	adds	r3, #4
 800efb8:	4618      	mov	r0, r3
 800efba:	f004 ffa5 	bl	8013f08 <ip4_route>
 800efbe:	4601      	mov	r1, r0
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	3304      	adds	r3, #4
 800efc4:	461a      	mov	r2, r3
 800efc6:	4620      	mov	r0, r4
 800efc8:	f7ff fa30 	bl	800e42c <tcp_eff_send_mss_netif>
 800efcc:	4603      	mov	r3, r0
 800efce:	461a      	mov	r2, r3
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800efd4:	2112      	movs	r1, #18
 800efd6:	6978      	ldr	r0, [r7, #20]
 800efd8:	f002 f83e 	bl	8011058 <tcp_enqueue_flags>
 800efdc:	4603      	mov	r3, r0
 800efde:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800efe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d004      	beq.n	800eff2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800efe8:	2100      	movs	r1, #0
 800efea:	6978      	ldr	r0, [r7, #20]
 800efec:	f7fe f97c 	bl	800d2e8 <tcp_abandon>
      return;
 800eff0:	e006      	b.n	800f000 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800eff2:	6978      	ldr	r0, [r7, #20]
 800eff4:	f002 f91e 	bl	8011234 <tcp_output>
  return;
 800eff8:	e001      	b.n	800effe <tcp_listen_input+0x1be>
    return;
 800effa:	bf00      	nop
 800effc:	e000      	b.n	800f000 <tcp_listen_input+0x1c0>
  return;
 800effe:	bf00      	nop
}
 800f000:	371c      	adds	r7, #28
 800f002:	46bd      	mov	sp, r7
 800f004:	bd90      	pop	{r4, r7, pc}
 800f006:	bf00      	nop
 800f008:	240082c8 	.word	0x240082c8
 800f00c:	0801acbc 	.word	0x0801acbc
 800f010:	0801aeb4 	.word	0x0801aeb4
 800f014:	0801ad08 	.word	0x0801ad08
 800f018:	240082c0 	.word	0x240082c0
 800f01c:	240082c6 	.word	0x240082c6
 800f020:	240082bc 	.word	0x240082bc
 800f024:	240082ac 	.word	0x240082ac
 800f028:	24005378 	.word	0x24005378
 800f02c:	2400537c 	.word	0x2400537c
 800f030:	24005368 	.word	0x24005368
 800f034:	24008290 	.word	0x24008290
 800f038:	24008298 	.word	0x24008298

0800f03c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b086      	sub	sp, #24
 800f040:	af04      	add	r7, sp, #16
 800f042:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f044:	4b2f      	ldr	r3, [pc, #188]	@ (800f104 <tcp_timewait_input+0xc8>)
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	f003 0304 	and.w	r3, r3, #4
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d153      	bne.n	800f0f8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d106      	bne.n	800f064 <tcp_timewait_input+0x28>
 800f056:	4b2c      	ldr	r3, [pc, #176]	@ (800f108 <tcp_timewait_input+0xcc>)
 800f058:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f05c:	492b      	ldr	r1, [pc, #172]	@ (800f10c <tcp_timewait_input+0xd0>)
 800f05e:	482c      	ldr	r0, [pc, #176]	@ (800f110 <tcp_timewait_input+0xd4>)
 800f060:	f007 f8f4 	bl	801624c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f064:	4b27      	ldr	r3, [pc, #156]	@ (800f104 <tcp_timewait_input+0xc8>)
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	f003 0302 	and.w	r3, r3, #2
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d02a      	beq.n	800f0c6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f070:	4b28      	ldr	r3, [pc, #160]	@ (800f114 <tcp_timewait_input+0xd8>)
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	db2d      	blt.n	800f0da <tcp_timewait_input+0x9e>
 800f07e:	4b25      	ldr	r3, [pc, #148]	@ (800f114 <tcp_timewait_input+0xd8>)
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f086:	6879      	ldr	r1, [r7, #4]
 800f088:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f08a:	440b      	add	r3, r1
 800f08c:	1ad3      	subs	r3, r2, r3
 800f08e:	2b00      	cmp	r3, #0
 800f090:	dc23      	bgt.n	800f0da <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f092:	4b21      	ldr	r3, [pc, #132]	@ (800f118 <tcp_timewait_input+0xdc>)
 800f094:	6819      	ldr	r1, [r3, #0]
 800f096:	4b21      	ldr	r3, [pc, #132]	@ (800f11c <tcp_timewait_input+0xe0>)
 800f098:	881b      	ldrh	r3, [r3, #0]
 800f09a:	461a      	mov	r2, r3
 800f09c:	4b1d      	ldr	r3, [pc, #116]	@ (800f114 <tcp_timewait_input+0xd8>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0a2:	4b1f      	ldr	r3, [pc, #124]	@ (800f120 <tcp_timewait_input+0xe4>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0a6:	885b      	ldrh	r3, [r3, #2]
 800f0a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0aa:	4a1d      	ldr	r2, [pc, #116]	@ (800f120 <tcp_timewait_input+0xe4>)
 800f0ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0ae:	8812      	ldrh	r2, [r2, #0]
 800f0b0:	b292      	uxth	r2, r2
 800f0b2:	9202      	str	r2, [sp, #8]
 800f0b4:	9301      	str	r3, [sp, #4]
 800f0b6:	4b1b      	ldr	r3, [pc, #108]	@ (800f124 <tcp_timewait_input+0xe8>)
 800f0b8:	9300      	str	r3, [sp, #0]
 800f0ba:	4b1b      	ldr	r3, [pc, #108]	@ (800f128 <tcp_timewait_input+0xec>)
 800f0bc:	4602      	mov	r2, r0
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f002 fe6c 	bl	8011d9c <tcp_rst>
      return;
 800f0c4:	e01b      	b.n	800f0fe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f0c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f104 <tcp_timewait_input+0xc8>)
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d003      	beq.n	800f0da <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f0d2:	4b16      	ldr	r3, [pc, #88]	@ (800f12c <tcp_timewait_input+0xf0>)
 800f0d4:	681a      	ldr	r2, [r3, #0]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f0da:	4b10      	ldr	r3, [pc, #64]	@ (800f11c <tcp_timewait_input+0xe0>)
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d00c      	beq.n	800f0fc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	8b5b      	ldrh	r3, [r3, #26]
 800f0e6:	f043 0302 	orr.w	r3, r3, #2
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f002 f89f 	bl	8011234 <tcp_output>
  }
  return;
 800f0f6:	e001      	b.n	800f0fc <tcp_timewait_input+0xc0>
    return;
 800f0f8:	bf00      	nop
 800f0fa:	e000      	b.n	800f0fe <tcp_timewait_input+0xc2>
  return;
 800f0fc:	bf00      	nop
}
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	240082c8 	.word	0x240082c8
 800f108:	0801acbc 	.word	0x0801acbc
 800f10c:	0801aed4 	.word	0x0801aed4
 800f110:	0801ad08 	.word	0x0801ad08
 800f114:	240082bc 	.word	0x240082bc
 800f118:	240082c0 	.word	0x240082c0
 800f11c:	240082c6 	.word	0x240082c6
 800f120:	240082ac 	.word	0x240082ac
 800f124:	24005378 	.word	0x24005378
 800f128:	2400537c 	.word	0x2400537c
 800f12c:	24008284 	.word	0x24008284

0800f130 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f130:	b590      	push	{r4, r7, lr}
 800f132:	b08d      	sub	sp, #52	@ 0x34
 800f134:	af04      	add	r7, sp, #16
 800f136:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f138:	2300      	movs	r3, #0
 800f13a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f13c:	2300      	movs	r3, #0
 800f13e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d106      	bne.n	800f154 <tcp_process+0x24>
 800f146:	4b9d      	ldr	r3, [pc, #628]	@ (800f3bc <tcp_process+0x28c>)
 800f148:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f14c:	499c      	ldr	r1, [pc, #624]	@ (800f3c0 <tcp_process+0x290>)
 800f14e:	489d      	ldr	r0, [pc, #628]	@ (800f3c4 <tcp_process+0x294>)
 800f150:	f007 f87c 	bl	801624c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f154:	4b9c      	ldr	r3, [pc, #624]	@ (800f3c8 <tcp_process+0x298>)
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	f003 0304 	and.w	r3, r3, #4
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d04e      	beq.n	800f1fe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	7d1b      	ldrb	r3, [r3, #20]
 800f164:	2b02      	cmp	r3, #2
 800f166:	d108      	bne.n	800f17a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f16c:	4b97      	ldr	r3, [pc, #604]	@ (800f3cc <tcp_process+0x29c>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	429a      	cmp	r2, r3
 800f172:	d123      	bne.n	800f1bc <tcp_process+0x8c>
        acceptable = 1;
 800f174:	2301      	movs	r3, #1
 800f176:	76fb      	strb	r3, [r7, #27]
 800f178:	e020      	b.n	800f1bc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f17e:	4b94      	ldr	r3, [pc, #592]	@ (800f3d0 <tcp_process+0x2a0>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	429a      	cmp	r2, r3
 800f184:	d102      	bne.n	800f18c <tcp_process+0x5c>
        acceptable = 1;
 800f186:	2301      	movs	r3, #1
 800f188:	76fb      	strb	r3, [r7, #27]
 800f18a:	e017      	b.n	800f1bc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f18c:	4b90      	ldr	r3, [pc, #576]	@ (800f3d0 <tcp_process+0x2a0>)
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	2b00      	cmp	r3, #0
 800f198:	db10      	blt.n	800f1bc <tcp_process+0x8c>
 800f19a:	4b8d      	ldr	r3, [pc, #564]	@ (800f3d0 <tcp_process+0x2a0>)
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a2:	6879      	ldr	r1, [r7, #4]
 800f1a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f1a6:	440b      	add	r3, r1
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	dc06      	bgt.n	800f1bc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	8b5b      	ldrh	r3, [r3, #26]
 800f1b2:	f043 0302 	orr.w	r3, r3, #2
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f1bc:	7efb      	ldrb	r3, [r7, #27]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d01b      	beq.n	800f1fa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7d1b      	ldrb	r3, [r3, #20]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <tcp_process+0xa8>
 800f1ca:	4b7c      	ldr	r3, [pc, #496]	@ (800f3bc <tcp_process+0x28c>)
 800f1cc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f1d0:	4980      	ldr	r1, [pc, #512]	@ (800f3d4 <tcp_process+0x2a4>)
 800f1d2:	487c      	ldr	r0, [pc, #496]	@ (800f3c4 <tcp_process+0x294>)
 800f1d4:	f007 f83a 	bl	801624c <iprintf>
      recv_flags |= TF_RESET;
 800f1d8:	4b7f      	ldr	r3, [pc, #508]	@ (800f3d8 <tcp_process+0x2a8>)
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	f043 0308 	orr.w	r3, r3, #8
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	4b7d      	ldr	r3, [pc, #500]	@ (800f3d8 <tcp_process+0x2a8>)
 800f1e4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	8b5b      	ldrh	r3, [r3, #26]
 800f1ea:	f023 0301 	bic.w	r3, r3, #1
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f1f4:	f06f 030d 	mvn.w	r3, #13
 800f1f8:	e37a      	b.n	800f8f0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	e378      	b.n	800f8f0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f1fe:	4b72      	ldr	r3, [pc, #456]	@ (800f3c8 <tcp_process+0x298>)
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	f003 0302 	and.w	r3, r3, #2
 800f206:	2b00      	cmp	r3, #0
 800f208:	d010      	beq.n	800f22c <tcp_process+0xfc>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	7d1b      	ldrb	r3, [r3, #20]
 800f20e:	2b02      	cmp	r3, #2
 800f210:	d00c      	beq.n	800f22c <tcp_process+0xfc>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	7d1b      	ldrb	r3, [r3, #20]
 800f216:	2b03      	cmp	r3, #3
 800f218:	d008      	beq.n	800f22c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	8b5b      	ldrh	r3, [r3, #26]
 800f21e:	f043 0302 	orr.w	r3, r3, #2
 800f222:	b29a      	uxth	r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f228:	2300      	movs	r3, #0
 800f22a:	e361      	b.n	800f8f0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	8b5b      	ldrh	r3, [r3, #26]
 800f230:	f003 0310 	and.w	r3, r3, #16
 800f234:	2b00      	cmp	r3, #0
 800f236:	d103      	bne.n	800f240 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f238:	4b68      	ldr	r3, [pc, #416]	@ (800f3dc <tcp_process+0x2ac>)
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2200      	movs	r2, #0
 800f24c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f001 fc2b 	bl	8010aac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	7d1b      	ldrb	r3, [r3, #20]
 800f25a:	3b02      	subs	r3, #2
 800f25c:	2b07      	cmp	r3, #7
 800f25e:	f200 8337 	bhi.w	800f8d0 <tcp_process+0x7a0>
 800f262:	a201      	add	r2, pc, #4	@ (adr r2, 800f268 <tcp_process+0x138>)
 800f264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f268:	0800f289 	.word	0x0800f289
 800f26c:	0800f4b9 	.word	0x0800f4b9
 800f270:	0800f631 	.word	0x0800f631
 800f274:	0800f65b 	.word	0x0800f65b
 800f278:	0800f77f 	.word	0x0800f77f
 800f27c:	0800f631 	.word	0x0800f631
 800f280:	0800f80b 	.word	0x0800f80b
 800f284:	0800f89b 	.word	0x0800f89b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f288:	4b4f      	ldr	r3, [pc, #316]	@ (800f3c8 <tcp_process+0x298>)
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	f003 0310 	and.w	r3, r3, #16
 800f290:	2b00      	cmp	r3, #0
 800f292:	f000 80e4 	beq.w	800f45e <tcp_process+0x32e>
 800f296:	4b4c      	ldr	r3, [pc, #304]	@ (800f3c8 <tcp_process+0x298>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	f003 0302 	and.w	r3, r3, #2
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	f000 80dd 	beq.w	800f45e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	4b48      	ldr	r3, [pc, #288]	@ (800f3cc <tcp_process+0x29c>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	f040 80d5 	bne.w	800f45e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f2b4:	4b46      	ldr	r3, [pc, #280]	@ (800f3d0 <tcp_process+0x2a0>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	1c5a      	adds	r2, r3, #1
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800f2c6:	4b41      	ldr	r3, [pc, #260]	@ (800f3cc <tcp_process+0x29c>)
 800f2c8:	681a      	ldr	r2, [r3, #0]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f2ce:	4b44      	ldr	r3, [pc, #272]	@ (800f3e0 <tcp_process+0x2b0>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	89db      	ldrh	r3, [r3, #14]
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f2e8:	4b39      	ldr	r3, [pc, #228]	@ (800f3d0 <tcp_process+0x2a0>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	1e5a      	subs	r2, r3, #1
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2204      	movs	r2, #4
 800f2f6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	3304      	adds	r3, #4
 800f300:	4618      	mov	r0, r3
 800f302:	f004 fe01 	bl	8013f08 <ip4_route>
 800f306:	4601      	mov	r1, r0
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	3304      	adds	r3, #4
 800f30c:	461a      	mov	r2, r3
 800f30e:	4620      	mov	r0, r4
 800f310:	f7ff f88c 	bl	800e42c <tcp_eff_send_mss_netif>
 800f314:	4603      	mov	r3, r0
 800f316:	461a      	mov	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f320:	009a      	lsls	r2, r3, #2
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f32c:	428b      	cmp	r3, r1
 800f32e:	bf38      	it	cc
 800f330:	460b      	movcc	r3, r1
 800f332:	429a      	cmp	r2, r3
 800f334:	d204      	bcs.n	800f340 <tcp_process+0x210>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	e00d      	b.n	800f35c <tcp_process+0x22c>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f344:	005b      	lsls	r3, r3, #1
 800f346:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d904      	bls.n	800f358 <tcp_process+0x228>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f352:	005b      	lsls	r3, r3, #1
 800f354:	b29b      	uxth	r3, r3
 800f356:	e001      	b.n	800f35c <tcp_process+0x22c>
 800f358:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d106      	bne.n	800f37a <tcp_process+0x24a>
 800f36c:	4b13      	ldr	r3, [pc, #76]	@ (800f3bc <tcp_process+0x28c>)
 800f36e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800f372:	491c      	ldr	r1, [pc, #112]	@ (800f3e4 <tcp_process+0x2b4>)
 800f374:	4813      	ldr	r0, [pc, #76]	@ (800f3c4 <tcp_process+0x294>)
 800f376:	f006 ff69 	bl	801624c <iprintf>
        --pcb->snd_queuelen;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f380:	3b01      	subs	r3, #1
 800f382:	b29a      	uxth	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f38e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d12a      	bne.n	800f3ec <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f39a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d106      	bne.n	800f3b0 <tcp_process+0x280>
 800f3a2:	4b06      	ldr	r3, [pc, #24]	@ (800f3bc <tcp_process+0x28c>)
 800f3a4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800f3a8:	490f      	ldr	r1, [pc, #60]	@ (800f3e8 <tcp_process+0x2b8>)
 800f3aa:	4806      	ldr	r0, [pc, #24]	@ (800f3c4 <tcp_process+0x294>)
 800f3ac:	f006 ff4e 	bl	801624c <iprintf>
          pcb->unsent = rseg->next;
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f3b8:	e01c      	b.n	800f3f4 <tcp_process+0x2c4>
 800f3ba:	bf00      	nop
 800f3bc:	0801acbc 	.word	0x0801acbc
 800f3c0:	0801aef4 	.word	0x0801aef4
 800f3c4:	0801ad08 	.word	0x0801ad08
 800f3c8:	240082c8 	.word	0x240082c8
 800f3cc:	240082c0 	.word	0x240082c0
 800f3d0:	240082bc 	.word	0x240082bc
 800f3d4:	0801af10 	.word	0x0801af10
 800f3d8:	240082c9 	.word	0x240082c9
 800f3dc:	24008284 	.word	0x24008284
 800f3e0:	240082ac 	.word	0x240082ac
 800f3e4:	0801af30 	.word	0x0801af30
 800f3e8:	0801af48 	.word	0x0801af48
        } else {
          pcb->unacked = rseg->next;
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800f3f4:	69f8      	ldr	r0, [r7, #28]
 800f3f6:	f7fe fd22 	bl	800de3e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d104      	bne.n	800f40c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f408:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f40a:	e006      	b.n	800f41a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2200      	movs	r2, #0
 800f416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00a      	beq.n	800f43a <tcp_process+0x30a>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	6910      	ldr	r0, [r2, #16]
 800f42e:	2200      	movs	r2, #0
 800f430:	6879      	ldr	r1, [r7, #4]
 800f432:	4798      	blx	r3
 800f434:	4603      	mov	r3, r0
 800f436:	76bb      	strb	r3, [r7, #26]
 800f438:	e001      	b.n	800f43e <tcp_process+0x30e>
 800f43a:	2300      	movs	r3, #0
 800f43c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f43e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f442:	f113 0f0d 	cmn.w	r3, #13
 800f446:	d102      	bne.n	800f44e <tcp_process+0x31e>
          return ERR_ABRT;
 800f448:	f06f 030c 	mvn.w	r3, #12
 800f44c:	e250      	b.n	800f8f0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	8b5b      	ldrh	r3, [r3, #26]
 800f452:	f043 0302 	orr.w	r3, r3, #2
 800f456:	b29a      	uxth	r2, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f45c:	e23a      	b.n	800f8d4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f45e:	4b98      	ldr	r3, [pc, #608]	@ (800f6c0 <tcp_process+0x590>)
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	f003 0310 	and.w	r3, r3, #16
 800f466:	2b00      	cmp	r3, #0
 800f468:	f000 8234 	beq.w	800f8d4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f46c:	4b95      	ldr	r3, [pc, #596]	@ (800f6c4 <tcp_process+0x594>)
 800f46e:	6819      	ldr	r1, [r3, #0]
 800f470:	4b95      	ldr	r3, [pc, #596]	@ (800f6c8 <tcp_process+0x598>)
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	461a      	mov	r2, r3
 800f476:	4b95      	ldr	r3, [pc, #596]	@ (800f6cc <tcp_process+0x59c>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f47c:	4b94      	ldr	r3, [pc, #592]	@ (800f6d0 <tcp_process+0x5a0>)
 800f47e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f480:	885b      	ldrh	r3, [r3, #2]
 800f482:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f484:	4a92      	ldr	r2, [pc, #584]	@ (800f6d0 <tcp_process+0x5a0>)
 800f486:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f488:	8812      	ldrh	r2, [r2, #0]
 800f48a:	b292      	uxth	r2, r2
 800f48c:	9202      	str	r2, [sp, #8]
 800f48e:	9301      	str	r3, [sp, #4]
 800f490:	4b90      	ldr	r3, [pc, #576]	@ (800f6d4 <tcp_process+0x5a4>)
 800f492:	9300      	str	r3, [sp, #0]
 800f494:	4b90      	ldr	r3, [pc, #576]	@ (800f6d8 <tcp_process+0x5a8>)
 800f496:	4602      	mov	r2, r0
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f002 fc7f 	bl	8011d9c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f4a4:	2b05      	cmp	r3, #5
 800f4a6:	f200 8215 	bhi.w	800f8d4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f002 fa4b 	bl	801194c <tcp_rexmit_rto>
      break;
 800f4b6:	e20d      	b.n	800f8d4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f4b8:	4b81      	ldr	r3, [pc, #516]	@ (800f6c0 <tcp_process+0x590>)
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	f003 0310 	and.w	r3, r3, #16
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f000 80a1 	beq.w	800f608 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4c6:	4b7f      	ldr	r3, [pc, #508]	@ (800f6c4 <tcp_process+0x594>)
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	3b01      	subs	r3, #1
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	db7e      	blt.n	800f5d4 <tcp_process+0x4a4>
 800f4d6:	4b7b      	ldr	r3, [pc, #492]	@ (800f6c4 <tcp_process+0x594>)
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	dc77      	bgt.n	800f5d4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2204      	movs	r2, #4
 800f4e8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d102      	bne.n	800f4f8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f4f2:	23fa      	movs	r3, #250	@ 0xfa
 800f4f4:	76bb      	strb	r3, [r7, #26]
 800f4f6:	e01d      	b.n	800f534 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f4fc:	699b      	ldr	r3, [r3, #24]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d106      	bne.n	800f510 <tcp_process+0x3e0>
 800f502:	4b76      	ldr	r3, [pc, #472]	@ (800f6dc <tcp_process+0x5ac>)
 800f504:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f508:	4975      	ldr	r1, [pc, #468]	@ (800f6e0 <tcp_process+0x5b0>)
 800f50a:	4876      	ldr	r0, [pc, #472]	@ (800f6e4 <tcp_process+0x5b4>)
 800f50c:	f006 fe9e 	bl	801624c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f514:	699b      	ldr	r3, [r3, #24]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d00a      	beq.n	800f530 <tcp_process+0x400>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f51e:	699b      	ldr	r3, [r3, #24]
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	6910      	ldr	r0, [r2, #16]
 800f524:	2200      	movs	r2, #0
 800f526:	6879      	ldr	r1, [r7, #4]
 800f528:	4798      	blx	r3
 800f52a:	4603      	mov	r3, r0
 800f52c:	76bb      	strb	r3, [r7, #26]
 800f52e:	e001      	b.n	800f534 <tcp_process+0x404>
 800f530:	23f0      	movs	r3, #240	@ 0xf0
 800f532:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f534:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00a      	beq.n	800f552 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f53c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f540:	f113 0f0d 	cmn.w	r3, #13
 800f544:	d002      	beq.n	800f54c <tcp_process+0x41c>
              tcp_abort(pcb);
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f7fd ff8c 	bl	800d464 <tcp_abort>
            }
            return ERR_ABRT;
 800f54c:	f06f 030c 	mvn.w	r3, #12
 800f550:	e1ce      	b.n	800f8f0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 fae0 	bl	800fb18 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f558:	4b63      	ldr	r3, [pc, #396]	@ (800f6e8 <tcp_process+0x5b8>)
 800f55a:	881b      	ldrh	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d005      	beq.n	800f56c <tcp_process+0x43c>
            recv_acked--;
 800f560:	4b61      	ldr	r3, [pc, #388]	@ (800f6e8 <tcp_process+0x5b8>)
 800f562:	881b      	ldrh	r3, [r3, #0]
 800f564:	3b01      	subs	r3, #1
 800f566:	b29a      	uxth	r2, r3
 800f568:	4b5f      	ldr	r3, [pc, #380]	@ (800f6e8 <tcp_process+0x5b8>)
 800f56a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f570:	009a      	lsls	r2, r3, #2
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f576:	005b      	lsls	r3, r3, #1
 800f578:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f57c:	428b      	cmp	r3, r1
 800f57e:	bf38      	it	cc
 800f580:	460b      	movcc	r3, r1
 800f582:	429a      	cmp	r2, r3
 800f584:	d204      	bcs.n	800f590 <tcp_process+0x460>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	e00d      	b.n	800f5ac <tcp_process+0x47c>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f594:	005b      	lsls	r3, r3, #1
 800f596:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d904      	bls.n	800f5a8 <tcp_process+0x478>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f5a2:	005b      	lsls	r3, r3, #1
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	e001      	b.n	800f5ac <tcp_process+0x47c>
 800f5a8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f5b2:	4b4e      	ldr	r3, [pc, #312]	@ (800f6ec <tcp_process+0x5bc>)
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	f003 0320 	and.w	r3, r3, #32
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d037      	beq.n	800f62e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	8b5b      	ldrh	r3, [r3, #26]
 800f5c2:	f043 0302 	orr.w	r3, r3, #2
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2207      	movs	r2, #7
 800f5d0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f5d2:	e02c      	b.n	800f62e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5d4:	4b3b      	ldr	r3, [pc, #236]	@ (800f6c4 <tcp_process+0x594>)
 800f5d6:	6819      	ldr	r1, [r3, #0]
 800f5d8:	4b3b      	ldr	r3, [pc, #236]	@ (800f6c8 <tcp_process+0x598>)
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	4b3b      	ldr	r3, [pc, #236]	@ (800f6cc <tcp_process+0x59c>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5e4:	4b3a      	ldr	r3, [pc, #232]	@ (800f6d0 <tcp_process+0x5a0>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5e8:	885b      	ldrh	r3, [r3, #2]
 800f5ea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5ec:	4a38      	ldr	r2, [pc, #224]	@ (800f6d0 <tcp_process+0x5a0>)
 800f5ee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5f0:	8812      	ldrh	r2, [r2, #0]
 800f5f2:	b292      	uxth	r2, r2
 800f5f4:	9202      	str	r2, [sp, #8]
 800f5f6:	9301      	str	r3, [sp, #4]
 800f5f8:	4b36      	ldr	r3, [pc, #216]	@ (800f6d4 <tcp_process+0x5a4>)
 800f5fa:	9300      	str	r3, [sp, #0]
 800f5fc:	4b36      	ldr	r3, [pc, #216]	@ (800f6d8 <tcp_process+0x5a8>)
 800f5fe:	4602      	mov	r2, r0
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f002 fbcb 	bl	8011d9c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f606:	e167      	b.n	800f8d8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f608:	4b2d      	ldr	r3, [pc, #180]	@ (800f6c0 <tcp_process+0x590>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	f003 0302 	and.w	r3, r3, #2
 800f610:	2b00      	cmp	r3, #0
 800f612:	f000 8161 	beq.w	800f8d8 <tcp_process+0x7a8>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f61a:	1e5a      	subs	r2, r3, #1
 800f61c:	4b2b      	ldr	r3, [pc, #172]	@ (800f6cc <tcp_process+0x59c>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	429a      	cmp	r2, r3
 800f622:	f040 8159 	bne.w	800f8d8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f002 f9b2 	bl	8011990 <tcp_rexmit>
      break;
 800f62c:	e154      	b.n	800f8d8 <tcp_process+0x7a8>
 800f62e:	e153      	b.n	800f8d8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 fa71 	bl	800fb18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f636:	4b2d      	ldr	r3, [pc, #180]	@ (800f6ec <tcp_process+0x5bc>)
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	f003 0320 	and.w	r3, r3, #32
 800f63e:	2b00      	cmp	r3, #0
 800f640:	f000 814c 	beq.w	800f8dc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	8b5b      	ldrh	r3, [r3, #26]
 800f648:	f043 0302 	orr.w	r3, r3, #2
 800f64c:	b29a      	uxth	r2, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2207      	movs	r2, #7
 800f656:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f658:	e140      	b.n	800f8dc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 fa5c 	bl	800fb18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f660:	4b22      	ldr	r3, [pc, #136]	@ (800f6ec <tcp_process+0x5bc>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	f003 0320 	and.w	r3, r3, #32
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d071      	beq.n	800f750 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f66c:	4b14      	ldr	r3, [pc, #80]	@ (800f6c0 <tcp_process+0x590>)
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	f003 0310 	and.w	r3, r3, #16
 800f674:	2b00      	cmp	r3, #0
 800f676:	d060      	beq.n	800f73a <tcp_process+0x60a>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f67c:	4b11      	ldr	r3, [pc, #68]	@ (800f6c4 <tcp_process+0x594>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	429a      	cmp	r2, r3
 800f682:	d15a      	bne.n	800f73a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d156      	bne.n	800f73a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	8b5b      	ldrh	r3, [r3, #26]
 800f690:	f043 0302 	orr.w	r3, r3, #2
 800f694:	b29a      	uxth	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f7fe fdbc 	bl	800e218 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f6a0:	4b13      	ldr	r3, [pc, #76]	@ (800f6f0 <tcp_process+0x5c0>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d105      	bne.n	800f6b6 <tcp_process+0x586>
 800f6aa:	4b11      	ldr	r3, [pc, #68]	@ (800f6f0 <tcp_process+0x5c0>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	4a0f      	ldr	r2, [pc, #60]	@ (800f6f0 <tcp_process+0x5c0>)
 800f6b2:	6013      	str	r3, [r2, #0]
 800f6b4:	e02e      	b.n	800f714 <tcp_process+0x5e4>
 800f6b6:	4b0e      	ldr	r3, [pc, #56]	@ (800f6f0 <tcp_process+0x5c0>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	617b      	str	r3, [r7, #20]
 800f6bc:	e027      	b.n	800f70e <tcp_process+0x5de>
 800f6be:	bf00      	nop
 800f6c0:	240082c8 	.word	0x240082c8
 800f6c4:	240082c0 	.word	0x240082c0
 800f6c8:	240082c6 	.word	0x240082c6
 800f6cc:	240082bc 	.word	0x240082bc
 800f6d0:	240082ac 	.word	0x240082ac
 800f6d4:	24005378 	.word	0x24005378
 800f6d8:	2400537c 	.word	0x2400537c
 800f6dc:	0801acbc 	.word	0x0801acbc
 800f6e0:	0801af5c 	.word	0x0801af5c
 800f6e4:	0801ad08 	.word	0x0801ad08
 800f6e8:	240082c4 	.word	0x240082c4
 800f6ec:	240082c9 	.word	0x240082c9
 800f6f0:	24008290 	.word	0x24008290
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d104      	bne.n	800f708 <tcp_process+0x5d8>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	68da      	ldr	r2, [r3, #12]
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	60da      	str	r2, [r3, #12]
 800f706:	e005      	b.n	800f714 <tcp_process+0x5e4>
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	617b      	str	r3, [r7, #20]
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d1ef      	bne.n	800f6f4 <tcp_process+0x5c4>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	60da      	str	r2, [r3, #12]
 800f71a:	4b77      	ldr	r3, [pc, #476]	@ (800f8f8 <tcp_process+0x7c8>)
 800f71c:	2201      	movs	r2, #1
 800f71e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	220a      	movs	r2, #10
 800f724:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f726:	4b75      	ldr	r3, [pc, #468]	@ (800f8fc <tcp_process+0x7cc>)
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	60da      	str	r2, [r3, #12]
 800f72e:	4a73      	ldr	r2, [pc, #460]	@ (800f8fc <tcp_process+0x7cc>)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6013      	str	r3, [r2, #0]
 800f734:	f002 fcf4 	bl	8012120 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f738:	e0d2      	b.n	800f8e0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	8b5b      	ldrh	r3, [r3, #26]
 800f73e:	f043 0302 	orr.w	r3, r3, #2
 800f742:	b29a      	uxth	r2, r3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2208      	movs	r2, #8
 800f74c:	751a      	strb	r2, [r3, #20]
      break;
 800f74e:	e0c7      	b.n	800f8e0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f750:	4b6b      	ldr	r3, [pc, #428]	@ (800f900 <tcp_process+0x7d0>)
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	f003 0310 	and.w	r3, r3, #16
 800f758:	2b00      	cmp	r3, #0
 800f75a:	f000 80c1 	beq.w	800f8e0 <tcp_process+0x7b0>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f762:	4b68      	ldr	r3, [pc, #416]	@ (800f904 <tcp_process+0x7d4>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	429a      	cmp	r2, r3
 800f768:	f040 80ba 	bne.w	800f8e0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f770:	2b00      	cmp	r3, #0
 800f772:	f040 80b5 	bne.w	800f8e0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2206      	movs	r2, #6
 800f77a:	751a      	strb	r2, [r3, #20]
      break;
 800f77c:	e0b0      	b.n	800f8e0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 f9ca 	bl	800fb18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f784:	4b60      	ldr	r3, [pc, #384]	@ (800f908 <tcp_process+0x7d8>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	f003 0320 	and.w	r3, r3, #32
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 80a9 	beq.w	800f8e4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	8b5b      	ldrh	r3, [r3, #26]
 800f796:	f043 0302 	orr.w	r3, r3, #2
 800f79a:	b29a      	uxth	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7fe fd39 	bl	800e218 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f7a6:	4b59      	ldr	r3, [pc, #356]	@ (800f90c <tcp_process+0x7dc>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d105      	bne.n	800f7bc <tcp_process+0x68c>
 800f7b0:	4b56      	ldr	r3, [pc, #344]	@ (800f90c <tcp_process+0x7dc>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	4a55      	ldr	r2, [pc, #340]	@ (800f90c <tcp_process+0x7dc>)
 800f7b8:	6013      	str	r3, [r2, #0]
 800f7ba:	e013      	b.n	800f7e4 <tcp_process+0x6b4>
 800f7bc:	4b53      	ldr	r3, [pc, #332]	@ (800f90c <tcp_process+0x7dc>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	613b      	str	r3, [r7, #16]
 800f7c2:	e00c      	b.n	800f7de <tcp_process+0x6ae>
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	68db      	ldr	r3, [r3, #12]
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d104      	bne.n	800f7d8 <tcp_process+0x6a8>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	68da      	ldr	r2, [r3, #12]
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	60da      	str	r2, [r3, #12]
 800f7d6:	e005      	b.n	800f7e4 <tcp_process+0x6b4>
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	613b      	str	r3, [r7, #16]
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d1ef      	bne.n	800f7c4 <tcp_process+0x694>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	60da      	str	r2, [r3, #12]
 800f7ea:	4b43      	ldr	r3, [pc, #268]	@ (800f8f8 <tcp_process+0x7c8>)
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	220a      	movs	r2, #10
 800f7f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f7f6:	4b41      	ldr	r3, [pc, #260]	@ (800f8fc <tcp_process+0x7cc>)
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	60da      	str	r2, [r3, #12]
 800f7fe:	4a3f      	ldr	r2, [pc, #252]	@ (800f8fc <tcp_process+0x7cc>)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6013      	str	r3, [r2, #0]
 800f804:	f002 fc8c 	bl	8012120 <tcp_timer_needed>
      }
      break;
 800f808:	e06c      	b.n	800f8e4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 f984 	bl	800fb18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f810:	4b3b      	ldr	r3, [pc, #236]	@ (800f900 <tcp_process+0x7d0>)
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	f003 0310 	and.w	r3, r3, #16
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d065      	beq.n	800f8e8 <tcp_process+0x7b8>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f820:	4b38      	ldr	r3, [pc, #224]	@ (800f904 <tcp_process+0x7d4>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	429a      	cmp	r2, r3
 800f826:	d15f      	bne.n	800f8e8 <tcp_process+0x7b8>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d15b      	bne.n	800f8e8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f7fe fcf1 	bl	800e218 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f836:	4b35      	ldr	r3, [pc, #212]	@ (800f90c <tcp_process+0x7dc>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d105      	bne.n	800f84c <tcp_process+0x71c>
 800f840:	4b32      	ldr	r3, [pc, #200]	@ (800f90c <tcp_process+0x7dc>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68db      	ldr	r3, [r3, #12]
 800f846:	4a31      	ldr	r2, [pc, #196]	@ (800f90c <tcp_process+0x7dc>)
 800f848:	6013      	str	r3, [r2, #0]
 800f84a:	e013      	b.n	800f874 <tcp_process+0x744>
 800f84c:	4b2f      	ldr	r3, [pc, #188]	@ (800f90c <tcp_process+0x7dc>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	60fb      	str	r3, [r7, #12]
 800f852:	e00c      	b.n	800f86e <tcp_process+0x73e>
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d104      	bne.n	800f868 <tcp_process+0x738>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	68da      	ldr	r2, [r3, #12]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	60da      	str	r2, [r3, #12]
 800f866:	e005      	b.n	800f874 <tcp_process+0x744>
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	60fb      	str	r3, [r7, #12]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d1ef      	bne.n	800f854 <tcp_process+0x724>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2200      	movs	r2, #0
 800f878:	60da      	str	r2, [r3, #12]
 800f87a:	4b1f      	ldr	r3, [pc, #124]	@ (800f8f8 <tcp_process+0x7c8>)
 800f87c:	2201      	movs	r2, #1
 800f87e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	220a      	movs	r2, #10
 800f884:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f886:	4b1d      	ldr	r3, [pc, #116]	@ (800f8fc <tcp_process+0x7cc>)
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	60da      	str	r2, [r3, #12]
 800f88e:	4a1b      	ldr	r2, [pc, #108]	@ (800f8fc <tcp_process+0x7cc>)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6013      	str	r3, [r2, #0]
 800f894:	f002 fc44 	bl	8012120 <tcp_timer_needed>
      }
      break;
 800f898:	e026      	b.n	800f8e8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 f93c 	bl	800fb18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f8a0:	4b17      	ldr	r3, [pc, #92]	@ (800f900 <tcp_process+0x7d0>)
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	f003 0310 	and.w	r3, r3, #16
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d01f      	beq.n	800f8ec <tcp_process+0x7bc>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f8b0:	4b14      	ldr	r3, [pc, #80]	@ (800f904 <tcp_process+0x7d4>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d119      	bne.n	800f8ec <tcp_process+0x7bc>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d115      	bne.n	800f8ec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f8c0:	4b11      	ldr	r3, [pc, #68]	@ (800f908 <tcp_process+0x7d8>)
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	f043 0310 	orr.w	r3, r3, #16
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f908 <tcp_process+0x7d8>)
 800f8cc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f8ce:	e00d      	b.n	800f8ec <tcp_process+0x7bc>
    default:
      break;
 800f8d0:	bf00      	nop
 800f8d2:	e00c      	b.n	800f8ee <tcp_process+0x7be>
      break;
 800f8d4:	bf00      	nop
 800f8d6:	e00a      	b.n	800f8ee <tcp_process+0x7be>
      break;
 800f8d8:	bf00      	nop
 800f8da:	e008      	b.n	800f8ee <tcp_process+0x7be>
      break;
 800f8dc:	bf00      	nop
 800f8de:	e006      	b.n	800f8ee <tcp_process+0x7be>
      break;
 800f8e0:	bf00      	nop
 800f8e2:	e004      	b.n	800f8ee <tcp_process+0x7be>
      break;
 800f8e4:	bf00      	nop
 800f8e6:	e002      	b.n	800f8ee <tcp_process+0x7be>
      break;
 800f8e8:	bf00      	nop
 800f8ea:	e000      	b.n	800f8ee <tcp_process+0x7be>
      break;
 800f8ec:	bf00      	nop
  }
  return ERR_OK;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3724      	adds	r7, #36	@ 0x24
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd90      	pop	{r4, r7, pc}
 800f8f8:	24008298 	.word	0x24008298
 800f8fc:	24008294 	.word	0x24008294
 800f900:	240082c8 	.word	0x240082c8
 800f904:	240082c0 	.word	0x240082c0
 800f908:	240082c9 	.word	0x240082c9
 800f90c:	24008290 	.word	0x24008290

0800f910 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f910:	b590      	push	{r4, r7, lr}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d106      	bne.n	800f92e <tcp_oos_insert_segment+0x1e>
 800f920:	4b3b      	ldr	r3, [pc, #236]	@ (800fa10 <tcp_oos_insert_segment+0x100>)
 800f922:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f926:	493b      	ldr	r1, [pc, #236]	@ (800fa14 <tcp_oos_insert_segment+0x104>)
 800f928:	483b      	ldr	r0, [pc, #236]	@ (800fa18 <tcp_oos_insert_segment+0x108>)
 800f92a:	f006 fc8f 	bl	801624c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	899b      	ldrh	r3, [r3, #12]
 800f934:	b29b      	uxth	r3, r3
 800f936:	4618      	mov	r0, r3
 800f938:	f7fb fb54 	bl	800afe4 <lwip_htons>
 800f93c:	4603      	mov	r3, r0
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	f003 0301 	and.w	r3, r3, #1
 800f944:	2b00      	cmp	r3, #0
 800f946:	d028      	beq.n	800f99a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f948:	6838      	ldr	r0, [r7, #0]
 800f94a:	f7fe fa63 	bl	800de14 <tcp_segs_free>
    next = NULL;
 800f94e:	2300      	movs	r3, #0
 800f950:	603b      	str	r3, [r7, #0]
 800f952:	e056      	b.n	800fa02 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	899b      	ldrh	r3, [r3, #12]
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fb fb41 	bl	800afe4 <lwip_htons>
 800f962:	4603      	mov	r3, r0
 800f964:	b2db      	uxtb	r3, r3
 800f966:	f003 0301 	and.w	r3, r3, #1
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00d      	beq.n	800f98a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	899b      	ldrh	r3, [r3, #12]
 800f974:	b29c      	uxth	r4, r3
 800f976:	2001      	movs	r0, #1
 800f978:	f7fb fb34 	bl	800afe4 <lwip_htons>
 800f97c:	4603      	mov	r3, r0
 800f97e:	461a      	mov	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	68db      	ldr	r3, [r3, #12]
 800f984:	4322      	orrs	r2, r4
 800f986:	b292      	uxth	r2, r2
 800f988:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f7fe fa52 	bl	800de3e <tcp_seg_free>
    while (next &&
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00e      	beq.n	800f9be <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	891b      	ldrh	r3, [r3, #8]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	4b1d      	ldr	r3, [pc, #116]	@ (800fa1c <tcp_oos_insert_segment+0x10c>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	441a      	add	r2, r3
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	6839      	ldr	r1, [r7, #0]
 800f9b4:	8909      	ldrh	r1, [r1, #8]
 800f9b6:	440b      	add	r3, r1
 800f9b8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	daca      	bge.n	800f954 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d01e      	beq.n	800fa02 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	891b      	ldrh	r3, [r3, #8]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	4b14      	ldr	r3, [pc, #80]	@ (800fa1c <tcp_oos_insert_segment+0x10c>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	441a      	add	r2, r3
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	dd12      	ble.n	800fa02 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	b29a      	uxth	r2, r3
 800f9e4:	4b0d      	ldr	r3, [pc, #52]	@ (800fa1c <tcp_oos_insert_segment+0x10c>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	1ad3      	subs	r3, r2, r3
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	685a      	ldr	r2, [r3, #4]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	891b      	ldrh	r3, [r3, #8]
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	f7fc fd81 	bl	800c504 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	683a      	ldr	r2, [r7, #0]
 800fa06:	601a      	str	r2, [r3, #0]
}
 800fa08:	bf00      	nop
 800fa0a:	3714      	adds	r7, #20
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd90      	pop	{r4, r7, pc}
 800fa10:	0801acbc 	.word	0x0801acbc
 800fa14:	0801af7c 	.word	0x0801af7c
 800fa18:	0801ad08 	.word	0x0801ad08
 800fa1c:	240082bc 	.word	0x240082bc

0800fa20 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fa20:	b5b0      	push	{r4, r5, r7, lr}
 800fa22:	b086      	sub	sp, #24
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fa2e:	e03e      	b.n	800faae <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7fc ff6e 	bl	800c920 <pbuf_clen>
 800fa44:	4603      	mov	r3, r0
 800fa46:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fa4e:	8a7a      	ldrh	r2, [r7, #18]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d906      	bls.n	800fa62 <tcp_free_acked_segments+0x42>
 800fa54:	4b2a      	ldr	r3, [pc, #168]	@ (800fb00 <tcp_free_acked_segments+0xe0>)
 800fa56:	f240 4257 	movw	r2, #1111	@ 0x457
 800fa5a:	492a      	ldr	r1, [pc, #168]	@ (800fb04 <tcp_free_acked_segments+0xe4>)
 800fa5c:	482a      	ldr	r0, [pc, #168]	@ (800fb08 <tcp_free_acked_segments+0xe8>)
 800fa5e:	f006 fbf5 	bl	801624c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800fa68:	8a7b      	ldrh	r3, [r7, #18]
 800fa6a:	1ad3      	subs	r3, r2, r3
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	891a      	ldrh	r2, [r3, #8]
 800fa78:	4b24      	ldr	r3, [pc, #144]	@ (800fb0c <tcp_free_acked_segments+0xec>)
 800fa7a:	881b      	ldrh	r3, [r3, #0]
 800fa7c:	4413      	add	r3, r2
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	4b22      	ldr	r3, [pc, #136]	@ (800fb0c <tcp_free_acked_segments+0xec>)
 800fa82:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fa84:	6978      	ldr	r0, [r7, #20]
 800fa86:	f7fe f9da 	bl	800de3e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00c      	beq.n	800faae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d109      	bne.n	800faae <tcp_free_acked_segments+0x8e>
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d106      	bne.n	800faae <tcp_free_acked_segments+0x8e>
 800faa0:	4b17      	ldr	r3, [pc, #92]	@ (800fb00 <tcp_free_acked_segments+0xe0>)
 800faa2:	f240 4261 	movw	r2, #1121	@ 0x461
 800faa6:	491a      	ldr	r1, [pc, #104]	@ (800fb10 <tcp_free_acked_segments+0xf0>)
 800faa8:	4817      	ldr	r0, [pc, #92]	@ (800fb08 <tcp_free_acked_segments+0xe8>)
 800faaa:	f006 fbcf 	bl	801624c <iprintf>
  while (seg_list != NULL &&
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d020      	beq.n	800faf6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	685b      	ldr	r3, [r3, #4]
 800faba:	4618      	mov	r0, r3
 800fabc:	f7fb faa8 	bl	800b010 <lwip_htonl>
 800fac0:	4604      	mov	r4, r0
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	891b      	ldrh	r3, [r3, #8]
 800fac6:	461d      	mov	r5, r3
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	68db      	ldr	r3, [r3, #12]
 800facc:	899b      	ldrh	r3, [r3, #12]
 800face:	b29b      	uxth	r3, r3
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7fb fa87 	bl	800afe4 <lwip_htons>
 800fad6:	4603      	mov	r3, r0
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	f003 0303 	and.w	r3, r3, #3
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d001      	beq.n	800fae6 <tcp_free_acked_segments+0xc6>
 800fae2:	2301      	movs	r3, #1
 800fae4:	e000      	b.n	800fae8 <tcp_free_acked_segments+0xc8>
 800fae6:	2300      	movs	r3, #0
 800fae8:	442b      	add	r3, r5
 800faea:	18e2      	adds	r2, r4, r3
 800faec:	4b09      	ldr	r3, [pc, #36]	@ (800fb14 <tcp_free_acked_segments+0xf4>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	dd9c      	ble.n	800fa30 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800faf6:	68bb      	ldr	r3, [r7, #8]
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3718      	adds	r7, #24
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bdb0      	pop	{r4, r5, r7, pc}
 800fb00:	0801acbc 	.word	0x0801acbc
 800fb04:	0801afa4 	.word	0x0801afa4
 800fb08:	0801ad08 	.word	0x0801ad08
 800fb0c:	240082c4 	.word	0x240082c4
 800fb10:	0801afcc 	.word	0x0801afcc
 800fb14:	240082c0 	.word	0x240082c0

0800fb18 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fb18:	b5b0      	push	{r4, r5, r7, lr}
 800fb1a:	b094      	sub	sp, #80	@ 0x50
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fb20:	2300      	movs	r3, #0
 800fb22:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d106      	bne.n	800fb38 <tcp_receive+0x20>
 800fb2a:	4b91      	ldr	r3, [pc, #580]	@ (800fd70 <tcp_receive+0x258>)
 800fb2c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800fb30:	4990      	ldr	r1, [pc, #576]	@ (800fd74 <tcp_receive+0x25c>)
 800fb32:	4891      	ldr	r0, [pc, #580]	@ (800fd78 <tcp_receive+0x260>)
 800fb34:	f006 fb8a 	bl	801624c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	7d1b      	ldrb	r3, [r3, #20]
 800fb3c:	2b03      	cmp	r3, #3
 800fb3e:	d806      	bhi.n	800fb4e <tcp_receive+0x36>
 800fb40:	4b8b      	ldr	r3, [pc, #556]	@ (800fd70 <tcp_receive+0x258>)
 800fb42:	f240 427c 	movw	r2, #1148	@ 0x47c
 800fb46:	498d      	ldr	r1, [pc, #564]	@ (800fd7c <tcp_receive+0x264>)
 800fb48:	488b      	ldr	r0, [pc, #556]	@ (800fd78 <tcp_receive+0x260>)
 800fb4a:	f006 fb7f 	bl	801624c <iprintf>

  if (flags & TCP_ACK) {
 800fb4e:	4b8c      	ldr	r3, [pc, #560]	@ (800fd80 <tcp_receive+0x268>)
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	f003 0310 	and.w	r3, r3, #16
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f000 8264 	beq.w	8010024 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fb62:	461a      	mov	r2, r3
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb68:	4413      	add	r3, r2
 800fb6a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fb70:	4b84      	ldr	r3, [pc, #528]	@ (800fd84 <tcp_receive+0x26c>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	db1b      	blt.n	800fbb2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fb7e:	4b81      	ldr	r3, [pc, #516]	@ (800fd84 <tcp_receive+0x26c>)
 800fb80:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d106      	bne.n	800fb94 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fb8a:	4b7f      	ldr	r3, [pc, #508]	@ (800fd88 <tcp_receive+0x270>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	1ad3      	subs	r3, r2, r3
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	db0e      	blt.n	800fbb2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fb98:	4b7b      	ldr	r3, [pc, #492]	@ (800fd88 <tcp_receive+0x270>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d125      	bne.n	800fbec <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fba0:	4b7a      	ldr	r3, [pc, #488]	@ (800fd8c <tcp_receive+0x274>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	89db      	ldrh	r3, [r3, #14]
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d91c      	bls.n	800fbec <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fbb2:	4b76      	ldr	r3, [pc, #472]	@ (800fd8c <tcp_receive+0x274>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	89db      	ldrh	r3, [r3, #14]
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d205      	bcs.n	800fbdc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800fbdc:	4b69      	ldr	r3, [pc, #420]	@ (800fd84 <tcp_receive+0x26c>)
 800fbde:	681a      	ldr	r2, [r3, #0]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800fbe4:	4b68      	ldr	r3, [pc, #416]	@ (800fd88 <tcp_receive+0x270>)
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fbec:	4b66      	ldr	r3, [pc, #408]	@ (800fd88 <tcp_receive+0x270>)
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbf4:	1ad3      	subs	r3, r2, r3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	dc58      	bgt.n	800fcac <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fbfa:	4b65      	ldr	r3, [pc, #404]	@ (800fd90 <tcp_receive+0x278>)
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d14b      	bne.n	800fc9a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800fc0c:	4413      	add	r3, r2
 800fc0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d142      	bne.n	800fc9a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	db3d      	blt.n	800fc9a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc22:	4b59      	ldr	r3, [pc, #356]	@ (800fd88 <tcp_receive+0x270>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d137      	bne.n	800fc9a <tcp_receive+0x182>
              found_dupack = 1;
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fc34:	2bff      	cmp	r3, #255	@ 0xff
 800fc36:	d007      	beq.n	800fc48 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fc3e:	3301      	adds	r3, #1
 800fc40:	b2da      	uxtb	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fc4e:	2b03      	cmp	r3, #3
 800fc50:	d91b      	bls.n	800fc8a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc5c:	4413      	add	r3, r2
 800fc5e:	b29a      	uxth	r2, r3
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d30a      	bcc.n	800fc80 <tcp_receive+0x168>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc74:	4413      	add	r3, r2
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fc7e:	e004      	b.n	800fc8a <tcp_receive+0x172>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc86:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fc90:	2b02      	cmp	r3, #2
 800fc92:	d902      	bls.n	800fc9a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f001 fee7 	bl	8011a68 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fc9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f040 8161 	bne.w	800ff64 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fcaa:	e15b      	b.n	800ff64 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fcac:	4b36      	ldr	r3, [pc, #216]	@ (800fd88 <tcp_receive+0x270>)
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcb4:	1ad3      	subs	r3, r2, r3
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f2c0 814e 	blt.w	800ff5a <tcp_receive+0x442>
 800fcbe:	4b32      	ldr	r3, [pc, #200]	@ (800fd88 <tcp_receive+0x270>)
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	f300 8146 	bgt.w	800ff5a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	8b5b      	ldrh	r3, [r3, #26]
 800fcd2:	f003 0304 	and.w	r3, r3, #4
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d010      	beq.n	800fcfc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	8b5b      	ldrh	r3, [r3, #26]
 800fcde:	f023 0304 	bic.w	r3, r3, #4
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fd0a:	10db      	asrs	r3, r3, #3
 800fd0c:	b21b      	sxth	r3, r3
 800fd0e:	b29a      	uxth	r2, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	4413      	add	r3, r2
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	b21a      	sxth	r2, r3
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fd24:	4b18      	ldr	r3, [pc, #96]	@ (800fd88 <tcp_receive+0x270>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800fd3c:	4b12      	ldr	r3, [pc, #72]	@ (800fd88 <tcp_receive+0x270>)
 800fd3e:	681a      	ldr	r2, [r3, #0]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	7d1b      	ldrb	r3, [r3, #20]
 800fd48:	2b03      	cmp	r3, #3
 800fd4a:	f240 8097 	bls.w	800fe7c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d245      	bcs.n	800fdea <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	8b5b      	ldrh	r3, [r3, #26]
 800fd62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d014      	beq.n	800fd94 <tcp_receive+0x27c>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e013      	b.n	800fd96 <tcp_receive+0x27e>
 800fd6e:	bf00      	nop
 800fd70:	0801acbc 	.word	0x0801acbc
 800fd74:	0801afec 	.word	0x0801afec
 800fd78:	0801ad08 	.word	0x0801ad08
 800fd7c:	0801b008 	.word	0x0801b008
 800fd80:	240082c8 	.word	0x240082c8
 800fd84:	240082bc 	.word	0x240082bc
 800fd88:	240082c0 	.word	0x240082c0
 800fd8c:	240082ac 	.word	0x240082ac
 800fd90:	240082c6 	.word	0x240082c6
 800fd94:	2302      	movs	r3, #2
 800fd96:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fd9a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800fd9e:	b29a      	uxth	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fda4:	fb12 f303 	smulbb	r3, r2, r3
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fdac:	4293      	cmp	r3, r2
 800fdae:	bf28      	it	cs
 800fdb0:	4613      	movcs	r3, r2
 800fdb2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fdba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fdbc:	4413      	add	r3, r2
 800fdbe:	b29a      	uxth	r2, r3
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d309      	bcc.n	800fdde <tcp_receive+0x2c6>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fdd0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fdd2:	4413      	add	r3, r2
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fddc:	e04e      	b.n	800fe7c <tcp_receive+0x364>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fde4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fde8:	e048      	b.n	800fe7c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fdf0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fdf2:	4413      	add	r3, r2
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d309      	bcc.n	800fe14 <tcp_receive+0x2fc>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fe06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fe08:	4413      	add	r3, r2
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fe12:	e004      	b.n	800fe1e <tcp_receive+0x306>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d326      	bcc.n	800fe7c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fe3a:	1ad3      	subs	r3, r2, r3
 800fe3c:	b29a      	uxth	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fe4e:	4413      	add	r3, r2
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d30a      	bcc.n	800fe72 <tcp_receive+0x35a>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fe66:	4413      	add	r3, r2
 800fe68:	b29a      	uxth	r2, r3
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fe70:	e004      	b.n	800fe7c <tcp_receive+0x364>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe84:	4a98      	ldr	r2, [pc, #608]	@ (80100e8 <tcp_receive+0x5d0>)
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7ff fdca 	bl	800fa20 <tcp_free_acked_segments>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe9a:	4a94      	ldr	r2, [pc, #592]	@ (80100ec <tcp_receive+0x5d4>)
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f7ff fdbf 	bl	800fa20 <tcp_free_acked_segments>
 800fea2:	4602      	mov	r2, r0
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feac:	2b00      	cmp	r3, #0
 800feae:	d104      	bne.n	800feba <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800feb6:	861a      	strh	r2, [r3, #48]	@ 0x30
 800feb8:	e002      	b.n	800fec0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2200      	movs	r2, #0
 800febe:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2200      	movs	r2, #0
 800fec4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d103      	bne.n	800fed6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2200      	movs	r2, #0
 800fed2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800fedc:	4b84      	ldr	r3, [pc, #528]	@ (80100f0 <tcp_receive+0x5d8>)
 800fede:	881b      	ldrh	r3, [r3, #0]
 800fee0:	4413      	add	r3, r2
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	8b5b      	ldrh	r3, [r3, #26]
 800feee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d035      	beq.n	800ff62 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d118      	bne.n	800ff30 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00c      	beq.n	800ff20 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7fb f87c 	bl	800b010 <lwip_htonl>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	dc20      	bgt.n	800ff62 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	8b5b      	ldrh	r3, [r3, #26]
 800ff24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff2e:	e018      	b.n	800ff62 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff38:	68db      	ldr	r3, [r3, #12]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fb f867 	bl	800b010 <lwip_htonl>
 800ff42:	4603      	mov	r3, r0
 800ff44:	1ae3      	subs	r3, r4, r3
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	dc0b      	bgt.n	800ff62 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	8b5b      	ldrh	r3, [r3, #26]
 800ff4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff58:	e003      	b.n	800ff62 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f001 ff70 	bl	8011e40 <tcp_send_empty_ack>
 800ff60:	e000      	b.n	800ff64 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff62:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d05b      	beq.n	8010024 <tcp_receive+0x50c>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff70:	4b60      	ldr	r3, [pc, #384]	@ (80100f4 <tcp_receive+0x5dc>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	1ad3      	subs	r3, r2, r3
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	da54      	bge.n	8010024 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ff7a:	4b5f      	ldr	r3, [pc, #380]	@ (80100f8 <tcp_receive+0x5e0>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	1ad3      	subs	r3, r2, r3
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ff8e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ff98:	10db      	asrs	r3, r3, #3
 800ff9a:	b21b      	sxth	r3, r3
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	1ad3      	subs	r3, r2, r3
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ffb2:	4413      	add	r3, r2
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	b21a      	sxth	r2, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800ffbc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	da05      	bge.n	800ffd0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ffc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ffc8:	425b      	negs	r3, r3
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ffd0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ffda:	109b      	asrs	r3, r3, #2
 800ffdc:	b21b      	sxth	r3, r3
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	1ad3      	subs	r3, r2, r3
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ffee:	b29a      	uxth	r2, r3
 800fff0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fff4:	4413      	add	r3, r2
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	b21a      	sxth	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010004:	10db      	asrs	r3, r3, #3
 8010006:	b21b      	sxth	r3, r3
 8010008:	b29a      	uxth	r2, r3
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010010:	b29b      	uxth	r3, r3
 8010012:	4413      	add	r3, r2
 8010014:	b29b      	uxth	r3, r3
 8010016:	b21a      	sxth	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010024:	4b35      	ldr	r3, [pc, #212]	@ (80100fc <tcp_receive+0x5e4>)
 8010026:	881b      	ldrh	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	f000 84df 	beq.w	80109ec <tcp_receive+0xed4>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	7d1b      	ldrb	r3, [r3, #20]
 8010032:	2b06      	cmp	r3, #6
 8010034:	f200 84da 	bhi.w	80109ec <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801003c:	4b30      	ldr	r3, [pc, #192]	@ (8010100 <tcp_receive+0x5e8>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	3b01      	subs	r3, #1
 8010044:	2b00      	cmp	r3, #0
 8010046:	f2c0 808f 	blt.w	8010168 <tcp_receive+0x650>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801004e:	4b2b      	ldr	r3, [pc, #172]	@ (80100fc <tcp_receive+0x5e4>)
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	4619      	mov	r1, r3
 8010054:	4b2a      	ldr	r3, [pc, #168]	@ (8010100 <tcp_receive+0x5e8>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	440b      	add	r3, r1
 801005a:	1ad3      	subs	r3, r2, r3
 801005c:	3301      	adds	r3, #1
 801005e:	2b00      	cmp	r3, #0
 8010060:	f300 8082 	bgt.w	8010168 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010064:	4b27      	ldr	r3, [pc, #156]	@ (8010104 <tcp_receive+0x5ec>)
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801006e:	4b24      	ldr	r3, [pc, #144]	@ (8010100 <tcp_receive+0x5e8>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010076:	4b23      	ldr	r3, [pc, #140]	@ (8010104 <tcp_receive+0x5ec>)
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d106      	bne.n	801008c <tcp_receive+0x574>
 801007e:	4b22      	ldr	r3, [pc, #136]	@ (8010108 <tcp_receive+0x5f0>)
 8010080:	f240 5294 	movw	r2, #1428	@ 0x594
 8010084:	4921      	ldr	r1, [pc, #132]	@ (801010c <tcp_receive+0x5f4>)
 8010086:	4822      	ldr	r0, [pc, #136]	@ (8010110 <tcp_receive+0x5f8>)
 8010088:	f006 f8e0 	bl	801624c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801008c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801008e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010092:	4293      	cmp	r3, r2
 8010094:	d906      	bls.n	80100a4 <tcp_receive+0x58c>
 8010096:	4b1c      	ldr	r3, [pc, #112]	@ (8010108 <tcp_receive+0x5f0>)
 8010098:	f240 5295 	movw	r2, #1429	@ 0x595
 801009c:	491d      	ldr	r1, [pc, #116]	@ (8010114 <tcp_receive+0x5fc>)
 801009e:	481c      	ldr	r0, [pc, #112]	@ (8010110 <tcp_receive+0x5f8>)
 80100a0:	f006 f8d4 	bl	801624c <iprintf>
      off = (u16_t)off32;
 80100a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80100aa:	4b16      	ldr	r3, [pc, #88]	@ (8010104 <tcp_receive+0x5ec>)
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	891b      	ldrh	r3, [r3, #8]
 80100b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d906      	bls.n	80100c6 <tcp_receive+0x5ae>
 80100b8:	4b13      	ldr	r3, [pc, #76]	@ (8010108 <tcp_receive+0x5f0>)
 80100ba:	f240 5297 	movw	r2, #1431	@ 0x597
 80100be:	4916      	ldr	r1, [pc, #88]	@ (8010118 <tcp_receive+0x600>)
 80100c0:	4813      	ldr	r0, [pc, #76]	@ (8010110 <tcp_receive+0x5f8>)
 80100c2:	f006 f8c3 	bl	801624c <iprintf>
      inseg.len -= off;
 80100c6:	4b0f      	ldr	r3, [pc, #60]	@ (8010104 <tcp_receive+0x5ec>)
 80100c8:	891a      	ldrh	r2, [r3, #8]
 80100ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	4b0c      	ldr	r3, [pc, #48]	@ (8010104 <tcp_receive+0x5ec>)
 80100d4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80100d6:	4b0b      	ldr	r3, [pc, #44]	@ (8010104 <tcp_receive+0x5ec>)
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	891a      	ldrh	r2, [r3, #8]
 80100dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80100e0:	1ad3      	subs	r3, r2, r3
 80100e2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80100e4:	e02a      	b.n	801013c <tcp_receive+0x624>
 80100e6:	bf00      	nop
 80100e8:	0801b024 	.word	0x0801b024
 80100ec:	0801b02c 	.word	0x0801b02c
 80100f0:	240082c4 	.word	0x240082c4
 80100f4:	240082c0 	.word	0x240082c0
 80100f8:	24008284 	.word	0x24008284
 80100fc:	240082c6 	.word	0x240082c6
 8010100:	240082bc 	.word	0x240082bc
 8010104:	2400829c 	.word	0x2400829c
 8010108:	0801acbc 	.word	0x0801acbc
 801010c:	0801b034 	.word	0x0801b034
 8010110:	0801ad08 	.word	0x0801ad08
 8010114:	0801b044 	.word	0x0801b044
 8010118:	0801b054 	.word	0x0801b054
        off -= p->len;
 801011c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801011e:	895b      	ldrh	r3, [r3, #10]
 8010120:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801012a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801012c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801012e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010132:	2200      	movs	r2, #0
 8010134:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801013c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801013e:	895b      	ldrh	r3, [r3, #10]
 8010140:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010144:	429a      	cmp	r2, r3
 8010146:	d8e9      	bhi.n	801011c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010148:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801014c:	4619      	mov	r1, r3
 801014e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010150:	f7fc fad8 	bl	800c704 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010158:	4a90      	ldr	r2, [pc, #576]	@ (801039c <tcp_receive+0x884>)
 801015a:	6013      	str	r3, [r2, #0]
 801015c:	4b90      	ldr	r3, [pc, #576]	@ (80103a0 <tcp_receive+0x888>)
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	4a8e      	ldr	r2, [pc, #568]	@ (801039c <tcp_receive+0x884>)
 8010162:	6812      	ldr	r2, [r2, #0]
 8010164:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010166:	e00d      	b.n	8010184 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010168:	4b8c      	ldr	r3, [pc, #560]	@ (801039c <tcp_receive+0x884>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010170:	1ad3      	subs	r3, r2, r3
 8010172:	2b00      	cmp	r3, #0
 8010174:	da06      	bge.n	8010184 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	8b5b      	ldrh	r3, [r3, #26]
 801017a:	f043 0302 	orr.w	r3, r3, #2
 801017e:	b29a      	uxth	r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010184:	4b85      	ldr	r3, [pc, #532]	@ (801039c <tcp_receive+0x884>)
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801018c:	1ad3      	subs	r3, r2, r3
 801018e:	2b00      	cmp	r3, #0
 8010190:	f2c0 8427 	blt.w	80109e2 <tcp_receive+0xeca>
 8010194:	4b81      	ldr	r3, [pc, #516]	@ (801039c <tcp_receive+0x884>)
 8010196:	681a      	ldr	r2, [r3, #0]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801019c:	6879      	ldr	r1, [r7, #4]
 801019e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80101a0:	440b      	add	r3, r1
 80101a2:	1ad3      	subs	r3, r2, r3
 80101a4:	3301      	adds	r3, #1
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	f300 841b 	bgt.w	80109e2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80101b0:	4b7a      	ldr	r3, [pc, #488]	@ (801039c <tcp_receive+0x884>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	f040 8298 	bne.w	80106ea <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80101ba:	4b79      	ldr	r3, [pc, #484]	@ (80103a0 <tcp_receive+0x888>)
 80101bc:	891c      	ldrh	r4, [r3, #8]
 80101be:	4b78      	ldr	r3, [pc, #480]	@ (80103a0 <tcp_receive+0x888>)
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	899b      	ldrh	r3, [r3, #12]
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fa ff0c 	bl	800afe4 <lwip_htons>
 80101cc:	4603      	mov	r3, r0
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	f003 0303 	and.w	r3, r3, #3
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d001      	beq.n	80101dc <tcp_receive+0x6c4>
 80101d8:	2301      	movs	r3, #1
 80101da:	e000      	b.n	80101de <tcp_receive+0x6c6>
 80101dc:	2300      	movs	r3, #0
 80101de:	4423      	add	r3, r4
 80101e0:	b29a      	uxth	r2, r3
 80101e2:	4b70      	ldr	r3, [pc, #448]	@ (80103a4 <tcp_receive+0x88c>)
 80101e4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80101ea:	4b6e      	ldr	r3, [pc, #440]	@ (80103a4 <tcp_receive+0x88c>)
 80101ec:	881b      	ldrh	r3, [r3, #0]
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d274      	bcs.n	80102dc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80101f2:	4b6b      	ldr	r3, [pc, #428]	@ (80103a0 <tcp_receive+0x888>)
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	899b      	ldrh	r3, [r3, #12]
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fa fef2 	bl	800afe4 <lwip_htons>
 8010200:	4603      	mov	r3, r0
 8010202:	b2db      	uxtb	r3, r3
 8010204:	f003 0301 	and.w	r3, r3, #1
 8010208:	2b00      	cmp	r3, #0
 801020a:	d01e      	beq.n	801024a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801020c:	4b64      	ldr	r3, [pc, #400]	@ (80103a0 <tcp_receive+0x888>)
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	899b      	ldrh	r3, [r3, #12]
 8010212:	b29b      	uxth	r3, r3
 8010214:	b21b      	sxth	r3, r3
 8010216:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801021a:	b21c      	sxth	r4, r3
 801021c:	4b60      	ldr	r3, [pc, #384]	@ (80103a0 <tcp_receive+0x888>)
 801021e:	68db      	ldr	r3, [r3, #12]
 8010220:	899b      	ldrh	r3, [r3, #12]
 8010222:	b29b      	uxth	r3, r3
 8010224:	4618      	mov	r0, r3
 8010226:	f7fa fedd 	bl	800afe4 <lwip_htons>
 801022a:	4603      	mov	r3, r0
 801022c:	b2db      	uxtb	r3, r3
 801022e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010232:	b29b      	uxth	r3, r3
 8010234:	4618      	mov	r0, r3
 8010236:	f7fa fed5 	bl	800afe4 <lwip_htons>
 801023a:	4603      	mov	r3, r0
 801023c:	b21b      	sxth	r3, r3
 801023e:	4323      	orrs	r3, r4
 8010240:	b21a      	sxth	r2, r3
 8010242:	4b57      	ldr	r3, [pc, #348]	@ (80103a0 <tcp_receive+0x888>)
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	b292      	uxth	r2, r2
 8010248:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801024e:	4b54      	ldr	r3, [pc, #336]	@ (80103a0 <tcp_receive+0x888>)
 8010250:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010252:	4b53      	ldr	r3, [pc, #332]	@ (80103a0 <tcp_receive+0x888>)
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	899b      	ldrh	r3, [r3, #12]
 8010258:	b29b      	uxth	r3, r3
 801025a:	4618      	mov	r0, r3
 801025c:	f7fa fec2 	bl	800afe4 <lwip_htons>
 8010260:	4603      	mov	r3, r0
 8010262:	b2db      	uxtb	r3, r3
 8010264:	f003 0302 	and.w	r3, r3, #2
 8010268:	2b00      	cmp	r3, #0
 801026a:	d005      	beq.n	8010278 <tcp_receive+0x760>
            inseg.len -= 1;
 801026c:	4b4c      	ldr	r3, [pc, #304]	@ (80103a0 <tcp_receive+0x888>)
 801026e:	891b      	ldrh	r3, [r3, #8]
 8010270:	3b01      	subs	r3, #1
 8010272:	b29a      	uxth	r2, r3
 8010274:	4b4a      	ldr	r3, [pc, #296]	@ (80103a0 <tcp_receive+0x888>)
 8010276:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010278:	4b49      	ldr	r3, [pc, #292]	@ (80103a0 <tcp_receive+0x888>)
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	4a48      	ldr	r2, [pc, #288]	@ (80103a0 <tcp_receive+0x888>)
 801027e:	8912      	ldrh	r2, [r2, #8]
 8010280:	4611      	mov	r1, r2
 8010282:	4618      	mov	r0, r3
 8010284:	f7fc f93e 	bl	800c504 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010288:	4b45      	ldr	r3, [pc, #276]	@ (80103a0 <tcp_receive+0x888>)
 801028a:	891c      	ldrh	r4, [r3, #8]
 801028c:	4b44      	ldr	r3, [pc, #272]	@ (80103a0 <tcp_receive+0x888>)
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	899b      	ldrh	r3, [r3, #12]
 8010292:	b29b      	uxth	r3, r3
 8010294:	4618      	mov	r0, r3
 8010296:	f7fa fea5 	bl	800afe4 <lwip_htons>
 801029a:	4603      	mov	r3, r0
 801029c:	b2db      	uxtb	r3, r3
 801029e:	f003 0303 	and.w	r3, r3, #3
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d001      	beq.n	80102aa <tcp_receive+0x792>
 80102a6:	2301      	movs	r3, #1
 80102a8:	e000      	b.n	80102ac <tcp_receive+0x794>
 80102aa:	2300      	movs	r3, #0
 80102ac:	4423      	add	r3, r4
 80102ae:	b29a      	uxth	r2, r3
 80102b0:	4b3c      	ldr	r3, [pc, #240]	@ (80103a4 <tcp_receive+0x88c>)
 80102b2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80102b4:	4b3b      	ldr	r3, [pc, #236]	@ (80103a4 <tcp_receive+0x88c>)
 80102b6:	881b      	ldrh	r3, [r3, #0]
 80102b8:	461a      	mov	r2, r3
 80102ba:	4b38      	ldr	r3, [pc, #224]	@ (801039c <tcp_receive+0x884>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	441a      	add	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102c4:	6879      	ldr	r1, [r7, #4]
 80102c6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80102c8:	440b      	add	r3, r1
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d006      	beq.n	80102dc <tcp_receive+0x7c4>
 80102ce:	4b36      	ldr	r3, [pc, #216]	@ (80103a8 <tcp_receive+0x890>)
 80102d0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80102d4:	4935      	ldr	r1, [pc, #212]	@ (80103ac <tcp_receive+0x894>)
 80102d6:	4836      	ldr	r0, [pc, #216]	@ (80103b0 <tcp_receive+0x898>)
 80102d8:	f005 ffb8 	bl	801624c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f000 80e6 	beq.w	80104b2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80102e6:	4b2e      	ldr	r3, [pc, #184]	@ (80103a0 <tcp_receive+0x888>)
 80102e8:	68db      	ldr	r3, [r3, #12]
 80102ea:	899b      	ldrh	r3, [r3, #12]
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fa fe78 	bl	800afe4 <lwip_htons>
 80102f4:	4603      	mov	r3, r0
 80102f6:	b2db      	uxtb	r3, r3
 80102f8:	f003 0301 	and.w	r3, r3, #1
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d010      	beq.n	8010322 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010300:	e00a      	b.n	8010318 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010306:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801030c:	681a      	ldr	r2, [r3, #0]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010312:	68f8      	ldr	r0, [r7, #12]
 8010314:	f7fd fd93 	bl	800de3e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801031c:	2b00      	cmp	r3, #0
 801031e:	d1f0      	bne.n	8010302 <tcp_receive+0x7ea>
 8010320:	e0c7      	b.n	80104b2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010326:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010328:	e051      	b.n	80103ce <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801032a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	899b      	ldrh	r3, [r3, #12]
 8010330:	b29b      	uxth	r3, r3
 8010332:	4618      	mov	r0, r3
 8010334:	f7fa fe56 	bl	800afe4 <lwip_htons>
 8010338:	4603      	mov	r3, r0
 801033a:	b2db      	uxtb	r3, r3
 801033c:	f003 0301 	and.w	r3, r3, #1
 8010340:	2b00      	cmp	r3, #0
 8010342:	d03c      	beq.n	80103be <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010344:	4b16      	ldr	r3, [pc, #88]	@ (80103a0 <tcp_receive+0x888>)
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	899b      	ldrh	r3, [r3, #12]
 801034a:	b29b      	uxth	r3, r3
 801034c:	4618      	mov	r0, r3
 801034e:	f7fa fe49 	bl	800afe4 <lwip_htons>
 8010352:	4603      	mov	r3, r0
 8010354:	b2db      	uxtb	r3, r3
 8010356:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801035a:	2b00      	cmp	r3, #0
 801035c:	d12f      	bne.n	80103be <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801035e:	4b10      	ldr	r3, [pc, #64]	@ (80103a0 <tcp_receive+0x888>)
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	899b      	ldrh	r3, [r3, #12]
 8010364:	b29c      	uxth	r4, r3
 8010366:	2001      	movs	r0, #1
 8010368:	f7fa fe3c 	bl	800afe4 <lwip_htons>
 801036c:	4603      	mov	r3, r0
 801036e:	461a      	mov	r2, r3
 8010370:	4b0b      	ldr	r3, [pc, #44]	@ (80103a0 <tcp_receive+0x888>)
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	4322      	orrs	r2, r4
 8010376:	b292      	uxth	r2, r2
 8010378:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801037a:	4b09      	ldr	r3, [pc, #36]	@ (80103a0 <tcp_receive+0x888>)
 801037c:	891c      	ldrh	r4, [r3, #8]
 801037e:	4b08      	ldr	r3, [pc, #32]	@ (80103a0 <tcp_receive+0x888>)
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	899b      	ldrh	r3, [r3, #12]
 8010384:	b29b      	uxth	r3, r3
 8010386:	4618      	mov	r0, r3
 8010388:	f7fa fe2c 	bl	800afe4 <lwip_htons>
 801038c:	4603      	mov	r3, r0
 801038e:	b2db      	uxtb	r3, r3
 8010390:	f003 0303 	and.w	r3, r3, #3
 8010394:	2b00      	cmp	r3, #0
 8010396:	d00d      	beq.n	80103b4 <tcp_receive+0x89c>
 8010398:	2301      	movs	r3, #1
 801039a:	e00c      	b.n	80103b6 <tcp_receive+0x89e>
 801039c:	240082bc 	.word	0x240082bc
 80103a0:	2400829c 	.word	0x2400829c
 80103a4:	240082c6 	.word	0x240082c6
 80103a8:	0801acbc 	.word	0x0801acbc
 80103ac:	0801b064 	.word	0x0801b064
 80103b0:	0801ad08 	.word	0x0801ad08
 80103b4:	2300      	movs	r3, #0
 80103b6:	4423      	add	r3, r4
 80103b8:	b29a      	uxth	r2, r3
 80103ba:	4b98      	ldr	r3, [pc, #608]	@ (801061c <tcp_receive+0xb04>)
 80103bc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80103be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103c0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80103c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80103c8:	6938      	ldr	r0, [r7, #16]
 80103ca:	f7fd fd38 	bl	800de3e <tcp_seg_free>
            while (next &&
 80103ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00e      	beq.n	80103f2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80103d4:	4b91      	ldr	r3, [pc, #580]	@ (801061c <tcp_receive+0xb04>)
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	461a      	mov	r2, r3
 80103da:	4b91      	ldr	r3, [pc, #580]	@ (8010620 <tcp_receive+0xb08>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	441a      	add	r2, r3
 80103e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80103e8:	8909      	ldrh	r1, [r1, #8]
 80103ea:	440b      	add	r3, r1
 80103ec:	1ad3      	subs	r3, r2, r3
            while (next &&
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	da9b      	bge.n	801032a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80103f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d059      	beq.n	80104ac <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80103f8:	4b88      	ldr	r3, [pc, #544]	@ (801061c <tcp_receive+0xb04>)
 80103fa:	881b      	ldrh	r3, [r3, #0]
 80103fc:	461a      	mov	r2, r3
 80103fe:	4b88      	ldr	r3, [pc, #544]	@ (8010620 <tcp_receive+0xb08>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	441a      	add	r2, r3
 8010404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801040c:	2b00      	cmp	r3, #0
 801040e:	dd4d      	ble.n	80104ac <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010412:	68db      	ldr	r3, [r3, #12]
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	b29a      	uxth	r2, r3
 8010418:	4b81      	ldr	r3, [pc, #516]	@ (8010620 <tcp_receive+0xb08>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	b29b      	uxth	r3, r3
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	b29a      	uxth	r2, r3
 8010422:	4b80      	ldr	r3, [pc, #512]	@ (8010624 <tcp_receive+0xb0c>)
 8010424:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010426:	4b7f      	ldr	r3, [pc, #508]	@ (8010624 <tcp_receive+0xb0c>)
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	899b      	ldrh	r3, [r3, #12]
 801042c:	b29b      	uxth	r3, r3
 801042e:	4618      	mov	r0, r3
 8010430:	f7fa fdd8 	bl	800afe4 <lwip_htons>
 8010434:	4603      	mov	r3, r0
 8010436:	b2db      	uxtb	r3, r3
 8010438:	f003 0302 	and.w	r3, r3, #2
 801043c:	2b00      	cmp	r3, #0
 801043e:	d005      	beq.n	801044c <tcp_receive+0x934>
                inseg.len -= 1;
 8010440:	4b78      	ldr	r3, [pc, #480]	@ (8010624 <tcp_receive+0xb0c>)
 8010442:	891b      	ldrh	r3, [r3, #8]
 8010444:	3b01      	subs	r3, #1
 8010446:	b29a      	uxth	r2, r3
 8010448:	4b76      	ldr	r3, [pc, #472]	@ (8010624 <tcp_receive+0xb0c>)
 801044a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801044c:	4b75      	ldr	r3, [pc, #468]	@ (8010624 <tcp_receive+0xb0c>)
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	4a74      	ldr	r2, [pc, #464]	@ (8010624 <tcp_receive+0xb0c>)
 8010452:	8912      	ldrh	r2, [r2, #8]
 8010454:	4611      	mov	r1, r2
 8010456:	4618      	mov	r0, r3
 8010458:	f7fc f854 	bl	800c504 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801045c:	4b71      	ldr	r3, [pc, #452]	@ (8010624 <tcp_receive+0xb0c>)
 801045e:	891c      	ldrh	r4, [r3, #8]
 8010460:	4b70      	ldr	r3, [pc, #448]	@ (8010624 <tcp_receive+0xb0c>)
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	899b      	ldrh	r3, [r3, #12]
 8010466:	b29b      	uxth	r3, r3
 8010468:	4618      	mov	r0, r3
 801046a:	f7fa fdbb 	bl	800afe4 <lwip_htons>
 801046e:	4603      	mov	r3, r0
 8010470:	b2db      	uxtb	r3, r3
 8010472:	f003 0303 	and.w	r3, r3, #3
 8010476:	2b00      	cmp	r3, #0
 8010478:	d001      	beq.n	801047e <tcp_receive+0x966>
 801047a:	2301      	movs	r3, #1
 801047c:	e000      	b.n	8010480 <tcp_receive+0x968>
 801047e:	2300      	movs	r3, #0
 8010480:	4423      	add	r3, r4
 8010482:	b29a      	uxth	r2, r3
 8010484:	4b65      	ldr	r3, [pc, #404]	@ (801061c <tcp_receive+0xb04>)
 8010486:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010488:	4b64      	ldr	r3, [pc, #400]	@ (801061c <tcp_receive+0xb04>)
 801048a:	881b      	ldrh	r3, [r3, #0]
 801048c:	461a      	mov	r2, r3
 801048e:	4b64      	ldr	r3, [pc, #400]	@ (8010620 <tcp_receive+0xb08>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	441a      	add	r2, r3
 8010494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	429a      	cmp	r2, r3
 801049c:	d006      	beq.n	80104ac <tcp_receive+0x994>
 801049e:	4b62      	ldr	r3, [pc, #392]	@ (8010628 <tcp_receive+0xb10>)
 80104a0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80104a4:	4961      	ldr	r1, [pc, #388]	@ (801062c <tcp_receive+0xb14>)
 80104a6:	4862      	ldr	r0, [pc, #392]	@ (8010630 <tcp_receive+0xb18>)
 80104a8:	f005 fed0 	bl	801624c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80104b0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80104b2:	4b5a      	ldr	r3, [pc, #360]	@ (801061c <tcp_receive+0xb04>)
 80104b4:	881b      	ldrh	r3, [r3, #0]
 80104b6:	461a      	mov	r2, r3
 80104b8:	4b59      	ldr	r3, [pc, #356]	@ (8010620 <tcp_receive+0xb08>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	441a      	add	r2, r3
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80104c6:	4b55      	ldr	r3, [pc, #340]	@ (801061c <tcp_receive+0xb04>)
 80104c8:	881b      	ldrh	r3, [r3, #0]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d206      	bcs.n	80104dc <tcp_receive+0x9c4>
 80104ce:	4b56      	ldr	r3, [pc, #344]	@ (8010628 <tcp_receive+0xb10>)
 80104d0:	f240 6207 	movw	r2, #1543	@ 0x607
 80104d4:	4957      	ldr	r1, [pc, #348]	@ (8010634 <tcp_receive+0xb1c>)
 80104d6:	4856      	ldr	r0, [pc, #344]	@ (8010630 <tcp_receive+0xb18>)
 80104d8:	f005 feb8 	bl	801624c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80104e0:	4b4e      	ldr	r3, [pc, #312]	@ (801061c <tcp_receive+0xb04>)
 80104e2:	881b      	ldrh	r3, [r3, #0]
 80104e4:	1ad3      	subs	r3, r2, r3
 80104e6:	b29a      	uxth	r2, r3
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f7fc ffc5 	bl	800d47c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80104f2:	4b4c      	ldr	r3, [pc, #304]	@ (8010624 <tcp_receive+0xb0c>)
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	891b      	ldrh	r3, [r3, #8]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d006      	beq.n	801050a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80104fc:	4b49      	ldr	r3, [pc, #292]	@ (8010624 <tcp_receive+0xb0c>)
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	4a4d      	ldr	r2, [pc, #308]	@ (8010638 <tcp_receive+0xb20>)
 8010502:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010504:	4b47      	ldr	r3, [pc, #284]	@ (8010624 <tcp_receive+0xb0c>)
 8010506:	2200      	movs	r2, #0
 8010508:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801050a:	4b46      	ldr	r3, [pc, #280]	@ (8010624 <tcp_receive+0xb0c>)
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	899b      	ldrh	r3, [r3, #12]
 8010510:	b29b      	uxth	r3, r3
 8010512:	4618      	mov	r0, r3
 8010514:	f7fa fd66 	bl	800afe4 <lwip_htons>
 8010518:	4603      	mov	r3, r0
 801051a:	b2db      	uxtb	r3, r3
 801051c:	f003 0301 	and.w	r3, r3, #1
 8010520:	2b00      	cmp	r3, #0
 8010522:	f000 80b8 	beq.w	8010696 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010526:	4b45      	ldr	r3, [pc, #276]	@ (801063c <tcp_receive+0xb24>)
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	f043 0320 	orr.w	r3, r3, #32
 801052e:	b2da      	uxtb	r2, r3
 8010530:	4b42      	ldr	r3, [pc, #264]	@ (801063c <tcp_receive+0xb24>)
 8010532:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010534:	e0af      	b.n	8010696 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801053a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010540:	68db      	ldr	r3, [r3, #12]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	4a36      	ldr	r2, [pc, #216]	@ (8010620 <tcp_receive+0xb08>)
 8010546:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	891b      	ldrh	r3, [r3, #8]
 801054c:	461c      	mov	r4, r3
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	899b      	ldrh	r3, [r3, #12]
 8010554:	b29b      	uxth	r3, r3
 8010556:	4618      	mov	r0, r3
 8010558:	f7fa fd44 	bl	800afe4 <lwip_htons>
 801055c:	4603      	mov	r3, r0
 801055e:	b2db      	uxtb	r3, r3
 8010560:	f003 0303 	and.w	r3, r3, #3
 8010564:	2b00      	cmp	r3, #0
 8010566:	d001      	beq.n	801056c <tcp_receive+0xa54>
 8010568:	2301      	movs	r3, #1
 801056a:	e000      	b.n	801056e <tcp_receive+0xa56>
 801056c:	2300      	movs	r3, #0
 801056e:	191a      	adds	r2, r3, r4
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010574:	441a      	add	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801057e:	461c      	mov	r4, r3
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	891b      	ldrh	r3, [r3, #8]
 8010584:	461d      	mov	r5, r3
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	68db      	ldr	r3, [r3, #12]
 801058a:	899b      	ldrh	r3, [r3, #12]
 801058c:	b29b      	uxth	r3, r3
 801058e:	4618      	mov	r0, r3
 8010590:	f7fa fd28 	bl	800afe4 <lwip_htons>
 8010594:	4603      	mov	r3, r0
 8010596:	b2db      	uxtb	r3, r3
 8010598:	f003 0303 	and.w	r3, r3, #3
 801059c:	2b00      	cmp	r3, #0
 801059e:	d001      	beq.n	80105a4 <tcp_receive+0xa8c>
 80105a0:	2301      	movs	r3, #1
 80105a2:	e000      	b.n	80105a6 <tcp_receive+0xa8e>
 80105a4:	2300      	movs	r3, #0
 80105a6:	442b      	add	r3, r5
 80105a8:	429c      	cmp	r4, r3
 80105aa:	d206      	bcs.n	80105ba <tcp_receive+0xaa2>
 80105ac:	4b1e      	ldr	r3, [pc, #120]	@ (8010628 <tcp_receive+0xb10>)
 80105ae:	f240 622b 	movw	r2, #1579	@ 0x62b
 80105b2:	4923      	ldr	r1, [pc, #140]	@ (8010640 <tcp_receive+0xb28>)
 80105b4:	481e      	ldr	r0, [pc, #120]	@ (8010630 <tcp_receive+0xb18>)
 80105b6:	f005 fe49 	bl	801624c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	891b      	ldrh	r3, [r3, #8]
 80105be:	461c      	mov	r4, r3
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	899b      	ldrh	r3, [r3, #12]
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fa fd0b 	bl	800afe4 <lwip_htons>
 80105ce:	4603      	mov	r3, r0
 80105d0:	b2db      	uxtb	r3, r3
 80105d2:	f003 0303 	and.w	r3, r3, #3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d001      	beq.n	80105de <tcp_receive+0xac6>
 80105da:	2301      	movs	r3, #1
 80105dc:	e000      	b.n	80105e0 <tcp_receive+0xac8>
 80105de:	2300      	movs	r3, #0
 80105e0:	1919      	adds	r1, r3, r4
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80105e6:	b28b      	uxth	r3, r1
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	b29a      	uxth	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f7fc ff43 	bl	800d47c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	685b      	ldr	r3, [r3, #4]
 80105fa:	891b      	ldrh	r3, [r3, #8]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d028      	beq.n	8010652 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010600:	4b0d      	ldr	r3, [pc, #52]	@ (8010638 <tcp_receive+0xb20>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d01d      	beq.n	8010644 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010608:	4b0b      	ldr	r3, [pc, #44]	@ (8010638 <tcp_receive+0xb20>)
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	4619      	mov	r1, r3
 8010612:	4610      	mov	r0, r2
 8010614:	f7fc f9be 	bl	800c994 <pbuf_cat>
 8010618:	e018      	b.n	801064c <tcp_receive+0xb34>
 801061a:	bf00      	nop
 801061c:	240082c6 	.word	0x240082c6
 8010620:	240082bc 	.word	0x240082bc
 8010624:	2400829c 	.word	0x2400829c
 8010628:	0801acbc 	.word	0x0801acbc
 801062c:	0801b09c 	.word	0x0801b09c
 8010630:	0801ad08 	.word	0x0801ad08
 8010634:	0801b0d8 	.word	0x0801b0d8
 8010638:	240082cc 	.word	0x240082cc
 801063c:	240082c9 	.word	0x240082c9
 8010640:	0801b0f8 	.word	0x0801b0f8
            } else {
              recv_data = cseg->p;
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	4a70      	ldr	r2, [pc, #448]	@ (801080c <tcp_receive+0xcf4>)
 801064a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	2200      	movs	r2, #0
 8010650:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	68db      	ldr	r3, [r3, #12]
 8010656:	899b      	ldrh	r3, [r3, #12]
 8010658:	b29b      	uxth	r3, r3
 801065a:	4618      	mov	r0, r3
 801065c:	f7fa fcc2 	bl	800afe4 <lwip_htons>
 8010660:	4603      	mov	r3, r0
 8010662:	b2db      	uxtb	r3, r3
 8010664:	f003 0301 	and.w	r3, r3, #1
 8010668:	2b00      	cmp	r3, #0
 801066a:	d00d      	beq.n	8010688 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801066c:	4b68      	ldr	r3, [pc, #416]	@ (8010810 <tcp_receive+0xcf8>)
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	f043 0320 	orr.w	r3, r3, #32
 8010674:	b2da      	uxtb	r2, r3
 8010676:	4b66      	ldr	r3, [pc, #408]	@ (8010810 <tcp_receive+0xcf8>)
 8010678:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	7d1b      	ldrb	r3, [r3, #20]
 801067e:	2b04      	cmp	r3, #4
 8010680:	d102      	bne.n	8010688 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2207      	movs	r2, #7
 8010686:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8010690:	68b8      	ldr	r0, [r7, #8]
 8010692:	f7fd fbd4 	bl	800de3e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801069a:	2b00      	cmp	r3, #0
 801069c:	d008      	beq.n	80106b0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	685a      	ldr	r2, [r3, #4]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80106aa:	429a      	cmp	r2, r3
 80106ac:	f43f af43 	beq.w	8010536 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	8b5b      	ldrh	r3, [r3, #26]
 80106b4:	f003 0301 	and.w	r3, r3, #1
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00e      	beq.n	80106da <tcp_receive+0xbc2>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	8b5b      	ldrh	r3, [r3, #26]
 80106c0:	f023 0301 	bic.w	r3, r3, #1
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	835a      	strh	r2, [r3, #26]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	8b5b      	ldrh	r3, [r3, #26]
 80106ce:	f043 0302 	orr.w	r3, r3, #2
 80106d2:	b29a      	uxth	r2, r3
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80106d8:	e187      	b.n	80109ea <tcp_receive+0xed2>
        tcp_ack(pcb);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	8b5b      	ldrh	r3, [r3, #26]
 80106de:	f043 0301 	orr.w	r3, r3, #1
 80106e2:	b29a      	uxth	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80106e8:	e17f      	b.n	80109ea <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d106      	bne.n	8010700 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80106f2:	4848      	ldr	r0, [pc, #288]	@ (8010814 <tcp_receive+0xcfc>)
 80106f4:	f7fd fbbc 	bl	800de70 <tcp_seg_copy>
 80106f8:	4602      	mov	r2, r0
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80106fe:	e16c      	b.n	80109da <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010700:	2300      	movs	r3, #0
 8010702:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010708:	63bb      	str	r3, [r7, #56]	@ 0x38
 801070a:	e156      	b.n	80109ba <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801070c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	685a      	ldr	r2, [r3, #4]
 8010712:	4b41      	ldr	r3, [pc, #260]	@ (8010818 <tcp_receive+0xd00>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	429a      	cmp	r2, r3
 8010718:	d11d      	bne.n	8010756 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801071a:	4b3e      	ldr	r3, [pc, #248]	@ (8010814 <tcp_receive+0xcfc>)
 801071c:	891a      	ldrh	r2, [r3, #8]
 801071e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010720:	891b      	ldrh	r3, [r3, #8]
 8010722:	429a      	cmp	r2, r3
 8010724:	f240 814e 	bls.w	80109c4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010728:	483a      	ldr	r0, [pc, #232]	@ (8010814 <tcp_receive+0xcfc>)
 801072a:	f7fd fba1 	bl	800de70 <tcp_seg_copy>
 801072e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	2b00      	cmp	r3, #0
 8010734:	f000 8148 	beq.w	80109c8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801073a:	2b00      	cmp	r3, #0
 801073c:	d003      	beq.n	8010746 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801073e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010740:	697a      	ldr	r2, [r7, #20]
 8010742:	601a      	str	r2, [r3, #0]
 8010744:	e002      	b.n	801074c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	697a      	ldr	r2, [r7, #20]
 801074a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801074c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801074e:	6978      	ldr	r0, [r7, #20]
 8010750:	f7ff f8de 	bl	800f910 <tcp_oos_insert_segment>
                }
                break;
 8010754:	e138      	b.n	80109c8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010758:	2b00      	cmp	r3, #0
 801075a:	d117      	bne.n	801078c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801075c:	4b2e      	ldr	r3, [pc, #184]	@ (8010818 <tcp_receive+0xd00>)
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010762:	68db      	ldr	r3, [r3, #12]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	1ad3      	subs	r3, r2, r3
 8010768:	2b00      	cmp	r3, #0
 801076a:	da57      	bge.n	801081c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801076c:	4829      	ldr	r0, [pc, #164]	@ (8010814 <tcp_receive+0xcfc>)
 801076e:	f7fd fb7f 	bl	800de70 <tcp_seg_copy>
 8010772:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 8128 	beq.w	80109cc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	69ba      	ldr	r2, [r7, #24]
 8010780:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010782:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010784:	69b8      	ldr	r0, [r7, #24]
 8010786:	f7ff f8c3 	bl	800f910 <tcp_oos_insert_segment>
                  }
                  break;
 801078a:	e11f      	b.n	80109cc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801078c:	4b22      	ldr	r3, [pc, #136]	@ (8010818 <tcp_receive+0xd00>)
 801078e:	681a      	ldr	r2, [r3, #0]
 8010790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	1ad3      	subs	r3, r2, r3
 8010798:	3b01      	subs	r3, #1
 801079a:	2b00      	cmp	r3, #0
 801079c:	db3e      	blt.n	801081c <tcp_receive+0xd04>
 801079e:	4b1e      	ldr	r3, [pc, #120]	@ (8010818 <tcp_receive+0xd00>)
 80107a0:	681a      	ldr	r2, [r3, #0]
 80107a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	1ad3      	subs	r3, r2, r3
 80107aa:	3301      	adds	r3, #1
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	dc35      	bgt.n	801081c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80107b0:	4818      	ldr	r0, [pc, #96]	@ (8010814 <tcp_receive+0xcfc>)
 80107b2:	f7fd fb5d 	bl	800de70 <tcp_seg_copy>
 80107b6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f000 8108 	beq.w	80109d0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80107c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107c8:	8912      	ldrh	r2, [r2, #8]
 80107ca:	441a      	add	r2, r3
 80107cc:	4b12      	ldr	r3, [pc, #72]	@ (8010818 <tcp_receive+0xd00>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	1ad3      	subs	r3, r2, r3
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	dd12      	ble.n	80107fc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80107d6:	4b10      	ldr	r3, [pc, #64]	@ (8010818 <tcp_receive+0xd00>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	b29a      	uxth	r2, r3
 80107dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107ea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80107ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107ee:	685a      	ldr	r2, [r3, #4]
 80107f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107f2:	891b      	ldrh	r3, [r3, #8]
 80107f4:	4619      	mov	r1, r3
 80107f6:	4610      	mov	r0, r2
 80107f8:	f7fb fe84 	bl	800c504 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80107fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107fe:	69fa      	ldr	r2, [r7, #28]
 8010800:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010802:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010804:	69f8      	ldr	r0, [r7, #28]
 8010806:	f7ff f883 	bl	800f910 <tcp_oos_insert_segment>
                  }
                  break;
 801080a:	e0e1      	b.n	80109d0 <tcp_receive+0xeb8>
 801080c:	240082cc 	.word	0x240082cc
 8010810:	240082c9 	.word	0x240082c9
 8010814:	2400829c 	.word	0x2400829c
 8010818:	240082bc 	.word	0x240082bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801081c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801081e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	f040 80c5 	bne.w	80109b4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801082a:	4b7f      	ldr	r3, [pc, #508]	@ (8010a28 <tcp_receive+0xf10>)
 801082c:	681a      	ldr	r2, [r3, #0]
 801082e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010830:	68db      	ldr	r3, [r3, #12]
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010836:	2b00      	cmp	r3, #0
 8010838:	f340 80bc 	ble.w	80109b4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801083c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	899b      	ldrh	r3, [r3, #12]
 8010842:	b29b      	uxth	r3, r3
 8010844:	4618      	mov	r0, r3
 8010846:	f7fa fbcd 	bl	800afe4 <lwip_htons>
 801084a:	4603      	mov	r3, r0
 801084c:	b2db      	uxtb	r3, r3
 801084e:	f003 0301 	and.w	r3, r3, #1
 8010852:	2b00      	cmp	r3, #0
 8010854:	f040 80be 	bne.w	80109d4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010858:	4874      	ldr	r0, [pc, #464]	@ (8010a2c <tcp_receive+0xf14>)
 801085a:	f7fd fb09 	bl	800de70 <tcp_seg_copy>
 801085e:	4602      	mov	r2, r0
 8010860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010862:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	f000 80b5 	beq.w	80109d8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801086e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010876:	8912      	ldrh	r2, [r2, #8]
 8010878:	441a      	add	r2, r3
 801087a:	4b6b      	ldr	r3, [pc, #428]	@ (8010a28 <tcp_receive+0xf10>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	2b00      	cmp	r3, #0
 8010882:	dd12      	ble.n	80108aa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010884:	4b68      	ldr	r3, [pc, #416]	@ (8010a28 <tcp_receive+0xf10>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	b29a      	uxth	r2, r3
 801088a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801088c:	68db      	ldr	r3, [r3, #12]
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	b29b      	uxth	r3, r3
 8010892:	1ad3      	subs	r3, r2, r3
 8010894:	b29a      	uxth	r2, r3
 8010896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010898:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801089a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801089c:	685a      	ldr	r2, [r3, #4]
 801089e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108a0:	891b      	ldrh	r3, [r3, #8]
 80108a2:	4619      	mov	r1, r3
 80108a4:	4610      	mov	r0, r2
 80108a6:	f7fb fe2d 	bl	800c504 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80108aa:	4b61      	ldr	r3, [pc, #388]	@ (8010a30 <tcp_receive+0xf18>)
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	461a      	mov	r2, r3
 80108b0:	4b5d      	ldr	r3, [pc, #372]	@ (8010a28 <tcp_receive+0xf10>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	441a      	add	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108ba:	6879      	ldr	r1, [r7, #4]
 80108bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80108be:	440b      	add	r3, r1
 80108c0:	1ad3      	subs	r3, r2, r3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f340 8088 	ble.w	80109d8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80108c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	899b      	ldrh	r3, [r3, #12]
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fa fb86 	bl	800afe4 <lwip_htons>
 80108d8:	4603      	mov	r3, r0
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	f003 0301 	and.w	r3, r3, #1
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d021      	beq.n	8010928 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80108e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	899b      	ldrh	r3, [r3, #12]
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	b21b      	sxth	r3, r3
 80108f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80108f4:	b21c      	sxth	r4, r3
 80108f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	68db      	ldr	r3, [r3, #12]
 80108fc:	899b      	ldrh	r3, [r3, #12]
 80108fe:	b29b      	uxth	r3, r3
 8010900:	4618      	mov	r0, r3
 8010902:	f7fa fb6f 	bl	800afe4 <lwip_htons>
 8010906:	4603      	mov	r3, r0
 8010908:	b2db      	uxtb	r3, r3
 801090a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801090e:	b29b      	uxth	r3, r3
 8010910:	4618      	mov	r0, r3
 8010912:	f7fa fb67 	bl	800afe4 <lwip_htons>
 8010916:	4603      	mov	r3, r0
 8010918:	b21b      	sxth	r3, r3
 801091a:	4323      	orrs	r3, r4
 801091c:	b21a      	sxth	r2, r3
 801091e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	b292      	uxth	r2, r2
 8010926:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801092c:	b29a      	uxth	r2, r3
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010932:	4413      	add	r3, r2
 8010934:	b299      	uxth	r1, r3
 8010936:	4b3c      	ldr	r3, [pc, #240]	@ (8010a28 <tcp_receive+0xf10>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	b29a      	uxth	r2, r3
 801093c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	1a8a      	subs	r2, r1, r2
 8010942:	b292      	uxth	r2, r2
 8010944:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	685a      	ldr	r2, [r3, #4]
 801094c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	891b      	ldrh	r3, [r3, #8]
 8010952:	4619      	mov	r1, r3
 8010954:	4610      	mov	r0, r2
 8010956:	f7fb fdd5 	bl	800c504 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801095a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	891c      	ldrh	r4, [r3, #8]
 8010960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	68db      	ldr	r3, [r3, #12]
 8010966:	899b      	ldrh	r3, [r3, #12]
 8010968:	b29b      	uxth	r3, r3
 801096a:	4618      	mov	r0, r3
 801096c:	f7fa fb3a 	bl	800afe4 <lwip_htons>
 8010970:	4603      	mov	r3, r0
 8010972:	b2db      	uxtb	r3, r3
 8010974:	f003 0303 	and.w	r3, r3, #3
 8010978:	2b00      	cmp	r3, #0
 801097a:	d001      	beq.n	8010980 <tcp_receive+0xe68>
 801097c:	2301      	movs	r3, #1
 801097e:	e000      	b.n	8010982 <tcp_receive+0xe6a>
 8010980:	2300      	movs	r3, #0
 8010982:	4423      	add	r3, r4
 8010984:	b29a      	uxth	r2, r3
 8010986:	4b2a      	ldr	r3, [pc, #168]	@ (8010a30 <tcp_receive+0xf18>)
 8010988:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801098a:	4b29      	ldr	r3, [pc, #164]	@ (8010a30 <tcp_receive+0xf18>)
 801098c:	881b      	ldrh	r3, [r3, #0]
 801098e:	461a      	mov	r2, r3
 8010990:	4b25      	ldr	r3, [pc, #148]	@ (8010a28 <tcp_receive+0xf10>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	441a      	add	r2, r3
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801099a:	6879      	ldr	r1, [r7, #4]
 801099c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801099e:	440b      	add	r3, r1
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d019      	beq.n	80109d8 <tcp_receive+0xec0>
 80109a4:	4b23      	ldr	r3, [pc, #140]	@ (8010a34 <tcp_receive+0xf1c>)
 80109a6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80109aa:	4923      	ldr	r1, [pc, #140]	@ (8010a38 <tcp_receive+0xf20>)
 80109ac:	4823      	ldr	r0, [pc, #140]	@ (8010a3c <tcp_receive+0xf24>)
 80109ae:	f005 fc4d 	bl	801624c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80109b2:	e011      	b.n	80109d8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80109b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80109ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f47f aea5 	bne.w	801070c <tcp_receive+0xbf4>
 80109c2:	e00a      	b.n	80109da <tcp_receive+0xec2>
                break;
 80109c4:	bf00      	nop
 80109c6:	e008      	b.n	80109da <tcp_receive+0xec2>
                break;
 80109c8:	bf00      	nop
 80109ca:	e006      	b.n	80109da <tcp_receive+0xec2>
                  break;
 80109cc:	bf00      	nop
 80109ce:	e004      	b.n	80109da <tcp_receive+0xec2>
                  break;
 80109d0:	bf00      	nop
 80109d2:	e002      	b.n	80109da <tcp_receive+0xec2>
                  break;
 80109d4:	bf00      	nop
 80109d6:	e000      	b.n	80109da <tcp_receive+0xec2>
                break;
 80109d8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f001 fa30 	bl	8011e40 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80109e0:	e003      	b.n	80109ea <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f001 fa2c 	bl	8011e40 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80109e8:	e01a      	b.n	8010a20 <tcp_receive+0xf08>
 80109ea:	e019      	b.n	8010a20 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80109ec:	4b0e      	ldr	r3, [pc, #56]	@ (8010a28 <tcp_receive+0xf10>)
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109f4:	1ad3      	subs	r3, r2, r3
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	db0a      	blt.n	8010a10 <tcp_receive+0xef8>
 80109fa:	4b0b      	ldr	r3, [pc, #44]	@ (8010a28 <tcp_receive+0xf10>)
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a02:	6879      	ldr	r1, [r7, #4]
 8010a04:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010a06:	440b      	add	r3, r1
 8010a08:	1ad3      	subs	r3, r2, r3
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	dd07      	ble.n	8010a20 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	8b5b      	ldrh	r3, [r3, #26]
 8010a14:	f043 0302 	orr.w	r3, r3, #2
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010a1e:	e7ff      	b.n	8010a20 <tcp_receive+0xf08>
 8010a20:	bf00      	nop
 8010a22:	3750      	adds	r7, #80	@ 0x50
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bdb0      	pop	{r4, r5, r7, pc}
 8010a28:	240082bc 	.word	0x240082bc
 8010a2c:	2400829c 	.word	0x2400829c
 8010a30:	240082c6 	.word	0x240082c6
 8010a34:	0801acbc 	.word	0x0801acbc
 8010a38:	0801b064 	.word	0x0801b064
 8010a3c:	0801ad08 	.word	0x0801ad08

08010a40 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b083      	sub	sp, #12
 8010a44:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010a46:	4b15      	ldr	r3, [pc, #84]	@ (8010a9c <tcp_get_next_optbyte+0x5c>)
 8010a48:	881b      	ldrh	r3, [r3, #0]
 8010a4a:	1c5a      	adds	r2, r3, #1
 8010a4c:	b291      	uxth	r1, r2
 8010a4e:	4a13      	ldr	r2, [pc, #76]	@ (8010a9c <tcp_get_next_optbyte+0x5c>)
 8010a50:	8011      	strh	r1, [r2, #0]
 8010a52:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010a54:	4b12      	ldr	r3, [pc, #72]	@ (8010aa0 <tcp_get_next_optbyte+0x60>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d004      	beq.n	8010a66 <tcp_get_next_optbyte+0x26>
 8010a5c:	4b11      	ldr	r3, [pc, #68]	@ (8010aa4 <tcp_get_next_optbyte+0x64>)
 8010a5e:	881b      	ldrh	r3, [r3, #0]
 8010a60:	88fa      	ldrh	r2, [r7, #6]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d208      	bcs.n	8010a78 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010a66:	4b10      	ldr	r3, [pc, #64]	@ (8010aa8 <tcp_get_next_optbyte+0x68>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	3314      	adds	r3, #20
 8010a6c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010a6e:	88fb      	ldrh	r3, [r7, #6]
 8010a70:	683a      	ldr	r2, [r7, #0]
 8010a72:	4413      	add	r3, r2
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	e00b      	b.n	8010a90 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010a78:	88fb      	ldrh	r3, [r7, #6]
 8010a7a:	b2da      	uxtb	r2, r3
 8010a7c:	4b09      	ldr	r3, [pc, #36]	@ (8010aa4 <tcp_get_next_optbyte+0x64>)
 8010a7e:	881b      	ldrh	r3, [r3, #0]
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010a86:	4b06      	ldr	r3, [pc, #24]	@ (8010aa0 <tcp_get_next_optbyte+0x60>)
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	797b      	ldrb	r3, [r7, #5]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr
 8010a9c:	240082b8 	.word	0x240082b8
 8010aa0:	240082b4 	.word	0x240082b4
 8010aa4:	240082b2 	.word	0x240082b2
 8010aa8:	240082ac 	.word	0x240082ac

08010aac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d106      	bne.n	8010ac8 <tcp_parseopt+0x1c>
 8010aba:	4b32      	ldr	r3, [pc, #200]	@ (8010b84 <tcp_parseopt+0xd8>)
 8010abc:	f240 727d 	movw	r2, #1917	@ 0x77d
 8010ac0:	4931      	ldr	r1, [pc, #196]	@ (8010b88 <tcp_parseopt+0xdc>)
 8010ac2:	4832      	ldr	r0, [pc, #200]	@ (8010b8c <tcp_parseopt+0xe0>)
 8010ac4:	f005 fbc2 	bl	801624c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010ac8:	4b31      	ldr	r3, [pc, #196]	@ (8010b90 <tcp_parseopt+0xe4>)
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d056      	beq.n	8010b7e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010ad0:	4b30      	ldr	r3, [pc, #192]	@ (8010b94 <tcp_parseopt+0xe8>)
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	801a      	strh	r2, [r3, #0]
 8010ad6:	e046      	b.n	8010b66 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8010ad8:	f7ff ffb2 	bl	8010a40 <tcp_get_next_optbyte>
 8010adc:	4603      	mov	r3, r0
 8010ade:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010ae0:	7bfb      	ldrb	r3, [r7, #15]
 8010ae2:	2b02      	cmp	r3, #2
 8010ae4:	d006      	beq.n	8010af4 <tcp_parseopt+0x48>
 8010ae6:	2b02      	cmp	r3, #2
 8010ae8:	dc2a      	bgt.n	8010b40 <tcp_parseopt+0x94>
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d042      	beq.n	8010b74 <tcp_parseopt+0xc8>
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	d038      	beq.n	8010b64 <tcp_parseopt+0xb8>
 8010af2:	e025      	b.n	8010b40 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010af4:	f7ff ffa4 	bl	8010a40 <tcp_get_next_optbyte>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b04      	cmp	r3, #4
 8010afc:	d13c      	bne.n	8010b78 <tcp_parseopt+0xcc>
 8010afe:	4b25      	ldr	r3, [pc, #148]	@ (8010b94 <tcp_parseopt+0xe8>)
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	3301      	adds	r3, #1
 8010b04:	4a22      	ldr	r2, [pc, #136]	@ (8010b90 <tcp_parseopt+0xe4>)
 8010b06:	8812      	ldrh	r2, [r2, #0]
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	da35      	bge.n	8010b78 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010b0c:	f7ff ff98 	bl	8010a40 <tcp_get_next_optbyte>
 8010b10:	4603      	mov	r3, r0
 8010b12:	021b      	lsls	r3, r3, #8
 8010b14:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010b16:	f7ff ff93 	bl	8010a40 <tcp_get_next_optbyte>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	89bb      	ldrh	r3, [r7, #12]
 8010b20:	4313      	orrs	r3, r2
 8010b22:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010b24:	89bb      	ldrh	r3, [r7, #12]
 8010b26:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010b2a:	d804      	bhi.n	8010b36 <tcp_parseopt+0x8a>
 8010b2c:	89bb      	ldrh	r3, [r7, #12]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d001      	beq.n	8010b36 <tcp_parseopt+0x8a>
 8010b32:	89ba      	ldrh	r2, [r7, #12]
 8010b34:	e001      	b.n	8010b3a <tcp_parseopt+0x8e>
 8010b36:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010b3e:	e012      	b.n	8010b66 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010b40:	f7ff ff7e 	bl	8010a40 <tcp_get_next_optbyte>
 8010b44:	4603      	mov	r3, r0
 8010b46:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010b48:	7afb      	ldrb	r3, [r7, #11]
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	d916      	bls.n	8010b7c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010b4e:	7afb      	ldrb	r3, [r7, #11]
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	4b10      	ldr	r3, [pc, #64]	@ (8010b94 <tcp_parseopt+0xe8>)
 8010b54:	881b      	ldrh	r3, [r3, #0]
 8010b56:	4413      	add	r3, r2
 8010b58:	b29b      	uxth	r3, r3
 8010b5a:	3b02      	subs	r3, #2
 8010b5c:	b29a      	uxth	r2, r3
 8010b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8010b94 <tcp_parseopt+0xe8>)
 8010b60:	801a      	strh	r2, [r3, #0]
 8010b62:	e000      	b.n	8010b66 <tcp_parseopt+0xba>
          break;
 8010b64:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010b66:	4b0b      	ldr	r3, [pc, #44]	@ (8010b94 <tcp_parseopt+0xe8>)
 8010b68:	881a      	ldrh	r2, [r3, #0]
 8010b6a:	4b09      	ldr	r3, [pc, #36]	@ (8010b90 <tcp_parseopt+0xe4>)
 8010b6c:	881b      	ldrh	r3, [r3, #0]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d3b2      	bcc.n	8010ad8 <tcp_parseopt+0x2c>
 8010b72:	e004      	b.n	8010b7e <tcp_parseopt+0xd2>
          return;
 8010b74:	bf00      	nop
 8010b76:	e002      	b.n	8010b7e <tcp_parseopt+0xd2>
            return;
 8010b78:	bf00      	nop
 8010b7a:	e000      	b.n	8010b7e <tcp_parseopt+0xd2>
            return;
 8010b7c:	bf00      	nop
      }
    }
  }
}
 8010b7e:	3710      	adds	r7, #16
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	0801acbc 	.word	0x0801acbc
 8010b88:	0801b120 	.word	0x0801b120
 8010b8c:	0801ad08 	.word	0x0801ad08
 8010b90:	240082b0 	.word	0x240082b0
 8010b94:	240082b8 	.word	0x240082b8

08010b98 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010b9c:	4b05      	ldr	r3, [pc, #20]	@ (8010bb4 <tcp_trigger_input_pcb_close+0x1c>)
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	f043 0310 	orr.w	r3, r3, #16
 8010ba4:	b2da      	uxtb	r2, r3
 8010ba6:	4b03      	ldr	r3, [pc, #12]	@ (8010bb4 <tcp_trigger_input_pcb_close+0x1c>)
 8010ba8:	701a      	strb	r2, [r3, #0]
}
 8010baa:	bf00      	nop
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr
 8010bb4:	240082c9 	.word	0x240082c9

08010bb8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	60f8      	str	r0, [r7, #12]
 8010bc0:	60b9      	str	r1, [r7, #8]
 8010bc2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d00a      	beq.n	8010be0 <tcp_route+0x28>
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	7a1b      	ldrb	r3, [r3, #8]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d006      	beq.n	8010be0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	7a1b      	ldrb	r3, [r3, #8]
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fb faba 	bl	800c150 <netif_get_by_index>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	e003      	b.n	8010be8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f003 f991 	bl	8013f08 <ip4_route>
 8010be6:	4603      	mov	r3, r0
  }
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3710      	adds	r7, #16
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010bf0:	b590      	push	{r4, r7, lr}
 8010bf2:	b087      	sub	sp, #28
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	603b      	str	r3, [r7, #0]
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d105      	bne.n	8010c12 <tcp_create_segment+0x22>
 8010c06:	4b43      	ldr	r3, [pc, #268]	@ (8010d14 <tcp_create_segment+0x124>)
 8010c08:	22a3      	movs	r2, #163	@ 0xa3
 8010c0a:	4943      	ldr	r1, [pc, #268]	@ (8010d18 <tcp_create_segment+0x128>)
 8010c0c:	4843      	ldr	r0, [pc, #268]	@ (8010d1c <tcp_create_segment+0x12c>)
 8010c0e:	f005 fb1d 	bl	801624c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d105      	bne.n	8010c24 <tcp_create_segment+0x34>
 8010c18:	4b3e      	ldr	r3, [pc, #248]	@ (8010d14 <tcp_create_segment+0x124>)
 8010c1a:	22a4      	movs	r2, #164	@ 0xa4
 8010c1c:	4940      	ldr	r1, [pc, #256]	@ (8010d20 <tcp_create_segment+0x130>)
 8010c1e:	483f      	ldr	r0, [pc, #252]	@ (8010d1c <tcp_create_segment+0x12c>)
 8010c20:	f005 fb14 	bl	801624c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010c24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010c28:	009b      	lsls	r3, r3, #2
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	f003 0304 	and.w	r3, r3, #4
 8010c30:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010c32:	2003      	movs	r0, #3
 8010c34:	f7fa ff06 	bl	800ba44 <memp_malloc>
 8010c38:	6138      	str	r0, [r7, #16]
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d104      	bne.n	8010c4a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010c40:	68b8      	ldr	r0, [r7, #8]
 8010c42:	f7fb fde5 	bl	800c810 <pbuf_free>
    return NULL;
 8010c46:	2300      	movs	r3, #0
 8010c48:	e060      	b.n	8010d0c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010c50:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	2200      	movs	r2, #0
 8010c56:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	68ba      	ldr	r2, [r7, #8]
 8010c5c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	891a      	ldrh	r2, [r3, #8]
 8010c62:	7dfb      	ldrb	r3, [r7, #23]
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d205      	bcs.n	8010c76 <tcp_create_segment+0x86>
 8010c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8010d14 <tcp_create_segment+0x124>)
 8010c6c:	22b0      	movs	r2, #176	@ 0xb0
 8010c6e:	492d      	ldr	r1, [pc, #180]	@ (8010d24 <tcp_create_segment+0x134>)
 8010c70:	482a      	ldr	r0, [pc, #168]	@ (8010d1c <tcp_create_segment+0x12c>)
 8010c72:	f005 faeb 	bl	801624c <iprintf>
  seg->len = p->tot_len - optlen;
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	891a      	ldrh	r2, [r3, #8]
 8010c7a:	7dfb      	ldrb	r3, [r7, #23]
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	b29a      	uxth	r2, r3
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010c86:	2114      	movs	r1, #20
 8010c88:	68b8      	ldr	r0, [r7, #8]
 8010c8a:	f7fb fd2b 	bl	800c6e4 <pbuf_add_header>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d004      	beq.n	8010c9e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010c94:	6938      	ldr	r0, [r7, #16]
 8010c96:	f7fd f8d2 	bl	800de3e <tcp_seg_free>
    return NULL;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	e036      	b.n	8010d0c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	685a      	ldr	r2, [r3, #4]
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	8ada      	ldrh	r2, [r3, #22]
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	68dc      	ldr	r4, [r3, #12]
 8010cb0:	4610      	mov	r0, r2
 8010cb2:	f7fa f997 	bl	800afe4 <lwip_htons>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	8b1a      	ldrh	r2, [r3, #24]
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	68dc      	ldr	r4, [r3, #12]
 8010cc2:	4610      	mov	r0, r2
 8010cc4:	f7fa f98e 	bl	800afe4 <lwip_htons>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	68dc      	ldr	r4, [r3, #12]
 8010cd0:	6838      	ldr	r0, [r7, #0]
 8010cd2:	f7fa f99d 	bl	800b010 <lwip_htonl>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010cda:	7dfb      	ldrb	r3, [r7, #23]
 8010cdc:	089b      	lsrs	r3, r3, #2
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	3305      	adds	r3, #5
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	031b      	lsls	r3, r3, #12
 8010ce6:	b29a      	uxth	r2, r3
 8010ce8:	79fb      	ldrb	r3, [r7, #7]
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	4313      	orrs	r3, r2
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	68dc      	ldr	r4, [r3, #12]
 8010cf4:	4610      	mov	r0, r2
 8010cf6:	f7fa f975 	bl	800afe4 <lwip_htons>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	2200      	movs	r2, #0
 8010d04:	749a      	strb	r2, [r3, #18]
 8010d06:	2200      	movs	r2, #0
 8010d08:	74da      	strb	r2, [r3, #19]
  return seg;
 8010d0a:	693b      	ldr	r3, [r7, #16]
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	371c      	adds	r7, #28
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd90      	pop	{r4, r7, pc}
 8010d14:	0801b13c 	.word	0x0801b13c
 8010d18:	0801b170 	.word	0x0801b170
 8010d1c:	0801b190 	.word	0x0801b190
 8010d20:	0801b1b8 	.word	0x0801b1b8
 8010d24:	0801b1dc 	.word	0x0801b1dc

08010d28 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010d28:	b590      	push	{r4, r7, lr}
 8010d2a:	b08b      	sub	sp, #44	@ 0x2c
 8010d2c:	af02      	add	r7, sp, #8
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010d34:	2300      	movs	r3, #0
 8010d36:	61fb      	str	r3, [r7, #28]
 8010d38:	2300      	movs	r3, #0
 8010d3a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d106      	bne.n	8010d54 <tcp_split_unsent_seg+0x2c>
 8010d46:	4b95      	ldr	r3, [pc, #596]	@ (8010f9c <tcp_split_unsent_seg+0x274>)
 8010d48:	f240 324b 	movw	r2, #843	@ 0x34b
 8010d4c:	4994      	ldr	r1, [pc, #592]	@ (8010fa0 <tcp_split_unsent_seg+0x278>)
 8010d4e:	4895      	ldr	r0, [pc, #596]	@ (8010fa4 <tcp_split_unsent_seg+0x27c>)
 8010d50:	f005 fa7c 	bl	801624c <iprintf>

  useg = pcb->unsent;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d58:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d102      	bne.n	8010d66 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010d60:	f04f 33ff 	mov.w	r3, #4294967295
 8010d64:	e116      	b.n	8010f94 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010d66:	887b      	ldrh	r3, [r7, #2]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d109      	bne.n	8010d80 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010d6c:	4b8b      	ldr	r3, [pc, #556]	@ (8010f9c <tcp_split_unsent_seg+0x274>)
 8010d6e:	f240 3253 	movw	r2, #851	@ 0x353
 8010d72:	498d      	ldr	r1, [pc, #564]	@ (8010fa8 <tcp_split_unsent_seg+0x280>)
 8010d74:	488b      	ldr	r0, [pc, #556]	@ (8010fa4 <tcp_split_unsent_seg+0x27c>)
 8010d76:	f005 fa69 	bl	801624c <iprintf>
    return ERR_VAL;
 8010d7a:	f06f 0305 	mvn.w	r3, #5
 8010d7e:	e109      	b.n	8010f94 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	891b      	ldrh	r3, [r3, #8]
 8010d84:	887a      	ldrh	r2, [r7, #2]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d301      	bcc.n	8010d8e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	e102      	b.n	8010f94 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d92:	887a      	ldrh	r2, [r7, #2]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d906      	bls.n	8010da6 <tcp_split_unsent_seg+0x7e>
 8010d98:	4b80      	ldr	r3, [pc, #512]	@ (8010f9c <tcp_split_unsent_seg+0x274>)
 8010d9a:	f240 325b 	movw	r2, #859	@ 0x35b
 8010d9e:	4983      	ldr	r1, [pc, #524]	@ (8010fac <tcp_split_unsent_seg+0x284>)
 8010da0:	4880      	ldr	r0, [pc, #512]	@ (8010fa4 <tcp_split_unsent_seg+0x27c>)
 8010da2:	f005 fa53 	bl	801624c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	891b      	ldrh	r3, [r3, #8]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d106      	bne.n	8010dbc <tcp_split_unsent_seg+0x94>
 8010dae:	4b7b      	ldr	r3, [pc, #492]	@ (8010f9c <tcp_split_unsent_seg+0x274>)
 8010db0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010db4:	497e      	ldr	r1, [pc, #504]	@ (8010fb0 <tcp_split_unsent_seg+0x288>)
 8010db6:	487b      	ldr	r0, [pc, #492]	@ (8010fa4 <tcp_split_unsent_seg+0x27c>)
 8010db8:	f005 fa48 	bl	801624c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	7a9b      	ldrb	r3, [r3, #10]
 8010dc0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010dc2:	7bfb      	ldrb	r3, [r7, #15]
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	f003 0304 	and.w	r3, r3, #4
 8010dcc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	891a      	ldrh	r2, [r3, #8]
 8010dd2:	887b      	ldrh	r3, [r7, #2]
 8010dd4:	1ad3      	subs	r3, r2, r3
 8010dd6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010dd8:	7bbb      	ldrb	r3, [r7, #14]
 8010dda:	b29a      	uxth	r2, r3
 8010ddc:	89bb      	ldrh	r3, [r7, #12]
 8010dde:	4413      	add	r3, r2
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010de6:	4619      	mov	r1, r3
 8010de8:	2036      	movs	r0, #54	@ 0x36
 8010dea:	f7fb fa2d 	bl	800c248 <pbuf_alloc>
 8010dee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f000 80b7 	beq.w	8010f66 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	891a      	ldrh	r2, [r3, #8]
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	891b      	ldrh	r3, [r3, #8]
 8010e02:	1ad3      	subs	r3, r2, r3
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	887b      	ldrh	r3, [r7, #2]
 8010e08:	4413      	add	r3, r2
 8010e0a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	6858      	ldr	r0, [r3, #4]
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	685a      	ldr	r2, [r3, #4]
 8010e14:	7bbb      	ldrb	r3, [r7, #14]
 8010e16:	18d1      	adds	r1, r2, r3
 8010e18:	897b      	ldrh	r3, [r7, #10]
 8010e1a:	89ba      	ldrh	r2, [r7, #12]
 8010e1c:	f7fb fef2 	bl	800cc04 <pbuf_copy_partial>
 8010e20:	4603      	mov	r3, r0
 8010e22:	461a      	mov	r2, r3
 8010e24:	89bb      	ldrh	r3, [r7, #12]
 8010e26:	4293      	cmp	r3, r2
 8010e28:	f040 809f 	bne.w	8010f6a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	899b      	ldrh	r3, [r3, #12]
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7fa f8d5 	bl	800afe4 <lwip_htons>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010e42:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010e44:	2300      	movs	r3, #0
 8010e46:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010e48:	7efb      	ldrb	r3, [r7, #27]
 8010e4a:	f003 0308 	and.w	r3, r3, #8
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d007      	beq.n	8010e62 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010e52:	7efb      	ldrb	r3, [r7, #27]
 8010e54:	f023 0308 	bic.w	r3, r3, #8
 8010e58:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010e5a:	7ebb      	ldrb	r3, [r7, #26]
 8010e5c:	f043 0308 	orr.w	r3, r3, #8
 8010e60:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010e62:	7efb      	ldrb	r3, [r7, #27]
 8010e64:	f003 0301 	and.w	r3, r3, #1
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d007      	beq.n	8010e7c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010e6c:	7efb      	ldrb	r3, [r7, #27]
 8010e6e:	f023 0301 	bic.w	r3, r3, #1
 8010e72:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010e74:	7ebb      	ldrb	r3, [r7, #26]
 8010e76:	f043 0301 	orr.w	r3, r3, #1
 8010e7a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fa f8c4 	bl	800b010 <lwip_htonl>
 8010e88:	4602      	mov	r2, r0
 8010e8a:	887b      	ldrh	r3, [r7, #2]
 8010e8c:	18d1      	adds	r1, r2, r3
 8010e8e:	7eba      	ldrb	r2, [r7, #26]
 8010e90:	7bfb      	ldrb	r3, [r7, #15]
 8010e92:	9300      	str	r3, [sp, #0]
 8010e94:	460b      	mov	r3, r1
 8010e96:	6939      	ldr	r1, [r7, #16]
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7ff fea9 	bl	8010bf0 <tcp_create_segment>
 8010e9e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d063      	beq.n	8010f6e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7fb fd38 	bl	800c920 <pbuf_clen>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010eba:	1a9b      	subs	r3, r3, r2
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	6858      	ldr	r0, [r3, #4]
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	685b      	ldr	r3, [r3, #4]
 8010ecc:	891a      	ldrh	r2, [r3, #8]
 8010ece:	89bb      	ldrh	r3, [r7, #12]
 8010ed0:	1ad3      	subs	r3, r2, r3
 8010ed2:	b29b      	uxth	r3, r3
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	f7fb fb15 	bl	800c504 <pbuf_realloc>
  useg->len -= remainder;
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	891a      	ldrh	r2, [r3, #8]
 8010ede:	89bb      	ldrh	r3, [r7, #12]
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	899b      	ldrh	r3, [r3, #12]
 8010eee:	b29c      	uxth	r4, r3
 8010ef0:	7efb      	ldrb	r3, [r7, #27]
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fa f875 	bl	800afe4 <lwip_htons>
 8010efa:	4603      	mov	r3, r0
 8010efc:	461a      	mov	r2, r3
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	4322      	orrs	r2, r4
 8010f04:	b292      	uxth	r2, r2
 8010f06:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fb fd07 	bl	800c920 <pbuf_clen>
 8010f12:	4603      	mov	r3, r0
 8010f14:	461a      	mov	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f1c:	4413      	add	r3, r2
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	685b      	ldr	r3, [r3, #4]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7fb fcf8 	bl	800c920 <pbuf_clen>
 8010f30:	4603      	mov	r3, r0
 8010f32:	461a      	mov	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f3a:	4413      	add	r3, r2
 8010f3c:	b29a      	uxth	r2, r3
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	681a      	ldr	r2, [r3, #0]
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	69fa      	ldr	r2, [r7, #28]
 8010f50:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d103      	bne.n	8010f62 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010f62:	2300      	movs	r3, #0
 8010f64:	e016      	b.n	8010f94 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010f66:	bf00      	nop
 8010f68:	e002      	b.n	8010f70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f6a:	bf00      	nop
 8010f6c:	e000      	b.n	8010f70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f6e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010f70:	69fb      	ldr	r3, [r7, #28]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d006      	beq.n	8010f84 <tcp_split_unsent_seg+0x25c>
 8010f76:	4b09      	ldr	r3, [pc, #36]	@ (8010f9c <tcp_split_unsent_seg+0x274>)
 8010f78:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010f7c:	490d      	ldr	r1, [pc, #52]	@ (8010fb4 <tcp_split_unsent_seg+0x28c>)
 8010f7e:	4809      	ldr	r0, [pc, #36]	@ (8010fa4 <tcp_split_unsent_seg+0x27c>)
 8010f80:	f005 f964 	bl	801624c <iprintf>
  if (p != NULL) {
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d002      	beq.n	8010f90 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010f8a:	6938      	ldr	r0, [r7, #16]
 8010f8c:	f7fb fc40 	bl	800c810 <pbuf_free>
  }

  return ERR_MEM;
 8010f90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3724      	adds	r7, #36	@ 0x24
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd90      	pop	{r4, r7, pc}
 8010f9c:	0801b13c 	.word	0x0801b13c
 8010fa0:	0801b4d0 	.word	0x0801b4d0
 8010fa4:	0801b190 	.word	0x0801b190
 8010fa8:	0801b4f4 	.word	0x0801b4f4
 8010fac:	0801b518 	.word	0x0801b518
 8010fb0:	0801b528 	.word	0x0801b528
 8010fb4:	0801b538 	.word	0x0801b538

08010fb8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010fb8:	b590      	push	{r4, r7, lr}
 8010fba:	b085      	sub	sp, #20
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d106      	bne.n	8010fd4 <tcp_send_fin+0x1c>
 8010fc6:	4b21      	ldr	r3, [pc, #132]	@ (801104c <tcp_send_fin+0x94>)
 8010fc8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010fcc:	4920      	ldr	r1, [pc, #128]	@ (8011050 <tcp_send_fin+0x98>)
 8010fce:	4821      	ldr	r0, [pc, #132]	@ (8011054 <tcp_send_fin+0x9c>)
 8010fd0:	f005 f93c 	bl	801624c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d02e      	beq.n	801103a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fe0:	60fb      	str	r3, [r7, #12]
 8010fe2:	e002      	b.n	8010fea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d1f8      	bne.n	8010fe4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	68db      	ldr	r3, [r3, #12]
 8010ff6:	899b      	ldrh	r3, [r3, #12]
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7f9 fff2 	bl	800afe4 <lwip_htons>
 8011000:	4603      	mov	r3, r0
 8011002:	b2db      	uxtb	r3, r3
 8011004:	f003 0307 	and.w	r3, r3, #7
 8011008:	2b00      	cmp	r3, #0
 801100a:	d116      	bne.n	801103a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	68db      	ldr	r3, [r3, #12]
 8011010:	899b      	ldrh	r3, [r3, #12]
 8011012:	b29c      	uxth	r4, r3
 8011014:	2001      	movs	r0, #1
 8011016:	f7f9 ffe5 	bl	800afe4 <lwip_htons>
 801101a:	4603      	mov	r3, r0
 801101c:	461a      	mov	r2, r3
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	4322      	orrs	r2, r4
 8011024:	b292      	uxth	r2, r2
 8011026:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	8b5b      	ldrh	r3, [r3, #26]
 801102c:	f043 0320 	orr.w	r3, r3, #32
 8011030:	b29a      	uxth	r2, r3
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011036:	2300      	movs	r3, #0
 8011038:	e004      	b.n	8011044 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801103a:	2101      	movs	r1, #1
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f000 f80b 	bl	8011058 <tcp_enqueue_flags>
 8011042:	4603      	mov	r3, r0
}
 8011044:	4618      	mov	r0, r3
 8011046:	3714      	adds	r7, #20
 8011048:	46bd      	mov	sp, r7
 801104a:	bd90      	pop	{r4, r7, pc}
 801104c:	0801b13c 	.word	0x0801b13c
 8011050:	0801b544 	.word	0x0801b544
 8011054:	0801b190 	.word	0x0801b190

08011058 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08a      	sub	sp, #40	@ 0x28
 801105c:	af02      	add	r7, sp, #8
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	460b      	mov	r3, r1
 8011062:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011064:	2300      	movs	r3, #0
 8011066:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011068:	2300      	movs	r3, #0
 801106a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801106c:	78fb      	ldrb	r3, [r7, #3]
 801106e:	f003 0303 	and.w	r3, r3, #3
 8011072:	2b00      	cmp	r3, #0
 8011074:	d106      	bne.n	8011084 <tcp_enqueue_flags+0x2c>
 8011076:	4b67      	ldr	r3, [pc, #412]	@ (8011214 <tcp_enqueue_flags+0x1bc>)
 8011078:	f240 4211 	movw	r2, #1041	@ 0x411
 801107c:	4966      	ldr	r1, [pc, #408]	@ (8011218 <tcp_enqueue_flags+0x1c0>)
 801107e:	4867      	ldr	r0, [pc, #412]	@ (801121c <tcp_enqueue_flags+0x1c4>)
 8011080:	f005 f8e4 	bl	801624c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d106      	bne.n	8011098 <tcp_enqueue_flags+0x40>
 801108a:	4b62      	ldr	r3, [pc, #392]	@ (8011214 <tcp_enqueue_flags+0x1bc>)
 801108c:	f240 4213 	movw	r2, #1043	@ 0x413
 8011090:	4963      	ldr	r1, [pc, #396]	@ (8011220 <tcp_enqueue_flags+0x1c8>)
 8011092:	4862      	ldr	r0, [pc, #392]	@ (801121c <tcp_enqueue_flags+0x1c4>)
 8011094:	f005 f8da 	bl	801624c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011098:	78fb      	ldrb	r3, [r7, #3]
 801109a:	f003 0302 	and.w	r3, r3, #2
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d001      	beq.n	80110a6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80110a2:	2301      	movs	r3, #1
 80110a4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80110a6:	7ffb      	ldrb	r3, [r7, #31]
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	f003 0304 	and.w	r3, r3, #4
 80110b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80110b2:	7dfb      	ldrb	r3, [r7, #23]
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80110ba:	4619      	mov	r1, r3
 80110bc:	2036      	movs	r0, #54	@ 0x36
 80110be:	f7fb f8c3 	bl	800c248 <pbuf_alloc>
 80110c2:	6138      	str	r0, [r7, #16]
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d109      	bne.n	80110de <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	8b5b      	ldrh	r3, [r3, #26]
 80110ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80110d8:	f04f 33ff 	mov.w	r3, #4294967295
 80110dc:	e095      	b.n	801120a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	895a      	ldrh	r2, [r3, #10]
 80110e2:	7dfb      	ldrb	r3, [r7, #23]
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d206      	bcs.n	80110f8 <tcp_enqueue_flags+0xa0>
 80110ea:	4b4a      	ldr	r3, [pc, #296]	@ (8011214 <tcp_enqueue_flags+0x1bc>)
 80110ec:	f240 4239 	movw	r2, #1081	@ 0x439
 80110f0:	494c      	ldr	r1, [pc, #304]	@ (8011224 <tcp_enqueue_flags+0x1cc>)
 80110f2:	484a      	ldr	r0, [pc, #296]	@ (801121c <tcp_enqueue_flags+0x1c4>)
 80110f4:	f005 f8aa 	bl	801624c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80110fc:	78fa      	ldrb	r2, [r7, #3]
 80110fe:	7ffb      	ldrb	r3, [r7, #31]
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	460b      	mov	r3, r1
 8011104:	6939      	ldr	r1, [r7, #16]
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f7ff fd72 	bl	8010bf0 <tcp_create_segment>
 801110c:	60f8      	str	r0, [r7, #12]
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d109      	bne.n	8011128 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	8b5b      	ldrh	r3, [r3, #26]
 8011118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801111c:	b29a      	uxth	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011122:	f04f 33ff 	mov.w	r3, #4294967295
 8011126:	e070      	b.n	801120a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	68db      	ldr	r3, [r3, #12]
 801112c:	f003 0303 	and.w	r3, r3, #3
 8011130:	2b00      	cmp	r3, #0
 8011132:	d006      	beq.n	8011142 <tcp_enqueue_flags+0xea>
 8011134:	4b37      	ldr	r3, [pc, #220]	@ (8011214 <tcp_enqueue_flags+0x1bc>)
 8011136:	f240 4242 	movw	r2, #1090	@ 0x442
 801113a:	493b      	ldr	r1, [pc, #236]	@ (8011228 <tcp_enqueue_flags+0x1d0>)
 801113c:	4837      	ldr	r0, [pc, #220]	@ (801121c <tcp_enqueue_flags+0x1c4>)
 801113e:	f005 f885 	bl	801624c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	891b      	ldrh	r3, [r3, #8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d006      	beq.n	8011158 <tcp_enqueue_flags+0x100>
 801114a:	4b32      	ldr	r3, [pc, #200]	@ (8011214 <tcp_enqueue_flags+0x1bc>)
 801114c:	f240 4243 	movw	r2, #1091	@ 0x443
 8011150:	4936      	ldr	r1, [pc, #216]	@ (801122c <tcp_enqueue_flags+0x1d4>)
 8011152:	4832      	ldr	r0, [pc, #200]	@ (801121c <tcp_enqueue_flags+0x1c4>)
 8011154:	f005 f87a 	bl	801624c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801115c:	2b00      	cmp	r3, #0
 801115e:	d103      	bne.n	8011168 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	68fa      	ldr	r2, [r7, #12]
 8011164:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011166:	e00d      	b.n	8011184 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801116c:	61bb      	str	r3, [r7, #24]
 801116e:	e002      	b.n	8011176 <tcp_enqueue_flags+0x11e>
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	61bb      	str	r3, [r7, #24]
 8011176:	69bb      	ldr	r3, [r7, #24]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1f8      	bne.n	8011170 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801117e:	69bb      	ldr	r3, [r7, #24]
 8011180:	68fa      	ldr	r2, [r7, #12]
 8011182:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2200      	movs	r2, #0
 8011188:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801118c:	78fb      	ldrb	r3, [r7, #3]
 801118e:	f003 0302 	and.w	r3, r3, #2
 8011192:	2b00      	cmp	r3, #0
 8011194:	d104      	bne.n	80111a0 <tcp_enqueue_flags+0x148>
 8011196:	78fb      	ldrb	r3, [r7, #3]
 8011198:	f003 0301 	and.w	r3, r3, #1
 801119c:	2b00      	cmp	r3, #0
 801119e:	d004      	beq.n	80111aa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111a4:	1c5a      	adds	r2, r3, #1
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80111aa:	78fb      	ldrb	r3, [r7, #3]
 80111ac:	f003 0301 	and.w	r3, r3, #1
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d006      	beq.n	80111c2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	8b5b      	ldrh	r3, [r3, #26]
 80111b8:	f043 0320 	orr.w	r3, r3, #32
 80111bc:	b29a      	uxth	r2, r3
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fb fbaa 	bl	800c920 <pbuf_clen>
 80111cc:	4603      	mov	r3, r0
 80111ce:	461a      	mov	r2, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80111d6:	4413      	add	r3, r2
 80111d8:	b29a      	uxth	r2, r3
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00e      	beq.n	8011208 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d10a      	bne.n	8011208 <tcp_enqueue_flags+0x1b0>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d106      	bne.n	8011208 <tcp_enqueue_flags+0x1b0>
 80111fa:	4b06      	ldr	r3, [pc, #24]	@ (8011214 <tcp_enqueue_flags+0x1bc>)
 80111fc:	f240 4265 	movw	r2, #1125	@ 0x465
 8011200:	490b      	ldr	r1, [pc, #44]	@ (8011230 <tcp_enqueue_flags+0x1d8>)
 8011202:	4806      	ldr	r0, [pc, #24]	@ (801121c <tcp_enqueue_flags+0x1c4>)
 8011204:	f005 f822 	bl	801624c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3720      	adds	r7, #32
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	0801b13c 	.word	0x0801b13c
 8011218:	0801b560 	.word	0x0801b560
 801121c:	0801b190 	.word	0x0801b190
 8011220:	0801b5b8 	.word	0x0801b5b8
 8011224:	0801b5d8 	.word	0x0801b5d8
 8011228:	0801b614 	.word	0x0801b614
 801122c:	0801b62c 	.word	0x0801b62c
 8011230:	0801b658 	.word	0x0801b658

08011234 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011234:	b5b0      	push	{r4, r5, r7, lr}
 8011236:	b08a      	sub	sp, #40	@ 0x28
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d106      	bne.n	8011250 <tcp_output+0x1c>
 8011242:	4b8a      	ldr	r3, [pc, #552]	@ (801146c <tcp_output+0x238>)
 8011244:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011248:	4989      	ldr	r1, [pc, #548]	@ (8011470 <tcp_output+0x23c>)
 801124a:	488a      	ldr	r0, [pc, #552]	@ (8011474 <tcp_output+0x240>)
 801124c:	f004 fffe 	bl	801624c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	7d1b      	ldrb	r3, [r3, #20]
 8011254:	2b01      	cmp	r3, #1
 8011256:	d106      	bne.n	8011266 <tcp_output+0x32>
 8011258:	4b84      	ldr	r3, [pc, #528]	@ (801146c <tcp_output+0x238>)
 801125a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801125e:	4986      	ldr	r1, [pc, #536]	@ (8011478 <tcp_output+0x244>)
 8011260:	4884      	ldr	r0, [pc, #528]	@ (8011474 <tcp_output+0x240>)
 8011262:	f004 fff3 	bl	801624c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011266:	4b85      	ldr	r3, [pc, #532]	@ (801147c <tcp_output+0x248>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	429a      	cmp	r2, r3
 801126e:	d101      	bne.n	8011274 <tcp_output+0x40>
    return ERR_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	e1ce      	b.n	8011612 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011280:	4293      	cmp	r3, r2
 8011282:	bf28      	it	cs
 8011284:	4613      	movcs	r3, r2
 8011286:	b29b      	uxth	r3, r3
 8011288:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801128e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011292:	2b00      	cmp	r3, #0
 8011294:	d10b      	bne.n	80112ae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	8b5b      	ldrh	r3, [r3, #26]
 801129a:	f003 0302 	and.w	r3, r3, #2
 801129e:	2b00      	cmp	r3, #0
 80112a0:	f000 81aa 	beq.w	80115f8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f000 fdcb 	bl	8011e40 <tcp_send_empty_ack>
 80112aa:	4603      	mov	r3, r0
 80112ac:	e1b1      	b.n	8011612 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80112ae:	6879      	ldr	r1, [r7, #4]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	3304      	adds	r3, #4
 80112b4:	461a      	mov	r2, r3
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f7ff fc7e 	bl	8010bb8 <tcp_route>
 80112bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d102      	bne.n	80112ca <tcp_output+0x96>
    return ERR_RTE;
 80112c4:	f06f 0303 	mvn.w	r3, #3
 80112c8:	e1a3      	b.n	8011612 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d003      	beq.n	80112d8 <tcp_output+0xa4>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d111      	bne.n	80112fc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d002      	beq.n	80112e4 <tcp_output+0xb0>
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	3304      	adds	r3, #4
 80112e2:	e000      	b.n	80112e6 <tcp_output+0xb2>
 80112e4:	2300      	movs	r3, #0
 80112e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d102      	bne.n	80112f4 <tcp_output+0xc0>
      return ERR_RTE;
 80112ee:	f06f 0303 	mvn.w	r3, #3
 80112f2:	e18e      	b.n	8011612 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80112fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	4618      	mov	r0, r3
 8011304:	f7f9 fe84 	bl	800b010 <lwip_htonl>
 8011308:	4602      	mov	r2, r0
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011312:	8912      	ldrh	r2, [r2, #8]
 8011314:	4413      	add	r3, r2
 8011316:	69ba      	ldr	r2, [r7, #24]
 8011318:	429a      	cmp	r2, r3
 801131a:	d227      	bcs.n	801136c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011322:	461a      	mov	r2, r3
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	4293      	cmp	r3, r2
 8011328:	d114      	bne.n	8011354 <tcp_output+0x120>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801132e:	2b00      	cmp	r3, #0
 8011330:	d110      	bne.n	8011354 <tcp_output+0x120>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011338:	2b00      	cmp	r3, #0
 801133a:	d10b      	bne.n	8011354 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2201      	movs	r2, #1
 8011348:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2200      	movs	r2, #0
 8011350:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	8b5b      	ldrh	r3, [r3, #26]
 8011358:	f003 0302 	and.w	r3, r3, #2
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 814d 	beq.w	80115fc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fd6c 	bl	8011e40 <tcp_send_empty_ack>
 8011368:	4603      	mov	r3, r0
 801136a:	e152      	b.n	8011612 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2200      	movs	r2, #0
 8011370:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011378:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801137a:	6a3b      	ldr	r3, [r7, #32]
 801137c:	2b00      	cmp	r3, #0
 801137e:	f000 811c 	beq.w	80115ba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011382:	e002      	b.n	801138a <tcp_output+0x156>
 8011384:	6a3b      	ldr	r3, [r7, #32]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	623b      	str	r3, [r7, #32]
 801138a:	6a3b      	ldr	r3, [r7, #32]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d1f8      	bne.n	8011384 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011392:	e112      	b.n	80115ba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	899b      	ldrh	r3, [r3, #12]
 801139a:	b29b      	uxth	r3, r3
 801139c:	4618      	mov	r0, r3
 801139e:	f7f9 fe21 	bl	800afe4 <lwip_htons>
 80113a2:	4603      	mov	r3, r0
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	f003 0304 	and.w	r3, r3, #4
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d006      	beq.n	80113bc <tcp_output+0x188>
 80113ae:	4b2f      	ldr	r3, [pc, #188]	@ (801146c <tcp_output+0x238>)
 80113b0:	f240 5236 	movw	r2, #1334	@ 0x536
 80113b4:	4932      	ldr	r1, [pc, #200]	@ (8011480 <tcp_output+0x24c>)
 80113b6:	482f      	ldr	r0, [pc, #188]	@ (8011474 <tcp_output+0x240>)
 80113b8:	f004 ff48 	bl	801624c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d01f      	beq.n	8011404 <tcp_output+0x1d0>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	8b5b      	ldrh	r3, [r3, #26]
 80113c8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d119      	bne.n	8011404 <tcp_output+0x1d0>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d00b      	beq.n	80113f0 <tcp_output+0x1bc>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d110      	bne.n	8011404 <tcp_output+0x1d0>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113e6:	891a      	ldrh	r2, [r3, #8]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d209      	bcs.n	8011404 <tcp_output+0x1d0>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d004      	beq.n	8011404 <tcp_output+0x1d0>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011400:	2b08      	cmp	r3, #8
 8011402:	d901      	bls.n	8011408 <tcp_output+0x1d4>
 8011404:	2301      	movs	r3, #1
 8011406:	e000      	b.n	801140a <tcp_output+0x1d6>
 8011408:	2300      	movs	r3, #0
 801140a:	2b00      	cmp	r3, #0
 801140c:	d106      	bne.n	801141c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	8b5b      	ldrh	r3, [r3, #26]
 8011412:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011416:	2b00      	cmp	r3, #0
 8011418:	f000 80e4 	beq.w	80115e4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	7d1b      	ldrb	r3, [r3, #20]
 8011420:	2b02      	cmp	r3, #2
 8011422:	d00d      	beq.n	8011440 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	899b      	ldrh	r3, [r3, #12]
 801142a:	b29c      	uxth	r4, r3
 801142c:	2010      	movs	r0, #16
 801142e:	f7f9 fdd9 	bl	800afe4 <lwip_htons>
 8011432:	4603      	mov	r3, r0
 8011434:	461a      	mov	r2, r3
 8011436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011438:	68db      	ldr	r3, [r3, #12]
 801143a:	4322      	orrs	r2, r4
 801143c:	b292      	uxth	r2, r2
 801143e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011440:	697a      	ldr	r2, [r7, #20]
 8011442:	6879      	ldr	r1, [r7, #4]
 8011444:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011446:	f000 f909 	bl	801165c <tcp_output_segment>
 801144a:	4603      	mov	r3, r0
 801144c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d016      	beq.n	8011484 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	8b5b      	ldrh	r3, [r3, #26]
 801145a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801145e:	b29a      	uxth	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	835a      	strh	r2, [r3, #26]
      return err;
 8011464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011468:	e0d3      	b.n	8011612 <tcp_output+0x3de>
 801146a:	bf00      	nop
 801146c:	0801b13c 	.word	0x0801b13c
 8011470:	0801b680 	.word	0x0801b680
 8011474:	0801b190 	.word	0x0801b190
 8011478:	0801b698 	.word	0x0801b698
 801147c:	240082d0 	.word	0x240082d0
 8011480:	0801b6c0 	.word	0x0801b6c0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	7d1b      	ldrb	r3, [r3, #20]
 8011490:	2b02      	cmp	r3, #2
 8011492:	d006      	beq.n	80114a2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	8b5b      	ldrh	r3, [r3, #26]
 8011498:	f023 0303 	bic.w	r3, r3, #3
 801149c:	b29a      	uxth	r2, r3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80114a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7f9 fdb1 	bl	800b010 <lwip_htonl>
 80114ae:	4604      	mov	r4, r0
 80114b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b2:	891b      	ldrh	r3, [r3, #8]
 80114b4:	461d      	mov	r5, r3
 80114b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	899b      	ldrh	r3, [r3, #12]
 80114bc:	b29b      	uxth	r3, r3
 80114be:	4618      	mov	r0, r3
 80114c0:	f7f9 fd90 	bl	800afe4 <lwip_htons>
 80114c4:	4603      	mov	r3, r0
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	f003 0303 	and.w	r3, r3, #3
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d001      	beq.n	80114d4 <tcp_output+0x2a0>
 80114d0:	2301      	movs	r3, #1
 80114d2:	e000      	b.n	80114d6 <tcp_output+0x2a2>
 80114d4:	2300      	movs	r3, #0
 80114d6:	442b      	add	r3, r5
 80114d8:	4423      	add	r3, r4
 80114da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	1ad3      	subs	r3, r2, r3
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	da02      	bge.n	80114ee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	68ba      	ldr	r2, [r7, #8]
 80114ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80114ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f0:	891b      	ldrh	r3, [r3, #8]
 80114f2:	461c      	mov	r4, r3
 80114f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	899b      	ldrh	r3, [r3, #12]
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7f9 fd71 	bl	800afe4 <lwip_htons>
 8011502:	4603      	mov	r3, r0
 8011504:	b2db      	uxtb	r3, r3
 8011506:	f003 0303 	and.w	r3, r3, #3
 801150a:	2b00      	cmp	r3, #0
 801150c:	d001      	beq.n	8011512 <tcp_output+0x2de>
 801150e:	2301      	movs	r3, #1
 8011510:	e000      	b.n	8011514 <tcp_output+0x2e0>
 8011512:	2300      	movs	r3, #0
 8011514:	4423      	add	r3, r4
 8011516:	2b00      	cmp	r3, #0
 8011518:	d049      	beq.n	80115ae <tcp_output+0x37a>
      seg->next = NULL;
 801151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151c:	2200      	movs	r2, #0
 801151e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011524:	2b00      	cmp	r3, #0
 8011526:	d105      	bne.n	8011534 <tcp_output+0x300>
        pcb->unacked = seg;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801152c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011530:	623b      	str	r3, [r7, #32]
 8011532:	e03f      	b.n	80115b4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	4618      	mov	r0, r3
 801153c:	f7f9 fd68 	bl	800b010 <lwip_htonl>
 8011540:	4604      	mov	r4, r0
 8011542:	6a3b      	ldr	r3, [r7, #32]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	4618      	mov	r0, r3
 801154a:	f7f9 fd61 	bl	800b010 <lwip_htonl>
 801154e:	4603      	mov	r3, r0
 8011550:	1ae3      	subs	r3, r4, r3
 8011552:	2b00      	cmp	r3, #0
 8011554:	da24      	bge.n	80115a0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	3370      	adds	r3, #112	@ 0x70
 801155a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801155c:	e002      	b.n	8011564 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d011      	beq.n	8011590 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	4618      	mov	r0, r3
 8011576:	f7f9 fd4b 	bl	800b010 <lwip_htonl>
 801157a:	4604      	mov	r4, r0
 801157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157e:	68db      	ldr	r3, [r3, #12]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	4618      	mov	r0, r3
 8011584:	f7f9 fd44 	bl	800b010 <lwip_htonl>
 8011588:	4603      	mov	r3, r0
 801158a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801158c:	2b00      	cmp	r3, #0
 801158e:	dbe6      	blt.n	801155e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011596:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801159c:	601a      	str	r2, [r3, #0]
 801159e:	e009      	b.n	80115b4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80115a0:	6a3b      	ldr	r3, [r7, #32]
 80115a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115a4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80115a6:	6a3b      	ldr	r3, [r7, #32]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	623b      	str	r3, [r7, #32]
 80115ac:	e002      	b.n	80115b4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80115ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80115b0:	f7fc fc45 	bl	800de3e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80115ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d012      	beq.n	80115e6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80115c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7f9 fd22 	bl	800b010 <lwip_htonl>
 80115cc:	4602      	mov	r2, r0
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115d2:	1ad3      	subs	r3, r2, r3
 80115d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115d6:	8912      	ldrh	r2, [r2, #8]
 80115d8:	4413      	add	r3, r2
  while (seg != NULL &&
 80115da:	69ba      	ldr	r2, [r7, #24]
 80115dc:	429a      	cmp	r2, r3
 80115de:	f4bf aed9 	bcs.w	8011394 <tcp_output+0x160>
 80115e2:	e000      	b.n	80115e6 <tcp_output+0x3b2>
      break;
 80115e4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d108      	bne.n	8011600 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2200      	movs	r2, #0
 80115f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80115f6:	e004      	b.n	8011602 <tcp_output+0x3ce>
    goto output_done;
 80115f8:	bf00      	nop
 80115fa:	e002      	b.n	8011602 <tcp_output+0x3ce>
    goto output_done;
 80115fc:	bf00      	nop
 80115fe:	e000      	b.n	8011602 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011600:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	8b5b      	ldrh	r3, [r3, #26]
 8011606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801160a:	b29a      	uxth	r2, r3
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011610:	2300      	movs	r3, #0
}
 8011612:	4618      	mov	r0, r3
 8011614:	3728      	adds	r7, #40	@ 0x28
 8011616:	46bd      	mov	sp, r7
 8011618:	bdb0      	pop	{r4, r5, r7, pc}
 801161a:	bf00      	nop

0801161c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d106      	bne.n	8011638 <tcp_output_segment_busy+0x1c>
 801162a:	4b09      	ldr	r3, [pc, #36]	@ (8011650 <tcp_output_segment_busy+0x34>)
 801162c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011630:	4908      	ldr	r1, [pc, #32]	@ (8011654 <tcp_output_segment_busy+0x38>)
 8011632:	4809      	ldr	r0, [pc, #36]	@ (8011658 <tcp_output_segment_busy+0x3c>)
 8011634:	f004 fe0a 	bl	801624c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	7b9b      	ldrb	r3, [r3, #14]
 801163e:	2b01      	cmp	r3, #1
 8011640:	d001      	beq.n	8011646 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011642:	2301      	movs	r3, #1
 8011644:	e000      	b.n	8011648 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011646:	2300      	movs	r3, #0
}
 8011648:	4618      	mov	r0, r3
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	0801b13c 	.word	0x0801b13c
 8011654:	0801b6d8 	.word	0x0801b6d8
 8011658:	0801b190 	.word	0x0801b190

0801165c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801165c:	b5b0      	push	{r4, r5, r7, lr}
 801165e:	b08c      	sub	sp, #48	@ 0x30
 8011660:	af04      	add	r7, sp, #16
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d106      	bne.n	801167c <tcp_output_segment+0x20>
 801166e:	4b64      	ldr	r3, [pc, #400]	@ (8011800 <tcp_output_segment+0x1a4>)
 8011670:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011674:	4963      	ldr	r1, [pc, #396]	@ (8011804 <tcp_output_segment+0x1a8>)
 8011676:	4864      	ldr	r0, [pc, #400]	@ (8011808 <tcp_output_segment+0x1ac>)
 8011678:	f004 fde8 	bl	801624c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d106      	bne.n	8011690 <tcp_output_segment+0x34>
 8011682:	4b5f      	ldr	r3, [pc, #380]	@ (8011800 <tcp_output_segment+0x1a4>)
 8011684:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011688:	4960      	ldr	r1, [pc, #384]	@ (801180c <tcp_output_segment+0x1b0>)
 801168a:	485f      	ldr	r0, [pc, #380]	@ (8011808 <tcp_output_segment+0x1ac>)
 801168c:	f004 fdde 	bl	801624c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d106      	bne.n	80116a4 <tcp_output_segment+0x48>
 8011696:	4b5a      	ldr	r3, [pc, #360]	@ (8011800 <tcp_output_segment+0x1a4>)
 8011698:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801169c:	495c      	ldr	r1, [pc, #368]	@ (8011810 <tcp_output_segment+0x1b4>)
 801169e:	485a      	ldr	r0, [pc, #360]	@ (8011808 <tcp_output_segment+0x1ac>)
 80116a0:	f004 fdd4 	bl	801624c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f7ff ffb9 	bl	801161c <tcp_output_segment_busy>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d001      	beq.n	80116b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80116b0:	2300      	movs	r3, #0
 80116b2:	e0a1      	b.n	80117f8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	68dc      	ldr	r4, [r3, #12]
 80116bc:	4610      	mov	r0, r2
 80116be:	f7f9 fca7 	bl	800b010 <lwip_htonl>
 80116c2:	4603      	mov	r3, r0
 80116c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	68dc      	ldr	r4, [r3, #12]
 80116ce:	4610      	mov	r0, r2
 80116d0:	f7f9 fc88 	bl	800afe4 <lwip_htons>
 80116d4:	4603      	mov	r3, r0
 80116d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116dc:	68ba      	ldr	r2, [r7, #8]
 80116de:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80116e0:	441a      	add	r2, r3
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	68db      	ldr	r3, [r3, #12]
 80116ea:	3314      	adds	r3, #20
 80116ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	7a9b      	ldrb	r3, [r3, #10]
 80116f2:	f003 0301 	and.w	r3, r3, #1
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d015      	beq.n	8011726 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	3304      	adds	r3, #4
 80116fe:	461a      	mov	r2, r3
 8011700:	6879      	ldr	r1, [r7, #4]
 8011702:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8011706:	f7fc fe91 	bl	800e42c <tcp_eff_send_mss_netif>
 801170a:	4603      	mov	r3, r0
 801170c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801170e:	8b7b      	ldrh	r3, [r7, #26]
 8011710:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011714:	4618      	mov	r0, r3
 8011716:	f7f9 fc7b 	bl	800b010 <lwip_htonl>
 801171a:	4602      	mov	r2, r0
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011720:	69fb      	ldr	r3, [r7, #28]
 8011722:	3304      	adds	r3, #4
 8011724:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801172c:	2b00      	cmp	r3, #0
 801172e:	da02      	bge.n	8011736 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	2200      	movs	r2, #0
 8011734:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801173a:	2b00      	cmp	r3, #0
 801173c:	d10c      	bne.n	8011758 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801173e:	4b35      	ldr	r3, [pc, #212]	@ (8011814 <tcp_output_segment+0x1b8>)
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	4618      	mov	r0, r3
 801174e:	f7f9 fc5f 	bl	800b010 <lwip_htonl>
 8011752:	4602      	mov	r2, r0
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	68da      	ldr	r2, [r3, #12]
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	1ad3      	subs	r3, r2, r3
 8011764:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	8959      	ldrh	r1, [r3, #10]
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	8b3a      	ldrh	r2, [r7, #24]
 8011772:	1a8a      	subs	r2, r1, r2
 8011774:	b292      	uxth	r2, r2
 8011776:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	8919      	ldrh	r1, [r3, #8]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	8b3a      	ldrh	r2, [r7, #24]
 8011784:	1a8a      	subs	r2, r1, r2
 8011786:	b292      	uxth	r2, r2
 8011788:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	68fa      	ldr	r2, [r7, #12]
 8011790:	68d2      	ldr	r2, [r2, #12]
 8011792:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	2200      	movs	r2, #0
 801179a:	741a      	strb	r2, [r3, #16]
 801179c:	2200      	movs	r2, #0
 801179e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	68da      	ldr	r2, [r3, #12]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	7a9b      	ldrb	r3, [r3, #10]
 80117a8:	f003 0301 	and.w	r3, r3, #1
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d001      	beq.n	80117b4 <tcp_output_segment+0x158>
 80117b0:	2318      	movs	r3, #24
 80117b2:	e000      	b.n	80117b6 <tcp_output_segment+0x15a>
 80117b4:	2314      	movs	r3, #20
 80117b6:	4413      	add	r3, r2
 80117b8:	69fa      	ldr	r2, [r7, #28]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d006      	beq.n	80117cc <tcp_output_segment+0x170>
 80117be:	4b10      	ldr	r3, [pc, #64]	@ (8011800 <tcp_output_segment+0x1a4>)
 80117c0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80117c4:	4914      	ldr	r1, [pc, #80]	@ (8011818 <tcp_output_segment+0x1bc>)
 80117c6:	4810      	ldr	r0, [pc, #64]	@ (8011808 <tcp_output_segment+0x1ac>)
 80117c8:	f004 fd40 	bl	801624c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	6858      	ldr	r0, [r3, #4]
 80117d0:	68b9      	ldr	r1, [r7, #8]
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	1d1c      	adds	r4, r3, #4
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	7add      	ldrb	r5, [r3, #11]
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	7a9b      	ldrb	r3, [r3, #10]
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	9202      	str	r2, [sp, #8]
 80117e2:	2206      	movs	r2, #6
 80117e4:	9201      	str	r2, [sp, #4]
 80117e6:	9300      	str	r3, [sp, #0]
 80117e8:	462b      	mov	r3, r5
 80117ea:	4622      	mov	r2, r4
 80117ec:	f002 fd4a 	bl	8014284 <ip4_output_if>
 80117f0:	4603      	mov	r3, r0
 80117f2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80117f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3720      	adds	r7, #32
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bdb0      	pop	{r4, r5, r7, pc}
 8011800:	0801b13c 	.word	0x0801b13c
 8011804:	0801b700 	.word	0x0801b700
 8011808:	0801b190 	.word	0x0801b190
 801180c:	0801b720 	.word	0x0801b720
 8011810:	0801b740 	.word	0x0801b740
 8011814:	24008284 	.word	0x24008284
 8011818:	0801b764 	.word	0x0801b764

0801181c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801181c:	b5b0      	push	{r4, r5, r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d106      	bne.n	8011838 <tcp_rexmit_rto_prepare+0x1c>
 801182a:	4b31      	ldr	r3, [pc, #196]	@ (80118f0 <tcp_rexmit_rto_prepare+0xd4>)
 801182c:	f240 6263 	movw	r2, #1635	@ 0x663
 8011830:	4930      	ldr	r1, [pc, #192]	@ (80118f4 <tcp_rexmit_rto_prepare+0xd8>)
 8011832:	4831      	ldr	r0, [pc, #196]	@ (80118f8 <tcp_rexmit_rto_prepare+0xdc>)
 8011834:	f004 fd0a 	bl	801624c <iprintf>

  if (pcb->unacked == NULL) {
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801183c:	2b00      	cmp	r3, #0
 801183e:	d102      	bne.n	8011846 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011840:	f06f 0305 	mvn.w	r3, #5
 8011844:	e050      	b.n	80118e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801184a:	60fb      	str	r3, [r7, #12]
 801184c:	e00b      	b.n	8011866 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f7ff fee4 	bl	801161c <tcp_output_segment_busy>
 8011854:	4603      	mov	r3, r0
 8011856:	2b00      	cmp	r3, #0
 8011858:	d002      	beq.n	8011860 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801185a:	f06f 0305 	mvn.w	r3, #5
 801185e:	e043      	b.n	80118e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	60fb      	str	r3, [r7, #12]
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d1ef      	bne.n	801184e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	f7ff fed4 	bl	801161c <tcp_output_segment_busy>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d002      	beq.n	8011880 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801187a:	f06f 0305 	mvn.w	r3, #5
 801187e:	e033      	b.n	80118e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2200      	movs	r2, #0
 8011894:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	8b5b      	ldrh	r3, [r3, #26]
 801189a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801189e:	b29a      	uxth	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	68db      	ldr	r3, [r3, #12]
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7f9 fbb0 	bl	800b010 <lwip_htonl>
 80118b0:	4604      	mov	r4, r0
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	891b      	ldrh	r3, [r3, #8]
 80118b6:	461d      	mov	r5, r3
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	68db      	ldr	r3, [r3, #12]
 80118bc:	899b      	ldrh	r3, [r3, #12]
 80118be:	b29b      	uxth	r3, r3
 80118c0:	4618      	mov	r0, r3
 80118c2:	f7f9 fb8f 	bl	800afe4 <lwip_htons>
 80118c6:	4603      	mov	r3, r0
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	f003 0303 	and.w	r3, r3, #3
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d001      	beq.n	80118d6 <tcp_rexmit_rto_prepare+0xba>
 80118d2:	2301      	movs	r3, #1
 80118d4:	e000      	b.n	80118d8 <tcp_rexmit_rto_prepare+0xbc>
 80118d6:	2300      	movs	r3, #0
 80118d8:	442b      	add	r3, r5
 80118da:	18e2      	adds	r2, r4, r3
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80118e6:	2300      	movs	r3, #0
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3710      	adds	r7, #16
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bdb0      	pop	{r4, r5, r7, pc}
 80118f0:	0801b13c 	.word	0x0801b13c
 80118f4:	0801b778 	.word	0x0801b778
 80118f8:	0801b190 	.word	0x0801b190

080118fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d106      	bne.n	8011918 <tcp_rexmit_rto_commit+0x1c>
 801190a:	4b0d      	ldr	r3, [pc, #52]	@ (8011940 <tcp_rexmit_rto_commit+0x44>)
 801190c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011910:	490c      	ldr	r1, [pc, #48]	@ (8011944 <tcp_rexmit_rto_commit+0x48>)
 8011912:	480d      	ldr	r0, [pc, #52]	@ (8011948 <tcp_rexmit_rto_commit+0x4c>)
 8011914:	f004 fc9a 	bl	801624c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801191e:	2bff      	cmp	r3, #255	@ 0xff
 8011920:	d007      	beq.n	8011932 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011928:	3301      	adds	r3, #1
 801192a:	b2da      	uxtb	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f7ff fc7e 	bl	8011234 <tcp_output>
}
 8011938:	bf00      	nop
 801193a:	3708      	adds	r7, #8
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}
 8011940:	0801b13c 	.word	0x0801b13c
 8011944:	0801b79c 	.word	0x0801b79c
 8011948:	0801b190 	.word	0x0801b190

0801194c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d106      	bne.n	8011968 <tcp_rexmit_rto+0x1c>
 801195a:	4b0a      	ldr	r3, [pc, #40]	@ (8011984 <tcp_rexmit_rto+0x38>)
 801195c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8011960:	4909      	ldr	r1, [pc, #36]	@ (8011988 <tcp_rexmit_rto+0x3c>)
 8011962:	480a      	ldr	r0, [pc, #40]	@ (801198c <tcp_rexmit_rto+0x40>)
 8011964:	f004 fc72 	bl	801624c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f7ff ff57 	bl	801181c <tcp_rexmit_rto_prepare>
 801196e:	4603      	mov	r3, r0
 8011970:	2b00      	cmp	r3, #0
 8011972:	d102      	bne.n	801197a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7ff ffc1 	bl	80118fc <tcp_rexmit_rto_commit>
  }
}
 801197a:	bf00      	nop
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	0801b13c 	.word	0x0801b13c
 8011988:	0801b7c0 	.word	0x0801b7c0
 801198c:	0801b190 	.word	0x0801b190

08011990 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011990:	b590      	push	{r4, r7, lr}
 8011992:	b085      	sub	sp, #20
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d106      	bne.n	80119ac <tcp_rexmit+0x1c>
 801199e:	4b2f      	ldr	r3, [pc, #188]	@ (8011a5c <tcp_rexmit+0xcc>)
 80119a0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80119a4:	492e      	ldr	r1, [pc, #184]	@ (8011a60 <tcp_rexmit+0xd0>)
 80119a6:	482f      	ldr	r0, [pc, #188]	@ (8011a64 <tcp_rexmit+0xd4>)
 80119a8:	f004 fc50 	bl	801624c <iprintf>

  if (pcb->unacked == NULL) {
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d102      	bne.n	80119ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 80119b4:	f06f 0305 	mvn.w	r3, #5
 80119b8:	e04c      	b.n	8011a54 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80119c0:	68b8      	ldr	r0, [r7, #8]
 80119c2:	f7ff fe2b 	bl	801161c <tcp_output_segment_busy>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d002      	beq.n	80119d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80119cc:	f06f 0305 	mvn.w	r3, #5
 80119d0:	e040      	b.n	8011a54 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	336c      	adds	r3, #108	@ 0x6c
 80119de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119e0:	e002      	b.n	80119e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d011      	beq.n	8011a14 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7f9 fb09 	bl	800b010 <lwip_htonl>
 80119fe:	4604      	mov	r4, r0
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7f9 fb02 	bl	800b010 <lwip_htonl>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	dbe6      	blt.n	80119e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	68ba      	ldr	r2, [r7, #8]
 8011a20:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d103      	bne.n	8011a32 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011a38:	2bff      	cmp	r3, #255	@ 0xff
 8011a3a:	d007      	beq.n	8011a4c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011a42:	3301      	adds	r3, #1
 8011a44:	b2da      	uxtb	r2, r3
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011a52:	2300      	movs	r3, #0
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	3714      	adds	r7, #20
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd90      	pop	{r4, r7, pc}
 8011a5c:	0801b13c 	.word	0x0801b13c
 8011a60:	0801b7dc 	.word	0x0801b7dc
 8011a64:	0801b190 	.word	0x0801b190

08011a68 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d106      	bne.n	8011a84 <tcp_rexmit_fast+0x1c>
 8011a76:	4b2a      	ldr	r3, [pc, #168]	@ (8011b20 <tcp_rexmit_fast+0xb8>)
 8011a78:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8011a7c:	4929      	ldr	r1, [pc, #164]	@ (8011b24 <tcp_rexmit_fast+0xbc>)
 8011a7e:	482a      	ldr	r0, [pc, #168]	@ (8011b28 <tcp_rexmit_fast+0xc0>)
 8011a80:	f004 fbe4 	bl	801624c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d045      	beq.n	8011b18 <tcp_rexmit_fast+0xb0>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	8b5b      	ldrh	r3, [r3, #26]
 8011a90:	f003 0304 	and.w	r3, r3, #4
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d13f      	bne.n	8011b18 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f7ff ff79 	bl	8011990 <tcp_rexmit>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d139      	bne.n	8011b18 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	bf28      	it	cs
 8011ab4:	4613      	movcs	r3, r2
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	da00      	bge.n	8011abe <tcp_rexmit_fast+0x56>
 8011abc:	3301      	adds	r3, #1
 8011abe:	105b      	asrs	r3, r3, #1
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011ace:	461a      	mov	r2, r3
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ad4:	005b      	lsls	r3, r3, #1
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d206      	bcs.n	8011ae8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ade:	005b      	lsls	r3, r3, #1
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011af2:	4619      	mov	r1, r3
 8011af4:	0049      	lsls	r1, r1, #1
 8011af6:	440b      	add	r3, r1
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	4413      	add	r3, r2
 8011afc:	b29a      	uxth	r2, r3
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	8b5b      	ldrh	r3, [r3, #26]
 8011b08:	f043 0304 	orr.w	r3, r3, #4
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011b18:	bf00      	nop
 8011b1a:	3708      	adds	r7, #8
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}
 8011b20:	0801b13c 	.word	0x0801b13c
 8011b24:	0801b7f4 	.word	0x0801b7f4
 8011b28:	0801b190 	.word	0x0801b190

08011b2c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b086      	sub	sp, #24
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	60f8      	str	r0, [r7, #12]
 8011b34:	607b      	str	r3, [r7, #4]
 8011b36:	460b      	mov	r3, r1
 8011b38:	817b      	strh	r3, [r7, #10]
 8011b3a:	4613      	mov	r3, r2
 8011b3c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011b3e:	897a      	ldrh	r2, [r7, #10]
 8011b40:	893b      	ldrh	r3, [r7, #8]
 8011b42:	4413      	add	r3, r2
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	3314      	adds	r3, #20
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011b4e:	4619      	mov	r1, r3
 8011b50:	2022      	movs	r0, #34	@ 0x22
 8011b52:	f7fa fb79 	bl	800c248 <pbuf_alloc>
 8011b56:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d04d      	beq.n	8011bfa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011b5e:	897b      	ldrh	r3, [r7, #10]
 8011b60:	3313      	adds	r3, #19
 8011b62:	697a      	ldr	r2, [r7, #20]
 8011b64:	8952      	ldrh	r2, [r2, #10]
 8011b66:	4293      	cmp	r3, r2
 8011b68:	db06      	blt.n	8011b78 <tcp_output_alloc_header_common+0x4c>
 8011b6a:	4b26      	ldr	r3, [pc, #152]	@ (8011c04 <tcp_output_alloc_header_common+0xd8>)
 8011b6c:	f240 7223 	movw	r2, #1827	@ 0x723
 8011b70:	4925      	ldr	r1, [pc, #148]	@ (8011c08 <tcp_output_alloc_header_common+0xdc>)
 8011b72:	4826      	ldr	r0, [pc, #152]	@ (8011c0c <tcp_output_alloc_header_common+0xe0>)
 8011b74:	f004 fb6a 	bl	801624c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011b7e:	8c3b      	ldrh	r3, [r7, #32]
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7f9 fa2f 	bl	800afe4 <lwip_htons>
 8011b86:	4603      	mov	r3, r0
 8011b88:	461a      	mov	r2, r3
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011b8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7f9 fa27 	bl	800afe4 <lwip_htons>
 8011b96:	4603      	mov	r3, r0
 8011b98:	461a      	mov	r2, r3
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f7f9 fa33 	bl	800b010 <lwip_htonl>
 8011baa:	4602      	mov	r2, r0
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011bb0:	897b      	ldrh	r3, [r7, #10]
 8011bb2:	089b      	lsrs	r3, r3, #2
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	3305      	adds	r3, #5
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	031b      	lsls	r3, r3, #12
 8011bbc:	b29a      	uxth	r2, r3
 8011bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	4313      	orrs	r3, r2
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7f9 fa0b 	bl	800afe4 <lwip_htons>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011bd6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7f9 fa03 	bl	800afe4 <lwip_htons>
 8011bde:	4603      	mov	r3, r0
 8011be0:	461a      	mov	r2, r3
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	2200      	movs	r2, #0
 8011bea:	741a      	strb	r2, [r3, #16]
 8011bec:	2200      	movs	r2, #0
 8011bee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	749a      	strb	r2, [r3, #18]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011bfa:	697b      	ldr	r3, [r7, #20]
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3718      	adds	r7, #24
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	0801b13c 	.word	0x0801b13c
 8011c08:	0801b814 	.word	0x0801b814
 8011c0c:	0801b190 	.word	0x0801b190

08011c10 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011c10:	b5b0      	push	{r4, r5, r7, lr}
 8011c12:	b08a      	sub	sp, #40	@ 0x28
 8011c14:	af04      	add	r7, sp, #16
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	607b      	str	r3, [r7, #4]
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	817b      	strh	r3, [r7, #10]
 8011c1e:	4613      	mov	r3, r2
 8011c20:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d106      	bne.n	8011c36 <tcp_output_alloc_header+0x26>
 8011c28:	4b15      	ldr	r3, [pc, #84]	@ (8011c80 <tcp_output_alloc_header+0x70>)
 8011c2a:	f240 7242 	movw	r2, #1858	@ 0x742
 8011c2e:	4915      	ldr	r1, [pc, #84]	@ (8011c84 <tcp_output_alloc_header+0x74>)
 8011c30:	4815      	ldr	r0, [pc, #84]	@ (8011c88 <tcp_output_alloc_header+0x78>)
 8011c32:	f004 fb0b 	bl	801624c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	8adb      	ldrh	r3, [r3, #22]
 8011c3e:	68fa      	ldr	r2, [r7, #12]
 8011c40:	8b12      	ldrh	r2, [r2, #24]
 8011c42:	68f9      	ldr	r1, [r7, #12]
 8011c44:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8011c46:	893d      	ldrh	r5, [r7, #8]
 8011c48:	897c      	ldrh	r4, [r7, #10]
 8011c4a:	9103      	str	r1, [sp, #12]
 8011c4c:	2110      	movs	r1, #16
 8011c4e:	9102      	str	r1, [sp, #8]
 8011c50:	9201      	str	r2, [sp, #4]
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	462a      	mov	r2, r5
 8011c58:	4621      	mov	r1, r4
 8011c5a:	f7ff ff67 	bl	8011b2c <tcp_output_alloc_header_common>
 8011c5e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d006      	beq.n	8011c74 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c6a:	68fa      	ldr	r2, [r7, #12]
 8011c6c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011c6e:	441a      	add	r2, r3
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011c74:	697b      	ldr	r3, [r7, #20]
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3718      	adds	r7, #24
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	0801b13c 	.word	0x0801b13c
 8011c84:	0801b844 	.word	0x0801b844
 8011c88:	0801b190 	.word	0x0801b190

08011c8c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b088      	sub	sp, #32
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	60f8      	str	r0, [r7, #12]
 8011c94:	60b9      	str	r1, [r7, #8]
 8011c96:	4611      	mov	r1, r2
 8011c98:	461a      	mov	r2, r3
 8011c9a:	460b      	mov	r3, r1
 8011c9c:	71fb      	strb	r3, [r7, #7]
 8011c9e:	4613      	mov	r3, r2
 8011ca0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d106      	bne.n	8011cba <tcp_output_fill_options+0x2e>
 8011cac:	4b12      	ldr	r3, [pc, #72]	@ (8011cf8 <tcp_output_fill_options+0x6c>)
 8011cae:	f240 7256 	movw	r2, #1878	@ 0x756
 8011cb2:	4912      	ldr	r1, [pc, #72]	@ (8011cfc <tcp_output_fill_options+0x70>)
 8011cb4:	4812      	ldr	r0, [pc, #72]	@ (8011d00 <tcp_output_fill_options+0x74>)
 8011cb6:	f004 fac9 	bl	801624c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	3314      	adds	r3, #20
 8011cc4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011cc6:	8bfb      	ldrh	r3, [r7, #30]
 8011cc8:	009b      	lsls	r3, r3, #2
 8011cca:	461a      	mov	r2, r3
 8011ccc:	79fb      	ldrb	r3, [r7, #7]
 8011cce:	009b      	lsls	r3, r3, #2
 8011cd0:	f003 0304 	and.w	r3, r3, #4
 8011cd4:	4413      	add	r3, r2
 8011cd6:	3314      	adds	r3, #20
 8011cd8:	69ba      	ldr	r2, [r7, #24]
 8011cda:	4413      	add	r3, r2
 8011cdc:	697a      	ldr	r2, [r7, #20]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d006      	beq.n	8011cf0 <tcp_output_fill_options+0x64>
 8011ce2:	4b05      	ldr	r3, [pc, #20]	@ (8011cf8 <tcp_output_fill_options+0x6c>)
 8011ce4:	f240 7275 	movw	r2, #1909	@ 0x775
 8011ce8:	4906      	ldr	r1, [pc, #24]	@ (8011d04 <tcp_output_fill_options+0x78>)
 8011cea:	4805      	ldr	r0, [pc, #20]	@ (8011d00 <tcp_output_fill_options+0x74>)
 8011cec:	f004 faae 	bl	801624c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011cf0:	bf00      	nop
 8011cf2:	3720      	adds	r7, #32
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	0801b13c 	.word	0x0801b13c
 8011cfc:	0801b86c 	.word	0x0801b86c
 8011d00:	0801b190 	.word	0x0801b190
 8011d04:	0801b764 	.word	0x0801b764

08011d08 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b08a      	sub	sp, #40	@ 0x28
 8011d0c:	af04      	add	r7, sp, #16
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
 8011d14:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d106      	bne.n	8011d2a <tcp_output_control_segment+0x22>
 8011d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8011d90 <tcp_output_control_segment+0x88>)
 8011d1e:	f240 7287 	movw	r2, #1927	@ 0x787
 8011d22:	491c      	ldr	r1, [pc, #112]	@ (8011d94 <tcp_output_control_segment+0x8c>)
 8011d24:	481c      	ldr	r0, [pc, #112]	@ (8011d98 <tcp_output_control_segment+0x90>)
 8011d26:	f004 fa91 	bl	801624c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011d2a:	683a      	ldr	r2, [r7, #0]
 8011d2c:	6879      	ldr	r1, [r7, #4]
 8011d2e:	68f8      	ldr	r0, [r7, #12]
 8011d30:	f7fe ff42 	bl	8010bb8 <tcp_route>
 8011d34:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d102      	bne.n	8011d42 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011d3c:	23fc      	movs	r3, #252	@ 0xfc
 8011d3e:	75fb      	strb	r3, [r7, #23]
 8011d40:	e01c      	b.n	8011d7c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d006      	beq.n	8011d56 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	7adb      	ldrb	r3, [r3, #11]
 8011d4c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	7a9b      	ldrb	r3, [r3, #10]
 8011d52:	757b      	strb	r3, [r7, #21]
 8011d54:	e003      	b.n	8011d5e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011d56:	23ff      	movs	r3, #255	@ 0xff
 8011d58:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011d5e:	7dba      	ldrb	r2, [r7, #22]
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	9302      	str	r3, [sp, #8]
 8011d64:	2306      	movs	r3, #6
 8011d66:	9301      	str	r3, [sp, #4]
 8011d68:	7d7b      	ldrb	r3, [r7, #21]
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	4613      	mov	r3, r2
 8011d6e:	683a      	ldr	r2, [r7, #0]
 8011d70:	6879      	ldr	r1, [r7, #4]
 8011d72:	68b8      	ldr	r0, [r7, #8]
 8011d74:	f002 fa86 	bl	8014284 <ip4_output_if>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011d7c:	68b8      	ldr	r0, [r7, #8]
 8011d7e:	f7fa fd47 	bl	800c810 <pbuf_free>
  return err;
 8011d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3718      	adds	r7, #24
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	0801b13c 	.word	0x0801b13c
 8011d94:	0801b894 	.word	0x0801b894
 8011d98:	0801b190 	.word	0x0801b190

08011d9c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011d9c:	b590      	push	{r4, r7, lr}
 8011d9e:	b08b      	sub	sp, #44	@ 0x2c
 8011da0:	af04      	add	r7, sp, #16
 8011da2:	60f8      	str	r0, [r7, #12]
 8011da4:	60b9      	str	r1, [r7, #8]
 8011da6:	607a      	str	r2, [r7, #4]
 8011da8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d106      	bne.n	8011dbe <tcp_rst+0x22>
 8011db0:	4b1f      	ldr	r3, [pc, #124]	@ (8011e30 <tcp_rst+0x94>)
 8011db2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011db6:	491f      	ldr	r1, [pc, #124]	@ (8011e34 <tcp_rst+0x98>)
 8011db8:	481f      	ldr	r0, [pc, #124]	@ (8011e38 <tcp_rst+0x9c>)
 8011dba:	f004 fa47 	bl	801624c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d106      	bne.n	8011dd2 <tcp_rst+0x36>
 8011dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8011e30 <tcp_rst+0x94>)
 8011dc6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011dca:	491c      	ldr	r1, [pc, #112]	@ (8011e3c <tcp_rst+0xa0>)
 8011dcc:	481a      	ldr	r0, [pc, #104]	@ (8011e38 <tcp_rst+0x9c>)
 8011dce:	f004 fa3d 	bl	801624c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011dd6:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011dda:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011ddc:	7dfb      	ldrb	r3, [r7, #23]
 8011dde:	b29c      	uxth	r4, r3
 8011de0:	68b8      	ldr	r0, [r7, #8]
 8011de2:	f7f9 f915 	bl	800b010 <lwip_htonl>
 8011de6:	4602      	mov	r2, r0
 8011de8:	8abb      	ldrh	r3, [r7, #20]
 8011dea:	9303      	str	r3, [sp, #12]
 8011dec:	2314      	movs	r3, #20
 8011dee:	9302      	str	r3, [sp, #8]
 8011df0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011df2:	9301      	str	r3, [sp, #4]
 8011df4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011df6:	9300      	str	r3, [sp, #0]
 8011df8:	4613      	mov	r3, r2
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	4621      	mov	r1, r4
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f7ff fe94 	bl	8011b2c <tcp_output_alloc_header_common>
 8011e04:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00c      	beq.n	8011e26 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e0c:	7dfb      	ldrb	r3, [r7, #23]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	6939      	ldr	r1, [r7, #16]
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	f7ff ff3a 	bl	8011c8c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e1a:	683a      	ldr	r2, [r7, #0]
 8011e1c:	6939      	ldr	r1, [r7, #16]
 8011e1e:	68f8      	ldr	r0, [r7, #12]
 8011e20:	f7ff ff72 	bl	8011d08 <tcp_output_control_segment>
 8011e24:	e000      	b.n	8011e28 <tcp_rst+0x8c>
    return;
 8011e26:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011e28:	371c      	adds	r7, #28
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd90      	pop	{r4, r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	0801b13c 	.word	0x0801b13c
 8011e34:	0801b8c0 	.word	0x0801b8c0
 8011e38:	0801b190 	.word	0x0801b190
 8011e3c:	0801b8dc 	.word	0x0801b8dc

08011e40 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011e40:	b590      	push	{r4, r7, lr}
 8011e42:	b087      	sub	sp, #28
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d106      	bne.n	8011e64 <tcp_send_empty_ack+0x24>
 8011e56:	4b28      	ldr	r3, [pc, #160]	@ (8011ef8 <tcp_send_empty_ack+0xb8>)
 8011e58:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011e5c:	4927      	ldr	r1, [pc, #156]	@ (8011efc <tcp_send_empty_ack+0xbc>)
 8011e5e:	4828      	ldr	r0, [pc, #160]	@ (8011f00 <tcp_send_empty_ack+0xc0>)
 8011e60:	f004 f9f4 	bl	801624c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e64:	7dfb      	ldrb	r3, [r7, #23]
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	f003 0304 	and.w	r3, r3, #4
 8011e6e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011e70:	7d7b      	ldrb	r3, [r7, #21]
 8011e72:	b29c      	uxth	r4, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7f9 f8c9 	bl	800b010 <lwip_htonl>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	2200      	movs	r2, #0
 8011e82:	4621      	mov	r1, r4
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f7ff fec3 	bl	8011c10 <tcp_output_alloc_header>
 8011e8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d109      	bne.n	8011ea6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	8b5b      	ldrh	r3, [r3, #26]
 8011e96:	f043 0303 	orr.w	r3, r3, #3
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ea0:	f06f 0301 	mvn.w	r3, #1
 8011ea4:	e023      	b.n	8011eee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011ea6:	7dbb      	ldrb	r3, [r7, #22]
 8011ea8:	7dfa      	ldrb	r2, [r7, #23]
 8011eaa:	6939      	ldr	r1, [r7, #16]
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f7ff feed 	bl	8011c8c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	3304      	adds	r3, #4
 8011eb8:	6939      	ldr	r1, [r7, #16]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f7ff ff24 	bl	8011d08 <tcp_output_control_segment>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d007      	beq.n	8011edc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	8b5b      	ldrh	r3, [r3, #26]
 8011ed0:	f043 0303 	orr.w	r3, r3, #3
 8011ed4:	b29a      	uxth	r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	835a      	strh	r2, [r3, #26]
 8011eda:	e006      	b.n	8011eea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	8b5b      	ldrh	r3, [r3, #26]
 8011ee0:	f023 0303 	bic.w	r3, r3, #3
 8011ee4:	b29a      	uxth	r2, r3
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	371c      	adds	r7, #28
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd90      	pop	{r4, r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	0801b13c 	.word	0x0801b13c
 8011efc:	0801b8f8 	.word	0x0801b8f8
 8011f00:	0801b190 	.word	0x0801b190

08011f04 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011f04:	b590      	push	{r4, r7, lr}
 8011f06:	b087      	sub	sp, #28
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <tcp_keepalive+0x20>
 8011f16:	4b18      	ldr	r3, [pc, #96]	@ (8011f78 <tcp_keepalive+0x74>)
 8011f18:	f640 0224 	movw	r2, #2084	@ 0x824
 8011f1c:	4917      	ldr	r1, [pc, #92]	@ (8011f7c <tcp_keepalive+0x78>)
 8011f1e:	4818      	ldr	r0, [pc, #96]	@ (8011f80 <tcp_keepalive+0x7c>)
 8011f20:	f004 f994 	bl	801624c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011f24:	7dfb      	ldrb	r3, [r7, #23]
 8011f26:	b29c      	uxth	r4, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7f9 f86e 	bl	800b010 <lwip_htonl>
 8011f34:	4603      	mov	r3, r0
 8011f36:	2200      	movs	r2, #0
 8011f38:	4621      	mov	r1, r4
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f7ff fe68 	bl	8011c10 <tcp_output_alloc_header>
 8011f40:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d102      	bne.n	8011f4e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011f48:	f04f 33ff 	mov.w	r3, #4294967295
 8011f4c:	e010      	b.n	8011f70 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011f4e:	7dfb      	ldrb	r3, [r7, #23]
 8011f50:	2200      	movs	r2, #0
 8011f52:	6939      	ldr	r1, [r7, #16]
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f7ff fe99 	bl	8011c8c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	3304      	adds	r3, #4
 8011f60:	6939      	ldr	r1, [r7, #16]
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f7ff fed0 	bl	8011d08 <tcp_output_control_segment>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	371c      	adds	r7, #28
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd90      	pop	{r4, r7, pc}
 8011f78:	0801b13c 	.word	0x0801b13c
 8011f7c:	0801b918 	.word	0x0801b918
 8011f80:	0801b190 	.word	0x0801b190

08011f84 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011f84:	b590      	push	{r4, r7, lr}
 8011f86:	b08b      	sub	sp, #44	@ 0x2c
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d106      	bne.n	8011fa6 <tcp_zero_window_probe+0x22>
 8011f98:	4b4c      	ldr	r3, [pc, #304]	@ (80120cc <tcp_zero_window_probe+0x148>)
 8011f9a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011f9e:	494c      	ldr	r1, [pc, #304]	@ (80120d0 <tcp_zero_window_probe+0x14c>)
 8011fa0:	484c      	ldr	r0, [pc, #304]	@ (80120d4 <tcp_zero_window_probe+0x150>)
 8011fa2:	f004 f953 	bl	801624c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011faa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011fac:	6a3b      	ldr	r3, [r7, #32]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d101      	bne.n	8011fb6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	e086      	b.n	80120c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011fbc:	2bff      	cmp	r3, #255	@ 0xff
 8011fbe:	d007      	beq.n	8011fd0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	b2da      	uxtb	r2, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011fd0:	6a3b      	ldr	r3, [r7, #32]
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	899b      	ldrh	r3, [r3, #12]
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7f9 f803 	bl	800afe4 <lwip_htons>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	f003 0301 	and.w	r3, r3, #1
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d005      	beq.n	8011ff6 <tcp_zero_window_probe+0x72>
 8011fea:	6a3b      	ldr	r3, [r7, #32]
 8011fec:	891b      	ldrh	r3, [r3, #8]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d101      	bne.n	8011ff6 <tcp_zero_window_probe+0x72>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	e000      	b.n	8011ff8 <tcp_zero_window_probe+0x74>
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011ffa:	7ffb      	ldrb	r3, [r7, #31]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	bf0c      	ite	eq
 8012000:	2301      	moveq	r3, #1
 8012002:	2300      	movne	r3, #0
 8012004:	b2db      	uxtb	r3, r3
 8012006:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801200c:	b299      	uxth	r1, r3
 801200e:	6a3b      	ldr	r3, [r7, #32]
 8012010:	68db      	ldr	r3, [r3, #12]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	8bba      	ldrh	r2, [r7, #28]
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f7ff fdfa 	bl	8011c10 <tcp_output_alloc_header>
 801201c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d102      	bne.n	801202a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012024:	f04f 33ff 	mov.w	r3, #4294967295
 8012028:	e04c      	b.n	80120c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012030:	7ffb      	ldrb	r3, [r7, #31]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d011      	beq.n	801205a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	899b      	ldrh	r3, [r3, #12]
 801203a:	b29b      	uxth	r3, r3
 801203c:	b21b      	sxth	r3, r3
 801203e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012042:	b21c      	sxth	r4, r3
 8012044:	2011      	movs	r0, #17
 8012046:	f7f8 ffcd 	bl	800afe4 <lwip_htons>
 801204a:	4603      	mov	r3, r0
 801204c:	b21b      	sxth	r3, r3
 801204e:	4323      	orrs	r3, r4
 8012050:	b21b      	sxth	r3, r3
 8012052:	b29a      	uxth	r2, r3
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	819a      	strh	r2, [r3, #12]
 8012058:	e010      	b.n	801207c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	3314      	adds	r3, #20
 8012060:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012062:	6a3b      	ldr	r3, [r7, #32]
 8012064:	6858      	ldr	r0, [r3, #4]
 8012066:	6a3b      	ldr	r3, [r7, #32]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	891a      	ldrh	r2, [r3, #8]
 801206c:	6a3b      	ldr	r3, [r7, #32]
 801206e:	891b      	ldrh	r3, [r3, #8]
 8012070:	1ad3      	subs	r3, r2, r3
 8012072:	b29b      	uxth	r3, r3
 8012074:	2201      	movs	r2, #1
 8012076:	6939      	ldr	r1, [r7, #16]
 8012078:	f7fa fdc4 	bl	800cc04 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801207c:	6a3b      	ldr	r3, [r7, #32]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	4618      	mov	r0, r3
 8012084:	f7f8 ffc4 	bl	800b010 <lwip_htonl>
 8012088:	4603      	mov	r3, r0
 801208a:	3301      	adds	r3, #1
 801208c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	1ad3      	subs	r3, r2, r3
 8012096:	2b00      	cmp	r3, #0
 8012098:	da02      	bge.n	80120a0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	68fa      	ldr	r2, [r7, #12]
 801209e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80120a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120a4:	2200      	movs	r2, #0
 80120a6:	69b9      	ldr	r1, [r7, #24]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7ff fdef 	bl	8011c8c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	3304      	adds	r3, #4
 80120b4:	69b9      	ldr	r1, [r7, #24]
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f7ff fe26 	bl	8011d08 <tcp_output_control_segment>
 80120bc:	4603      	mov	r3, r0
 80120be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80120c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	372c      	adds	r7, #44	@ 0x2c
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd90      	pop	{r4, r7, pc}
 80120cc:	0801b13c 	.word	0x0801b13c
 80120d0:	0801b934 	.word	0x0801b934
 80120d4:	0801b190 	.word	0x0801b190

080120d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80120e0:	f7fa ff10 	bl	800cf04 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80120e4:	4b0a      	ldr	r3, [pc, #40]	@ (8012110 <tcpip_tcp_timer+0x38>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d103      	bne.n	80120f4 <tcpip_tcp_timer+0x1c>
 80120ec:	4b09      	ldr	r3, [pc, #36]	@ (8012114 <tcpip_tcp_timer+0x3c>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d005      	beq.n	8012100 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80120f4:	2200      	movs	r2, #0
 80120f6:	4908      	ldr	r1, [pc, #32]	@ (8012118 <tcpip_tcp_timer+0x40>)
 80120f8:	20fa      	movs	r0, #250	@ 0xfa
 80120fa:	f000 f8f3 	bl	80122e4 <sys_timeout>
 80120fe:	e003      	b.n	8012108 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012100:	4b06      	ldr	r3, [pc, #24]	@ (801211c <tcpip_tcp_timer+0x44>)
 8012102:	2200      	movs	r2, #0
 8012104:	601a      	str	r2, [r3, #0]
  }
}
 8012106:	bf00      	nop
 8012108:	bf00      	nop
 801210a:	3708      	adds	r7, #8
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}
 8012110:	24008290 	.word	0x24008290
 8012114:	24008294 	.word	0x24008294
 8012118:	080120d9 	.word	0x080120d9
 801211c:	240082dc 	.word	0x240082dc

08012120 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012124:	4b0a      	ldr	r3, [pc, #40]	@ (8012150 <tcp_timer_needed+0x30>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d10f      	bne.n	801214c <tcp_timer_needed+0x2c>
 801212c:	4b09      	ldr	r3, [pc, #36]	@ (8012154 <tcp_timer_needed+0x34>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d103      	bne.n	801213c <tcp_timer_needed+0x1c>
 8012134:	4b08      	ldr	r3, [pc, #32]	@ (8012158 <tcp_timer_needed+0x38>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d007      	beq.n	801214c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801213c:	4b04      	ldr	r3, [pc, #16]	@ (8012150 <tcp_timer_needed+0x30>)
 801213e:	2201      	movs	r2, #1
 8012140:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012142:	2200      	movs	r2, #0
 8012144:	4905      	ldr	r1, [pc, #20]	@ (801215c <tcp_timer_needed+0x3c>)
 8012146:	20fa      	movs	r0, #250	@ 0xfa
 8012148:	f000 f8cc 	bl	80122e4 <sys_timeout>
  }
}
 801214c:	bf00      	nop
 801214e:	bd80      	pop	{r7, pc}
 8012150:	240082dc 	.word	0x240082dc
 8012154:	24008290 	.word	0x24008290
 8012158:	24008294 	.word	0x24008294
 801215c:	080120d9 	.word	0x080120d9

08012160 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b086      	sub	sp, #24
 8012164:	af00      	add	r7, sp, #0
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801216c:	2006      	movs	r0, #6
 801216e:	f7f9 fc69 	bl	800ba44 <memp_malloc>
 8012172:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d109      	bne.n	801218e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d151      	bne.n	8012224 <sys_timeout_abs+0xc4>
 8012180:	4b2a      	ldr	r3, [pc, #168]	@ (801222c <sys_timeout_abs+0xcc>)
 8012182:	22be      	movs	r2, #190	@ 0xbe
 8012184:	492a      	ldr	r1, [pc, #168]	@ (8012230 <sys_timeout_abs+0xd0>)
 8012186:	482b      	ldr	r0, [pc, #172]	@ (8012234 <sys_timeout_abs+0xd4>)
 8012188:	f004 f860 	bl	801624c <iprintf>
    return;
 801218c:	e04a      	b.n	8012224 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	2200      	movs	r2, #0
 8012192:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	68ba      	ldr	r2, [r7, #8]
 8012198:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	68fa      	ldr	r2, [r7, #12]
 80121a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80121a6:	4b24      	ldr	r3, [pc, #144]	@ (8012238 <sys_timeout_abs+0xd8>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d103      	bne.n	80121b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80121ae:	4a22      	ldr	r2, [pc, #136]	@ (8012238 <sys_timeout_abs+0xd8>)
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	6013      	str	r3, [r2, #0]
    return;
 80121b4:	e037      	b.n	8012226 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	685a      	ldr	r2, [r3, #4]
 80121ba:	4b1f      	ldr	r3, [pc, #124]	@ (8012238 <sys_timeout_abs+0xd8>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	0fdb      	lsrs	r3, r3, #31
 80121c4:	f003 0301 	and.w	r3, r3, #1
 80121c8:	b2db      	uxtb	r3, r3
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d007      	beq.n	80121de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80121ce:	4b1a      	ldr	r3, [pc, #104]	@ (8012238 <sys_timeout_abs+0xd8>)
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80121d6:	4a18      	ldr	r2, [pc, #96]	@ (8012238 <sys_timeout_abs+0xd8>)
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	6013      	str	r3, [r2, #0]
 80121dc:	e023      	b.n	8012226 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80121de:	4b16      	ldr	r3, [pc, #88]	@ (8012238 <sys_timeout_abs+0xd8>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	617b      	str	r3, [r7, #20]
 80121e4:	e01a      	b.n	801221c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d00b      	beq.n	8012206 <sys_timeout_abs+0xa6>
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	685a      	ldr	r2, [r3, #4]
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	1ad3      	subs	r3, r2, r3
 80121fa:	0fdb      	lsrs	r3, r3, #31
 80121fc:	f003 0301 	and.w	r3, r3, #1
 8012200:	b2db      	uxtb	r3, r3
 8012202:	2b00      	cmp	r3, #0
 8012204:	d007      	beq.n	8012216 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	693a      	ldr	r2, [r7, #16]
 8012212:	601a      	str	r2, [r3, #0]
        break;
 8012214:	e007      	b.n	8012226 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	617b      	str	r3, [r7, #20]
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1e1      	bne.n	80121e6 <sys_timeout_abs+0x86>
 8012222:	e000      	b.n	8012226 <sys_timeout_abs+0xc6>
    return;
 8012224:	bf00      	nop
      }
    }
  }
}
 8012226:	3718      	adds	r7, #24
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	0801b958 	.word	0x0801b958
 8012230:	0801b98c 	.word	0x0801b98c
 8012234:	0801b9cc 	.word	0x0801b9cc
 8012238:	240082d4 	.word	0x240082d4

0801223c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b086      	sub	sp, #24
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	4798      	blx	r3

  now = sys_now();
 801224e:	f7f8 fca9 	bl	800aba4 <sys_now>
 8012252:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	681a      	ldr	r2, [r3, #0]
 8012258:	4b0f      	ldr	r3, [pc, #60]	@ (8012298 <lwip_cyclic_timer+0x5c>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	4413      	add	r3, r2
 801225e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012260:	68fa      	ldr	r2, [r7, #12]
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	1ad3      	subs	r3, r2, r3
 8012266:	0fdb      	lsrs	r3, r3, #31
 8012268:	f003 0301 	and.w	r3, r3, #1
 801226c:	b2db      	uxtb	r3, r3
 801226e:	2b00      	cmp	r3, #0
 8012270:	d009      	beq.n	8012286 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	681a      	ldr	r2, [r3, #0]
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	4413      	add	r3, r2
 801227a:	687a      	ldr	r2, [r7, #4]
 801227c:	4907      	ldr	r1, [pc, #28]	@ (801229c <lwip_cyclic_timer+0x60>)
 801227e:	4618      	mov	r0, r3
 8012280:	f7ff ff6e 	bl	8012160 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012284:	e004      	b.n	8012290 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	4904      	ldr	r1, [pc, #16]	@ (801229c <lwip_cyclic_timer+0x60>)
 801228a:	68f8      	ldr	r0, [r7, #12]
 801228c:	f7ff ff68 	bl	8012160 <sys_timeout_abs>
}
 8012290:	bf00      	nop
 8012292:	3718      	adds	r7, #24
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	240082d8 	.word	0x240082d8
 801229c:	0801223d 	.word	0x0801223d

080122a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122a6:	2301      	movs	r3, #1
 80122a8:	607b      	str	r3, [r7, #4]
 80122aa:	e00e      	b.n	80122ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80122ac:	4a0b      	ldr	r2, [pc, #44]	@ (80122dc <sys_timeouts_init+0x3c>)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	00db      	lsls	r3, r3, #3
 80122b8:	4a08      	ldr	r2, [pc, #32]	@ (80122dc <sys_timeouts_init+0x3c>)
 80122ba:	4413      	add	r3, r2
 80122bc:	461a      	mov	r2, r3
 80122be:	4908      	ldr	r1, [pc, #32]	@ (80122e0 <sys_timeouts_init+0x40>)
 80122c0:	f000 f810 	bl	80122e4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	3301      	adds	r3, #1
 80122c8:	607b      	str	r3, [r7, #4]
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d9ed      	bls.n	80122ac <sys_timeouts_init+0xc>
  }
}
 80122d0:	bf00      	nop
 80122d2:	bf00      	nop
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	0801c574 	.word	0x0801c574
 80122e0:	0801223d 	.word	0x0801223d

080122e4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b086      	sub	sp, #24
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122f6:	d306      	bcc.n	8012306 <sys_timeout+0x22>
 80122f8:	4b0a      	ldr	r3, [pc, #40]	@ (8012324 <sys_timeout+0x40>)
 80122fa:	f240 1229 	movw	r2, #297	@ 0x129
 80122fe:	490a      	ldr	r1, [pc, #40]	@ (8012328 <sys_timeout+0x44>)
 8012300:	480a      	ldr	r0, [pc, #40]	@ (801232c <sys_timeout+0x48>)
 8012302:	f003 ffa3 	bl	801624c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012306:	f7f8 fc4d 	bl	800aba4 <sys_now>
 801230a:	4602      	mov	r2, r0
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	4413      	add	r3, r2
 8012310:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	68b9      	ldr	r1, [r7, #8]
 8012316:	6978      	ldr	r0, [r7, #20]
 8012318:	f7ff ff22 	bl	8012160 <sys_timeout_abs>
#endif
}
 801231c:	bf00      	nop
 801231e:	3718      	adds	r7, #24
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	0801b958 	.word	0x0801b958
 8012328:	0801b9f4 	.word	0x0801b9f4
 801232c:	0801b9cc 	.word	0x0801b9cc

08012330 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012336:	f7f8 fc35 	bl	800aba4 <sys_now>
 801233a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801233c:	4b1a      	ldr	r3, [pc, #104]	@ (80123a8 <sys_check_timeouts+0x78>)
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	b2db      	uxtb	r3, r3
 8012342:	2b00      	cmp	r3, #0
 8012344:	d001      	beq.n	801234a <sys_check_timeouts+0x1a>
 8012346:	f7f9 ff29 	bl	800c19c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801234a:	4b18      	ldr	r3, [pc, #96]	@ (80123ac <sys_check_timeouts+0x7c>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d022      	beq.n	801239c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	68fa      	ldr	r2, [r7, #12]
 801235c:	1ad3      	subs	r3, r2, r3
 801235e:	0fdb      	lsrs	r3, r3, #31
 8012360:	f003 0301 	and.w	r3, r3, #1
 8012364:	b2db      	uxtb	r3, r3
 8012366:	2b00      	cmp	r3, #0
 8012368:	d11a      	bne.n	80123a0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	4a0f      	ldr	r2, [pc, #60]	@ (80123ac <sys_check_timeouts+0x7c>)
 8012370:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	689b      	ldr	r3, [r3, #8]
 8012376:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	68db      	ldr	r3, [r3, #12]
 801237c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	4a0b      	ldr	r2, [pc, #44]	@ (80123b0 <sys_check_timeouts+0x80>)
 8012384:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012386:	68b9      	ldr	r1, [r7, #8]
 8012388:	2006      	movs	r0, #6
 801238a:	f7f9 fbcb 	bl	800bb24 <memp_free>
    if (handler != NULL) {
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d0d3      	beq.n	801233c <sys_check_timeouts+0xc>
      handler(arg);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6838      	ldr	r0, [r7, #0]
 8012398:	4798      	blx	r3
  do {
 801239a:	e7cf      	b.n	801233c <sys_check_timeouts+0xc>
      return;
 801239c:	bf00      	nop
 801239e:	e000      	b.n	80123a2 <sys_check_timeouts+0x72>
      return;
 80123a0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	24008281 	.word	0x24008281
 80123ac:	240082d4 	.word	0x240082d4
 80123b0:	240082d8 	.word	0x240082d8

080123b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80123b8:	f002 ff92 	bl	80152e0 <rand>
 80123bc:	4603      	mov	r3, r0
 80123be:	b29b      	uxth	r3, r3
 80123c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	4b01      	ldr	r3, [pc, #4]	@ (80123d4 <udp_init+0x20>)
 80123ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80123d0:	bf00      	nop
 80123d2:	bd80      	pop	{r7, pc}
 80123d4:	2400002c 	.word	0x2400002c

080123d8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80123de:	2300      	movs	r3, #0
 80123e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80123e2:	4b17      	ldr	r3, [pc, #92]	@ (8012440 <udp_new_port+0x68>)
 80123e4:	881b      	ldrh	r3, [r3, #0]
 80123e6:	1c5a      	adds	r2, r3, #1
 80123e8:	b291      	uxth	r1, r2
 80123ea:	4a15      	ldr	r2, [pc, #84]	@ (8012440 <udp_new_port+0x68>)
 80123ec:	8011      	strh	r1, [r2, #0]
 80123ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80123f2:	4293      	cmp	r3, r2
 80123f4:	d103      	bne.n	80123fe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80123f6:	4b12      	ldr	r3, [pc, #72]	@ (8012440 <udp_new_port+0x68>)
 80123f8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80123fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80123fe:	4b11      	ldr	r3, [pc, #68]	@ (8012444 <udp_new_port+0x6c>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	603b      	str	r3, [r7, #0]
 8012404:	e011      	b.n	801242a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	8a5a      	ldrh	r2, [r3, #18]
 801240a:	4b0d      	ldr	r3, [pc, #52]	@ (8012440 <udp_new_port+0x68>)
 801240c:	881b      	ldrh	r3, [r3, #0]
 801240e:	429a      	cmp	r2, r3
 8012410:	d108      	bne.n	8012424 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012412:	88fb      	ldrh	r3, [r7, #6]
 8012414:	3301      	adds	r3, #1
 8012416:	80fb      	strh	r3, [r7, #6]
 8012418:	88fb      	ldrh	r3, [r7, #6]
 801241a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801241e:	d3e0      	bcc.n	80123e2 <udp_new_port+0xa>
        return 0;
 8012420:	2300      	movs	r3, #0
 8012422:	e007      	b.n	8012434 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	603b      	str	r3, [r7, #0]
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d1ea      	bne.n	8012406 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012430:	4b03      	ldr	r3, [pc, #12]	@ (8012440 <udp_new_port+0x68>)
 8012432:	881b      	ldrh	r3, [r3, #0]
}
 8012434:	4618      	mov	r0, r3
 8012436:	370c      	adds	r7, #12
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr
 8012440:	2400002c 	.word	0x2400002c
 8012444:	240082e0 	.word	0x240082e0

08012448 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b084      	sub	sp, #16
 801244c:	af00      	add	r7, sp, #0
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	60b9      	str	r1, [r7, #8]
 8012452:	4613      	mov	r3, r2
 8012454:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d105      	bne.n	8012468 <udp_input_local_match+0x20>
 801245c:	4b27      	ldr	r3, [pc, #156]	@ (80124fc <udp_input_local_match+0xb4>)
 801245e:	2287      	movs	r2, #135	@ 0x87
 8012460:	4927      	ldr	r1, [pc, #156]	@ (8012500 <udp_input_local_match+0xb8>)
 8012462:	4828      	ldr	r0, [pc, #160]	@ (8012504 <udp_input_local_match+0xbc>)
 8012464:	f003 fef2 	bl	801624c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d105      	bne.n	801247a <udp_input_local_match+0x32>
 801246e:	4b23      	ldr	r3, [pc, #140]	@ (80124fc <udp_input_local_match+0xb4>)
 8012470:	2288      	movs	r2, #136	@ 0x88
 8012472:	4925      	ldr	r1, [pc, #148]	@ (8012508 <udp_input_local_match+0xc0>)
 8012474:	4823      	ldr	r0, [pc, #140]	@ (8012504 <udp_input_local_match+0xbc>)
 8012476:	f003 fee9 	bl	801624c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	7a1b      	ldrb	r3, [r3, #8]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d00b      	beq.n	801249a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	7a1a      	ldrb	r2, [r3, #8]
 8012486:	4b21      	ldr	r3, [pc, #132]	@ (801250c <udp_input_local_match+0xc4>)
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801248e:	3301      	adds	r3, #1
 8012490:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012492:	429a      	cmp	r2, r3
 8012494:	d001      	beq.n	801249a <udp_input_local_match+0x52>
    return 0;
 8012496:	2300      	movs	r3, #0
 8012498:	e02b      	b.n	80124f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801249a:	79fb      	ldrb	r3, [r7, #7]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d018      	beq.n	80124d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d013      	beq.n	80124ce <udp_input_local_match+0x86>
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00f      	beq.n	80124ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80124ae:	4b17      	ldr	r3, [pc, #92]	@ (801250c <udp_input_local_match+0xc4>)
 80124b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124b6:	d00a      	beq.n	80124ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	4b13      	ldr	r3, [pc, #76]	@ (801250c <udp_input_local_match+0xc4>)
 80124be:	695b      	ldr	r3, [r3, #20]
 80124c0:	405a      	eors	r2, r3
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	3308      	adds	r3, #8
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d110      	bne.n	80124f0 <udp_input_local_match+0xa8>
          return 1;
 80124ce:	2301      	movs	r3, #1
 80124d0:	e00f      	b.n	80124f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d009      	beq.n	80124ec <udp_input_local_match+0xa4>
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d005      	beq.n	80124ec <udp_input_local_match+0xa4>
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	681a      	ldr	r2, [r3, #0]
 80124e4:	4b09      	ldr	r3, [pc, #36]	@ (801250c <udp_input_local_match+0xc4>)
 80124e6:	695b      	ldr	r3, [r3, #20]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d101      	bne.n	80124f0 <udp_input_local_match+0xa8>
        return 1;
 80124ec:	2301      	movs	r3, #1
 80124ee:	e000      	b.n	80124f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80124f0:	2300      	movs	r3, #0
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3710      	adds	r7, #16
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	0801ba40 	.word	0x0801ba40
 8012500:	0801ba70 	.word	0x0801ba70
 8012504:	0801ba94 	.word	0x0801ba94
 8012508:	0801babc 	.word	0x0801babc
 801250c:	24005368 	.word	0x24005368

08012510 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012510:	b590      	push	{r4, r7, lr}
 8012512:	b08d      	sub	sp, #52	@ 0x34
 8012514:	af02      	add	r7, sp, #8
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801251a:	2300      	movs	r3, #0
 801251c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d105      	bne.n	8012530 <udp_input+0x20>
 8012524:	4b7c      	ldr	r3, [pc, #496]	@ (8012718 <udp_input+0x208>)
 8012526:	22cf      	movs	r2, #207	@ 0xcf
 8012528:	497c      	ldr	r1, [pc, #496]	@ (801271c <udp_input+0x20c>)
 801252a:	487d      	ldr	r0, [pc, #500]	@ (8012720 <udp_input+0x210>)
 801252c:	f003 fe8e 	bl	801624c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d105      	bne.n	8012542 <udp_input+0x32>
 8012536:	4b78      	ldr	r3, [pc, #480]	@ (8012718 <udp_input+0x208>)
 8012538:	22d0      	movs	r2, #208	@ 0xd0
 801253a:	497a      	ldr	r1, [pc, #488]	@ (8012724 <udp_input+0x214>)
 801253c:	4878      	ldr	r0, [pc, #480]	@ (8012720 <udp_input+0x210>)
 801253e:	f003 fe85 	bl	801624c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	895b      	ldrh	r3, [r3, #10]
 8012546:	2b07      	cmp	r3, #7
 8012548:	d803      	bhi.n	8012552 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f7fa f960 	bl	800c810 <pbuf_free>
    goto end;
 8012550:	e0de      	b.n	8012710 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	685b      	ldr	r3, [r3, #4]
 8012556:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012558:	4b73      	ldr	r3, [pc, #460]	@ (8012728 <udp_input+0x218>)
 801255a:	695b      	ldr	r3, [r3, #20]
 801255c:	4a72      	ldr	r2, [pc, #456]	@ (8012728 <udp_input+0x218>)
 801255e:	6812      	ldr	r2, [r2, #0]
 8012560:	4611      	mov	r1, r2
 8012562:	4618      	mov	r0, r3
 8012564:	f001 ff66 	bl	8014434 <ip4_addr_isbroadcast_u32>
 8012568:	4603      	mov	r3, r0
 801256a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	881b      	ldrh	r3, [r3, #0]
 8012570:	b29b      	uxth	r3, r3
 8012572:	4618      	mov	r0, r3
 8012574:	f7f8 fd36 	bl	800afe4 <lwip_htons>
 8012578:	4603      	mov	r3, r0
 801257a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	885b      	ldrh	r3, [r3, #2]
 8012580:	b29b      	uxth	r3, r3
 8012582:	4618      	mov	r0, r3
 8012584:	f7f8 fd2e 	bl	800afe4 <lwip_htons>
 8012588:	4603      	mov	r3, r0
 801258a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801258c:	2300      	movs	r3, #0
 801258e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8012590:	2300      	movs	r3, #0
 8012592:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012594:	2300      	movs	r3, #0
 8012596:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012598:	4b64      	ldr	r3, [pc, #400]	@ (801272c <udp_input+0x21c>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	627b      	str	r3, [r7, #36]	@ 0x24
 801259e:	e054      	b.n	801264a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80125a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a2:	8a5b      	ldrh	r3, [r3, #18]
 80125a4:	89fa      	ldrh	r2, [r7, #14]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d14a      	bne.n	8012640 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80125aa:	7cfb      	ldrb	r3, [r7, #19]
 80125ac:	461a      	mov	r2, r3
 80125ae:	6839      	ldr	r1, [r7, #0]
 80125b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80125b2:	f7ff ff49 	bl	8012448 <udp_input_local_match>
 80125b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d041      	beq.n	8012640 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80125bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125be:	7c1b      	ldrb	r3, [r3, #16]
 80125c0:	f003 0304 	and.w	r3, r3, #4
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d11d      	bne.n	8012604 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d102      	bne.n	80125d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80125ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125d0:	61fb      	str	r3, [r7, #28]
 80125d2:	e017      	b.n	8012604 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80125d4:	7cfb      	ldrb	r3, [r7, #19]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d014      	beq.n	8012604 <udp_input+0xf4>
 80125da:	4b53      	ldr	r3, [pc, #332]	@ (8012728 <udp_input+0x218>)
 80125dc:	695b      	ldr	r3, [r3, #20]
 80125de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e2:	d10f      	bne.n	8012604 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	3304      	adds	r3, #4
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d008      	beq.n	8012604 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80125f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	3304      	adds	r3, #4
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d101      	bne.n	8012604 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012602:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012606:	8a9b      	ldrh	r3, [r3, #20]
 8012608:	8a3a      	ldrh	r2, [r7, #16]
 801260a:	429a      	cmp	r2, r3
 801260c:	d118      	bne.n	8012640 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012610:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012612:	2b00      	cmp	r3, #0
 8012614:	d005      	beq.n	8012622 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012618:	685a      	ldr	r2, [r3, #4]
 801261a:	4b43      	ldr	r3, [pc, #268]	@ (8012728 <udp_input+0x218>)
 801261c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801261e:	429a      	cmp	r2, r3
 8012620:	d10e      	bne.n	8012640 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012622:	6a3b      	ldr	r3, [r7, #32]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d014      	beq.n	8012652 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801262a:	68da      	ldr	r2, [r3, #12]
 801262c:	6a3b      	ldr	r3, [r7, #32]
 801262e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012630:	4b3e      	ldr	r3, [pc, #248]	@ (801272c <udp_input+0x21c>)
 8012632:	681a      	ldr	r2, [r3, #0]
 8012634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012636:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012638:	4a3c      	ldr	r2, [pc, #240]	@ (801272c <udp_input+0x21c>)
 801263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801263e:	e008      	b.n	8012652 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012642:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012646:	68db      	ldr	r3, [r3, #12]
 8012648:	627b      	str	r3, [r7, #36]	@ 0x24
 801264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801264c:	2b00      	cmp	r3, #0
 801264e:	d1a7      	bne.n	80125a0 <udp_input+0x90>
 8012650:	e000      	b.n	8012654 <udp_input+0x144>
        break;
 8012652:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <udp_input+0x14e>
    pcb = uncon_pcb;
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012660:	2b00      	cmp	r3, #0
 8012662:	d002      	beq.n	801266a <udp_input+0x15a>
    for_us = 1;
 8012664:	2301      	movs	r3, #1
 8012666:	76fb      	strb	r3, [r7, #27]
 8012668:	e00a      	b.n	8012680 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	3304      	adds	r3, #4
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	4b2d      	ldr	r3, [pc, #180]	@ (8012728 <udp_input+0x218>)
 8012672:	695b      	ldr	r3, [r3, #20]
 8012674:	429a      	cmp	r2, r3
 8012676:	bf0c      	ite	eq
 8012678:	2301      	moveq	r3, #1
 801267a:	2300      	movne	r3, #0
 801267c:	b2db      	uxtb	r3, r3
 801267e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012680:	7efb      	ldrb	r3, [r7, #27]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d041      	beq.n	801270a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012686:	2108      	movs	r1, #8
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7fa f83b 	bl	800c704 <pbuf_remove_header>
 801268e:	4603      	mov	r3, r0
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00a      	beq.n	80126aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012694:	4b20      	ldr	r3, [pc, #128]	@ (8012718 <udp_input+0x208>)
 8012696:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801269a:	4925      	ldr	r1, [pc, #148]	@ (8012730 <udp_input+0x220>)
 801269c:	4820      	ldr	r0, [pc, #128]	@ (8012720 <udp_input+0x210>)
 801269e:	f003 fdd5 	bl	801624c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f7fa f8b4 	bl	800c810 <pbuf_free>
      goto end;
 80126a8:	e032      	b.n	8012710 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80126aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d012      	beq.n	80126d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80126b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b2:	699b      	ldr	r3, [r3, #24]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d00a      	beq.n	80126ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80126b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ba:	699c      	ldr	r4, [r3, #24]
 80126bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126be:	69d8      	ldr	r0, [r3, #28]
 80126c0:	8a3b      	ldrh	r3, [r7, #16]
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	4b1b      	ldr	r3, [pc, #108]	@ (8012734 <udp_input+0x224>)
 80126c6:	687a      	ldr	r2, [r7, #4]
 80126c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80126ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80126cc:	e021      	b.n	8012712 <udp_input+0x202>
        pbuf_free(p);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7fa f89e 	bl	800c810 <pbuf_free>
        goto end;
 80126d4:	e01c      	b.n	8012710 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80126d6:	7cfb      	ldrb	r3, [r7, #19]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d112      	bne.n	8012702 <udp_input+0x1f2>
 80126dc:	4b12      	ldr	r3, [pc, #72]	@ (8012728 <udp_input+0x218>)
 80126de:	695b      	ldr	r3, [r3, #20]
 80126e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80126e4:	2be0      	cmp	r3, #224	@ 0xe0
 80126e6:	d00c      	beq.n	8012702 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80126e8:	4b0f      	ldr	r3, [pc, #60]	@ (8012728 <udp_input+0x218>)
 80126ea:	899b      	ldrh	r3, [r3, #12]
 80126ec:	3308      	adds	r3, #8
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	b21b      	sxth	r3, r3
 80126f2:	4619      	mov	r1, r3
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7fa f878 	bl	800c7ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80126fa:	2103      	movs	r1, #3
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f001 fb6f 	bl	8013de0 <icmp_dest_unreach>
      pbuf_free(p);
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7fa f884 	bl	800c810 <pbuf_free>
  return;
 8012708:	e003      	b.n	8012712 <udp_input+0x202>
    pbuf_free(p);
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f7fa f880 	bl	800c810 <pbuf_free>
  return;
 8012710:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012712:	372c      	adds	r7, #44	@ 0x2c
 8012714:	46bd      	mov	sp, r7
 8012716:	bd90      	pop	{r4, r7, pc}
 8012718:	0801ba40 	.word	0x0801ba40
 801271c:	0801bae4 	.word	0x0801bae4
 8012720:	0801ba94 	.word	0x0801ba94
 8012724:	0801bafc 	.word	0x0801bafc
 8012728:	24005368 	.word	0x24005368
 801272c:	240082e0 	.word	0x240082e0
 8012730:	0801bb18 	.word	0x0801bb18
 8012734:	24005378 	.word	0x24005378

08012738 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b088      	sub	sp, #32
 801273c:	af02      	add	r7, sp, #8
 801273e:	60f8      	str	r0, [r7, #12]
 8012740:	60b9      	str	r1, [r7, #8]
 8012742:	607a      	str	r2, [r7, #4]
 8012744:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d109      	bne.n	8012760 <udp_sendto+0x28>
 801274c:	4b23      	ldr	r3, [pc, #140]	@ (80127dc <udp_sendto+0xa4>)
 801274e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012752:	4923      	ldr	r1, [pc, #140]	@ (80127e0 <udp_sendto+0xa8>)
 8012754:	4823      	ldr	r0, [pc, #140]	@ (80127e4 <udp_sendto+0xac>)
 8012756:	f003 fd79 	bl	801624c <iprintf>
 801275a:	f06f 030f 	mvn.w	r3, #15
 801275e:	e038      	b.n	80127d2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d109      	bne.n	801277a <udp_sendto+0x42>
 8012766:	4b1d      	ldr	r3, [pc, #116]	@ (80127dc <udp_sendto+0xa4>)
 8012768:	f240 2219 	movw	r2, #537	@ 0x219
 801276c:	491e      	ldr	r1, [pc, #120]	@ (80127e8 <udp_sendto+0xb0>)
 801276e:	481d      	ldr	r0, [pc, #116]	@ (80127e4 <udp_sendto+0xac>)
 8012770:	f003 fd6c 	bl	801624c <iprintf>
 8012774:	f06f 030f 	mvn.w	r3, #15
 8012778:	e02b      	b.n	80127d2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d109      	bne.n	8012794 <udp_sendto+0x5c>
 8012780:	4b16      	ldr	r3, [pc, #88]	@ (80127dc <udp_sendto+0xa4>)
 8012782:	f240 221a 	movw	r2, #538	@ 0x21a
 8012786:	4919      	ldr	r1, [pc, #100]	@ (80127ec <udp_sendto+0xb4>)
 8012788:	4816      	ldr	r0, [pc, #88]	@ (80127e4 <udp_sendto+0xac>)
 801278a:	f003 fd5f 	bl	801624c <iprintf>
 801278e:	f06f 030f 	mvn.w	r3, #15
 8012792:	e01e      	b.n	80127d2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	7a1b      	ldrb	r3, [r3, #8]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d006      	beq.n	80127aa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	7a1b      	ldrb	r3, [r3, #8]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7f9 fcd5 	bl	800c150 <netif_get_by_index>
 80127a6:	6178      	str	r0, [r7, #20]
 80127a8:	e003      	b.n	80127b2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f001 fbac 	bl	8013f08 <ip4_route>
 80127b0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d102      	bne.n	80127be <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80127b8:	f06f 0303 	mvn.w	r3, #3
 80127bc:	e009      	b.n	80127d2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80127be:	887a      	ldrh	r2, [r7, #2]
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	9300      	str	r3, [sp, #0]
 80127c4:	4613      	mov	r3, r2
 80127c6:	687a      	ldr	r2, [r7, #4]
 80127c8:	68b9      	ldr	r1, [r7, #8]
 80127ca:	68f8      	ldr	r0, [r7, #12]
 80127cc:	f000 f810 	bl	80127f0 <udp_sendto_if>
 80127d0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3718      	adds	r7, #24
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	0801ba40 	.word	0x0801ba40
 80127e0:	0801bb64 	.word	0x0801bb64
 80127e4:	0801ba94 	.word	0x0801ba94
 80127e8:	0801bb7c 	.word	0x0801bb7c
 80127ec:	0801bb98 	.word	0x0801bb98

080127f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b088      	sub	sp, #32
 80127f4:	af02      	add	r7, sp, #8
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	607a      	str	r2, [r7, #4]
 80127fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d109      	bne.n	8012818 <udp_sendto_if+0x28>
 8012804:	4b2e      	ldr	r3, [pc, #184]	@ (80128c0 <udp_sendto_if+0xd0>)
 8012806:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801280a:	492e      	ldr	r1, [pc, #184]	@ (80128c4 <udp_sendto_if+0xd4>)
 801280c:	482e      	ldr	r0, [pc, #184]	@ (80128c8 <udp_sendto_if+0xd8>)
 801280e:	f003 fd1d 	bl	801624c <iprintf>
 8012812:	f06f 030f 	mvn.w	r3, #15
 8012816:	e04f      	b.n	80128b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d109      	bne.n	8012832 <udp_sendto_if+0x42>
 801281e:	4b28      	ldr	r3, [pc, #160]	@ (80128c0 <udp_sendto_if+0xd0>)
 8012820:	f240 2281 	movw	r2, #641	@ 0x281
 8012824:	4929      	ldr	r1, [pc, #164]	@ (80128cc <udp_sendto_if+0xdc>)
 8012826:	4828      	ldr	r0, [pc, #160]	@ (80128c8 <udp_sendto_if+0xd8>)
 8012828:	f003 fd10 	bl	801624c <iprintf>
 801282c:	f06f 030f 	mvn.w	r3, #15
 8012830:	e042      	b.n	80128b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d109      	bne.n	801284c <udp_sendto_if+0x5c>
 8012838:	4b21      	ldr	r3, [pc, #132]	@ (80128c0 <udp_sendto_if+0xd0>)
 801283a:	f240 2282 	movw	r2, #642	@ 0x282
 801283e:	4924      	ldr	r1, [pc, #144]	@ (80128d0 <udp_sendto_if+0xe0>)
 8012840:	4821      	ldr	r0, [pc, #132]	@ (80128c8 <udp_sendto_if+0xd8>)
 8012842:	f003 fd03 	bl	801624c <iprintf>
 8012846:	f06f 030f 	mvn.w	r3, #15
 801284a:	e035      	b.n	80128b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801284c:	6a3b      	ldr	r3, [r7, #32]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d109      	bne.n	8012866 <udp_sendto_if+0x76>
 8012852:	4b1b      	ldr	r3, [pc, #108]	@ (80128c0 <udp_sendto_if+0xd0>)
 8012854:	f240 2283 	movw	r2, #643	@ 0x283
 8012858:	491e      	ldr	r1, [pc, #120]	@ (80128d4 <udp_sendto_if+0xe4>)
 801285a:	481b      	ldr	r0, [pc, #108]	@ (80128c8 <udp_sendto_if+0xd8>)
 801285c:	f003 fcf6 	bl	801624c <iprintf>
 8012860:	f06f 030f 	mvn.w	r3, #15
 8012864:	e028      	b.n	80128b8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d009      	beq.n	8012880 <udp_sendto_if+0x90>
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d005      	beq.n	8012880 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801287c:	2be0      	cmp	r3, #224	@ 0xe0
 801287e:	d103      	bne.n	8012888 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012880:	6a3b      	ldr	r3, [r7, #32]
 8012882:	3304      	adds	r3, #4
 8012884:	617b      	str	r3, [r7, #20]
 8012886:	e00b      	b.n	80128a0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	6a3b      	ldr	r3, [r7, #32]
 801288e:	3304      	adds	r3, #4
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	429a      	cmp	r2, r3
 8012894:	d002      	beq.n	801289c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012896:	f06f 0303 	mvn.w	r3, #3
 801289a:	e00d      	b.n	80128b8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80128a0:	887a      	ldrh	r2, [r7, #2]
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	9301      	str	r3, [sp, #4]
 80128a6:	6a3b      	ldr	r3, [r7, #32]
 80128a8:	9300      	str	r3, [sp, #0]
 80128aa:	4613      	mov	r3, r2
 80128ac:	687a      	ldr	r2, [r7, #4]
 80128ae:	68b9      	ldr	r1, [r7, #8]
 80128b0:	68f8      	ldr	r0, [r7, #12]
 80128b2:	f000 f811 	bl	80128d8 <udp_sendto_if_src>
 80128b6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3718      	adds	r7, #24
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	0801ba40 	.word	0x0801ba40
 80128c4:	0801bbb4 	.word	0x0801bbb4
 80128c8:	0801ba94 	.word	0x0801ba94
 80128cc:	0801bbd0 	.word	0x0801bbd0
 80128d0:	0801bbec 	.word	0x0801bbec
 80128d4:	0801bc0c 	.word	0x0801bc0c

080128d8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b08c      	sub	sp, #48	@ 0x30
 80128dc:	af04      	add	r7, sp, #16
 80128de:	60f8      	str	r0, [r7, #12]
 80128e0:	60b9      	str	r1, [r7, #8]
 80128e2:	607a      	str	r2, [r7, #4]
 80128e4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d109      	bne.n	8012900 <udp_sendto_if_src+0x28>
 80128ec:	4b65      	ldr	r3, [pc, #404]	@ (8012a84 <udp_sendto_if_src+0x1ac>)
 80128ee:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80128f2:	4965      	ldr	r1, [pc, #404]	@ (8012a88 <udp_sendto_if_src+0x1b0>)
 80128f4:	4865      	ldr	r0, [pc, #404]	@ (8012a8c <udp_sendto_if_src+0x1b4>)
 80128f6:	f003 fca9 	bl	801624c <iprintf>
 80128fa:	f06f 030f 	mvn.w	r3, #15
 80128fe:	e0bc      	b.n	8012a7a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d109      	bne.n	801291a <udp_sendto_if_src+0x42>
 8012906:	4b5f      	ldr	r3, [pc, #380]	@ (8012a84 <udp_sendto_if_src+0x1ac>)
 8012908:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801290c:	4960      	ldr	r1, [pc, #384]	@ (8012a90 <udp_sendto_if_src+0x1b8>)
 801290e:	485f      	ldr	r0, [pc, #380]	@ (8012a8c <udp_sendto_if_src+0x1b4>)
 8012910:	f003 fc9c 	bl	801624c <iprintf>
 8012914:	f06f 030f 	mvn.w	r3, #15
 8012918:	e0af      	b.n	8012a7a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d109      	bne.n	8012934 <udp_sendto_if_src+0x5c>
 8012920:	4b58      	ldr	r3, [pc, #352]	@ (8012a84 <udp_sendto_if_src+0x1ac>)
 8012922:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8012926:	495b      	ldr	r1, [pc, #364]	@ (8012a94 <udp_sendto_if_src+0x1bc>)
 8012928:	4858      	ldr	r0, [pc, #352]	@ (8012a8c <udp_sendto_if_src+0x1b4>)
 801292a:	f003 fc8f 	bl	801624c <iprintf>
 801292e:	f06f 030f 	mvn.w	r3, #15
 8012932:	e0a2      	b.n	8012a7a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012936:	2b00      	cmp	r3, #0
 8012938:	d109      	bne.n	801294e <udp_sendto_if_src+0x76>
 801293a:	4b52      	ldr	r3, [pc, #328]	@ (8012a84 <udp_sendto_if_src+0x1ac>)
 801293c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8012940:	4955      	ldr	r1, [pc, #340]	@ (8012a98 <udp_sendto_if_src+0x1c0>)
 8012942:	4852      	ldr	r0, [pc, #328]	@ (8012a8c <udp_sendto_if_src+0x1b4>)
 8012944:	f003 fc82 	bl	801624c <iprintf>
 8012948:	f06f 030f 	mvn.w	r3, #15
 801294c:	e095      	b.n	8012a7a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801294e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012950:	2b00      	cmp	r3, #0
 8012952:	d109      	bne.n	8012968 <udp_sendto_if_src+0x90>
 8012954:	4b4b      	ldr	r3, [pc, #300]	@ (8012a84 <udp_sendto_if_src+0x1ac>)
 8012956:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801295a:	4950      	ldr	r1, [pc, #320]	@ (8012a9c <udp_sendto_if_src+0x1c4>)
 801295c:	484b      	ldr	r0, [pc, #300]	@ (8012a8c <udp_sendto_if_src+0x1b4>)
 801295e:	f003 fc75 	bl	801624c <iprintf>
 8012962:	f06f 030f 	mvn.w	r3, #15
 8012966:	e088      	b.n	8012a7a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	8a5b      	ldrh	r3, [r3, #18]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d10f      	bne.n	8012990 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012970:	68f9      	ldr	r1, [r7, #12]
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	8a5b      	ldrh	r3, [r3, #18]
 8012976:	461a      	mov	r2, r3
 8012978:	68f8      	ldr	r0, [r7, #12]
 801297a:	f000 f893 	bl	8012aa4 <udp_bind>
 801297e:	4603      	mov	r3, r0
 8012980:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012982:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d002      	beq.n	8012990 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801298a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801298e:	e074      	b.n	8012a7a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	891b      	ldrh	r3, [r3, #8]
 8012994:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8012998:	4293      	cmp	r3, r2
 801299a:	d902      	bls.n	80129a2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801299c:	f04f 33ff 	mov.w	r3, #4294967295
 80129a0:	e06b      	b.n	8012a7a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80129a2:	2108      	movs	r1, #8
 80129a4:	68b8      	ldr	r0, [r7, #8]
 80129a6:	f7f9 fe9d 	bl	800c6e4 <pbuf_add_header>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d015      	beq.n	80129dc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80129b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80129b4:	2108      	movs	r1, #8
 80129b6:	2022      	movs	r0, #34	@ 0x22
 80129b8:	f7f9 fc46 	bl	800c248 <pbuf_alloc>
 80129bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80129be:	69fb      	ldr	r3, [r7, #28]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d102      	bne.n	80129ca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80129c4:	f04f 33ff 	mov.w	r3, #4294967295
 80129c8:	e057      	b.n	8012a7a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	891b      	ldrh	r3, [r3, #8]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d006      	beq.n	80129e0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80129d2:	68b9      	ldr	r1, [r7, #8]
 80129d4:	69f8      	ldr	r0, [r7, #28]
 80129d6:	f7fa f833 	bl	800ca40 <pbuf_chain>
 80129da:	e001      	b.n	80129e0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80129e0:	69fb      	ldr	r3, [r7, #28]
 80129e2:	895b      	ldrh	r3, [r3, #10]
 80129e4:	2b07      	cmp	r3, #7
 80129e6:	d806      	bhi.n	80129f6 <udp_sendto_if_src+0x11e>
 80129e8:	4b26      	ldr	r3, [pc, #152]	@ (8012a84 <udp_sendto_if_src+0x1ac>)
 80129ea:	f240 320d 	movw	r2, #781	@ 0x30d
 80129ee:	492c      	ldr	r1, [pc, #176]	@ (8012aa0 <udp_sendto_if_src+0x1c8>)
 80129f0:	4826      	ldr	r0, [pc, #152]	@ (8012a8c <udp_sendto_if_src+0x1b4>)
 80129f2:	f003 fc2b 	bl	801624c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80129f6:	69fb      	ldr	r3, [r7, #28]
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	8a5b      	ldrh	r3, [r3, #18]
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7f8 faef 	bl	800afe4 <lwip_htons>
 8012a06:	4603      	mov	r3, r0
 8012a08:	461a      	mov	r2, r3
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012a0e:	887b      	ldrh	r3, [r7, #2]
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7f8 fae7 	bl	800afe4 <lwip_htons>
 8012a16:	4603      	mov	r3, r0
 8012a18:	461a      	mov	r2, r3
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	2200      	movs	r2, #0
 8012a22:	719a      	strb	r2, [r3, #6]
 8012a24:	2200      	movs	r2, #0
 8012a26:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012a28:	69fb      	ldr	r3, [r7, #28]
 8012a2a:	891b      	ldrh	r3, [r3, #8]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7f8 fad9 	bl	800afe4 <lwip_htons>
 8012a32:	4603      	mov	r3, r0
 8012a34:	461a      	mov	r2, r3
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012a3a:	2311      	movs	r3, #17
 8012a3c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	7adb      	ldrb	r3, [r3, #11]
 8012a42:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	7a9b      	ldrb	r3, [r3, #10]
 8012a48:	7cb9      	ldrb	r1, [r7, #18]
 8012a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a4c:	9202      	str	r2, [sp, #8]
 8012a4e:	7cfa      	ldrb	r2, [r7, #19]
 8012a50:	9201      	str	r2, [sp, #4]
 8012a52:	9300      	str	r3, [sp, #0]
 8012a54:	460b      	mov	r3, r1
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a5a:	69f8      	ldr	r0, [r7, #28]
 8012a5c:	f001 fc3c 	bl	80142d8 <ip4_output_if_src>
 8012a60:	4603      	mov	r3, r0
 8012a62:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012a64:	69fa      	ldr	r2, [r7, #28]
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	d004      	beq.n	8012a76 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8012a6c:	69f8      	ldr	r0, [r7, #28]
 8012a6e:	f7f9 fecf 	bl	800c810 <pbuf_free>
    q = NULL;
 8012a72:	2300      	movs	r3, #0
 8012a74:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012a76:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	3720      	adds	r7, #32
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}
 8012a82:	bf00      	nop
 8012a84:	0801ba40 	.word	0x0801ba40
 8012a88:	0801bc2c 	.word	0x0801bc2c
 8012a8c:	0801ba94 	.word	0x0801ba94
 8012a90:	0801bc4c 	.word	0x0801bc4c
 8012a94:	0801bc6c 	.word	0x0801bc6c
 8012a98:	0801bc90 	.word	0x0801bc90
 8012a9c:	0801bcb4 	.word	0x0801bcb4
 8012aa0:	0801bcd8 	.word	0x0801bcd8

08012aa4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b086      	sub	sp, #24
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	60f8      	str	r0, [r7, #12]
 8012aac:	60b9      	str	r1, [r7, #8]
 8012aae:	4613      	mov	r3, r2
 8012ab0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d101      	bne.n	8012abc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012ab8:	4b39      	ldr	r3, [pc, #228]	@ (8012ba0 <udp_bind+0xfc>)
 8012aba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d109      	bne.n	8012ad6 <udp_bind+0x32>
 8012ac2:	4b38      	ldr	r3, [pc, #224]	@ (8012ba4 <udp_bind+0x100>)
 8012ac4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8012ac8:	4937      	ldr	r1, [pc, #220]	@ (8012ba8 <udp_bind+0x104>)
 8012aca:	4838      	ldr	r0, [pc, #224]	@ (8012bac <udp_bind+0x108>)
 8012acc:	f003 fbbe 	bl	801624c <iprintf>
 8012ad0:	f06f 030f 	mvn.w	r3, #15
 8012ad4:	e060      	b.n	8012b98 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012ada:	4b35      	ldr	r3, [pc, #212]	@ (8012bb0 <udp_bind+0x10c>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	617b      	str	r3, [r7, #20]
 8012ae0:	e009      	b.n	8012af6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012ae2:	68fa      	ldr	r2, [r7, #12]
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d102      	bne.n	8012af0 <udp_bind+0x4c>
      rebind = 1;
 8012aea:	2301      	movs	r3, #1
 8012aec:	74fb      	strb	r3, [r7, #19]
      break;
 8012aee:	e005      	b.n	8012afc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	68db      	ldr	r3, [r3, #12]
 8012af4:	617b      	str	r3, [r7, #20]
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d1f2      	bne.n	8012ae2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012afc:	88fb      	ldrh	r3, [r7, #6]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d109      	bne.n	8012b16 <udp_bind+0x72>
    port = udp_new_port();
 8012b02:	f7ff fc69 	bl	80123d8 <udp_new_port>
 8012b06:	4603      	mov	r3, r0
 8012b08:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012b0a:	88fb      	ldrh	r3, [r7, #6]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d12c      	bne.n	8012b6a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012b10:	f06f 0307 	mvn.w	r3, #7
 8012b14:	e040      	b.n	8012b98 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b16:	4b26      	ldr	r3, [pc, #152]	@ (8012bb0 <udp_bind+0x10c>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	617b      	str	r3, [r7, #20]
 8012b1c:	e022      	b.n	8012b64 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d01b      	beq.n	8012b5e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	8a5b      	ldrh	r3, [r3, #18]
 8012b2a:	88fa      	ldrh	r2, [r7, #6]
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d116      	bne.n	8012b5e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	681a      	ldr	r2, [r3, #0]
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d00d      	beq.n	8012b58 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d00a      	beq.n	8012b58 <udp_bind+0xb4>
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d006      	beq.n	8012b58 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012b4a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d003      	beq.n	8012b58 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d102      	bne.n	8012b5e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012b58:	f06f 0307 	mvn.w	r3, #7
 8012b5c:	e01c      	b.n	8012b98 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	68db      	ldr	r3, [r3, #12]
 8012b62:	617b      	str	r3, [r7, #20]
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d1d9      	bne.n	8012b1e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d002      	beq.n	8012b76 <udp_bind+0xd2>
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	e000      	b.n	8012b78 <udp_bind+0xd4>
 8012b76:	2300      	movs	r3, #0
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	88fa      	ldrh	r2, [r7, #6]
 8012b80:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012b82:	7cfb      	ldrb	r3, [r7, #19]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d106      	bne.n	8012b96 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012b88:	4b09      	ldr	r3, [pc, #36]	@ (8012bb0 <udp_bind+0x10c>)
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012b90:	4a07      	ldr	r2, [pc, #28]	@ (8012bb0 <udp_bind+0x10c>)
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012b96:	2300      	movs	r3, #0
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3718      	adds	r7, #24
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	0801c58c 	.word	0x0801c58c
 8012ba4:	0801ba40 	.word	0x0801ba40
 8012ba8:	0801bd08 	.word	0x0801bd08
 8012bac:	0801ba94 	.word	0x0801ba94
 8012bb0:	240082e0 	.word	0x240082e0

08012bb4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	60f8      	str	r0, [r7, #12]
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d107      	bne.n	8012bd6 <udp_recv+0x22>
 8012bc6:	4b08      	ldr	r3, [pc, #32]	@ (8012be8 <udp_recv+0x34>)
 8012bc8:	f240 428a 	movw	r2, #1162	@ 0x48a
 8012bcc:	4907      	ldr	r1, [pc, #28]	@ (8012bec <udp_recv+0x38>)
 8012bce:	4808      	ldr	r0, [pc, #32]	@ (8012bf0 <udp_recv+0x3c>)
 8012bd0:	f003 fb3c 	bl	801624c <iprintf>
 8012bd4:	e005      	b.n	8012be2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	68ba      	ldr	r2, [r7, #8]
 8012bda:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	61da      	str	r2, [r3, #28]
}
 8012be2:	3710      	adds	r7, #16
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	0801ba40 	.word	0x0801ba40
 8012bec:	0801bd74 	.word	0x0801bd74
 8012bf0:	0801ba94 	.word	0x0801ba94

08012bf4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d107      	bne.n	8012c12 <udp_remove+0x1e>
 8012c02:	4b19      	ldr	r3, [pc, #100]	@ (8012c68 <udp_remove+0x74>)
 8012c04:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8012c08:	4918      	ldr	r1, [pc, #96]	@ (8012c6c <udp_remove+0x78>)
 8012c0a:	4819      	ldr	r0, [pc, #100]	@ (8012c70 <udp_remove+0x7c>)
 8012c0c:	f003 fb1e 	bl	801624c <iprintf>
 8012c10:	e026      	b.n	8012c60 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012c12:	4b18      	ldr	r3, [pc, #96]	@ (8012c74 <udp_remove+0x80>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d105      	bne.n	8012c28 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012c1c:	4b15      	ldr	r3, [pc, #84]	@ (8012c74 <udp_remove+0x80>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	68db      	ldr	r3, [r3, #12]
 8012c22:	4a14      	ldr	r2, [pc, #80]	@ (8012c74 <udp_remove+0x80>)
 8012c24:	6013      	str	r3, [r2, #0]
 8012c26:	e017      	b.n	8012c58 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012c28:	4b12      	ldr	r3, [pc, #72]	@ (8012c74 <udp_remove+0x80>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	60fb      	str	r3, [r7, #12]
 8012c2e:	e010      	b.n	8012c52 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	68db      	ldr	r3, [r3, #12]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d009      	beq.n	8012c4c <udp_remove+0x58>
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	687a      	ldr	r2, [r7, #4]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d104      	bne.n	8012c4c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	68da      	ldr	r2, [r3, #12]
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	60da      	str	r2, [r3, #12]
        break;
 8012c4a:	e005      	b.n	8012c58 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	68db      	ldr	r3, [r3, #12]
 8012c50:	60fb      	str	r3, [r7, #12]
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d1eb      	bne.n	8012c30 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012c58:	6879      	ldr	r1, [r7, #4]
 8012c5a:	2000      	movs	r0, #0
 8012c5c:	f7f8 ff62 	bl	800bb24 <memp_free>
}
 8012c60:	3710      	adds	r7, #16
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	bf00      	nop
 8012c68:	0801ba40 	.word	0x0801ba40
 8012c6c:	0801bd8c 	.word	0x0801bd8c
 8012c70:	0801ba94 	.word	0x0801ba94
 8012c74:	240082e0 	.word	0x240082e0

08012c78 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012c7e:	2000      	movs	r0, #0
 8012c80:	f7f8 fee0 	bl	800ba44 <memp_malloc>
 8012c84:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d007      	beq.n	8012c9c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012c8c:	2220      	movs	r2, #32
 8012c8e:	2100      	movs	r1, #0
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f003 fc6f 	bl	8016574 <memset>
    pcb->ttl = UDP_TTL;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	22ff      	movs	r2, #255	@ 0xff
 8012c9a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012c9c:	687b      	ldr	r3, [r7, #4]
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3708      	adds	r7, #8
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}
	...

08012ca8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b085      	sub	sp, #20
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d01e      	beq.n	8012cf6 <udp_netif_ip_addr_changed+0x4e>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d01a      	beq.n	8012cf6 <udp_netif_ip_addr_changed+0x4e>
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d017      	beq.n	8012cf6 <udp_netif_ip_addr_changed+0x4e>
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d013      	beq.n	8012cf6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012cce:	4b0d      	ldr	r3, [pc, #52]	@ (8012d04 <udp_netif_ip_addr_changed+0x5c>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	60fb      	str	r3, [r7, #12]
 8012cd4:	e00c      	b.n	8012cf0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	681a      	ldr	r2, [r3, #0]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d103      	bne.n	8012cea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	68db      	ldr	r3, [r3, #12]
 8012cee:	60fb      	str	r3, [r7, #12]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d1ef      	bne.n	8012cd6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012cf6:	bf00      	nop
 8012cf8:	3714      	adds	r7, #20
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr
 8012d02:	bf00      	nop
 8012d04:	240082e0 	.word	0x240082e0

08012d08 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012d10:	4915      	ldr	r1, [pc, #84]	@ (8012d68 <etharp_free_entry+0x60>)
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	4613      	mov	r3, r2
 8012d16:	005b      	lsls	r3, r3, #1
 8012d18:	4413      	add	r3, r2
 8012d1a:	00db      	lsls	r3, r3, #3
 8012d1c:	440b      	add	r3, r1
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d013      	beq.n	8012d4c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012d24:	4910      	ldr	r1, [pc, #64]	@ (8012d68 <etharp_free_entry+0x60>)
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	4613      	mov	r3, r2
 8012d2a:	005b      	lsls	r3, r3, #1
 8012d2c:	4413      	add	r3, r2
 8012d2e:	00db      	lsls	r3, r3, #3
 8012d30:	440b      	add	r3, r1
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f9 fd6b 	bl	800c810 <pbuf_free>
    arp_table[i].q = NULL;
 8012d3a:	490b      	ldr	r1, [pc, #44]	@ (8012d68 <etharp_free_entry+0x60>)
 8012d3c:	687a      	ldr	r2, [r7, #4]
 8012d3e:	4613      	mov	r3, r2
 8012d40:	005b      	lsls	r3, r3, #1
 8012d42:	4413      	add	r3, r2
 8012d44:	00db      	lsls	r3, r3, #3
 8012d46:	440b      	add	r3, r1
 8012d48:	2200      	movs	r2, #0
 8012d4a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012d4c:	4906      	ldr	r1, [pc, #24]	@ (8012d68 <etharp_free_entry+0x60>)
 8012d4e:	687a      	ldr	r2, [r7, #4]
 8012d50:	4613      	mov	r3, r2
 8012d52:	005b      	lsls	r3, r3, #1
 8012d54:	4413      	add	r3, r2
 8012d56:	00db      	lsls	r3, r3, #3
 8012d58:	440b      	add	r3, r1
 8012d5a:	3314      	adds	r3, #20
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012d60:	bf00      	nop
 8012d62:	3708      	adds	r7, #8
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	240082e4 	.word	0x240082e4

08012d6c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b082      	sub	sp, #8
 8012d70:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d72:	2300      	movs	r3, #0
 8012d74:	607b      	str	r3, [r7, #4]
 8012d76:	e096      	b.n	8012ea6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012d78:	494f      	ldr	r1, [pc, #316]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	005b      	lsls	r3, r3, #1
 8012d80:	4413      	add	r3, r2
 8012d82:	00db      	lsls	r3, r3, #3
 8012d84:	440b      	add	r3, r1
 8012d86:	3314      	adds	r3, #20
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012d8c:	78fb      	ldrb	r3, [r7, #3]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f000 8086 	beq.w	8012ea0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012d94:	4948      	ldr	r1, [pc, #288]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	4613      	mov	r3, r2
 8012d9a:	005b      	lsls	r3, r3, #1
 8012d9c:	4413      	add	r3, r2
 8012d9e:	00db      	lsls	r3, r3, #3
 8012da0:	440b      	add	r3, r1
 8012da2:	3312      	adds	r3, #18
 8012da4:	881b      	ldrh	r3, [r3, #0]
 8012da6:	3301      	adds	r3, #1
 8012da8:	b298      	uxth	r0, r3
 8012daa:	4943      	ldr	r1, [pc, #268]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	4613      	mov	r3, r2
 8012db0:	005b      	lsls	r3, r3, #1
 8012db2:	4413      	add	r3, r2
 8012db4:	00db      	lsls	r3, r3, #3
 8012db6:	440b      	add	r3, r1
 8012db8:	3312      	adds	r3, #18
 8012dba:	4602      	mov	r2, r0
 8012dbc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012dbe:	493e      	ldr	r1, [pc, #248]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012dc0:	687a      	ldr	r2, [r7, #4]
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	005b      	lsls	r3, r3, #1
 8012dc6:	4413      	add	r3, r2
 8012dc8:	00db      	lsls	r3, r3, #3
 8012dca:	440b      	add	r3, r1
 8012dcc:	3312      	adds	r3, #18
 8012dce:	881b      	ldrh	r3, [r3, #0]
 8012dd0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012dd4:	d215      	bcs.n	8012e02 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012dd6:	4938      	ldr	r1, [pc, #224]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012dd8:	687a      	ldr	r2, [r7, #4]
 8012dda:	4613      	mov	r3, r2
 8012ddc:	005b      	lsls	r3, r3, #1
 8012dde:	4413      	add	r3, r2
 8012de0:	00db      	lsls	r3, r3, #3
 8012de2:	440b      	add	r3, r1
 8012de4:	3314      	adds	r3, #20
 8012de6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012de8:	2b01      	cmp	r3, #1
 8012dea:	d10e      	bne.n	8012e0a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012dec:	4932      	ldr	r1, [pc, #200]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012dee:	687a      	ldr	r2, [r7, #4]
 8012df0:	4613      	mov	r3, r2
 8012df2:	005b      	lsls	r3, r3, #1
 8012df4:	4413      	add	r3, r2
 8012df6:	00db      	lsls	r3, r3, #3
 8012df8:	440b      	add	r3, r1
 8012dfa:	3312      	adds	r3, #18
 8012dfc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012dfe:	2b04      	cmp	r3, #4
 8012e00:	d903      	bls.n	8012e0a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f7ff ff80 	bl	8012d08 <etharp_free_entry>
 8012e08:	e04a      	b.n	8012ea0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012e0a:	492b      	ldr	r1, [pc, #172]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	4613      	mov	r3, r2
 8012e10:	005b      	lsls	r3, r3, #1
 8012e12:	4413      	add	r3, r2
 8012e14:	00db      	lsls	r3, r3, #3
 8012e16:	440b      	add	r3, r1
 8012e18:	3314      	adds	r3, #20
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	2b03      	cmp	r3, #3
 8012e1e:	d10a      	bne.n	8012e36 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012e20:	4925      	ldr	r1, [pc, #148]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	4613      	mov	r3, r2
 8012e26:	005b      	lsls	r3, r3, #1
 8012e28:	4413      	add	r3, r2
 8012e2a:	00db      	lsls	r3, r3, #3
 8012e2c:	440b      	add	r3, r1
 8012e2e:	3314      	adds	r3, #20
 8012e30:	2204      	movs	r2, #4
 8012e32:	701a      	strb	r2, [r3, #0]
 8012e34:	e034      	b.n	8012ea0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012e36:	4920      	ldr	r1, [pc, #128]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	4613      	mov	r3, r2
 8012e3c:	005b      	lsls	r3, r3, #1
 8012e3e:	4413      	add	r3, r2
 8012e40:	00db      	lsls	r3, r3, #3
 8012e42:	440b      	add	r3, r1
 8012e44:	3314      	adds	r3, #20
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	2b04      	cmp	r3, #4
 8012e4a:	d10a      	bne.n	8012e62 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012e4c:	491a      	ldr	r1, [pc, #104]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	4613      	mov	r3, r2
 8012e52:	005b      	lsls	r3, r3, #1
 8012e54:	4413      	add	r3, r2
 8012e56:	00db      	lsls	r3, r3, #3
 8012e58:	440b      	add	r3, r1
 8012e5a:	3314      	adds	r3, #20
 8012e5c:	2202      	movs	r2, #2
 8012e5e:	701a      	strb	r2, [r3, #0]
 8012e60:	e01e      	b.n	8012ea0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012e62:	4915      	ldr	r1, [pc, #84]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012e64:	687a      	ldr	r2, [r7, #4]
 8012e66:	4613      	mov	r3, r2
 8012e68:	005b      	lsls	r3, r3, #1
 8012e6a:	4413      	add	r3, r2
 8012e6c:	00db      	lsls	r3, r3, #3
 8012e6e:	440b      	add	r3, r1
 8012e70:	3314      	adds	r3, #20
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	2b01      	cmp	r3, #1
 8012e76:	d113      	bne.n	8012ea0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012e78:	490f      	ldr	r1, [pc, #60]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	4613      	mov	r3, r2
 8012e7e:	005b      	lsls	r3, r3, #1
 8012e80:	4413      	add	r3, r2
 8012e82:	00db      	lsls	r3, r3, #3
 8012e84:	440b      	add	r3, r1
 8012e86:	3308      	adds	r3, #8
 8012e88:	6818      	ldr	r0, [r3, #0]
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	4413      	add	r3, r2
 8012e92:	00db      	lsls	r3, r3, #3
 8012e94:	4a08      	ldr	r2, [pc, #32]	@ (8012eb8 <etharp_tmr+0x14c>)
 8012e96:	4413      	add	r3, r2
 8012e98:	3304      	adds	r3, #4
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	f000 fe6e 	bl	8013b7c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	607b      	str	r3, [r7, #4]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2b09      	cmp	r3, #9
 8012eaa:	f77f af65 	ble.w	8012d78 <etharp_tmr+0xc>
      }
    }
  }
}
 8012eae:	bf00      	nop
 8012eb0:	bf00      	nop
 8012eb2:	3708      	adds	r7, #8
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	240082e4 	.word	0x240082e4

08012ebc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b08a      	sub	sp, #40	@ 0x28
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	60f8      	str	r0, [r7, #12]
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	607a      	str	r2, [r7, #4]
 8012ec8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012eca:	230a      	movs	r3, #10
 8012ecc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012ece:	230a      	movs	r3, #10
 8012ed0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012ed2:	230a      	movs	r3, #10
 8012ed4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012eda:	230a      	movs	r3, #10
 8012edc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	83bb      	strh	r3, [r7, #28]
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	837b      	strh	r3, [r7, #26]
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012eea:	2300      	movs	r3, #0
 8012eec:	843b      	strh	r3, [r7, #32]
 8012eee:	e0ae      	b.n	801304e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012ef0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ef4:	49a6      	ldr	r1, [pc, #664]	@ (8013190 <etharp_find_entry+0x2d4>)
 8012ef6:	4613      	mov	r3, r2
 8012ef8:	005b      	lsls	r3, r3, #1
 8012efa:	4413      	add	r3, r2
 8012efc:	00db      	lsls	r3, r3, #3
 8012efe:	440b      	add	r3, r1
 8012f00:	3314      	adds	r3, #20
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012f06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012f0a:	2b0a      	cmp	r3, #10
 8012f0c:	d105      	bne.n	8012f1a <etharp_find_entry+0x5e>
 8012f0e:	7dfb      	ldrb	r3, [r7, #23]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d102      	bne.n	8012f1a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012f14:	8c3b      	ldrh	r3, [r7, #32]
 8012f16:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012f18:	e095      	b.n	8013046 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012f1a:	7dfb      	ldrb	r3, [r7, #23]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	f000 8092 	beq.w	8013046 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012f22:	7dfb      	ldrb	r3, [r7, #23]
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d009      	beq.n	8012f3c <etharp_find_entry+0x80>
 8012f28:	7dfb      	ldrb	r3, [r7, #23]
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d806      	bhi.n	8012f3c <etharp_find_entry+0x80>
 8012f2e:	4b99      	ldr	r3, [pc, #612]	@ (8013194 <etharp_find_entry+0x2d8>)
 8012f30:	f240 1223 	movw	r2, #291	@ 0x123
 8012f34:	4998      	ldr	r1, [pc, #608]	@ (8013198 <etharp_find_entry+0x2dc>)
 8012f36:	4899      	ldr	r0, [pc, #612]	@ (801319c <etharp_find_entry+0x2e0>)
 8012f38:	f003 f988 	bl	801624c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d020      	beq.n	8012f84 <etharp_find_entry+0xc8>
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	6819      	ldr	r1, [r3, #0]
 8012f46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f4a:	4891      	ldr	r0, [pc, #580]	@ (8013190 <etharp_find_entry+0x2d4>)
 8012f4c:	4613      	mov	r3, r2
 8012f4e:	005b      	lsls	r3, r3, #1
 8012f50:	4413      	add	r3, r2
 8012f52:	00db      	lsls	r3, r3, #3
 8012f54:	4403      	add	r3, r0
 8012f56:	3304      	adds	r3, #4
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	4299      	cmp	r1, r3
 8012f5c:	d112      	bne.n	8012f84 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d00c      	beq.n	8012f7e <etharp_find_entry+0xc2>
 8012f64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f68:	4989      	ldr	r1, [pc, #548]	@ (8013190 <etharp_find_entry+0x2d4>)
 8012f6a:	4613      	mov	r3, r2
 8012f6c:	005b      	lsls	r3, r3, #1
 8012f6e:	4413      	add	r3, r2
 8012f70:	00db      	lsls	r3, r3, #3
 8012f72:	440b      	add	r3, r1
 8012f74:	3308      	adds	r3, #8
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	687a      	ldr	r2, [r7, #4]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d102      	bne.n	8012f84 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012f7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012f82:	e100      	b.n	8013186 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012f84:	7dfb      	ldrb	r3, [r7, #23]
 8012f86:	2b01      	cmp	r3, #1
 8012f88:	d140      	bne.n	801300c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012f8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f8e:	4980      	ldr	r1, [pc, #512]	@ (8013190 <etharp_find_entry+0x2d4>)
 8012f90:	4613      	mov	r3, r2
 8012f92:	005b      	lsls	r3, r3, #1
 8012f94:	4413      	add	r3, r2
 8012f96:	00db      	lsls	r3, r3, #3
 8012f98:	440b      	add	r3, r1
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d01a      	beq.n	8012fd6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012fa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012fa4:	497a      	ldr	r1, [pc, #488]	@ (8013190 <etharp_find_entry+0x2d4>)
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	005b      	lsls	r3, r3, #1
 8012faa:	4413      	add	r3, r2
 8012fac:	00db      	lsls	r3, r3, #3
 8012fae:	440b      	add	r3, r1
 8012fb0:	3312      	adds	r3, #18
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	8bba      	ldrh	r2, [r7, #28]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d845      	bhi.n	8013046 <etharp_find_entry+0x18a>
            old_queue = i;
 8012fba:	8c3b      	ldrh	r3, [r7, #32]
 8012fbc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012fbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012fc2:	4973      	ldr	r1, [pc, #460]	@ (8013190 <etharp_find_entry+0x2d4>)
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	005b      	lsls	r3, r3, #1
 8012fc8:	4413      	add	r3, r2
 8012fca:	00db      	lsls	r3, r3, #3
 8012fcc:	440b      	add	r3, r1
 8012fce:	3312      	adds	r3, #18
 8012fd0:	881b      	ldrh	r3, [r3, #0]
 8012fd2:	83bb      	strh	r3, [r7, #28]
 8012fd4:	e037      	b.n	8013046 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012fd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012fda:	496d      	ldr	r1, [pc, #436]	@ (8013190 <etharp_find_entry+0x2d4>)
 8012fdc:	4613      	mov	r3, r2
 8012fde:	005b      	lsls	r3, r3, #1
 8012fe0:	4413      	add	r3, r2
 8012fe2:	00db      	lsls	r3, r3, #3
 8012fe4:	440b      	add	r3, r1
 8012fe6:	3312      	adds	r3, #18
 8012fe8:	881b      	ldrh	r3, [r3, #0]
 8012fea:	8b7a      	ldrh	r2, [r7, #26]
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d82a      	bhi.n	8013046 <etharp_find_entry+0x18a>
            old_pending = i;
 8012ff0:	8c3b      	ldrh	r3, [r7, #32]
 8012ff2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012ff4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ff8:	4965      	ldr	r1, [pc, #404]	@ (8013190 <etharp_find_entry+0x2d4>)
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	005b      	lsls	r3, r3, #1
 8012ffe:	4413      	add	r3, r2
 8013000:	00db      	lsls	r3, r3, #3
 8013002:	440b      	add	r3, r1
 8013004:	3312      	adds	r3, #18
 8013006:	881b      	ldrh	r3, [r3, #0]
 8013008:	837b      	strh	r3, [r7, #26]
 801300a:	e01c      	b.n	8013046 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801300c:	7dfb      	ldrb	r3, [r7, #23]
 801300e:	2b01      	cmp	r3, #1
 8013010:	d919      	bls.n	8013046 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013012:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013016:	495e      	ldr	r1, [pc, #376]	@ (8013190 <etharp_find_entry+0x2d4>)
 8013018:	4613      	mov	r3, r2
 801301a:	005b      	lsls	r3, r3, #1
 801301c:	4413      	add	r3, r2
 801301e:	00db      	lsls	r3, r3, #3
 8013020:	440b      	add	r3, r1
 8013022:	3312      	adds	r3, #18
 8013024:	881b      	ldrh	r3, [r3, #0]
 8013026:	8b3a      	ldrh	r2, [r7, #24]
 8013028:	429a      	cmp	r2, r3
 801302a:	d80c      	bhi.n	8013046 <etharp_find_entry+0x18a>
            old_stable = i;
 801302c:	8c3b      	ldrh	r3, [r7, #32]
 801302e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8013030:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013034:	4956      	ldr	r1, [pc, #344]	@ (8013190 <etharp_find_entry+0x2d4>)
 8013036:	4613      	mov	r3, r2
 8013038:	005b      	lsls	r3, r3, #1
 801303a:	4413      	add	r3, r2
 801303c:	00db      	lsls	r3, r3, #3
 801303e:	440b      	add	r3, r1
 8013040:	3312      	adds	r3, #18
 8013042:	881b      	ldrh	r3, [r3, #0]
 8013044:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013046:	8c3b      	ldrh	r3, [r7, #32]
 8013048:	3301      	adds	r3, #1
 801304a:	b29b      	uxth	r3, r3
 801304c:	843b      	strh	r3, [r7, #32]
 801304e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013052:	2b09      	cmp	r3, #9
 8013054:	f77f af4c 	ble.w	8012ef0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013058:	7afb      	ldrb	r3, [r7, #11]
 801305a:	f003 0302 	and.w	r3, r3, #2
 801305e:	2b00      	cmp	r3, #0
 8013060:	d108      	bne.n	8013074 <etharp_find_entry+0x1b8>
 8013062:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013066:	2b0a      	cmp	r3, #10
 8013068:	d107      	bne.n	801307a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801306a:	7afb      	ldrb	r3, [r7, #11]
 801306c:	f003 0301 	and.w	r3, r3, #1
 8013070:	2b00      	cmp	r3, #0
 8013072:	d102      	bne.n	801307a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013074:	f04f 33ff 	mov.w	r3, #4294967295
 8013078:	e085      	b.n	8013186 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801307a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801307e:	2b09      	cmp	r3, #9
 8013080:	dc02      	bgt.n	8013088 <etharp_find_entry+0x1cc>
    i = empty;
 8013082:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013084:	843b      	strh	r3, [r7, #32]
 8013086:	e039      	b.n	80130fc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013088:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801308c:	2b09      	cmp	r3, #9
 801308e:	dc14      	bgt.n	80130ba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013090:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013092:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013094:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013098:	493d      	ldr	r1, [pc, #244]	@ (8013190 <etharp_find_entry+0x2d4>)
 801309a:	4613      	mov	r3, r2
 801309c:	005b      	lsls	r3, r3, #1
 801309e:	4413      	add	r3, r2
 80130a0:	00db      	lsls	r3, r3, #3
 80130a2:	440b      	add	r3, r1
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d018      	beq.n	80130dc <etharp_find_entry+0x220>
 80130aa:	4b3a      	ldr	r3, [pc, #232]	@ (8013194 <etharp_find_entry+0x2d8>)
 80130ac:	f240 126d 	movw	r2, #365	@ 0x16d
 80130b0:	493b      	ldr	r1, [pc, #236]	@ (80131a0 <etharp_find_entry+0x2e4>)
 80130b2:	483a      	ldr	r0, [pc, #232]	@ (801319c <etharp_find_entry+0x2e0>)
 80130b4:	f003 f8ca 	bl	801624c <iprintf>
 80130b8:	e010      	b.n	80130dc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80130ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80130be:	2b09      	cmp	r3, #9
 80130c0:	dc02      	bgt.n	80130c8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80130c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80130c4:	843b      	strh	r3, [r7, #32]
 80130c6:	e009      	b.n	80130dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80130c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80130cc:	2b09      	cmp	r3, #9
 80130ce:	dc02      	bgt.n	80130d6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80130d0:	8bfb      	ldrh	r3, [r7, #30]
 80130d2:	843b      	strh	r3, [r7, #32]
 80130d4:	e002      	b.n	80130dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80130d6:	f04f 33ff 	mov.w	r3, #4294967295
 80130da:	e054      	b.n	8013186 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80130dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80130e0:	2b09      	cmp	r3, #9
 80130e2:	dd06      	ble.n	80130f2 <etharp_find_entry+0x236>
 80130e4:	4b2b      	ldr	r3, [pc, #172]	@ (8013194 <etharp_find_entry+0x2d8>)
 80130e6:	f240 127f 	movw	r2, #383	@ 0x17f
 80130ea:	492e      	ldr	r1, [pc, #184]	@ (80131a4 <etharp_find_entry+0x2e8>)
 80130ec:	482b      	ldr	r0, [pc, #172]	@ (801319c <etharp_find_entry+0x2e0>)
 80130ee:	f003 f8ad 	bl	801624c <iprintf>
    etharp_free_entry(i);
 80130f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7ff fe06 	bl	8012d08 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80130fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013100:	2b09      	cmp	r3, #9
 8013102:	dd06      	ble.n	8013112 <etharp_find_entry+0x256>
 8013104:	4b23      	ldr	r3, [pc, #140]	@ (8013194 <etharp_find_entry+0x2d8>)
 8013106:	f240 1283 	movw	r2, #387	@ 0x183
 801310a:	4926      	ldr	r1, [pc, #152]	@ (80131a4 <etharp_find_entry+0x2e8>)
 801310c:	4823      	ldr	r0, [pc, #140]	@ (801319c <etharp_find_entry+0x2e0>)
 801310e:	f003 f89d 	bl	801624c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013112:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013116:	491e      	ldr	r1, [pc, #120]	@ (8013190 <etharp_find_entry+0x2d4>)
 8013118:	4613      	mov	r3, r2
 801311a:	005b      	lsls	r3, r3, #1
 801311c:	4413      	add	r3, r2
 801311e:	00db      	lsls	r3, r3, #3
 8013120:	440b      	add	r3, r1
 8013122:	3314      	adds	r3, #20
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d006      	beq.n	8013138 <etharp_find_entry+0x27c>
 801312a:	4b1a      	ldr	r3, [pc, #104]	@ (8013194 <etharp_find_entry+0x2d8>)
 801312c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013130:	491d      	ldr	r1, [pc, #116]	@ (80131a8 <etharp_find_entry+0x2ec>)
 8013132:	481a      	ldr	r0, [pc, #104]	@ (801319c <etharp_find_entry+0x2e0>)
 8013134:	f003 f88a 	bl	801624c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d00b      	beq.n	8013156 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801313e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	6819      	ldr	r1, [r3, #0]
 8013146:	4812      	ldr	r0, [pc, #72]	@ (8013190 <etharp_find_entry+0x2d4>)
 8013148:	4613      	mov	r3, r2
 801314a:	005b      	lsls	r3, r3, #1
 801314c:	4413      	add	r3, r2
 801314e:	00db      	lsls	r3, r3, #3
 8013150:	4403      	add	r3, r0
 8013152:	3304      	adds	r3, #4
 8013154:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013156:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801315a:	490d      	ldr	r1, [pc, #52]	@ (8013190 <etharp_find_entry+0x2d4>)
 801315c:	4613      	mov	r3, r2
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	4413      	add	r3, r2
 8013162:	00db      	lsls	r3, r3, #3
 8013164:	440b      	add	r3, r1
 8013166:	3312      	adds	r3, #18
 8013168:	2200      	movs	r2, #0
 801316a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801316c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013170:	4907      	ldr	r1, [pc, #28]	@ (8013190 <etharp_find_entry+0x2d4>)
 8013172:	4613      	mov	r3, r2
 8013174:	005b      	lsls	r3, r3, #1
 8013176:	4413      	add	r3, r2
 8013178:	00db      	lsls	r3, r3, #3
 801317a:	440b      	add	r3, r1
 801317c:	3308      	adds	r3, #8
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013182:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013186:	4618      	mov	r0, r3
 8013188:	3728      	adds	r7, #40	@ 0x28
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}
 801318e:	bf00      	nop
 8013190:	240082e4 	.word	0x240082e4
 8013194:	0801bda4 	.word	0x0801bda4
 8013198:	0801bddc 	.word	0x0801bddc
 801319c:	0801be1c 	.word	0x0801be1c
 80131a0:	0801be44 	.word	0x0801be44
 80131a4:	0801be5c 	.word	0x0801be5c
 80131a8:	0801be70 	.word	0x0801be70

080131ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b088      	sub	sp, #32
 80131b0:	af02      	add	r7, sp, #8
 80131b2:	60f8      	str	r0, [r7, #12]
 80131b4:	60b9      	str	r1, [r7, #8]
 80131b6:	607a      	str	r2, [r7, #4]
 80131b8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80131c0:	2b06      	cmp	r3, #6
 80131c2:	d006      	beq.n	80131d2 <etharp_update_arp_entry+0x26>
 80131c4:	4b48      	ldr	r3, [pc, #288]	@ (80132e8 <etharp_update_arp_entry+0x13c>)
 80131c6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80131ca:	4948      	ldr	r1, [pc, #288]	@ (80132ec <etharp_update_arp_entry+0x140>)
 80131cc:	4848      	ldr	r0, [pc, #288]	@ (80132f0 <etharp_update_arp_entry+0x144>)
 80131ce:	f003 f83d 	bl	801624c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d012      	beq.n	80131fe <etharp_update_arp_entry+0x52>
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d00e      	beq.n	80131fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	68f9      	ldr	r1, [r7, #12]
 80131e6:	4618      	mov	r0, r3
 80131e8:	f001 f924 	bl	8014434 <ip4_addr_isbroadcast_u32>
 80131ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d105      	bne.n	80131fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80131fa:	2be0      	cmp	r3, #224	@ 0xe0
 80131fc:	d102      	bne.n	8013204 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80131fe:	f06f 030f 	mvn.w	r3, #15
 8013202:	e06c      	b.n	80132de <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013204:	78fb      	ldrb	r3, [r7, #3]
 8013206:	68fa      	ldr	r2, [r7, #12]
 8013208:	4619      	mov	r1, r3
 801320a:	68b8      	ldr	r0, [r7, #8]
 801320c:	f7ff fe56 	bl	8012ebc <etharp_find_entry>
 8013210:	4603      	mov	r3, r0
 8013212:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013214:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013218:	2b00      	cmp	r3, #0
 801321a:	da02      	bge.n	8013222 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801321c:	8afb      	ldrh	r3, [r7, #22]
 801321e:	b25b      	sxtb	r3, r3
 8013220:	e05d      	b.n	80132de <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013222:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013226:	4933      	ldr	r1, [pc, #204]	@ (80132f4 <etharp_update_arp_entry+0x148>)
 8013228:	4613      	mov	r3, r2
 801322a:	005b      	lsls	r3, r3, #1
 801322c:	4413      	add	r3, r2
 801322e:	00db      	lsls	r3, r3, #3
 8013230:	440b      	add	r3, r1
 8013232:	3314      	adds	r3, #20
 8013234:	2202      	movs	r2, #2
 8013236:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013238:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801323c:	492d      	ldr	r1, [pc, #180]	@ (80132f4 <etharp_update_arp_entry+0x148>)
 801323e:	4613      	mov	r3, r2
 8013240:	005b      	lsls	r3, r3, #1
 8013242:	4413      	add	r3, r2
 8013244:	00db      	lsls	r3, r3, #3
 8013246:	440b      	add	r3, r1
 8013248:	3308      	adds	r3, #8
 801324a:	68fa      	ldr	r2, [r7, #12]
 801324c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801324e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013252:	4613      	mov	r3, r2
 8013254:	005b      	lsls	r3, r3, #1
 8013256:	4413      	add	r3, r2
 8013258:	00db      	lsls	r3, r3, #3
 801325a:	3308      	adds	r3, #8
 801325c:	4a25      	ldr	r2, [pc, #148]	@ (80132f4 <etharp_update_arp_entry+0x148>)
 801325e:	4413      	add	r3, r2
 8013260:	3304      	adds	r3, #4
 8013262:	2206      	movs	r2, #6
 8013264:	6879      	ldr	r1, [r7, #4]
 8013266:	4618      	mov	r0, r3
 8013268:	f003 fa15 	bl	8016696 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801326c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013270:	4920      	ldr	r1, [pc, #128]	@ (80132f4 <etharp_update_arp_entry+0x148>)
 8013272:	4613      	mov	r3, r2
 8013274:	005b      	lsls	r3, r3, #1
 8013276:	4413      	add	r3, r2
 8013278:	00db      	lsls	r3, r3, #3
 801327a:	440b      	add	r3, r1
 801327c:	3312      	adds	r3, #18
 801327e:	2200      	movs	r2, #0
 8013280:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013282:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013286:	491b      	ldr	r1, [pc, #108]	@ (80132f4 <etharp_update_arp_entry+0x148>)
 8013288:	4613      	mov	r3, r2
 801328a:	005b      	lsls	r3, r3, #1
 801328c:	4413      	add	r3, r2
 801328e:	00db      	lsls	r3, r3, #3
 8013290:	440b      	add	r3, r1
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d021      	beq.n	80132dc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013298:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801329c:	4915      	ldr	r1, [pc, #84]	@ (80132f4 <etharp_update_arp_entry+0x148>)
 801329e:	4613      	mov	r3, r2
 80132a0:	005b      	lsls	r3, r3, #1
 80132a2:	4413      	add	r3, r2
 80132a4:	00db      	lsls	r3, r3, #3
 80132a6:	440b      	add	r3, r1
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80132ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80132b0:	4910      	ldr	r1, [pc, #64]	@ (80132f4 <etharp_update_arp_entry+0x148>)
 80132b2:	4613      	mov	r3, r2
 80132b4:	005b      	lsls	r3, r3, #1
 80132b6:	4413      	add	r3, r2
 80132b8:	00db      	lsls	r3, r3, #3
 80132ba:	440b      	add	r3, r1
 80132bc:	2200      	movs	r2, #0
 80132be:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80132c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80132ca:	9300      	str	r3, [sp, #0]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6939      	ldr	r1, [r7, #16]
 80132d0:	68f8      	ldr	r0, [r7, #12]
 80132d2:	f001 ffbd 	bl	8015250 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80132d6:	6938      	ldr	r0, [r7, #16]
 80132d8:	f7f9 fa9a 	bl	800c810 <pbuf_free>
  }
  return ERR_OK;
 80132dc:	2300      	movs	r3, #0
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3718      	adds	r7, #24
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	0801bda4 	.word	0x0801bda4
 80132ec:	0801be9c 	.word	0x0801be9c
 80132f0:	0801be1c 	.word	0x0801be1c
 80132f4:	240082e4 	.word	0x240082e4

080132f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b084      	sub	sp, #16
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013300:	2300      	movs	r3, #0
 8013302:	60fb      	str	r3, [r7, #12]
 8013304:	e01e      	b.n	8013344 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013306:	4913      	ldr	r1, [pc, #76]	@ (8013354 <etharp_cleanup_netif+0x5c>)
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	4613      	mov	r3, r2
 801330c:	005b      	lsls	r3, r3, #1
 801330e:	4413      	add	r3, r2
 8013310:	00db      	lsls	r3, r3, #3
 8013312:	440b      	add	r3, r1
 8013314:	3314      	adds	r3, #20
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801331a:	7afb      	ldrb	r3, [r7, #11]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d00e      	beq.n	801333e <etharp_cleanup_netif+0x46>
 8013320:	490c      	ldr	r1, [pc, #48]	@ (8013354 <etharp_cleanup_netif+0x5c>)
 8013322:	68fa      	ldr	r2, [r7, #12]
 8013324:	4613      	mov	r3, r2
 8013326:	005b      	lsls	r3, r3, #1
 8013328:	4413      	add	r3, r2
 801332a:	00db      	lsls	r3, r3, #3
 801332c:	440b      	add	r3, r1
 801332e:	3308      	adds	r3, #8
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	429a      	cmp	r2, r3
 8013336:	d102      	bne.n	801333e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013338:	68f8      	ldr	r0, [r7, #12]
 801333a:	f7ff fce5 	bl	8012d08 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	3301      	adds	r3, #1
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	2b09      	cmp	r3, #9
 8013348:	dddd      	ble.n	8013306 <etharp_cleanup_netif+0xe>
    }
  }
}
 801334a:	bf00      	nop
 801334c:	bf00      	nop
 801334e:	3710      	adds	r7, #16
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	240082e4 	.word	0x240082e4

08013358 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013358:	b5b0      	push	{r4, r5, r7, lr}
 801335a:	b08a      	sub	sp, #40	@ 0x28
 801335c:	af04      	add	r7, sp, #16
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d107      	bne.n	8013378 <etharp_input+0x20>
 8013368:	4b3d      	ldr	r3, [pc, #244]	@ (8013460 <etharp_input+0x108>)
 801336a:	f240 228a 	movw	r2, #650	@ 0x28a
 801336e:	493d      	ldr	r1, [pc, #244]	@ (8013464 <etharp_input+0x10c>)
 8013370:	483d      	ldr	r0, [pc, #244]	@ (8013468 <etharp_input+0x110>)
 8013372:	f002 ff6b 	bl	801624c <iprintf>
 8013376:	e06f      	b.n	8013458 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801337e:	693b      	ldr	r3, [r7, #16]
 8013380:	881b      	ldrh	r3, [r3, #0]
 8013382:	b29b      	uxth	r3, r3
 8013384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013388:	d10c      	bne.n	80133a4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801338e:	2b06      	cmp	r3, #6
 8013390:	d108      	bne.n	80133a4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013396:	2b04      	cmp	r3, #4
 8013398:	d104      	bne.n	80133a4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	885b      	ldrh	r3, [r3, #2]
 801339e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80133a0:	2b08      	cmp	r3, #8
 80133a2:	d003      	beq.n	80133ac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f7f9 fa33 	bl	800c810 <pbuf_free>
    return;
 80133aa:	e055      	b.n	8013458 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	330e      	adds	r3, #14
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	3318      	adds	r3, #24
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	3304      	adds	r3, #4
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d102      	bne.n	80133cc <etharp_input+0x74>
    for_us = 0;
 80133c6:	2300      	movs	r3, #0
 80133c8:	75fb      	strb	r3, [r7, #23]
 80133ca:	e009      	b.n	80133e0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80133cc:	68ba      	ldr	r2, [r7, #8]
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	3304      	adds	r3, #4
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	429a      	cmp	r2, r3
 80133d6:	bf0c      	ite	eq
 80133d8:	2301      	moveq	r3, #1
 80133da:	2300      	movne	r3, #0
 80133dc:	b2db      	uxtb	r3, r3
 80133de:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	f103 0208 	add.w	r2, r3, #8
 80133e6:	7dfb      	ldrb	r3, [r7, #23]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d001      	beq.n	80133f0 <etharp_input+0x98>
 80133ec:	2301      	movs	r3, #1
 80133ee:	e000      	b.n	80133f2 <etharp_input+0x9a>
 80133f0:	2302      	movs	r3, #2
 80133f2:	f107 010c 	add.w	r1, r7, #12
 80133f6:	6838      	ldr	r0, [r7, #0]
 80133f8:	f7ff fed8 	bl	80131ac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	88db      	ldrh	r3, [r3, #6]
 8013400:	b29b      	uxth	r3, r3
 8013402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013406:	d003      	beq.n	8013410 <etharp_input+0xb8>
 8013408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801340c:	d01e      	beq.n	801344c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801340e:	e020      	b.n	8013452 <etharp_input+0xfa>
      if (for_us) {
 8013410:	7dfb      	ldrb	r3, [r7, #23]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d01c      	beq.n	8013450 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801342c:	693a      	ldr	r2, [r7, #16]
 801342e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013430:	2102      	movs	r1, #2
 8013432:	9103      	str	r1, [sp, #12]
 8013434:	f107 010c 	add.w	r1, r7, #12
 8013438:	9102      	str	r1, [sp, #8]
 801343a:	9201      	str	r2, [sp, #4]
 801343c:	9300      	str	r3, [sp, #0]
 801343e:	462b      	mov	r3, r5
 8013440:	4622      	mov	r2, r4
 8013442:	4601      	mov	r1, r0
 8013444:	6838      	ldr	r0, [r7, #0]
 8013446:	f000 faeb 	bl	8013a20 <etharp_raw>
      break;
 801344a:	e001      	b.n	8013450 <etharp_input+0xf8>
      break;
 801344c:	bf00      	nop
 801344e:	e000      	b.n	8013452 <etharp_input+0xfa>
      break;
 8013450:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	f7f9 f9dc 	bl	800c810 <pbuf_free>
}
 8013458:	3718      	adds	r7, #24
 801345a:	46bd      	mov	sp, r7
 801345c:	bdb0      	pop	{r4, r5, r7, pc}
 801345e:	bf00      	nop
 8013460:	0801bda4 	.word	0x0801bda4
 8013464:	0801bef4 	.word	0x0801bef4
 8013468:	0801be1c 	.word	0x0801be1c

0801346c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b086      	sub	sp, #24
 8013470:	af02      	add	r7, sp, #8
 8013472:	60f8      	str	r0, [r7, #12]
 8013474:	60b9      	str	r1, [r7, #8]
 8013476:	4613      	mov	r3, r2
 8013478:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801347a:	79fa      	ldrb	r2, [r7, #7]
 801347c:	4944      	ldr	r1, [pc, #272]	@ (8013590 <etharp_output_to_arp_index+0x124>)
 801347e:	4613      	mov	r3, r2
 8013480:	005b      	lsls	r3, r3, #1
 8013482:	4413      	add	r3, r2
 8013484:	00db      	lsls	r3, r3, #3
 8013486:	440b      	add	r3, r1
 8013488:	3314      	adds	r3, #20
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	2b01      	cmp	r3, #1
 801348e:	d806      	bhi.n	801349e <etharp_output_to_arp_index+0x32>
 8013490:	4b40      	ldr	r3, [pc, #256]	@ (8013594 <etharp_output_to_arp_index+0x128>)
 8013492:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013496:	4940      	ldr	r1, [pc, #256]	@ (8013598 <etharp_output_to_arp_index+0x12c>)
 8013498:	4840      	ldr	r0, [pc, #256]	@ (801359c <etharp_output_to_arp_index+0x130>)
 801349a:	f002 fed7 	bl	801624c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801349e:	79fa      	ldrb	r2, [r7, #7]
 80134a0:	493b      	ldr	r1, [pc, #236]	@ (8013590 <etharp_output_to_arp_index+0x124>)
 80134a2:	4613      	mov	r3, r2
 80134a4:	005b      	lsls	r3, r3, #1
 80134a6:	4413      	add	r3, r2
 80134a8:	00db      	lsls	r3, r3, #3
 80134aa:	440b      	add	r3, r1
 80134ac:	3314      	adds	r3, #20
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	2b02      	cmp	r3, #2
 80134b2:	d153      	bne.n	801355c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80134b4:	79fa      	ldrb	r2, [r7, #7]
 80134b6:	4936      	ldr	r1, [pc, #216]	@ (8013590 <etharp_output_to_arp_index+0x124>)
 80134b8:	4613      	mov	r3, r2
 80134ba:	005b      	lsls	r3, r3, #1
 80134bc:	4413      	add	r3, r2
 80134be:	00db      	lsls	r3, r3, #3
 80134c0:	440b      	add	r3, r1
 80134c2:	3312      	adds	r3, #18
 80134c4:	881b      	ldrh	r3, [r3, #0]
 80134c6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80134ca:	d919      	bls.n	8013500 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80134cc:	79fa      	ldrb	r2, [r7, #7]
 80134ce:	4613      	mov	r3, r2
 80134d0:	005b      	lsls	r3, r3, #1
 80134d2:	4413      	add	r3, r2
 80134d4:	00db      	lsls	r3, r3, #3
 80134d6:	4a2e      	ldr	r2, [pc, #184]	@ (8013590 <etharp_output_to_arp_index+0x124>)
 80134d8:	4413      	add	r3, r2
 80134da:	3304      	adds	r3, #4
 80134dc:	4619      	mov	r1, r3
 80134de:	68f8      	ldr	r0, [r7, #12]
 80134e0:	f000 fb4c 	bl	8013b7c <etharp_request>
 80134e4:	4603      	mov	r3, r0
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d138      	bne.n	801355c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80134ea:	79fa      	ldrb	r2, [r7, #7]
 80134ec:	4928      	ldr	r1, [pc, #160]	@ (8013590 <etharp_output_to_arp_index+0x124>)
 80134ee:	4613      	mov	r3, r2
 80134f0:	005b      	lsls	r3, r3, #1
 80134f2:	4413      	add	r3, r2
 80134f4:	00db      	lsls	r3, r3, #3
 80134f6:	440b      	add	r3, r1
 80134f8:	3314      	adds	r3, #20
 80134fa:	2203      	movs	r2, #3
 80134fc:	701a      	strb	r2, [r3, #0]
 80134fe:	e02d      	b.n	801355c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013500:	79fa      	ldrb	r2, [r7, #7]
 8013502:	4923      	ldr	r1, [pc, #140]	@ (8013590 <etharp_output_to_arp_index+0x124>)
 8013504:	4613      	mov	r3, r2
 8013506:	005b      	lsls	r3, r3, #1
 8013508:	4413      	add	r3, r2
 801350a:	00db      	lsls	r3, r3, #3
 801350c:	440b      	add	r3, r1
 801350e:	3312      	adds	r3, #18
 8013510:	881b      	ldrh	r3, [r3, #0]
 8013512:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8013516:	d321      	bcc.n	801355c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013518:	79fa      	ldrb	r2, [r7, #7]
 801351a:	4613      	mov	r3, r2
 801351c:	005b      	lsls	r3, r3, #1
 801351e:	4413      	add	r3, r2
 8013520:	00db      	lsls	r3, r3, #3
 8013522:	4a1b      	ldr	r2, [pc, #108]	@ (8013590 <etharp_output_to_arp_index+0x124>)
 8013524:	4413      	add	r3, r2
 8013526:	1d19      	adds	r1, r3, #4
 8013528:	79fa      	ldrb	r2, [r7, #7]
 801352a:	4613      	mov	r3, r2
 801352c:	005b      	lsls	r3, r3, #1
 801352e:	4413      	add	r3, r2
 8013530:	00db      	lsls	r3, r3, #3
 8013532:	3308      	adds	r3, #8
 8013534:	4a16      	ldr	r2, [pc, #88]	@ (8013590 <etharp_output_to_arp_index+0x124>)
 8013536:	4413      	add	r3, r2
 8013538:	3304      	adds	r3, #4
 801353a:	461a      	mov	r2, r3
 801353c:	68f8      	ldr	r0, [r7, #12]
 801353e:	f000 fafb 	bl	8013b38 <etharp_request_dst>
 8013542:	4603      	mov	r3, r0
 8013544:	2b00      	cmp	r3, #0
 8013546:	d109      	bne.n	801355c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013548:	79fa      	ldrb	r2, [r7, #7]
 801354a:	4911      	ldr	r1, [pc, #68]	@ (8013590 <etharp_output_to_arp_index+0x124>)
 801354c:	4613      	mov	r3, r2
 801354e:	005b      	lsls	r3, r3, #1
 8013550:	4413      	add	r3, r2
 8013552:	00db      	lsls	r3, r3, #3
 8013554:	440b      	add	r3, r1
 8013556:	3314      	adds	r3, #20
 8013558:	2203      	movs	r2, #3
 801355a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8013562:	79fa      	ldrb	r2, [r7, #7]
 8013564:	4613      	mov	r3, r2
 8013566:	005b      	lsls	r3, r3, #1
 8013568:	4413      	add	r3, r2
 801356a:	00db      	lsls	r3, r3, #3
 801356c:	3308      	adds	r3, #8
 801356e:	4a08      	ldr	r2, [pc, #32]	@ (8013590 <etharp_output_to_arp_index+0x124>)
 8013570:	4413      	add	r3, r2
 8013572:	3304      	adds	r3, #4
 8013574:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013578:	9200      	str	r2, [sp, #0]
 801357a:	460a      	mov	r2, r1
 801357c:	68b9      	ldr	r1, [r7, #8]
 801357e:	68f8      	ldr	r0, [r7, #12]
 8013580:	f001 fe66 	bl	8015250 <ethernet_output>
 8013584:	4603      	mov	r3, r0
}
 8013586:	4618      	mov	r0, r3
 8013588:	3710      	adds	r7, #16
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}
 801358e:	bf00      	nop
 8013590:	240082e4 	.word	0x240082e4
 8013594:	0801bda4 	.word	0x0801bda4
 8013598:	0801bf14 	.word	0x0801bf14
 801359c:	0801be1c 	.word	0x0801be1c

080135a0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b08a      	sub	sp, #40	@ 0x28
 80135a4:	af02      	add	r7, sp, #8
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d106      	bne.n	80135c4 <etharp_output+0x24>
 80135b6:	4b73      	ldr	r3, [pc, #460]	@ (8013784 <etharp_output+0x1e4>)
 80135b8:	f240 321e 	movw	r2, #798	@ 0x31e
 80135bc:	4972      	ldr	r1, [pc, #456]	@ (8013788 <etharp_output+0x1e8>)
 80135be:	4873      	ldr	r0, [pc, #460]	@ (801378c <etharp_output+0x1ec>)
 80135c0:	f002 fe44 	bl	801624c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d106      	bne.n	80135d8 <etharp_output+0x38>
 80135ca:	4b6e      	ldr	r3, [pc, #440]	@ (8013784 <etharp_output+0x1e4>)
 80135cc:	f240 321f 	movw	r2, #799	@ 0x31f
 80135d0:	496f      	ldr	r1, [pc, #444]	@ (8013790 <etharp_output+0x1f0>)
 80135d2:	486e      	ldr	r0, [pc, #440]	@ (801378c <etharp_output+0x1ec>)
 80135d4:	f002 fe3a 	bl	801624c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d106      	bne.n	80135ec <etharp_output+0x4c>
 80135de:	4b69      	ldr	r3, [pc, #420]	@ (8013784 <etharp_output+0x1e4>)
 80135e0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80135e4:	496b      	ldr	r1, [pc, #428]	@ (8013794 <etharp_output+0x1f4>)
 80135e6:	4869      	ldr	r0, [pc, #420]	@ (801378c <etharp_output+0x1ec>)
 80135e8:	f002 fe30 	bl	801624c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	68f9      	ldr	r1, [r7, #12]
 80135f2:	4618      	mov	r0, r3
 80135f4:	f000 ff1e 	bl	8014434 <ip4_addr_isbroadcast_u32>
 80135f8:	4603      	mov	r3, r0
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d002      	beq.n	8013604 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80135fe:	4b66      	ldr	r3, [pc, #408]	@ (8013798 <etharp_output+0x1f8>)
 8013600:	61fb      	str	r3, [r7, #28]
 8013602:	e0af      	b.n	8013764 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801360c:	2be0      	cmp	r3, #224	@ 0xe0
 801360e:	d118      	bne.n	8013642 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013610:	2301      	movs	r3, #1
 8013612:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013614:	2300      	movs	r3, #0
 8013616:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013618:	235e      	movs	r3, #94	@ 0x5e
 801361a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	3301      	adds	r3, #1
 8013620:	781b      	ldrb	r3, [r3, #0]
 8013622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013626:	b2db      	uxtb	r3, r3
 8013628:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	3302      	adds	r3, #2
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	3303      	adds	r3, #3
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801363a:	f107 0310 	add.w	r3, r7, #16
 801363e:	61fb      	str	r3, [r7, #28]
 8013640:	e090      	b.n	8013764 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681a      	ldr	r2, [r3, #0]
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	3304      	adds	r3, #4
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	405a      	eors	r2, r3
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	3308      	adds	r3, #8
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	4013      	ands	r3, r2
 8013656:	2b00      	cmp	r3, #0
 8013658:	d012      	beq.n	8013680 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013660:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8013664:	4293      	cmp	r3, r2
 8013666:	d00b      	beq.n	8013680 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	330c      	adds	r3, #12
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d003      	beq.n	801367a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	330c      	adds	r3, #12
 8013676:	61bb      	str	r3, [r7, #24]
 8013678:	e002      	b.n	8013680 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801367a:	f06f 0303 	mvn.w	r3, #3
 801367e:	e07d      	b.n	801377c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013680:	4b46      	ldr	r3, [pc, #280]	@ (801379c <etharp_output+0x1fc>)
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	4619      	mov	r1, r3
 8013686:	4a46      	ldr	r2, [pc, #280]	@ (80137a0 <etharp_output+0x200>)
 8013688:	460b      	mov	r3, r1
 801368a:	005b      	lsls	r3, r3, #1
 801368c:	440b      	add	r3, r1
 801368e:	00db      	lsls	r3, r3, #3
 8013690:	4413      	add	r3, r2
 8013692:	3314      	adds	r3, #20
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	2b01      	cmp	r3, #1
 8013698:	d925      	bls.n	80136e6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801369a:	4b40      	ldr	r3, [pc, #256]	@ (801379c <etharp_output+0x1fc>)
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	4619      	mov	r1, r3
 80136a0:	4a3f      	ldr	r2, [pc, #252]	@ (80137a0 <etharp_output+0x200>)
 80136a2:	460b      	mov	r3, r1
 80136a4:	005b      	lsls	r3, r3, #1
 80136a6:	440b      	add	r3, r1
 80136a8:	00db      	lsls	r3, r3, #3
 80136aa:	4413      	add	r3, r2
 80136ac:	3308      	adds	r3, #8
 80136ae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80136b0:	68fa      	ldr	r2, [r7, #12]
 80136b2:	429a      	cmp	r2, r3
 80136b4:	d117      	bne.n	80136e6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80136b6:	69bb      	ldr	r3, [r7, #24]
 80136b8:	681a      	ldr	r2, [r3, #0]
 80136ba:	4b38      	ldr	r3, [pc, #224]	@ (801379c <etharp_output+0x1fc>)
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	4618      	mov	r0, r3
 80136c0:	4937      	ldr	r1, [pc, #220]	@ (80137a0 <etharp_output+0x200>)
 80136c2:	4603      	mov	r3, r0
 80136c4:	005b      	lsls	r3, r3, #1
 80136c6:	4403      	add	r3, r0
 80136c8:	00db      	lsls	r3, r3, #3
 80136ca:	440b      	add	r3, r1
 80136cc:	3304      	adds	r3, #4
 80136ce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d108      	bne.n	80136e6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80136d4:	4b31      	ldr	r3, [pc, #196]	@ (801379c <etharp_output+0x1fc>)
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	461a      	mov	r2, r3
 80136da:	68b9      	ldr	r1, [r7, #8]
 80136dc:	68f8      	ldr	r0, [r7, #12]
 80136de:	f7ff fec5 	bl	801346c <etharp_output_to_arp_index>
 80136e2:	4603      	mov	r3, r0
 80136e4:	e04a      	b.n	801377c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80136e6:	2300      	movs	r3, #0
 80136e8:	75fb      	strb	r3, [r7, #23]
 80136ea:	e031      	b.n	8013750 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80136ec:	7dfa      	ldrb	r2, [r7, #23]
 80136ee:	492c      	ldr	r1, [pc, #176]	@ (80137a0 <etharp_output+0x200>)
 80136f0:	4613      	mov	r3, r2
 80136f2:	005b      	lsls	r3, r3, #1
 80136f4:	4413      	add	r3, r2
 80136f6:	00db      	lsls	r3, r3, #3
 80136f8:	440b      	add	r3, r1
 80136fa:	3314      	adds	r3, #20
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	2b01      	cmp	r3, #1
 8013700:	d923      	bls.n	801374a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013702:	7dfa      	ldrb	r2, [r7, #23]
 8013704:	4926      	ldr	r1, [pc, #152]	@ (80137a0 <etharp_output+0x200>)
 8013706:	4613      	mov	r3, r2
 8013708:	005b      	lsls	r3, r3, #1
 801370a:	4413      	add	r3, r2
 801370c:	00db      	lsls	r3, r3, #3
 801370e:	440b      	add	r3, r1
 8013710:	3308      	adds	r3, #8
 8013712:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013714:	68fa      	ldr	r2, [r7, #12]
 8013716:	429a      	cmp	r2, r3
 8013718:	d117      	bne.n	801374a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801371a:	69bb      	ldr	r3, [r7, #24]
 801371c:	6819      	ldr	r1, [r3, #0]
 801371e:	7dfa      	ldrb	r2, [r7, #23]
 8013720:	481f      	ldr	r0, [pc, #124]	@ (80137a0 <etharp_output+0x200>)
 8013722:	4613      	mov	r3, r2
 8013724:	005b      	lsls	r3, r3, #1
 8013726:	4413      	add	r3, r2
 8013728:	00db      	lsls	r3, r3, #3
 801372a:	4403      	add	r3, r0
 801372c:	3304      	adds	r3, #4
 801372e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013730:	4299      	cmp	r1, r3
 8013732:	d10a      	bne.n	801374a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013734:	4a19      	ldr	r2, [pc, #100]	@ (801379c <etharp_output+0x1fc>)
 8013736:	7dfb      	ldrb	r3, [r7, #23]
 8013738:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801373a:	7dfb      	ldrb	r3, [r7, #23]
 801373c:	461a      	mov	r2, r3
 801373e:	68b9      	ldr	r1, [r7, #8]
 8013740:	68f8      	ldr	r0, [r7, #12]
 8013742:	f7ff fe93 	bl	801346c <etharp_output_to_arp_index>
 8013746:	4603      	mov	r3, r0
 8013748:	e018      	b.n	801377c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801374a:	7dfb      	ldrb	r3, [r7, #23]
 801374c:	3301      	adds	r3, #1
 801374e:	75fb      	strb	r3, [r7, #23]
 8013750:	7dfb      	ldrb	r3, [r7, #23]
 8013752:	2b09      	cmp	r3, #9
 8013754:	d9ca      	bls.n	80136ec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013756:	68ba      	ldr	r2, [r7, #8]
 8013758:	69b9      	ldr	r1, [r7, #24]
 801375a:	68f8      	ldr	r0, [r7, #12]
 801375c:	f000 f822 	bl	80137a4 <etharp_query>
 8013760:	4603      	mov	r3, r0
 8013762:	e00b      	b.n	801377c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801376a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	69fb      	ldr	r3, [r7, #28]
 8013772:	68b9      	ldr	r1, [r7, #8]
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f001 fd6b 	bl	8015250 <ethernet_output>
 801377a:	4603      	mov	r3, r0
}
 801377c:	4618      	mov	r0, r3
 801377e:	3720      	adds	r7, #32
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}
 8013784:	0801bda4 	.word	0x0801bda4
 8013788:	0801bef4 	.word	0x0801bef4
 801378c:	0801be1c 	.word	0x0801be1c
 8013790:	0801bf44 	.word	0x0801bf44
 8013794:	0801bee4 	.word	0x0801bee4
 8013798:	0801c590 	.word	0x0801c590
 801379c:	240083d4 	.word	0x240083d4
 80137a0:	240082e4 	.word	0x240082e4

080137a4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b08c      	sub	sp, #48	@ 0x30
 80137a8:	af02      	add	r7, sp, #8
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	3326      	adds	r3, #38	@ 0x26
 80137b4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80137b6:	23ff      	movs	r3, #255	@ 0xff
 80137b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80137bc:	2300      	movs	r3, #0
 80137be:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	68f9      	ldr	r1, [r7, #12]
 80137c6:	4618      	mov	r0, r3
 80137c8:	f000 fe34 	bl	8014434 <ip4_addr_isbroadcast_u32>
 80137cc:	4603      	mov	r3, r0
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d10c      	bne.n	80137ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80137da:	2be0      	cmp	r3, #224	@ 0xe0
 80137dc:	d006      	beq.n	80137ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d003      	beq.n	80137ec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d102      	bne.n	80137f2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80137ec:	f06f 030f 	mvn.w	r3, #15
 80137f0:	e101      	b.n	80139f6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80137f2:	68fa      	ldr	r2, [r7, #12]
 80137f4:	2101      	movs	r1, #1
 80137f6:	68b8      	ldr	r0, [r7, #8]
 80137f8:	f7ff fb60 	bl	8012ebc <etharp_find_entry>
 80137fc:	4603      	mov	r3, r0
 80137fe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013800:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013804:	2b00      	cmp	r3, #0
 8013806:	da02      	bge.n	801380e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013808:	8a7b      	ldrh	r3, [r7, #18]
 801380a:	b25b      	sxtb	r3, r3
 801380c:	e0f3      	b.n	80139f6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801380e:	8a7b      	ldrh	r3, [r7, #18]
 8013810:	2b7e      	cmp	r3, #126	@ 0x7e
 8013812:	d906      	bls.n	8013822 <etharp_query+0x7e>
 8013814:	4b7a      	ldr	r3, [pc, #488]	@ (8013a00 <etharp_query+0x25c>)
 8013816:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801381a:	497a      	ldr	r1, [pc, #488]	@ (8013a04 <etharp_query+0x260>)
 801381c:	487a      	ldr	r0, [pc, #488]	@ (8013a08 <etharp_query+0x264>)
 801381e:	f002 fd15 	bl	801624c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013822:	8a7b      	ldrh	r3, [r7, #18]
 8013824:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013826:	7c7a      	ldrb	r2, [r7, #17]
 8013828:	4978      	ldr	r1, [pc, #480]	@ (8013a0c <etharp_query+0x268>)
 801382a:	4613      	mov	r3, r2
 801382c:	005b      	lsls	r3, r3, #1
 801382e:	4413      	add	r3, r2
 8013830:	00db      	lsls	r3, r3, #3
 8013832:	440b      	add	r3, r1
 8013834:	3314      	adds	r3, #20
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d115      	bne.n	8013868 <etharp_query+0xc4>
    is_new_entry = 1;
 801383c:	2301      	movs	r3, #1
 801383e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013840:	7c7a      	ldrb	r2, [r7, #17]
 8013842:	4972      	ldr	r1, [pc, #456]	@ (8013a0c <etharp_query+0x268>)
 8013844:	4613      	mov	r3, r2
 8013846:	005b      	lsls	r3, r3, #1
 8013848:	4413      	add	r3, r2
 801384a:	00db      	lsls	r3, r3, #3
 801384c:	440b      	add	r3, r1
 801384e:	3314      	adds	r3, #20
 8013850:	2201      	movs	r2, #1
 8013852:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013854:	7c7a      	ldrb	r2, [r7, #17]
 8013856:	496d      	ldr	r1, [pc, #436]	@ (8013a0c <etharp_query+0x268>)
 8013858:	4613      	mov	r3, r2
 801385a:	005b      	lsls	r3, r3, #1
 801385c:	4413      	add	r3, r2
 801385e:	00db      	lsls	r3, r3, #3
 8013860:	440b      	add	r3, r1
 8013862:	3308      	adds	r3, #8
 8013864:	68fa      	ldr	r2, [r7, #12]
 8013866:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013868:	7c7a      	ldrb	r2, [r7, #17]
 801386a:	4968      	ldr	r1, [pc, #416]	@ (8013a0c <etharp_query+0x268>)
 801386c:	4613      	mov	r3, r2
 801386e:	005b      	lsls	r3, r3, #1
 8013870:	4413      	add	r3, r2
 8013872:	00db      	lsls	r3, r3, #3
 8013874:	440b      	add	r3, r1
 8013876:	3314      	adds	r3, #20
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	2b01      	cmp	r3, #1
 801387c:	d011      	beq.n	80138a2 <etharp_query+0xfe>
 801387e:	7c7a      	ldrb	r2, [r7, #17]
 8013880:	4962      	ldr	r1, [pc, #392]	@ (8013a0c <etharp_query+0x268>)
 8013882:	4613      	mov	r3, r2
 8013884:	005b      	lsls	r3, r3, #1
 8013886:	4413      	add	r3, r2
 8013888:	00db      	lsls	r3, r3, #3
 801388a:	440b      	add	r3, r1
 801388c:	3314      	adds	r3, #20
 801388e:	781b      	ldrb	r3, [r3, #0]
 8013890:	2b01      	cmp	r3, #1
 8013892:	d806      	bhi.n	80138a2 <etharp_query+0xfe>
 8013894:	4b5a      	ldr	r3, [pc, #360]	@ (8013a00 <etharp_query+0x25c>)
 8013896:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801389a:	495d      	ldr	r1, [pc, #372]	@ (8013a10 <etharp_query+0x26c>)
 801389c:	485a      	ldr	r0, [pc, #360]	@ (8013a08 <etharp_query+0x264>)
 801389e:	f002 fcd5 	bl	801624c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80138a2:	6a3b      	ldr	r3, [r7, #32]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d102      	bne.n	80138ae <etharp_query+0x10a>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d10c      	bne.n	80138c8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80138ae:	68b9      	ldr	r1, [r7, #8]
 80138b0:	68f8      	ldr	r0, [r7, #12]
 80138b2:	f000 f963 	bl	8013b7c <etharp_request>
 80138b6:	4603      	mov	r3, r0
 80138b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d102      	bne.n	80138c8 <etharp_query+0x124>
      return result;
 80138c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80138c6:	e096      	b.n	80139f6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d106      	bne.n	80138dc <etharp_query+0x138>
 80138ce:	4b4c      	ldr	r3, [pc, #304]	@ (8013a00 <etharp_query+0x25c>)
 80138d0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80138d4:	494f      	ldr	r1, [pc, #316]	@ (8013a14 <etharp_query+0x270>)
 80138d6:	484c      	ldr	r0, [pc, #304]	@ (8013a08 <etharp_query+0x264>)
 80138d8:	f002 fcb8 	bl	801624c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80138dc:	7c7a      	ldrb	r2, [r7, #17]
 80138de:	494b      	ldr	r1, [pc, #300]	@ (8013a0c <etharp_query+0x268>)
 80138e0:	4613      	mov	r3, r2
 80138e2:	005b      	lsls	r3, r3, #1
 80138e4:	4413      	add	r3, r2
 80138e6:	00db      	lsls	r3, r3, #3
 80138e8:	440b      	add	r3, r1
 80138ea:	3314      	adds	r3, #20
 80138ec:	781b      	ldrb	r3, [r3, #0]
 80138ee:	2b01      	cmp	r3, #1
 80138f0:	d917      	bls.n	8013922 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80138f2:	4a49      	ldr	r2, [pc, #292]	@ (8013a18 <etharp_query+0x274>)
 80138f4:	7c7b      	ldrb	r3, [r7, #17]
 80138f6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80138f8:	7c7a      	ldrb	r2, [r7, #17]
 80138fa:	4613      	mov	r3, r2
 80138fc:	005b      	lsls	r3, r3, #1
 80138fe:	4413      	add	r3, r2
 8013900:	00db      	lsls	r3, r3, #3
 8013902:	3308      	adds	r3, #8
 8013904:	4a41      	ldr	r2, [pc, #260]	@ (8013a0c <etharp_query+0x268>)
 8013906:	4413      	add	r3, r2
 8013908:	3304      	adds	r3, #4
 801390a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801390e:	9200      	str	r2, [sp, #0]
 8013910:	697a      	ldr	r2, [r7, #20]
 8013912:	6879      	ldr	r1, [r7, #4]
 8013914:	68f8      	ldr	r0, [r7, #12]
 8013916:	f001 fc9b 	bl	8015250 <ethernet_output>
 801391a:	4603      	mov	r3, r0
 801391c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013920:	e067      	b.n	80139f2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013922:	7c7a      	ldrb	r2, [r7, #17]
 8013924:	4939      	ldr	r1, [pc, #228]	@ (8013a0c <etharp_query+0x268>)
 8013926:	4613      	mov	r3, r2
 8013928:	005b      	lsls	r3, r3, #1
 801392a:	4413      	add	r3, r2
 801392c:	00db      	lsls	r3, r3, #3
 801392e:	440b      	add	r3, r1
 8013930:	3314      	adds	r3, #20
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	2b01      	cmp	r3, #1
 8013936:	d15c      	bne.n	80139f2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013938:	2300      	movs	r3, #0
 801393a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013940:	e01c      	b.n	801397c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013942:	69fb      	ldr	r3, [r7, #28]
 8013944:	895a      	ldrh	r2, [r3, #10]
 8013946:	69fb      	ldr	r3, [r7, #28]
 8013948:	891b      	ldrh	r3, [r3, #8]
 801394a:	429a      	cmp	r2, r3
 801394c:	d10a      	bne.n	8013964 <etharp_query+0x1c0>
 801394e:	69fb      	ldr	r3, [r7, #28]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d006      	beq.n	8013964 <etharp_query+0x1c0>
 8013956:	4b2a      	ldr	r3, [pc, #168]	@ (8013a00 <etharp_query+0x25c>)
 8013958:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801395c:	492f      	ldr	r1, [pc, #188]	@ (8013a1c <etharp_query+0x278>)
 801395e:	482a      	ldr	r0, [pc, #168]	@ (8013a08 <etharp_query+0x264>)
 8013960:	f002 fc74 	bl	801624c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	7b1b      	ldrb	r3, [r3, #12]
 8013968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801396c:	2b00      	cmp	r3, #0
 801396e:	d002      	beq.n	8013976 <etharp_query+0x1d2>
        copy_needed = 1;
 8013970:	2301      	movs	r3, #1
 8013972:	61bb      	str	r3, [r7, #24]
        break;
 8013974:	e005      	b.n	8013982 <etharp_query+0x1de>
      }
      p = p->next;
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d1df      	bne.n	8013942 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013982:	69bb      	ldr	r3, [r7, #24]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d007      	beq.n	8013998 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801398e:	200e      	movs	r0, #14
 8013990:	f7f9 fa3c 	bl	800ce0c <pbuf_clone>
 8013994:	61f8      	str	r0, [r7, #28]
 8013996:	e004      	b.n	80139a2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801399c:	69f8      	ldr	r0, [r7, #28]
 801399e:	f7f8 ffd7 	bl	800c950 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80139a2:	69fb      	ldr	r3, [r7, #28]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d021      	beq.n	80139ec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80139a8:	7c7a      	ldrb	r2, [r7, #17]
 80139aa:	4918      	ldr	r1, [pc, #96]	@ (8013a0c <etharp_query+0x268>)
 80139ac:	4613      	mov	r3, r2
 80139ae:	005b      	lsls	r3, r3, #1
 80139b0:	4413      	add	r3, r2
 80139b2:	00db      	lsls	r3, r3, #3
 80139b4:	440b      	add	r3, r1
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00a      	beq.n	80139d2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80139bc:	7c7a      	ldrb	r2, [r7, #17]
 80139be:	4913      	ldr	r1, [pc, #76]	@ (8013a0c <etharp_query+0x268>)
 80139c0:	4613      	mov	r3, r2
 80139c2:	005b      	lsls	r3, r3, #1
 80139c4:	4413      	add	r3, r2
 80139c6:	00db      	lsls	r3, r3, #3
 80139c8:	440b      	add	r3, r1
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7f8 ff1f 	bl	800c810 <pbuf_free>
      }
      arp_table[i].q = p;
 80139d2:	7c7a      	ldrb	r2, [r7, #17]
 80139d4:	490d      	ldr	r1, [pc, #52]	@ (8013a0c <etharp_query+0x268>)
 80139d6:	4613      	mov	r3, r2
 80139d8:	005b      	lsls	r3, r3, #1
 80139da:	4413      	add	r3, r2
 80139dc:	00db      	lsls	r3, r3, #3
 80139de:	440b      	add	r3, r1
 80139e0:	69fa      	ldr	r2, [r7, #28]
 80139e2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80139e4:	2300      	movs	r3, #0
 80139e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80139ea:	e002      	b.n	80139f2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80139ec:	23ff      	movs	r3, #255	@ 0xff
 80139ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80139f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3728      	adds	r7, #40	@ 0x28
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}
 80139fe:	bf00      	nop
 8013a00:	0801bda4 	.word	0x0801bda4
 8013a04:	0801bf50 	.word	0x0801bf50
 8013a08:	0801be1c 	.word	0x0801be1c
 8013a0c:	240082e4 	.word	0x240082e4
 8013a10:	0801bf60 	.word	0x0801bf60
 8013a14:	0801bf44 	.word	0x0801bf44
 8013a18:	240083d4 	.word	0x240083d4
 8013a1c:	0801bf88 	.word	0x0801bf88

08013a20 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b08a      	sub	sp, #40	@ 0x28
 8013a24:	af02      	add	r7, sp, #8
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	607a      	str	r2, [r7, #4]
 8013a2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d106      	bne.n	8013a46 <etharp_raw+0x26>
 8013a38:	4b3a      	ldr	r3, [pc, #232]	@ (8013b24 <etharp_raw+0x104>)
 8013a3a:	f240 4257 	movw	r2, #1111	@ 0x457
 8013a3e:	493a      	ldr	r1, [pc, #232]	@ (8013b28 <etharp_raw+0x108>)
 8013a40:	483a      	ldr	r0, [pc, #232]	@ (8013b2c <etharp_raw+0x10c>)
 8013a42:	f002 fc03 	bl	801624c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013a46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013a4a:	211c      	movs	r1, #28
 8013a4c:	200e      	movs	r0, #14
 8013a4e:	f7f8 fbfb 	bl	800c248 <pbuf_alloc>
 8013a52:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013a54:	69bb      	ldr	r3, [r7, #24]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d102      	bne.n	8013a60 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a5e:	e05d      	b.n	8013b1c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013a60:	69bb      	ldr	r3, [r7, #24]
 8013a62:	895b      	ldrh	r3, [r3, #10]
 8013a64:	2b1b      	cmp	r3, #27
 8013a66:	d806      	bhi.n	8013a76 <etharp_raw+0x56>
 8013a68:	4b2e      	ldr	r3, [pc, #184]	@ (8013b24 <etharp_raw+0x104>)
 8013a6a:	f240 4262 	movw	r2, #1122	@ 0x462
 8013a6e:	4930      	ldr	r1, [pc, #192]	@ (8013b30 <etharp_raw+0x110>)
 8013a70:	482e      	ldr	r0, [pc, #184]	@ (8013b2c <etharp_raw+0x10c>)
 8013a72:	f002 fbeb 	bl	801624c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013a76:	69bb      	ldr	r3, [r7, #24]
 8013a78:	685b      	ldr	r3, [r3, #4]
 8013a7a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013a7c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7f7 fab0 	bl	800afe4 <lwip_htons>
 8013a84:	4603      	mov	r3, r0
 8013a86:	461a      	mov	r2, r3
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013a92:	2b06      	cmp	r3, #6
 8013a94:	d006      	beq.n	8013aa4 <etharp_raw+0x84>
 8013a96:	4b23      	ldr	r3, [pc, #140]	@ (8013b24 <etharp_raw+0x104>)
 8013a98:	f240 4269 	movw	r2, #1129	@ 0x469
 8013a9c:	4925      	ldr	r1, [pc, #148]	@ (8013b34 <etharp_raw+0x114>)
 8013a9e:	4823      	ldr	r0, [pc, #140]	@ (8013b2c <etharp_raw+0x10c>)
 8013aa0:	f002 fbd4 	bl	801624c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	3308      	adds	r3, #8
 8013aa8:	2206      	movs	r2, #6
 8013aaa:	6839      	ldr	r1, [r7, #0]
 8013aac:	4618      	mov	r0, r3
 8013aae:	f002 fdf2 	bl	8016696 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	3312      	adds	r3, #18
 8013ab6:	2206      	movs	r2, #6
 8013ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013aba:	4618      	mov	r0, r3
 8013abc:	f002 fdeb 	bl	8016696 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	330e      	adds	r3, #14
 8013ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013ac6:	6812      	ldr	r2, [r2, #0]
 8013ac8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	3318      	adds	r3, #24
 8013ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ad0:	6812      	ldr	r2, [r2, #0]
 8013ad2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	701a      	strb	r2, [r3, #0]
 8013ada:	2200      	movs	r2, #0
 8013adc:	f042 0201 	orr.w	r2, r2, #1
 8013ae0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	f042 0208 	orr.w	r2, r2, #8
 8013aea:	709a      	strb	r2, [r3, #2]
 8013aec:	2200      	movs	r2, #0
 8013aee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013af0:	697b      	ldr	r3, [r7, #20]
 8013af2:	2206      	movs	r2, #6
 8013af4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013af6:	697b      	ldr	r3, [r7, #20]
 8013af8:	2204      	movs	r2, #4
 8013afa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013afc:	f640 0306 	movw	r3, #2054	@ 0x806
 8013b00:	9300      	str	r3, [sp, #0]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	68ba      	ldr	r2, [r7, #8]
 8013b06:	69b9      	ldr	r1, [r7, #24]
 8013b08:	68f8      	ldr	r0, [r7, #12]
 8013b0a:	f001 fba1 	bl	8015250 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013b0e:	69b8      	ldr	r0, [r7, #24]
 8013b10:	f7f8 fe7e 	bl	800c810 <pbuf_free>
  p = NULL;
 8013b14:	2300      	movs	r3, #0
 8013b16:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013b18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3720      	adds	r7, #32
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	0801bda4 	.word	0x0801bda4
 8013b28:	0801bef4 	.word	0x0801bef4
 8013b2c:	0801be1c 	.word	0x0801be1c
 8013b30:	0801bfa4 	.word	0x0801bfa4
 8013b34:	0801bfd8 	.word	0x0801bfd8

08013b38 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b088      	sub	sp, #32
 8013b3c:	af04      	add	r7, sp, #16
 8013b3e:	60f8      	str	r0, [r7, #12]
 8013b40:	60b9      	str	r1, [r7, #8]
 8013b42:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013b54:	2201      	movs	r2, #1
 8013b56:	9203      	str	r2, [sp, #12]
 8013b58:	68ba      	ldr	r2, [r7, #8]
 8013b5a:	9202      	str	r2, [sp, #8]
 8013b5c:	4a06      	ldr	r2, [pc, #24]	@ (8013b78 <etharp_request_dst+0x40>)
 8013b5e:	9201      	str	r2, [sp, #4]
 8013b60:	9300      	str	r3, [sp, #0]
 8013b62:	4603      	mov	r3, r0
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	68f8      	ldr	r0, [r7, #12]
 8013b68:	f7ff ff5a 	bl	8013a20 <etharp_raw>
 8013b6c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3710      	adds	r7, #16
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
 8013b76:	bf00      	nop
 8013b78:	0801c598 	.word	0x0801c598

08013b7c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013b86:	4a05      	ldr	r2, [pc, #20]	@ (8013b9c <etharp_request+0x20>)
 8013b88:	6839      	ldr	r1, [r7, #0]
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f7ff ffd4 	bl	8013b38 <etharp_request_dst>
 8013b90:	4603      	mov	r3, r0
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3708      	adds	r7, #8
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	0801c590 	.word	0x0801c590

08013ba0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b08e      	sub	sp, #56	@ 0x38
 8013ba4:	af04      	add	r7, sp, #16
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013baa:	4b87      	ldr	r3, [pc, #540]	@ (8013dc8 <icmp_input+0x228>)
 8013bac:	689b      	ldr	r3, [r3, #8]
 8013bae:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	f003 030f 	and.w	r3, r3, #15
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	009b      	lsls	r3, r3, #2
 8013bbc:	b2db      	uxtb	r3, r3
 8013bbe:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8013bc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013bc2:	2b13      	cmp	r3, #19
 8013bc4:	f240 80e8 	bls.w	8013d98 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	895b      	ldrh	r3, [r3, #10]
 8013bcc:	2b03      	cmp	r3, #3
 8013bce:	f240 80e5 	bls.w	8013d9c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	685b      	ldr	r3, [r3, #4]
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013bdc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	f000 80d2 	beq.w	8013d8a <icmp_input+0x1ea>
 8013be6:	2b08      	cmp	r3, #8
 8013be8:	f040 80d2 	bne.w	8013d90 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013bec:	4b77      	ldr	r3, [pc, #476]	@ (8013dcc <icmp_input+0x22c>)
 8013bee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013bf0:	4b75      	ldr	r3, [pc, #468]	@ (8013dc8 <icmp_input+0x228>)
 8013bf2:	695b      	ldr	r3, [r3, #20]
 8013bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013bf8:	2be0      	cmp	r3, #224	@ 0xe0
 8013bfa:	f000 80d6 	beq.w	8013daa <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013bfe:	4b72      	ldr	r3, [pc, #456]	@ (8013dc8 <icmp_input+0x228>)
 8013c00:	695b      	ldr	r3, [r3, #20]
 8013c02:	4a71      	ldr	r2, [pc, #452]	@ (8013dc8 <icmp_input+0x228>)
 8013c04:	6812      	ldr	r2, [r2, #0]
 8013c06:	4611      	mov	r1, r2
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f000 fc13 	bl	8014434 <ip4_addr_isbroadcast_u32>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	f040 80cc 	bne.w	8013dae <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	891b      	ldrh	r3, [r3, #8]
 8013c1a:	2b07      	cmp	r3, #7
 8013c1c:	f240 80c0 	bls.w	8013da0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7f7 fa7d 	bl	800b120 <inet_chksum_pbuf>
 8013c26:	4603      	mov	r3, r0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d003      	beq.n	8013c34 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f7f8 fdef 	bl	800c810 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013c32:	e0c5      	b.n	8013dc0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013c34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c36:	330e      	adds	r3, #14
 8013c38:	4619      	mov	r1, r3
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7f8 fd52 	bl	800c6e4 <pbuf_add_header>
 8013c40:	4603      	mov	r3, r0
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d04b      	beq.n	8013cde <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	891a      	ldrh	r2, [r3, #8]
 8013c4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c4c:	4413      	add	r3, r2
 8013c4e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	891b      	ldrh	r3, [r3, #8]
 8013c54:	8b7a      	ldrh	r2, [r7, #26]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	f0c0 80ab 	bcc.w	8013db2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013c5c:	8b7b      	ldrh	r3, [r7, #26]
 8013c5e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013c62:	4619      	mov	r1, r3
 8013c64:	200e      	movs	r0, #14
 8013c66:	f7f8 faef 	bl	800c248 <pbuf_alloc>
 8013c6a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	f000 80a1 	beq.w	8013db6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	895b      	ldrh	r3, [r3, #10]
 8013c78:	461a      	mov	r2, r3
 8013c7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c7c:	3308      	adds	r3, #8
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d203      	bcs.n	8013c8a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013c82:	6978      	ldr	r0, [r7, #20]
 8013c84:	f7f8 fdc4 	bl	800c810 <pbuf_free>
          goto icmperr;
 8013c88:	e096      	b.n	8013db8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013c92:	4618      	mov	r0, r3
 8013c94:	f002 fcff 	bl	8016696 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013c98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	6978      	ldr	r0, [r7, #20]
 8013c9e:	f7f8 fd31 	bl	800c704 <pbuf_remove_header>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d009      	beq.n	8013cbc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013ca8:	4b49      	ldr	r3, [pc, #292]	@ (8013dd0 <icmp_input+0x230>)
 8013caa:	22b6      	movs	r2, #182	@ 0xb6
 8013cac:	4949      	ldr	r1, [pc, #292]	@ (8013dd4 <icmp_input+0x234>)
 8013cae:	484a      	ldr	r0, [pc, #296]	@ (8013dd8 <icmp_input+0x238>)
 8013cb0:	f002 facc 	bl	801624c <iprintf>
          pbuf_free(r);
 8013cb4:	6978      	ldr	r0, [r7, #20]
 8013cb6:	f7f8 fdab 	bl	800c810 <pbuf_free>
          goto icmperr;
 8013cba:	e07d      	b.n	8013db8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013cbc:	6879      	ldr	r1, [r7, #4]
 8013cbe:	6978      	ldr	r0, [r7, #20]
 8013cc0:	f7f8 fece 	bl	800ca60 <pbuf_copy>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d003      	beq.n	8013cd2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013cca:	6978      	ldr	r0, [r7, #20]
 8013ccc:	f7f8 fda0 	bl	800c810 <pbuf_free>
          goto icmperr;
 8013cd0:	e072      	b.n	8013db8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f7f8 fd9c 	bl	800c810 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	607b      	str	r3, [r7, #4]
 8013cdc:	e00f      	b.n	8013cfe <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013cde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013ce0:	330e      	adds	r3, #14
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f7f8 fd0d 	bl	800c704 <pbuf_remove_header>
 8013cea:	4603      	mov	r3, r0
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d006      	beq.n	8013cfe <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013cf0:	4b37      	ldr	r3, [pc, #220]	@ (8013dd0 <icmp_input+0x230>)
 8013cf2:	22c7      	movs	r2, #199	@ 0xc7
 8013cf4:	4939      	ldr	r1, [pc, #228]	@ (8013ddc <icmp_input+0x23c>)
 8013cf6:	4838      	ldr	r0, [pc, #224]	@ (8013dd8 <icmp_input+0x238>)
 8013cf8:	f002 faa8 	bl	801624c <iprintf>
          goto icmperr;
 8013cfc:	e05c      	b.n	8013db8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013d04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013d06:	4619      	mov	r1, r3
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f7f8 fceb 	bl	800c6e4 <pbuf_add_header>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d13c      	bne.n	8013d8e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013d1a:	69fb      	ldr	r3, [r7, #28]
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013d22:	4b29      	ldr	r3, [pc, #164]	@ (8013dc8 <icmp_input+0x228>)
 8013d24:	691a      	ldr	r2, [r3, #16]
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	885b      	ldrh	r3, [r3, #2]
 8013d34:	b29b      	uxth	r3, r3
 8013d36:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d907      	bls.n	8013d4e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	885b      	ldrh	r3, [r3, #2]
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	3309      	adds	r3, #9
 8013d46:	b29a      	uxth	r2, r3
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	805a      	strh	r2, [r3, #2]
 8013d4c:	e006      	b.n	8013d5c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	885b      	ldrh	r3, [r3, #2]
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	3308      	adds	r3, #8
 8013d56:	b29a      	uxth	r2, r3
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	22ff      	movs	r2, #255	@ 0xff
 8013d60:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2200      	movs	r2, #0
 8013d66:	729a      	strb	r2, [r3, #10]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	9302      	str	r3, [sp, #8]
 8013d70:	2301      	movs	r3, #1
 8013d72:	9301      	str	r3, [sp, #4]
 8013d74:	2300      	movs	r3, #0
 8013d76:	9300      	str	r3, [sp, #0]
 8013d78:	23ff      	movs	r3, #255	@ 0xff
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	69f9      	ldr	r1, [r7, #28]
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f000 fa80 	bl	8014284 <ip4_output_if>
 8013d84:	4603      	mov	r3, r0
 8013d86:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013d88:	e001      	b.n	8013d8e <icmp_input+0x1ee>
      break;
 8013d8a:	bf00      	nop
 8013d8c:	e000      	b.n	8013d90 <icmp_input+0x1f0>
      break;
 8013d8e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7f8 fd3d 	bl	800c810 <pbuf_free>
  return;
 8013d96:	e013      	b.n	8013dc0 <icmp_input+0x220>
    goto lenerr;
 8013d98:	bf00      	nop
 8013d9a:	e002      	b.n	8013da2 <icmp_input+0x202>
    goto lenerr;
 8013d9c:	bf00      	nop
 8013d9e:	e000      	b.n	8013da2 <icmp_input+0x202>
        goto lenerr;
 8013da0:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f7f8 fd34 	bl	800c810 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013da8:	e00a      	b.n	8013dc0 <icmp_input+0x220>
        goto icmperr;
 8013daa:	bf00      	nop
 8013dac:	e004      	b.n	8013db8 <icmp_input+0x218>
        goto icmperr;
 8013dae:	bf00      	nop
 8013db0:	e002      	b.n	8013db8 <icmp_input+0x218>
          goto icmperr;
 8013db2:	bf00      	nop
 8013db4:	e000      	b.n	8013db8 <icmp_input+0x218>
          goto icmperr;
 8013db6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f7f8 fd29 	bl	800c810 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013dbe:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013dc0:	3728      	adds	r7, #40	@ 0x28
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}
 8013dc6:	bf00      	nop
 8013dc8:	24005368 	.word	0x24005368
 8013dcc:	2400537c 	.word	0x2400537c
 8013dd0:	0801c01c 	.word	0x0801c01c
 8013dd4:	0801c054 	.word	0x0801c054
 8013dd8:	0801c08c 	.word	0x0801c08c
 8013ddc:	0801c0b4 	.word	0x0801c0b4

08013de0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	460b      	mov	r3, r1
 8013dea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013dec:	78fb      	ldrb	r3, [r7, #3]
 8013dee:	461a      	mov	r2, r3
 8013df0:	2103      	movs	r1, #3
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	f000 f814 	bl	8013e20 <icmp_send_response>
}
 8013df8:	bf00      	nop
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b082      	sub	sp, #8
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
 8013e08:	460b      	mov	r3, r1
 8013e0a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013e0c:	78fb      	ldrb	r3, [r7, #3]
 8013e0e:	461a      	mov	r2, r3
 8013e10:	210b      	movs	r1, #11
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f000 f804 	bl	8013e20 <icmp_send_response>
}
 8013e18:	bf00      	nop
 8013e1a:	3708      	adds	r7, #8
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}

08013e20 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b08c      	sub	sp, #48	@ 0x30
 8013e24:	af04      	add	r7, sp, #16
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	460b      	mov	r3, r1
 8013e2a:	70fb      	strb	r3, [r7, #3]
 8013e2c:	4613      	mov	r3, r2
 8013e2e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013e30:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013e34:	2124      	movs	r1, #36	@ 0x24
 8013e36:	2022      	movs	r0, #34	@ 0x22
 8013e38:	f7f8 fa06 	bl	800c248 <pbuf_alloc>
 8013e3c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013e3e:	69fb      	ldr	r3, [r7, #28]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d056      	beq.n	8013ef2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013e44:	69fb      	ldr	r3, [r7, #28]
 8013e46:	895b      	ldrh	r3, [r3, #10]
 8013e48:	2b23      	cmp	r3, #35	@ 0x23
 8013e4a:	d806      	bhi.n	8013e5a <icmp_send_response+0x3a>
 8013e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8013efc <icmp_send_response+0xdc>)
 8013e4e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013e52:	492b      	ldr	r1, [pc, #172]	@ (8013f00 <icmp_send_response+0xe0>)
 8013e54:	482b      	ldr	r0, [pc, #172]	@ (8013f04 <icmp_send_response+0xe4>)
 8013e56:	f002 f9f9 	bl	801624c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	685b      	ldr	r3, [r3, #4]
 8013e5e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013e60:	69fb      	ldr	r3, [r7, #28]
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	78fa      	ldrb	r2, [r7, #3]
 8013e6a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	78ba      	ldrb	r2, [r7, #2]
 8013e70:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	2200      	movs	r2, #0
 8013e76:	711a      	strb	r2, [r3, #4]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	2200      	movs	r2, #0
 8013e80:	719a      	strb	r2, [r3, #6]
 8013e82:	2200      	movs	r2, #0
 8013e84:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013e86:	69fb      	ldr	r3, [r7, #28]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	f103 0008 	add.w	r0, r3, #8
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	221c      	movs	r2, #28
 8013e94:	4619      	mov	r1, r3
 8013e96:	f002 fbfe 	bl	8016696 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013e9a:	69bb      	ldr	r3, [r7, #24]
 8013e9c:	68db      	ldr	r3, [r3, #12]
 8013e9e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013ea0:	f107 030c 	add.w	r3, r7, #12
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f000 f82f 	bl	8013f08 <ip4_route>
 8013eaa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d01b      	beq.n	8013eea <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	709a      	strb	r2, [r3, #2]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8013ebc:	69fb      	ldr	r3, [r7, #28]
 8013ebe:	895b      	ldrh	r3, [r3, #10]
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	6978      	ldr	r0, [r7, #20]
 8013ec4:	f7f7 f91a 	bl	800b0fc <inet_chksum>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	461a      	mov	r2, r3
 8013ecc:	697b      	ldr	r3, [r7, #20]
 8013ece:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013ed0:	f107 020c 	add.w	r2, r7, #12
 8013ed4:	693b      	ldr	r3, [r7, #16]
 8013ed6:	9302      	str	r3, [sp, #8]
 8013ed8:	2301      	movs	r3, #1
 8013eda:	9301      	str	r3, [sp, #4]
 8013edc:	2300      	movs	r3, #0
 8013ede:	9300      	str	r3, [sp, #0]
 8013ee0:	23ff      	movs	r3, #255	@ 0xff
 8013ee2:	2100      	movs	r1, #0
 8013ee4:	69f8      	ldr	r0, [r7, #28]
 8013ee6:	f000 f9cd 	bl	8014284 <ip4_output_if>
  }
  pbuf_free(q);
 8013eea:	69f8      	ldr	r0, [r7, #28]
 8013eec:	f7f8 fc90 	bl	800c810 <pbuf_free>
 8013ef0:	e000      	b.n	8013ef4 <icmp_send_response+0xd4>
    return;
 8013ef2:	bf00      	nop
}
 8013ef4:	3720      	adds	r7, #32
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}
 8013efa:	bf00      	nop
 8013efc:	0801c01c 	.word	0x0801c01c
 8013f00:	0801c0e8 	.word	0x0801c0e8
 8013f04:	0801c08c 	.word	0x0801c08c

08013f08 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b085      	sub	sp, #20
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013f10:	4b33      	ldr	r3, [pc, #204]	@ (8013fe0 <ip4_route+0xd8>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	60fb      	str	r3, [r7, #12]
 8013f16:	e036      	b.n	8013f86 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f1e:	f003 0301 	and.w	r3, r3, #1
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d02b      	beq.n	8013f80 <ip4_route+0x78>
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f2e:	089b      	lsrs	r3, r3, #2
 8013f30:	f003 0301 	and.w	r3, r3, #1
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d022      	beq.n	8013f80 <ip4_route+0x78>
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	3304      	adds	r3, #4
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d01d      	beq.n	8013f80 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681a      	ldr	r2, [r3, #0]
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	3304      	adds	r3, #4
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	405a      	eors	r2, r3
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	3308      	adds	r3, #8
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	4013      	ands	r3, r2
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d101      	bne.n	8013f60 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	e038      	b.n	8013fd2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f66:	f003 0302 	and.w	r3, r3, #2
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d108      	bne.n	8013f80 <ip4_route+0x78>
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681a      	ldr	r2, [r3, #0]
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	330c      	adds	r3, #12
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	d101      	bne.n	8013f80 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	e028      	b.n	8013fd2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	60fb      	str	r3, [r7, #12]
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d1c5      	bne.n	8013f18 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013f8c:	4b15      	ldr	r3, [pc, #84]	@ (8013fe4 <ip4_route+0xdc>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d01a      	beq.n	8013fca <ip4_route+0xc2>
 8013f94:	4b13      	ldr	r3, [pc, #76]	@ (8013fe4 <ip4_route+0xdc>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f9c:	f003 0301 	and.w	r3, r3, #1
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d012      	beq.n	8013fca <ip4_route+0xc2>
 8013fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8013fe4 <ip4_route+0xdc>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013fac:	f003 0304 	and.w	r3, r3, #4
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d00a      	beq.n	8013fca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8013fe4 <ip4_route+0xdc>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	3304      	adds	r3, #4
 8013fba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d004      	beq.n	8013fca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	b2db      	uxtb	r3, r3
 8013fc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8013fc8:	d101      	bne.n	8013fce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	e001      	b.n	8013fd2 <ip4_route+0xca>
  }

  return netif_default;
 8013fce:	4b05      	ldr	r3, [pc, #20]	@ (8013fe4 <ip4_route+0xdc>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3714      	adds	r7, #20
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr
 8013fde:	bf00      	nop
 8013fe0:	24008278 	.word	0x24008278
 8013fe4:	2400827c 	.word	0x2400827c

08013fe8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013ff6:	f003 0301 	and.w	r3, r3, #1
 8013ffa:	b2db      	uxtb	r3, r3
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d016      	beq.n	801402e <ip4_input_accept+0x46>
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	3304      	adds	r3, #4
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d011      	beq.n	801402e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801400a:	4b0b      	ldr	r3, [pc, #44]	@ (8014038 <ip4_input_accept+0x50>)
 801400c:	695a      	ldr	r2, [r3, #20]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	3304      	adds	r3, #4
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	429a      	cmp	r2, r3
 8014016:	d008      	beq.n	801402a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014018:	4b07      	ldr	r3, [pc, #28]	@ (8014038 <ip4_input_accept+0x50>)
 801401a:	695b      	ldr	r3, [r3, #20]
 801401c:	6879      	ldr	r1, [r7, #4]
 801401e:	4618      	mov	r0, r3
 8014020:	f000 fa08 	bl	8014434 <ip4_addr_isbroadcast_u32>
 8014024:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014026:	2b00      	cmp	r3, #0
 8014028:	d001      	beq.n	801402e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801402a:	2301      	movs	r3, #1
 801402c:	e000      	b.n	8014030 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801402e:	2300      	movs	r3, #0
}
 8014030:	4618      	mov	r0, r3
 8014032:	3708      	adds	r7, #8
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}
 8014038:	24005368 	.word	0x24005368

0801403c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b086      	sub	sp, #24
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	685b      	ldr	r3, [r3, #4]
 801404a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	091b      	lsrs	r3, r3, #4
 8014052:	b2db      	uxtb	r3, r3
 8014054:	2b04      	cmp	r3, #4
 8014056:	d004      	beq.n	8014062 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f7f8 fbd9 	bl	800c810 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801405e:	2300      	movs	r3, #0
 8014060:	e107      	b.n	8014272 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	f003 030f 	and.w	r3, r3, #15
 801406a:	b2db      	uxtb	r3, r3
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	b2db      	uxtb	r3, r3
 8014070:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	885b      	ldrh	r3, [r3, #2]
 8014076:	b29b      	uxth	r3, r3
 8014078:	4618      	mov	r0, r3
 801407a:	f7f6 ffb3 	bl	800afe4 <lwip_htons>
 801407e:	4603      	mov	r3, r0
 8014080:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	891b      	ldrh	r3, [r3, #8]
 8014086:	89ba      	ldrh	r2, [r7, #12]
 8014088:	429a      	cmp	r2, r3
 801408a:	d204      	bcs.n	8014096 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801408c:	89bb      	ldrh	r3, [r7, #12]
 801408e:	4619      	mov	r1, r3
 8014090:	6878      	ldr	r0, [r7, #4]
 8014092:	f7f8 fa37 	bl	800c504 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	895b      	ldrh	r3, [r3, #10]
 801409a:	89fa      	ldrh	r2, [r7, #14]
 801409c:	429a      	cmp	r2, r3
 801409e:	d807      	bhi.n	80140b0 <ip4_input+0x74>
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	891b      	ldrh	r3, [r3, #8]
 80140a4:	89ba      	ldrh	r2, [r7, #12]
 80140a6:	429a      	cmp	r2, r3
 80140a8:	d802      	bhi.n	80140b0 <ip4_input+0x74>
 80140aa:	89fb      	ldrh	r3, [r7, #14]
 80140ac:	2b13      	cmp	r3, #19
 80140ae:	d804      	bhi.n	80140ba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f7f8 fbad 	bl	800c810 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80140b6:	2300      	movs	r3, #0
 80140b8:	e0db      	b.n	8014272 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	691b      	ldr	r3, [r3, #16]
 80140be:	4a6f      	ldr	r2, [pc, #444]	@ (801427c <ip4_input+0x240>)
 80140c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	68db      	ldr	r3, [r3, #12]
 80140c6:	4a6d      	ldr	r2, [pc, #436]	@ (801427c <ip4_input+0x240>)
 80140c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80140ca:	4b6c      	ldr	r3, [pc, #432]	@ (801427c <ip4_input+0x240>)
 80140cc:	695b      	ldr	r3, [r3, #20]
 80140ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80140d2:	2be0      	cmp	r3, #224	@ 0xe0
 80140d4:	d112      	bne.n	80140fc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80140dc:	f003 0301 	and.w	r3, r3, #1
 80140e0:	b2db      	uxtb	r3, r3
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d007      	beq.n	80140f6 <ip4_input+0xba>
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	3304      	adds	r3, #4
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d002      	beq.n	80140f6 <ip4_input+0xba>
      netif = inp;
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	613b      	str	r3, [r7, #16]
 80140f4:	e02a      	b.n	801414c <ip4_input+0x110>
    } else {
      netif = NULL;
 80140f6:	2300      	movs	r3, #0
 80140f8:	613b      	str	r3, [r7, #16]
 80140fa:	e027      	b.n	801414c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80140fc:	6838      	ldr	r0, [r7, #0]
 80140fe:	f7ff ff73 	bl	8013fe8 <ip4_input_accept>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d002      	beq.n	801410e <ip4_input+0xd2>
      netif = inp;
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	613b      	str	r3, [r7, #16]
 801410c:	e01e      	b.n	801414c <ip4_input+0x110>
    } else {
      netif = NULL;
 801410e:	2300      	movs	r3, #0
 8014110:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014112:	4b5a      	ldr	r3, [pc, #360]	@ (801427c <ip4_input+0x240>)
 8014114:	695b      	ldr	r3, [r3, #20]
 8014116:	b2db      	uxtb	r3, r3
 8014118:	2b7f      	cmp	r3, #127	@ 0x7f
 801411a:	d017      	beq.n	801414c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801411c:	4b58      	ldr	r3, [pc, #352]	@ (8014280 <ip4_input+0x244>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	613b      	str	r3, [r7, #16]
 8014122:	e00e      	b.n	8014142 <ip4_input+0x106>
          if (netif == inp) {
 8014124:	693a      	ldr	r2, [r7, #16]
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	429a      	cmp	r2, r3
 801412a:	d006      	beq.n	801413a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801412c:	6938      	ldr	r0, [r7, #16]
 801412e:	f7ff ff5b 	bl	8013fe8 <ip4_input_accept>
 8014132:	4603      	mov	r3, r0
 8014134:	2b00      	cmp	r3, #0
 8014136:	d108      	bne.n	801414a <ip4_input+0x10e>
 8014138:	e000      	b.n	801413c <ip4_input+0x100>
            continue;
 801413a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	613b      	str	r3, [r7, #16]
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d1ed      	bne.n	8014124 <ip4_input+0xe8>
 8014148:	e000      	b.n	801414c <ip4_input+0x110>
            break;
 801414a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801414c:	4b4b      	ldr	r3, [pc, #300]	@ (801427c <ip4_input+0x240>)
 801414e:	691b      	ldr	r3, [r3, #16]
 8014150:	6839      	ldr	r1, [r7, #0]
 8014152:	4618      	mov	r0, r3
 8014154:	f000 f96e 	bl	8014434 <ip4_addr_isbroadcast_u32>
 8014158:	4603      	mov	r3, r0
 801415a:	2b00      	cmp	r3, #0
 801415c:	d105      	bne.n	801416a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801415e:	4b47      	ldr	r3, [pc, #284]	@ (801427c <ip4_input+0x240>)
 8014160:	691b      	ldr	r3, [r3, #16]
 8014162:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014166:	2be0      	cmp	r3, #224	@ 0xe0
 8014168:	d104      	bne.n	8014174 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f7f8 fb50 	bl	800c810 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014170:	2300      	movs	r3, #0
 8014172:	e07e      	b.n	8014272 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014174:	693b      	ldr	r3, [r7, #16]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d104      	bne.n	8014184 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f7f8 fb48 	bl	800c810 <pbuf_free>
    return ERR_OK;
 8014180:	2300      	movs	r3, #0
 8014182:	e076      	b.n	8014272 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	88db      	ldrh	r3, [r3, #6]
 8014188:	b29b      	uxth	r3, r3
 801418a:	461a      	mov	r2, r3
 801418c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014190:	4013      	ands	r3, r2
 8014192:	2b00      	cmp	r3, #0
 8014194:	d00b      	beq.n	80141ae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f000 fc92 	bl	8014ac0 <ip4_reass>
 801419c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d101      	bne.n	80141a8 <ip4_input+0x16c>
      return ERR_OK;
 80141a4:	2300      	movs	r3, #0
 80141a6:	e064      	b.n	8014272 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80141ae:	4a33      	ldr	r2, [pc, #204]	@ (801427c <ip4_input+0x240>)
 80141b0:	693b      	ldr	r3, [r7, #16]
 80141b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80141b4:	4a31      	ldr	r2, [pc, #196]	@ (801427c <ip4_input+0x240>)
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80141ba:	4a30      	ldr	r2, [pc, #192]	@ (801427c <ip4_input+0x240>)
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	f003 030f 	and.w	r3, r3, #15
 80141c8:	b2db      	uxtb	r3, r3
 80141ca:	009b      	lsls	r3, r3, #2
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	461a      	mov	r2, r3
 80141d0:	4b2a      	ldr	r3, [pc, #168]	@ (801427c <ip4_input+0x240>)
 80141d2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80141d4:	89fb      	ldrh	r3, [r7, #14]
 80141d6:	4619      	mov	r1, r3
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f7f8 fa93 	bl	800c704 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80141de:	697b      	ldr	r3, [r7, #20]
 80141e0:	7a5b      	ldrb	r3, [r3, #9]
 80141e2:	2b11      	cmp	r3, #17
 80141e4:	d006      	beq.n	80141f4 <ip4_input+0x1b8>
 80141e6:	2b11      	cmp	r3, #17
 80141e8:	dc13      	bgt.n	8014212 <ip4_input+0x1d6>
 80141ea:	2b01      	cmp	r3, #1
 80141ec:	d00c      	beq.n	8014208 <ip4_input+0x1cc>
 80141ee:	2b06      	cmp	r3, #6
 80141f0:	d005      	beq.n	80141fe <ip4_input+0x1c2>
 80141f2:	e00e      	b.n	8014212 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80141f4:	6839      	ldr	r1, [r7, #0]
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7fe f98a 	bl	8012510 <udp_input>
        break;
 80141fc:	e026      	b.n	801424c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80141fe:	6839      	ldr	r1, [r7, #0]
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f7fa f9d1 	bl	800e5a8 <tcp_input>
        break;
 8014206:	e021      	b.n	801424c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014208:	6839      	ldr	r1, [r7, #0]
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f7ff fcc8 	bl	8013ba0 <icmp_input>
        break;
 8014210:	e01c      	b.n	801424c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014212:	4b1a      	ldr	r3, [pc, #104]	@ (801427c <ip4_input+0x240>)
 8014214:	695b      	ldr	r3, [r3, #20]
 8014216:	6939      	ldr	r1, [r7, #16]
 8014218:	4618      	mov	r0, r3
 801421a:	f000 f90b 	bl	8014434 <ip4_addr_isbroadcast_u32>
 801421e:	4603      	mov	r3, r0
 8014220:	2b00      	cmp	r3, #0
 8014222:	d10f      	bne.n	8014244 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014224:	4b15      	ldr	r3, [pc, #84]	@ (801427c <ip4_input+0x240>)
 8014226:	695b      	ldr	r3, [r3, #20]
 8014228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801422c:	2be0      	cmp	r3, #224	@ 0xe0
 801422e:	d009      	beq.n	8014244 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014230:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014234:	4619      	mov	r1, r3
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f7f8 fad7 	bl	800c7ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801423c:	2102      	movs	r1, #2
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f7ff fdce 	bl	8013de0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f7f8 fae3 	bl	800c810 <pbuf_free>
        break;
 801424a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801424c:	4b0b      	ldr	r3, [pc, #44]	@ (801427c <ip4_input+0x240>)
 801424e:	2200      	movs	r2, #0
 8014250:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014252:	4b0a      	ldr	r3, [pc, #40]	@ (801427c <ip4_input+0x240>)
 8014254:	2200      	movs	r2, #0
 8014256:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014258:	4b08      	ldr	r3, [pc, #32]	@ (801427c <ip4_input+0x240>)
 801425a:	2200      	movs	r2, #0
 801425c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801425e:	4b07      	ldr	r3, [pc, #28]	@ (801427c <ip4_input+0x240>)
 8014260:	2200      	movs	r2, #0
 8014262:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014264:	4b05      	ldr	r3, [pc, #20]	@ (801427c <ip4_input+0x240>)
 8014266:	2200      	movs	r2, #0
 8014268:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801426a:	4b04      	ldr	r3, [pc, #16]	@ (801427c <ip4_input+0x240>)
 801426c:	2200      	movs	r2, #0
 801426e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014270:	2300      	movs	r3, #0
}
 8014272:	4618      	mov	r0, r3
 8014274:	3718      	adds	r7, #24
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	24005368 	.word	0x24005368
 8014280:	24008278 	.word	0x24008278

08014284 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b08a      	sub	sp, #40	@ 0x28
 8014288:	af04      	add	r7, sp, #16
 801428a:	60f8      	str	r0, [r7, #12]
 801428c:	60b9      	str	r1, [r7, #8]
 801428e:	607a      	str	r2, [r7, #4]
 8014290:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d009      	beq.n	80142b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d003      	beq.n	80142aa <ip4_output_if+0x26>
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d102      	bne.n	80142b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80142aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142ac:	3304      	adds	r3, #4
 80142ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80142b0:	78fa      	ldrb	r2, [r7, #3]
 80142b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142b4:	9302      	str	r3, [sp, #8]
 80142b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80142ba:	9301      	str	r3, [sp, #4]
 80142bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80142c0:	9300      	str	r3, [sp, #0]
 80142c2:	4613      	mov	r3, r2
 80142c4:	687a      	ldr	r2, [r7, #4]
 80142c6:	6979      	ldr	r1, [r7, #20]
 80142c8:	68f8      	ldr	r0, [r7, #12]
 80142ca:	f000 f805 	bl	80142d8 <ip4_output_if_src>
 80142ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80142d0:	4618      	mov	r0, r3
 80142d2:	3718      	adds	r7, #24
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}

080142d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b088      	sub	sp, #32
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
 80142e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	7b9b      	ldrb	r3, [r3, #14]
 80142ea:	2b01      	cmp	r3, #1
 80142ec:	d006      	beq.n	80142fc <ip4_output_if_src+0x24>
 80142ee:	4b4b      	ldr	r3, [pc, #300]	@ (801441c <ip4_output_if_src+0x144>)
 80142f0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80142f4:	494a      	ldr	r1, [pc, #296]	@ (8014420 <ip4_output_if_src+0x148>)
 80142f6:	484b      	ldr	r0, [pc, #300]	@ (8014424 <ip4_output_if_src+0x14c>)
 80142f8:	f001 ffa8 	bl	801624c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d060      	beq.n	80143c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014302:	2314      	movs	r3, #20
 8014304:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014306:	2114      	movs	r1, #20
 8014308:	68f8      	ldr	r0, [r7, #12]
 801430a:	f7f8 f9eb 	bl	800c6e4 <pbuf_add_header>
 801430e:	4603      	mov	r3, r0
 8014310:	2b00      	cmp	r3, #0
 8014312:	d002      	beq.n	801431a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014314:	f06f 0301 	mvn.w	r3, #1
 8014318:	e07c      	b.n	8014414 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	685b      	ldr	r3, [r3, #4]
 801431e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	895b      	ldrh	r3, [r3, #10]
 8014324:	2b13      	cmp	r3, #19
 8014326:	d806      	bhi.n	8014336 <ip4_output_if_src+0x5e>
 8014328:	4b3c      	ldr	r3, [pc, #240]	@ (801441c <ip4_output_if_src+0x144>)
 801432a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801432e:	493e      	ldr	r1, [pc, #248]	@ (8014428 <ip4_output_if_src+0x150>)
 8014330:	483c      	ldr	r0, [pc, #240]	@ (8014424 <ip4_output_if_src+0x14c>)
 8014332:	f001 ff8b 	bl	801624c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014336:	69fb      	ldr	r3, [r7, #28]
 8014338:	78fa      	ldrb	r2, [r7, #3]
 801433a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801433c:	69fb      	ldr	r3, [r7, #28]
 801433e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014342:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	69fb      	ldr	r3, [r7, #28]
 801434a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801434c:	8b7b      	ldrh	r3, [r7, #26]
 801434e:	089b      	lsrs	r3, r3, #2
 8014350:	b29b      	uxth	r3, r3
 8014352:	b2db      	uxtb	r3, r3
 8014354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014358:	b2da      	uxtb	r2, r3
 801435a:	69fb      	ldr	r3, [r7, #28]
 801435c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014364:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	891b      	ldrh	r3, [r3, #8]
 801436a:	4618      	mov	r0, r3
 801436c:	f7f6 fe3a 	bl	800afe4 <lwip_htons>
 8014370:	4603      	mov	r3, r0
 8014372:	461a      	mov	r2, r3
 8014374:	69fb      	ldr	r3, [r7, #28]
 8014376:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	2200      	movs	r2, #0
 801437c:	719a      	strb	r2, [r3, #6]
 801437e:	2200      	movs	r2, #0
 8014380:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014382:	4b2a      	ldr	r3, [pc, #168]	@ (801442c <ip4_output_if_src+0x154>)
 8014384:	881b      	ldrh	r3, [r3, #0]
 8014386:	4618      	mov	r0, r3
 8014388:	f7f6 fe2c 	bl	800afe4 <lwip_htons>
 801438c:	4603      	mov	r3, r0
 801438e:	461a      	mov	r2, r3
 8014390:	69fb      	ldr	r3, [r7, #28]
 8014392:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014394:	4b25      	ldr	r3, [pc, #148]	@ (801442c <ip4_output_if_src+0x154>)
 8014396:	881b      	ldrh	r3, [r3, #0]
 8014398:	3301      	adds	r3, #1
 801439a:	b29a      	uxth	r2, r3
 801439c:	4b23      	ldr	r3, [pc, #140]	@ (801442c <ip4_output_if_src+0x154>)
 801439e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d104      	bne.n	80143b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80143a6:	4b22      	ldr	r3, [pc, #136]	@ (8014430 <ip4_output_if_src+0x158>)
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	69fb      	ldr	r3, [r7, #28]
 80143ac:	60da      	str	r2, [r3, #12]
 80143ae:	e003      	b.n	80143b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	681a      	ldr	r2, [r3, #0]
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80143b8:	69fb      	ldr	r3, [r7, #28]
 80143ba:	2200      	movs	r2, #0
 80143bc:	729a      	strb	r2, [r3, #10]
 80143be:	2200      	movs	r2, #0
 80143c0:	72da      	strb	r2, [r3, #11]
 80143c2:	e00f      	b.n	80143e4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	895b      	ldrh	r3, [r3, #10]
 80143c8:	2b13      	cmp	r3, #19
 80143ca:	d802      	bhi.n	80143d2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80143cc:	f06f 0301 	mvn.w	r3, #1
 80143d0:	e020      	b.n	8014414 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80143d8:	69fb      	ldr	r3, [r7, #28]
 80143da:	691b      	ldr	r3, [r3, #16]
 80143dc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80143de:	f107 0314 	add.w	r3, r7, #20
 80143e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80143e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d00c      	beq.n	8014406 <ip4_output_if_src+0x12e>
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	891a      	ldrh	r2, [r3, #8]
 80143f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d906      	bls.n	8014406 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80143f8:	687a      	ldr	r2, [r7, #4]
 80143fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80143fc:	68f8      	ldr	r0, [r7, #12]
 80143fe:	f000 fd53 	bl	8014ea8 <ip4_frag>
 8014402:	4603      	mov	r3, r0
 8014404:	e006      	b.n	8014414 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014408:	695b      	ldr	r3, [r3, #20]
 801440a:	687a      	ldr	r2, [r7, #4]
 801440c:	68f9      	ldr	r1, [r7, #12]
 801440e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014410:	4798      	blx	r3
 8014412:	4603      	mov	r3, r0
}
 8014414:	4618      	mov	r0, r3
 8014416:	3720      	adds	r7, #32
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}
 801441c:	0801c114 	.word	0x0801c114
 8014420:	0801c148 	.word	0x0801c148
 8014424:	0801c154 	.word	0x0801c154
 8014428:	0801c17c 	.word	0x0801c17c
 801442c:	240083d6 	.word	0x240083d6
 8014430:	0801c58c 	.word	0x0801c58c

08014434 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014434:	b480      	push	{r7}
 8014436:	b085      	sub	sp, #20
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
 801443c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014448:	d002      	beq.n	8014450 <ip4_addr_isbroadcast_u32+0x1c>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d101      	bne.n	8014454 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014450:	2301      	movs	r3, #1
 8014452:	e02a      	b.n	80144aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801445a:	f003 0302 	and.w	r3, r3, #2
 801445e:	2b00      	cmp	r3, #0
 8014460:	d101      	bne.n	8014466 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014462:	2300      	movs	r3, #0
 8014464:	e021      	b.n	80144aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	3304      	adds	r3, #4
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	429a      	cmp	r2, r3
 8014470:	d101      	bne.n	8014476 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014472:	2300      	movs	r3, #0
 8014474:	e019      	b.n	80144aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014476:	68fa      	ldr	r2, [r7, #12]
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	3304      	adds	r3, #4
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	405a      	eors	r2, r3
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	3308      	adds	r3, #8
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	4013      	ands	r3, r2
 8014488:	2b00      	cmp	r3, #0
 801448a:	d10d      	bne.n	80144a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	3308      	adds	r3, #8
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	43da      	mvns	r2, r3
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014498:	683b      	ldr	r3, [r7, #0]
 801449a:	3308      	adds	r3, #8
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d101      	bne.n	80144a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80144a4:	2301      	movs	r3, #1
 80144a6:	e000      	b.n	80144aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80144a8:	2300      	movs	r3, #0
  }
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3714      	adds	r7, #20
 80144ae:	46bd      	mov	sp, r7
 80144b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b4:	4770      	bx	lr
	...

080144b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80144be:	2300      	movs	r3, #0
 80144c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80144c2:	4b12      	ldr	r3, [pc, #72]	@ (801450c <ip_reass_tmr+0x54>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80144c8:	e018      	b.n	80144fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	7fdb      	ldrb	r3, [r3, #31]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d00b      	beq.n	80144ea <ip_reass_tmr+0x32>
      r->timer--;
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	7fdb      	ldrb	r3, [r3, #31]
 80144d6:	3b01      	subs	r3, #1
 80144d8:	b2da      	uxtb	r2, r3
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	60fb      	str	r3, [r7, #12]
 80144e8:	e008      	b.n	80144fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80144f4:	68b9      	ldr	r1, [r7, #8]
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f000 f80a 	bl	8014510 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d1e3      	bne.n	80144ca <ip_reass_tmr+0x12>
    }
  }
}
 8014502:	bf00      	nop
 8014504:	bf00      	nop
 8014506:	3710      	adds	r7, #16
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}
 801450c:	240083d8 	.word	0x240083d8

08014510 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b088      	sub	sp, #32
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801451a:	2300      	movs	r3, #0
 801451c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801451e:	683a      	ldr	r2, [r7, #0]
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	429a      	cmp	r2, r3
 8014524:	d105      	bne.n	8014532 <ip_reass_free_complete_datagram+0x22>
 8014526:	4b45      	ldr	r3, [pc, #276]	@ (801463c <ip_reass_free_complete_datagram+0x12c>)
 8014528:	22ab      	movs	r2, #171	@ 0xab
 801452a:	4945      	ldr	r1, [pc, #276]	@ (8014640 <ip_reass_free_complete_datagram+0x130>)
 801452c:	4845      	ldr	r0, [pc, #276]	@ (8014644 <ip_reass_free_complete_datagram+0x134>)
 801452e:	f001 fe8d 	bl	801624c <iprintf>
  if (prev != NULL) {
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d00a      	beq.n	801454e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	687a      	ldr	r2, [r7, #4]
 801453e:	429a      	cmp	r2, r3
 8014540:	d005      	beq.n	801454e <ip_reass_free_complete_datagram+0x3e>
 8014542:	4b3e      	ldr	r3, [pc, #248]	@ (801463c <ip_reass_free_complete_datagram+0x12c>)
 8014544:	22ad      	movs	r2, #173	@ 0xad
 8014546:	4940      	ldr	r1, [pc, #256]	@ (8014648 <ip_reass_free_complete_datagram+0x138>)
 8014548:	483e      	ldr	r0, [pc, #248]	@ (8014644 <ip_reass_free_complete_datagram+0x134>)
 801454a:	f001 fe7f 	bl	801624c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	685b      	ldr	r3, [r3, #4]
 8014554:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	889b      	ldrh	r3, [r3, #4]
 801455a:	b29b      	uxth	r3, r3
 801455c:	2b00      	cmp	r3, #0
 801455e:	d12a      	bne.n	80145b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	681a      	ldr	r2, [r3, #0]
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801456e:	69bb      	ldr	r3, [r7, #24]
 8014570:	6858      	ldr	r0, [r3, #4]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	3308      	adds	r3, #8
 8014576:	2214      	movs	r2, #20
 8014578:	4619      	mov	r1, r3
 801457a:	f002 f88c 	bl	8016696 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801457e:	2101      	movs	r1, #1
 8014580:	69b8      	ldr	r0, [r7, #24]
 8014582:	f7ff fc3d 	bl	8013e00 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014586:	69b8      	ldr	r0, [r7, #24]
 8014588:	f7f8 f9ca 	bl	800c920 <pbuf_clen>
 801458c:	4603      	mov	r3, r0
 801458e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014590:	8bfa      	ldrh	r2, [r7, #30]
 8014592:	8a7b      	ldrh	r3, [r7, #18]
 8014594:	4413      	add	r3, r2
 8014596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801459a:	db05      	blt.n	80145a8 <ip_reass_free_complete_datagram+0x98>
 801459c:	4b27      	ldr	r3, [pc, #156]	@ (801463c <ip_reass_free_complete_datagram+0x12c>)
 801459e:	22bc      	movs	r2, #188	@ 0xbc
 80145a0:	492a      	ldr	r1, [pc, #168]	@ (801464c <ip_reass_free_complete_datagram+0x13c>)
 80145a2:	4828      	ldr	r0, [pc, #160]	@ (8014644 <ip_reass_free_complete_datagram+0x134>)
 80145a4:	f001 fe52 	bl	801624c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80145a8:	8bfa      	ldrh	r2, [r7, #30]
 80145aa:	8a7b      	ldrh	r3, [r7, #18]
 80145ac:	4413      	add	r3, r2
 80145ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80145b0:	69b8      	ldr	r0, [r7, #24]
 80145b2:	f7f8 f92d 	bl	800c810 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80145bc:	e01f      	b.n	80145fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80145be:	69bb      	ldr	r3, [r7, #24]
 80145c0:	685b      	ldr	r3, [r3, #4]
 80145c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80145ce:	68f8      	ldr	r0, [r7, #12]
 80145d0:	f7f8 f9a6 	bl	800c920 <pbuf_clen>
 80145d4:	4603      	mov	r3, r0
 80145d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80145d8:	8bfa      	ldrh	r2, [r7, #30]
 80145da:	8a7b      	ldrh	r3, [r7, #18]
 80145dc:	4413      	add	r3, r2
 80145de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80145e2:	db05      	blt.n	80145f0 <ip_reass_free_complete_datagram+0xe0>
 80145e4:	4b15      	ldr	r3, [pc, #84]	@ (801463c <ip_reass_free_complete_datagram+0x12c>)
 80145e6:	22cc      	movs	r2, #204	@ 0xcc
 80145e8:	4918      	ldr	r1, [pc, #96]	@ (801464c <ip_reass_free_complete_datagram+0x13c>)
 80145ea:	4816      	ldr	r0, [pc, #88]	@ (8014644 <ip_reass_free_complete_datagram+0x134>)
 80145ec:	f001 fe2e 	bl	801624c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80145f0:	8bfa      	ldrh	r2, [r7, #30]
 80145f2:	8a7b      	ldrh	r3, [r7, #18]
 80145f4:	4413      	add	r3, r2
 80145f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80145f8:	68f8      	ldr	r0, [r7, #12]
 80145fa:	f7f8 f909 	bl	800c810 <pbuf_free>
  while (p != NULL) {
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d1dc      	bne.n	80145be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014604:	6839      	ldr	r1, [r7, #0]
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f000 f8c2 	bl	8014790 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801460c:	4b10      	ldr	r3, [pc, #64]	@ (8014650 <ip_reass_free_complete_datagram+0x140>)
 801460e:	881b      	ldrh	r3, [r3, #0]
 8014610:	8bfa      	ldrh	r2, [r7, #30]
 8014612:	429a      	cmp	r2, r3
 8014614:	d905      	bls.n	8014622 <ip_reass_free_complete_datagram+0x112>
 8014616:	4b09      	ldr	r3, [pc, #36]	@ (801463c <ip_reass_free_complete_datagram+0x12c>)
 8014618:	22d2      	movs	r2, #210	@ 0xd2
 801461a:	490e      	ldr	r1, [pc, #56]	@ (8014654 <ip_reass_free_complete_datagram+0x144>)
 801461c:	4809      	ldr	r0, [pc, #36]	@ (8014644 <ip_reass_free_complete_datagram+0x134>)
 801461e:	f001 fe15 	bl	801624c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014622:	4b0b      	ldr	r3, [pc, #44]	@ (8014650 <ip_reass_free_complete_datagram+0x140>)
 8014624:	881a      	ldrh	r2, [r3, #0]
 8014626:	8bfb      	ldrh	r3, [r7, #30]
 8014628:	1ad3      	subs	r3, r2, r3
 801462a:	b29a      	uxth	r2, r3
 801462c:	4b08      	ldr	r3, [pc, #32]	@ (8014650 <ip_reass_free_complete_datagram+0x140>)
 801462e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014630:	8bfb      	ldrh	r3, [r7, #30]
}
 8014632:	4618      	mov	r0, r3
 8014634:	3720      	adds	r7, #32
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	0801c1ac 	.word	0x0801c1ac
 8014640:	0801c1e8 	.word	0x0801c1e8
 8014644:	0801c1f4 	.word	0x0801c1f4
 8014648:	0801c21c 	.word	0x0801c21c
 801464c:	0801c230 	.word	0x0801c230
 8014650:	240083dc 	.word	0x240083dc
 8014654:	0801c250 	.word	0x0801c250

08014658 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b08a      	sub	sp, #40	@ 0x28
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014662:	2300      	movs	r3, #0
 8014664:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014666:	2300      	movs	r3, #0
 8014668:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801466a:	2300      	movs	r3, #0
 801466c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801466e:	2300      	movs	r3, #0
 8014670:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014672:	2300      	movs	r3, #0
 8014674:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014676:	4b28      	ldr	r3, [pc, #160]	@ (8014718 <ip_reass_remove_oldest_datagram+0xc0>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801467c:	e030      	b.n	80146e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014680:	695a      	ldr	r2, [r3, #20]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	68db      	ldr	r3, [r3, #12]
 8014686:	429a      	cmp	r2, r3
 8014688:	d10c      	bne.n	80146a4 <ip_reass_remove_oldest_datagram+0x4c>
 801468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801468c:	699a      	ldr	r2, [r3, #24]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	691b      	ldr	r3, [r3, #16]
 8014692:	429a      	cmp	r2, r3
 8014694:	d106      	bne.n	80146a4 <ip_reass_remove_oldest_datagram+0x4c>
 8014696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014698:	899a      	ldrh	r2, [r3, #12]
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	889b      	ldrh	r3, [r3, #4]
 801469e:	b29b      	uxth	r3, r3
 80146a0:	429a      	cmp	r2, r3
 80146a2:	d014      	beq.n	80146ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80146a4:	693b      	ldr	r3, [r7, #16]
 80146a6:	3301      	adds	r3, #1
 80146a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80146aa:	6a3b      	ldr	r3, [r7, #32]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d104      	bne.n	80146ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80146b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	61bb      	str	r3, [r7, #24]
 80146b8:	e009      	b.n	80146ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80146ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146bc:	7fda      	ldrb	r2, [r3, #31]
 80146be:	6a3b      	ldr	r3, [r7, #32]
 80146c0:	7fdb      	ldrb	r3, [r3, #31]
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d803      	bhi.n	80146ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80146c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80146ca:	69fb      	ldr	r3, [r7, #28]
 80146cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80146ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d001      	beq.n	80146da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80146d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80146da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80146e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d1cb      	bne.n	801467e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80146e6:	6a3b      	ldr	r3, [r7, #32]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d008      	beq.n	80146fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80146ec:	69b9      	ldr	r1, [r7, #24]
 80146ee:	6a38      	ldr	r0, [r7, #32]
 80146f0:	f7ff ff0e 	bl	8014510 <ip_reass_free_complete_datagram>
 80146f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80146f6:	697a      	ldr	r2, [r7, #20]
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	4413      	add	r3, r2
 80146fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80146fe:	697a      	ldr	r2, [r7, #20]
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	429a      	cmp	r2, r3
 8014704:	da02      	bge.n	801470c <ip_reass_remove_oldest_datagram+0xb4>
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	2b01      	cmp	r3, #1
 801470a:	dcac      	bgt.n	8014666 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801470c:	697b      	ldr	r3, [r7, #20]
}
 801470e:	4618      	mov	r0, r3
 8014710:	3728      	adds	r7, #40	@ 0x28
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	240083d8 	.word	0x240083d8

0801471c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b084      	sub	sp, #16
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014726:	2004      	movs	r0, #4
 8014728:	f7f7 f98c 	bl	800ba44 <memp_malloc>
 801472c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d110      	bne.n	8014756 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014734:	6839      	ldr	r1, [r7, #0]
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f7ff ff8e 	bl	8014658 <ip_reass_remove_oldest_datagram>
 801473c:	4602      	mov	r2, r0
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	4293      	cmp	r3, r2
 8014742:	dc03      	bgt.n	801474c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014744:	2004      	movs	r0, #4
 8014746:	f7f7 f97d 	bl	800ba44 <memp_malloc>
 801474a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d101      	bne.n	8014756 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014752:	2300      	movs	r3, #0
 8014754:	e016      	b.n	8014784 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014756:	2220      	movs	r2, #32
 8014758:	2100      	movs	r1, #0
 801475a:	68f8      	ldr	r0, [r7, #12]
 801475c:	f001 ff0a 	bl	8016574 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	220f      	movs	r2, #15
 8014764:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014766:	4b09      	ldr	r3, [pc, #36]	@ (801478c <ip_reass_enqueue_new_datagram+0x70>)
 8014768:	681a      	ldr	r2, [r3, #0]
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801476e:	4a07      	ldr	r2, [pc, #28]	@ (801478c <ip_reass_enqueue_new_datagram+0x70>)
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	3308      	adds	r3, #8
 8014778:	2214      	movs	r2, #20
 801477a:	6879      	ldr	r1, [r7, #4]
 801477c:	4618      	mov	r0, r3
 801477e:	f001 ff8a 	bl	8016696 <memcpy>
  return ipr;
 8014782:	68fb      	ldr	r3, [r7, #12]
}
 8014784:	4618      	mov	r0, r3
 8014786:	3710      	adds	r7, #16
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	240083d8 	.word	0x240083d8

08014790 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801479a:	4b10      	ldr	r3, [pc, #64]	@ (80147dc <ip_reass_dequeue_datagram+0x4c>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d104      	bne.n	80147ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	4a0c      	ldr	r2, [pc, #48]	@ (80147dc <ip_reass_dequeue_datagram+0x4c>)
 80147aa:	6013      	str	r3, [r2, #0]
 80147ac:	e00d      	b.n	80147ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d106      	bne.n	80147c2 <ip_reass_dequeue_datagram+0x32>
 80147b4:	4b0a      	ldr	r3, [pc, #40]	@ (80147e0 <ip_reass_dequeue_datagram+0x50>)
 80147b6:	f240 1245 	movw	r2, #325	@ 0x145
 80147ba:	490a      	ldr	r1, [pc, #40]	@ (80147e4 <ip_reass_dequeue_datagram+0x54>)
 80147bc:	480a      	ldr	r0, [pc, #40]	@ (80147e8 <ip_reass_dequeue_datagram+0x58>)
 80147be:	f001 fd45 	bl	801624c <iprintf>
    prev->next = ipr->next;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681a      	ldr	r2, [r3, #0]
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80147ca:	6879      	ldr	r1, [r7, #4]
 80147cc:	2004      	movs	r0, #4
 80147ce:	f7f7 f9a9 	bl	800bb24 <memp_free>
}
 80147d2:	bf00      	nop
 80147d4:	3708      	adds	r7, #8
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	240083d8 	.word	0x240083d8
 80147e0:	0801c1ac 	.word	0x0801c1ac
 80147e4:	0801c274 	.word	0x0801c274
 80147e8:	0801c1f4 	.word	0x0801c1f4

080147ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b08c      	sub	sp, #48	@ 0x30
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	60f8      	str	r0, [r7, #12]
 80147f4:	60b9      	str	r1, [r7, #8]
 80147f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80147f8:	2300      	movs	r3, #0
 80147fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80147fc:	2301      	movs	r3, #1
 80147fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	685b      	ldr	r3, [r3, #4]
 8014804:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	885b      	ldrh	r3, [r3, #2]
 801480a:	b29b      	uxth	r3, r3
 801480c:	4618      	mov	r0, r3
 801480e:	f7f6 fbe9 	bl	800afe4 <lwip_htons>
 8014812:	4603      	mov	r3, r0
 8014814:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014816:	69fb      	ldr	r3, [r7, #28]
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	f003 030f 	and.w	r3, r3, #15
 801481e:	b2db      	uxtb	r3, r3
 8014820:	009b      	lsls	r3, r3, #2
 8014822:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014824:	7e7b      	ldrb	r3, [r7, #25]
 8014826:	b29b      	uxth	r3, r3
 8014828:	8b7a      	ldrh	r2, [r7, #26]
 801482a:	429a      	cmp	r2, r3
 801482c:	d202      	bcs.n	8014834 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801482e:	f04f 33ff 	mov.w	r3, #4294967295
 8014832:	e135      	b.n	8014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014834:	7e7b      	ldrb	r3, [r7, #25]
 8014836:	b29b      	uxth	r3, r3
 8014838:	8b7a      	ldrh	r2, [r7, #26]
 801483a:	1ad3      	subs	r3, r2, r3
 801483c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801483e:	69fb      	ldr	r3, [r7, #28]
 8014840:	88db      	ldrh	r3, [r3, #6]
 8014842:	b29b      	uxth	r3, r3
 8014844:	4618      	mov	r0, r3
 8014846:	f7f6 fbcd 	bl	800afe4 <lwip_htons>
 801484a:	4603      	mov	r3, r0
 801484c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014850:	b29b      	uxth	r3, r3
 8014852:	00db      	lsls	r3, r3, #3
 8014854:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	685b      	ldr	r3, [r3, #4]
 801485a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801485c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801485e:	2200      	movs	r2, #0
 8014860:	701a      	strb	r2, [r3, #0]
 8014862:	2200      	movs	r2, #0
 8014864:	705a      	strb	r2, [r3, #1]
 8014866:	2200      	movs	r2, #0
 8014868:	709a      	strb	r2, [r3, #2]
 801486a:	2200      	movs	r2, #0
 801486c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801486e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014870:	8afa      	ldrh	r2, [r7, #22]
 8014872:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014874:	8afa      	ldrh	r2, [r7, #22]
 8014876:	8b7b      	ldrh	r3, [r7, #26]
 8014878:	4413      	add	r3, r2
 801487a:	b29a      	uxth	r2, r3
 801487c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801487e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014882:	88db      	ldrh	r3, [r3, #6]
 8014884:	b29b      	uxth	r3, r3
 8014886:	8afa      	ldrh	r2, [r7, #22]
 8014888:	429a      	cmp	r2, r3
 801488a:	d902      	bls.n	8014892 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801488c:	f04f 33ff 	mov.w	r3, #4294967295
 8014890:	e106      	b.n	8014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	685b      	ldr	r3, [r3, #4]
 8014896:	627b      	str	r3, [r7, #36]	@ 0x24
 8014898:	e068      	b.n	801496c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80148a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148a2:	889b      	ldrh	r3, [r3, #4]
 80148a4:	b29a      	uxth	r2, r3
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	889b      	ldrh	r3, [r3, #4]
 80148aa:	b29b      	uxth	r3, r3
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d235      	bcs.n	801491c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80148b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80148b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d020      	beq.n	80148fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80148bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148be:	889b      	ldrh	r3, [r3, #4]
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148c4:	88db      	ldrh	r3, [r3, #6]
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d307      	bcc.n	80148dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80148cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148ce:	88db      	ldrh	r3, [r3, #6]
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	889b      	ldrh	r3, [r3, #4]
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	429a      	cmp	r2, r3
 80148da:	d902      	bls.n	80148e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80148dc:	f04f 33ff 	mov.w	r3, #4294967295
 80148e0:	e0de      	b.n	8014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80148e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148e4:	68ba      	ldr	r2, [r7, #8]
 80148e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80148e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148ea:	88db      	ldrh	r3, [r3, #6]
 80148ec:	b29a      	uxth	r2, r3
 80148ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148f0:	889b      	ldrh	r3, [r3, #4]
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d03d      	beq.n	8014974 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80148f8:	2300      	movs	r3, #0
 80148fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80148fc:	e03a      	b.n	8014974 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80148fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014900:	88db      	ldrh	r3, [r3, #6]
 8014902:	b29a      	uxth	r2, r3
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	889b      	ldrh	r3, [r3, #4]
 8014908:	b29b      	uxth	r3, r3
 801490a:	429a      	cmp	r2, r3
 801490c:	d902      	bls.n	8014914 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801490e:	f04f 33ff 	mov.w	r3, #4294967295
 8014912:	e0c5      	b.n	8014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	68ba      	ldr	r2, [r7, #8]
 8014918:	605a      	str	r2, [r3, #4]
      break;
 801491a:	e02b      	b.n	8014974 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801491e:	889b      	ldrh	r3, [r3, #4]
 8014920:	b29a      	uxth	r2, r3
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	889b      	ldrh	r3, [r3, #4]
 8014926:	b29b      	uxth	r3, r3
 8014928:	429a      	cmp	r2, r3
 801492a:	d102      	bne.n	8014932 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801492c:	f04f 33ff 	mov.w	r3, #4294967295
 8014930:	e0b6      	b.n	8014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014934:	889b      	ldrh	r3, [r3, #4]
 8014936:	b29a      	uxth	r2, r3
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	88db      	ldrh	r3, [r3, #6]
 801493c:	b29b      	uxth	r3, r3
 801493e:	429a      	cmp	r2, r3
 8014940:	d202      	bcs.n	8014948 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014942:	f04f 33ff 	mov.w	r3, #4294967295
 8014946:	e0ab      	b.n	8014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801494a:	2b00      	cmp	r3, #0
 801494c:	d009      	beq.n	8014962 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801494e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014950:	88db      	ldrh	r3, [r3, #6]
 8014952:	b29a      	uxth	r2, r3
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	889b      	ldrh	r3, [r3, #4]
 8014958:	b29b      	uxth	r3, r3
 801495a:	429a      	cmp	r2, r3
 801495c:	d001      	beq.n	8014962 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801495e:	2300      	movs	r3, #0
 8014960:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014962:	693b      	ldr	r3, [r7, #16]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801496e:	2b00      	cmp	r3, #0
 8014970:	d193      	bne.n	801489a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014972:	e000      	b.n	8014976 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014974:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014978:	2b00      	cmp	r3, #0
 801497a:	d12d      	bne.n	80149d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801497e:	2b00      	cmp	r3, #0
 8014980:	d01c      	beq.n	80149bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014984:	88db      	ldrh	r3, [r3, #6]
 8014986:	b29a      	uxth	r2, r3
 8014988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801498a:	889b      	ldrh	r3, [r3, #4]
 801498c:	b29b      	uxth	r3, r3
 801498e:	429a      	cmp	r2, r3
 8014990:	d906      	bls.n	80149a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014992:	4b45      	ldr	r3, [pc, #276]	@ (8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014994:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8014998:	4944      	ldr	r1, [pc, #272]	@ (8014aac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801499a:	4845      	ldr	r0, [pc, #276]	@ (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801499c:	f001 fc56 	bl	801624c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80149a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149a2:	68ba      	ldr	r2, [r7, #8]
 80149a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80149a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149a8:	88db      	ldrh	r3, [r3, #6]
 80149aa:	b29a      	uxth	r2, r3
 80149ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149ae:	889b      	ldrh	r3, [r3, #4]
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d010      	beq.n	80149d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80149b6:	2300      	movs	r3, #0
 80149b8:	623b      	str	r3, [r7, #32]
 80149ba:	e00d      	b.n	80149d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d006      	beq.n	80149d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80149c4:	4b38      	ldr	r3, [pc, #224]	@ (8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80149c6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80149ca:	493a      	ldr	r1, [pc, #232]	@ (8014ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80149cc:	4838      	ldr	r0, [pc, #224]	@ (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80149ce:	f001 fc3d 	bl	801624c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	68ba      	ldr	r2, [r7, #8]
 80149d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d105      	bne.n	80149ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	7f9b      	ldrb	r3, [r3, #30]
 80149e2:	f003 0301 	and.w	r3, r3, #1
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d059      	beq.n	8014a9e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80149ea:	6a3b      	ldr	r3, [r7, #32]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d04f      	beq.n	8014a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	685b      	ldr	r3, [r3, #4]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d006      	beq.n	8014a06 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	685b      	ldr	r3, [r3, #4]
 80149fe:	889b      	ldrh	r3, [r3, #4]
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d002      	beq.n	8014a0c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014a06:	2300      	movs	r3, #0
 8014a08:	623b      	str	r3, [r7, #32]
 8014a0a:	e041      	b.n	8014a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8014a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014a16:	e012      	b.n	8014a3e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a1a:	685b      	ldr	r3, [r3, #4]
 8014a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8014a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a20:	88db      	ldrh	r3, [r3, #6]
 8014a22:	b29a      	uxth	r2, r3
 8014a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a26:	889b      	ldrh	r3, [r3, #4]
 8014a28:	b29b      	uxth	r3, r3
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d002      	beq.n	8014a34 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	623b      	str	r3, [r7, #32]
            break;
 8014a32:	e007      	b.n	8014a44 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a36:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d1e9      	bne.n	8014a18 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014a44:	6a3b      	ldr	r3, [r7, #32]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d022      	beq.n	8014a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d106      	bne.n	8014a60 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014a52:	4b15      	ldr	r3, [pc, #84]	@ (8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a54:	f240 12df 	movw	r2, #479	@ 0x1df
 8014a58:	4917      	ldr	r1, [pc, #92]	@ (8014ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014a5a:	4815      	ldr	r0, [pc, #84]	@ (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a5c:	f001 fbf6 	bl	801624c <iprintf>
          LWIP_ASSERT("sanity check",
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d106      	bne.n	8014a7a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a6e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8014a72:	4911      	ldr	r1, [pc, #68]	@ (8014ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014a74:	480e      	ldr	r0, [pc, #56]	@ (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a76:	f001 fbe9 	bl	801624c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d006      	beq.n	8014a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014a82:	4b09      	ldr	r3, [pc, #36]	@ (8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a84:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8014a88:	490c      	ldr	r1, [pc, #48]	@ (8014abc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014a8a:	4809      	ldr	r0, [pc, #36]	@ (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a8c:	f001 fbde 	bl	801624c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014a90:	6a3b      	ldr	r3, [r7, #32]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	bf14      	ite	ne
 8014a96:	2301      	movne	r3, #1
 8014a98:	2300      	moveq	r3, #0
 8014a9a:	b2db      	uxtb	r3, r3
 8014a9c:	e000      	b.n	8014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014a9e:	2300      	movs	r3, #0
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3730      	adds	r7, #48	@ 0x30
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}
 8014aa8:	0801c1ac 	.word	0x0801c1ac
 8014aac:	0801c290 	.word	0x0801c290
 8014ab0:	0801c1f4 	.word	0x0801c1f4
 8014ab4:	0801c2b0 	.word	0x0801c2b0
 8014ab8:	0801c2e8 	.word	0x0801c2e8
 8014abc:	0801c2f8 	.word	0x0801c2f8

08014ac0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b08e      	sub	sp, #56	@ 0x38
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	685b      	ldr	r3, [r3, #4]
 8014acc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	f003 030f 	and.w	r3, r3, #15
 8014ad6:	b2db      	uxtb	r3, r3
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	b2db      	uxtb	r3, r3
 8014adc:	2b14      	cmp	r3, #20
 8014ade:	f040 8171 	bne.w	8014dc4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ae4:	88db      	ldrh	r3, [r3, #6]
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7f6 fa7b 	bl	800afe4 <lwip_htons>
 8014aee:	4603      	mov	r3, r0
 8014af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	00db      	lsls	r3, r3, #3
 8014af8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014afc:	885b      	ldrh	r3, [r3, #2]
 8014afe:	b29b      	uxth	r3, r3
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7f6 fa6f 	bl	800afe4 <lwip_htons>
 8014b06:	4603      	mov	r3, r0
 8014b08:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	f003 030f 	and.w	r3, r3, #15
 8014b12:	b2db      	uxtb	r3, r3
 8014b14:	009b      	lsls	r3, r3, #2
 8014b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8014b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014b22:	429a      	cmp	r2, r3
 8014b24:	f0c0 8150 	bcc.w	8014dc8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014b28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014b2c:	b29b      	uxth	r3, r3
 8014b2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014b30:	1ad3      	subs	r3, r2, r3
 8014b32:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f7f7 fef3 	bl	800c920 <pbuf_clen>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014b3e:	4b8c      	ldr	r3, [pc, #560]	@ (8014d70 <ip4_reass+0x2b0>)
 8014b40:	881b      	ldrh	r3, [r3, #0]
 8014b42:	461a      	mov	r2, r3
 8014b44:	8c3b      	ldrh	r3, [r7, #32]
 8014b46:	4413      	add	r3, r2
 8014b48:	2b0a      	cmp	r3, #10
 8014b4a:	dd10      	ble.n	8014b6e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014b4c:	8c3b      	ldrh	r3, [r7, #32]
 8014b4e:	4619      	mov	r1, r3
 8014b50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014b52:	f7ff fd81 	bl	8014658 <ip_reass_remove_oldest_datagram>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	f000 8137 	beq.w	8014dcc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014b5e:	4b84      	ldr	r3, [pc, #528]	@ (8014d70 <ip4_reass+0x2b0>)
 8014b60:	881b      	ldrh	r3, [r3, #0]
 8014b62:	461a      	mov	r2, r3
 8014b64:	8c3b      	ldrh	r3, [r7, #32]
 8014b66:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014b68:	2b0a      	cmp	r3, #10
 8014b6a:	f300 812f 	bgt.w	8014dcc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014b6e:	4b81      	ldr	r3, [pc, #516]	@ (8014d74 <ip4_reass+0x2b4>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	633b      	str	r3, [r7, #48]	@ 0x30
 8014b74:	e015      	b.n	8014ba2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b78:	695a      	ldr	r2, [r3, #20]
 8014b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b7c:	68db      	ldr	r3, [r3, #12]
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d10c      	bne.n	8014b9c <ip4_reass+0xdc>
 8014b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b84:	699a      	ldr	r2, [r3, #24]
 8014b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b88:	691b      	ldr	r3, [r3, #16]
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	d106      	bne.n	8014b9c <ip4_reass+0xdc>
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b90:	899a      	ldrh	r2, [r3, #12]
 8014b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b94:	889b      	ldrh	r3, [r3, #4]
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	429a      	cmp	r2, r3
 8014b9a:	d006      	beq.n	8014baa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8014ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d1e6      	bne.n	8014b76 <ip4_reass+0xb6>
 8014ba8:	e000      	b.n	8014bac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014baa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d109      	bne.n	8014bc6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014bb2:	8c3b      	ldrh	r3, [r7, #32]
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014bb8:	f7ff fdb0 	bl	801471c <ip_reass_enqueue_new_datagram>
 8014bbc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d11c      	bne.n	8014bfe <ip4_reass+0x13e>
      goto nullreturn;
 8014bc4:	e105      	b.n	8014dd2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bc8:	88db      	ldrh	r3, [r3, #6]
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7f6 fa09 	bl	800afe4 <lwip_htons>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d110      	bne.n	8014bfe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bde:	89db      	ldrh	r3, [r3, #14]
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7f6 f9ff 	bl	800afe4 <lwip_htons>
 8014be6:	4603      	mov	r3, r0
 8014be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d006      	beq.n	8014bfe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf2:	3308      	adds	r3, #8
 8014bf4:	2214      	movs	r2, #20
 8014bf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f001 fd4c 	bl	8016696 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c00:	88db      	ldrh	r3, [r3, #6]
 8014c02:	b29b      	uxth	r3, r3
 8014c04:	f003 0320 	and.w	r3, r3, #32
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	bf0c      	ite	eq
 8014c0c:	2301      	moveq	r3, #1
 8014c0e:	2300      	movne	r3, #0
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014c14:	69fb      	ldr	r3, [r7, #28]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d00e      	beq.n	8014c38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014c1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014c1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014c1e:	4413      	add	r3, r2
 8014c20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014c22:	8b7a      	ldrh	r2, [r7, #26]
 8014c24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014c26:	429a      	cmp	r2, r3
 8014c28:	f0c0 80a0 	bcc.w	8014d6c <ip4_reass+0x2ac>
 8014c2c:	8b7b      	ldrh	r3, [r7, #26]
 8014c2e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8014c32:	4293      	cmp	r3, r2
 8014c34:	f200 809a 	bhi.w	8014d6c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014c38:	69fa      	ldr	r2, [r7, #28]
 8014c3a:	6879      	ldr	r1, [r7, #4]
 8014c3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c3e:	f7ff fdd5 	bl	80147ec <ip_reass_chain_frag_into_datagram_and_validate>
 8014c42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c4a:	f000 809b 	beq.w	8014d84 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014c4e:	4b48      	ldr	r3, [pc, #288]	@ (8014d70 <ip4_reass+0x2b0>)
 8014c50:	881a      	ldrh	r2, [r3, #0]
 8014c52:	8c3b      	ldrh	r3, [r7, #32]
 8014c54:	4413      	add	r3, r2
 8014c56:	b29a      	uxth	r2, r3
 8014c58:	4b45      	ldr	r3, [pc, #276]	@ (8014d70 <ip4_reass+0x2b0>)
 8014c5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014c5c:	69fb      	ldr	r3, [r7, #28]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d00d      	beq.n	8014c7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014c62:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014c64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014c66:	4413      	add	r3, r2
 8014c68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c6c:	8a7a      	ldrh	r2, [r7, #18]
 8014c6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c72:	7f9b      	ldrb	r3, [r3, #30]
 8014c74:	f043 0301 	orr.w	r3, r3, #1
 8014c78:	b2da      	uxtb	r2, r3
 8014c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d171      	bne.n	8014d68 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c86:	8b9b      	ldrh	r3, [r3, #28]
 8014c88:	3314      	adds	r3, #20
 8014c8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ca0:	3308      	adds	r3, #8
 8014ca2:	2214      	movs	r2, #20
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014ca8:	f001 fcf5 	bl	8016696 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014cac:	8a3b      	ldrh	r3, [r7, #16]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7f6 f998 	bl	800afe4 <lwip_htons>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	719a      	strb	r2, [r3, #6]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cc8:	2200      	movs	r2, #0
 8014cca:	729a      	strb	r2, [r3, #10]
 8014ccc:	2200      	movs	r2, #0
 8014cce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cd2:	685b      	ldr	r3, [r3, #4]
 8014cd4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014cd6:	e00d      	b.n	8014cf4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cda:	685b      	ldr	r3, [r3, #4]
 8014cdc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014cde:	2114      	movs	r1, #20
 8014ce0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014ce2:	f7f7 fd0f 	bl	800c704 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014ce6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f7f7 fe53 	bl	800c994 <pbuf_cat>
      r = iprh->next_pbuf;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8014cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d1ee      	bne.n	8014cd8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8014d74 <ip4_reass+0x2b4>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d102      	bne.n	8014d0a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014d04:	2300      	movs	r3, #0
 8014d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014d08:	e010      	b.n	8014d2c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8014d74 <ip4_reass+0x2b4>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014d10:	e007      	b.n	8014d22 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d006      	beq.n	8014d2a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d1f4      	bne.n	8014d12 <ip4_reass+0x252>
 8014d28:	e000      	b.n	8014d2c <ip4_reass+0x26c>
          break;
 8014d2a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014d2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014d2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d30:	f7ff fd2e 	bl	8014790 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f7f7 fdf3 	bl	800c920 <pbuf_clen>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8014d70 <ip4_reass+0x2b0>)
 8014d40:	881b      	ldrh	r3, [r3, #0]
 8014d42:	8c3a      	ldrh	r2, [r7, #32]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d906      	bls.n	8014d56 <ip4_reass+0x296>
 8014d48:	4b0b      	ldr	r3, [pc, #44]	@ (8014d78 <ip4_reass+0x2b8>)
 8014d4a:	f240 229b 	movw	r2, #667	@ 0x29b
 8014d4e:	490b      	ldr	r1, [pc, #44]	@ (8014d7c <ip4_reass+0x2bc>)
 8014d50:	480b      	ldr	r0, [pc, #44]	@ (8014d80 <ip4_reass+0x2c0>)
 8014d52:	f001 fa7b 	bl	801624c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014d56:	4b06      	ldr	r3, [pc, #24]	@ (8014d70 <ip4_reass+0x2b0>)
 8014d58:	881a      	ldrh	r2, [r3, #0]
 8014d5a:	8c3b      	ldrh	r3, [r7, #32]
 8014d5c:	1ad3      	subs	r3, r2, r3
 8014d5e:	b29a      	uxth	r2, r3
 8014d60:	4b03      	ldr	r3, [pc, #12]	@ (8014d70 <ip4_reass+0x2b0>)
 8014d62:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	e038      	b.n	8014dda <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	e036      	b.n	8014dda <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014d6c:	bf00      	nop
 8014d6e:	e00a      	b.n	8014d86 <ip4_reass+0x2c6>
 8014d70:	240083dc 	.word	0x240083dc
 8014d74:	240083d8 	.word	0x240083d8
 8014d78:	0801c1ac 	.word	0x0801c1ac
 8014d7c:	0801c31c 	.word	0x0801c31c
 8014d80:	0801c1f4 	.word	0x0801c1f4
    goto nullreturn_ipr;
 8014d84:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d106      	bne.n	8014d9a <ip4_reass+0x2da>
 8014d8c:	4b15      	ldr	r3, [pc, #84]	@ (8014de4 <ip4_reass+0x324>)
 8014d8e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8014d92:	4915      	ldr	r1, [pc, #84]	@ (8014de8 <ip4_reass+0x328>)
 8014d94:	4815      	ldr	r0, [pc, #84]	@ (8014dec <ip4_reass+0x32c>)
 8014d96:	f001 fa59 	bl	801624c <iprintf>
  if (ipr->p == NULL) {
 8014d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d116      	bne.n	8014dd0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014da2:	4b13      	ldr	r3, [pc, #76]	@ (8014df0 <ip4_reass+0x330>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014da8:	429a      	cmp	r2, r3
 8014daa:	d006      	beq.n	8014dba <ip4_reass+0x2fa>
 8014dac:	4b0d      	ldr	r3, [pc, #52]	@ (8014de4 <ip4_reass+0x324>)
 8014dae:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014db2:	4910      	ldr	r1, [pc, #64]	@ (8014df4 <ip4_reass+0x334>)
 8014db4:	480d      	ldr	r0, [pc, #52]	@ (8014dec <ip4_reass+0x32c>)
 8014db6:	f001 fa49 	bl	801624c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014dba:	2100      	movs	r1, #0
 8014dbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014dbe:	f7ff fce7 	bl	8014790 <ip_reass_dequeue_datagram>
 8014dc2:	e006      	b.n	8014dd2 <ip4_reass+0x312>
    goto nullreturn;
 8014dc4:	bf00      	nop
 8014dc6:	e004      	b.n	8014dd2 <ip4_reass+0x312>
    goto nullreturn;
 8014dc8:	bf00      	nop
 8014dca:	e002      	b.n	8014dd2 <ip4_reass+0x312>
      goto nullreturn;
 8014dcc:	bf00      	nop
 8014dce:	e000      	b.n	8014dd2 <ip4_reass+0x312>
  }

nullreturn:
 8014dd0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f7f7 fd1c 	bl	800c810 <pbuf_free>
  return NULL;
 8014dd8:	2300      	movs	r3, #0
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3738      	adds	r7, #56	@ 0x38
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	0801c1ac 	.word	0x0801c1ac
 8014de8:	0801c338 	.word	0x0801c338
 8014dec:	0801c1f4 	.word	0x0801c1f4
 8014df0:	240083d8 	.word	0x240083d8
 8014df4:	0801c344 	.word	0x0801c344

08014df8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014dfc:	2005      	movs	r0, #5
 8014dfe:	f7f6 fe21 	bl	800ba44 <memp_malloc>
 8014e02:	4603      	mov	r3, r0
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b082      	sub	sp, #8
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d106      	bne.n	8014e24 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014e16:	4b07      	ldr	r3, [pc, #28]	@ (8014e34 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014e18:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8014e1c:	4906      	ldr	r1, [pc, #24]	@ (8014e38 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014e1e:	4807      	ldr	r0, [pc, #28]	@ (8014e3c <ip_frag_free_pbuf_custom_ref+0x34>)
 8014e20:	f001 fa14 	bl	801624c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014e24:	6879      	ldr	r1, [r7, #4]
 8014e26:	2005      	movs	r0, #5
 8014e28:	f7f6 fe7c 	bl	800bb24 <memp_free>
}
 8014e2c:	bf00      	nop
 8014e2e:	3708      	adds	r7, #8
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}
 8014e34:	0801c1ac 	.word	0x0801c1ac
 8014e38:	0801c364 	.word	0x0801c364
 8014e3c:	0801c1f4 	.word	0x0801c1f4

08014e40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b084      	sub	sp, #16
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d106      	bne.n	8014e60 <ipfrag_free_pbuf_custom+0x20>
 8014e52:	4b11      	ldr	r3, [pc, #68]	@ (8014e98 <ipfrag_free_pbuf_custom+0x58>)
 8014e54:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014e58:	4910      	ldr	r1, [pc, #64]	@ (8014e9c <ipfrag_free_pbuf_custom+0x5c>)
 8014e5a:	4811      	ldr	r0, [pc, #68]	@ (8014ea0 <ipfrag_free_pbuf_custom+0x60>)
 8014e5c:	f001 f9f6 	bl	801624c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014e60:	68fa      	ldr	r2, [r7, #12]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d006      	beq.n	8014e76 <ipfrag_free_pbuf_custom+0x36>
 8014e68:	4b0b      	ldr	r3, [pc, #44]	@ (8014e98 <ipfrag_free_pbuf_custom+0x58>)
 8014e6a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8014e6e:	490d      	ldr	r1, [pc, #52]	@ (8014ea4 <ipfrag_free_pbuf_custom+0x64>)
 8014e70:	480b      	ldr	r0, [pc, #44]	@ (8014ea0 <ipfrag_free_pbuf_custom+0x60>)
 8014e72:	f001 f9eb 	bl	801624c <iprintf>
  if (pcr->original != NULL) {
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	695b      	ldr	r3, [r3, #20]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d004      	beq.n	8014e88 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	695b      	ldr	r3, [r3, #20]
 8014e82:	4618      	mov	r0, r3
 8014e84:	f7f7 fcc4 	bl	800c810 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014e88:	68f8      	ldr	r0, [r7, #12]
 8014e8a:	f7ff ffbd 	bl	8014e08 <ip_frag_free_pbuf_custom_ref>
}
 8014e8e:	bf00      	nop
 8014e90:	3710      	adds	r7, #16
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	0801c1ac 	.word	0x0801c1ac
 8014e9c:	0801c370 	.word	0x0801c370
 8014ea0:	0801c1f4 	.word	0x0801c1f4
 8014ea4:	0801c37c 	.word	0x0801c37c

08014ea8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b094      	sub	sp, #80	@ 0x50
 8014eac:	af02      	add	r7, sp, #8
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014ebe:	3b14      	subs	r3, #20
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	da00      	bge.n	8014ec6 <ip4_frag+0x1e>
 8014ec4:	3307      	adds	r3, #7
 8014ec6:	10db      	asrs	r3, r3, #3
 8014ec8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014eca:	2314      	movs	r3, #20
 8014ecc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8014ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	f003 030f 	and.w	r3, r3, #15
 8014ee0:	b2db      	uxtb	r3, r3
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	2b14      	cmp	r3, #20
 8014ee8:	d002      	beq.n	8014ef0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014eea:	f06f 0305 	mvn.w	r3, #5
 8014eee:	e110      	b.n	8015112 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	895b      	ldrh	r3, [r3, #10]
 8014ef4:	2b13      	cmp	r3, #19
 8014ef6:	d809      	bhi.n	8014f0c <ip4_frag+0x64>
 8014ef8:	4b88      	ldr	r3, [pc, #544]	@ (801511c <ip4_frag+0x274>)
 8014efa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8014efe:	4988      	ldr	r1, [pc, #544]	@ (8015120 <ip4_frag+0x278>)
 8014f00:	4888      	ldr	r0, [pc, #544]	@ (8015124 <ip4_frag+0x27c>)
 8014f02:	f001 f9a3 	bl	801624c <iprintf>
 8014f06:	f06f 0305 	mvn.w	r3, #5
 8014f0a:	e102      	b.n	8015112 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f0e:	88db      	ldrh	r3, [r3, #6]
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7f6 f866 	bl	800afe4 <lwip_htons>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8014f1c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014f1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014f26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	891b      	ldrh	r3, [r3, #8]
 8014f32:	3b14      	subs	r3, #20
 8014f34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014f38:	e0e1      	b.n	80150fe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014f3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014f3c:	00db      	lsls	r3, r3, #3
 8014f3e:	b29b      	uxth	r3, r3
 8014f40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014f44:	4293      	cmp	r3, r2
 8014f46:	bf28      	it	cs
 8014f48:	4613      	movcs	r3, r2
 8014f4a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014f4c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014f50:	2114      	movs	r1, #20
 8014f52:	200e      	movs	r0, #14
 8014f54:	f7f7 f978 	bl	800c248 <pbuf_alloc>
 8014f58:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8014f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	f000 80d5 	beq.w	801510c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f64:	895b      	ldrh	r3, [r3, #10]
 8014f66:	2b13      	cmp	r3, #19
 8014f68:	d806      	bhi.n	8014f78 <ip4_frag+0xd0>
 8014f6a:	4b6c      	ldr	r3, [pc, #432]	@ (801511c <ip4_frag+0x274>)
 8014f6c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014f70:	496d      	ldr	r1, [pc, #436]	@ (8015128 <ip4_frag+0x280>)
 8014f72:	486c      	ldr	r0, [pc, #432]	@ (8015124 <ip4_frag+0x27c>)
 8014f74:	f001 f96a 	bl	801624c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f7a:	685b      	ldr	r3, [r3, #4]
 8014f7c:	2214      	movs	r2, #20
 8014f7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014f80:	4618      	mov	r0, r3
 8014f82:	f001 fb88 	bl	8016696 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f88:	685b      	ldr	r3, [r3, #4]
 8014f8a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8014f8c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014f8e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8014f92:	e064      	b.n	801505e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	895a      	ldrh	r2, [r3, #10]
 8014f98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014f9a:	1ad3      	subs	r3, r2, r3
 8014f9c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	895b      	ldrh	r3, [r3, #10]
 8014fa2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d906      	bls.n	8014fb6 <ip4_frag+0x10e>
 8014fa8:	4b5c      	ldr	r3, [pc, #368]	@ (801511c <ip4_frag+0x274>)
 8014faa:	f240 322d 	movw	r2, #813	@ 0x32d
 8014fae:	495f      	ldr	r1, [pc, #380]	@ (801512c <ip4_frag+0x284>)
 8014fb0:	485c      	ldr	r0, [pc, #368]	@ (8015124 <ip4_frag+0x27c>)
 8014fb2:	f001 f94b 	bl	801624c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014fb6:	8bfa      	ldrh	r2, [r7, #30]
 8014fb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014fbc:	4293      	cmp	r3, r2
 8014fbe:	bf28      	it	cs
 8014fc0:	4613      	movcs	r3, r2
 8014fc2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014fc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d105      	bne.n	8014fda <ip4_frag+0x132>
        poff = 0;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	60fb      	str	r3, [r7, #12]
        continue;
 8014fd8:	e041      	b.n	801505e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014fda:	f7ff ff0d 	bl	8014df8 <ip_frag_alloc_pbuf_custom_ref>
 8014fde:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d103      	bne.n	8014fee <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014fe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014fe8:	f7f7 fc12 	bl	800c810 <pbuf_free>
        goto memerr;
 8014fec:	e08f      	b.n	801510e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014fee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014ff4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014ff6:	4413      	add	r3, r2
 8014ff8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014ffc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015000:	9201      	str	r2, [sp, #4]
 8015002:	9300      	str	r3, [sp, #0]
 8015004:	4603      	mov	r3, r0
 8015006:	2241      	movs	r2, #65	@ 0x41
 8015008:	2000      	movs	r0, #0
 801500a:	f7f7 fa47 	bl	800c49c <pbuf_alloced_custom>
 801500e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d106      	bne.n	8015024 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015016:	69b8      	ldr	r0, [r7, #24]
 8015018:	f7ff fef6 	bl	8014e08 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801501c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801501e:	f7f7 fbf7 	bl	800c810 <pbuf_free>
        goto memerr;
 8015022:	e074      	b.n	801510e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f7f7 fc93 	bl	800c950 <pbuf_ref>
      pcr->original = p;
 801502a:	69bb      	ldr	r3, [r7, #24]
 801502c:	68fa      	ldr	r2, [r7, #12]
 801502e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015030:	69bb      	ldr	r3, [r7, #24]
 8015032:	4a3f      	ldr	r2, [pc, #252]	@ (8015130 <ip4_frag+0x288>)
 8015034:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015036:	6979      	ldr	r1, [r7, #20]
 8015038:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801503a:	f7f7 fcab 	bl	800c994 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801503e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8015042:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015046:	1ad3      	subs	r3, r2, r3
 8015048:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801504c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015050:	2b00      	cmp	r3, #0
 8015052:	d004      	beq.n	801505e <ip4_frag+0x1b6>
        poff = 0;
 8015054:	2300      	movs	r3, #0
 8015056:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801505e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015062:	2b00      	cmp	r3, #0
 8015064:	d196      	bne.n	8014f94 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015066:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015068:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801506c:	4413      	add	r3, r2
 801506e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015070:	68bb      	ldr	r3, [r7, #8]
 8015072:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015074:	f1a3 0213 	sub.w	r2, r3, #19
 8015078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801507c:	429a      	cmp	r2, r3
 801507e:	bfcc      	ite	gt
 8015080:	2301      	movgt	r3, #1
 8015082:	2300      	movle	r3, #0
 8015084:	b2db      	uxtb	r3, r3
 8015086:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015088:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801508c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015090:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8015092:	6a3b      	ldr	r3, [r7, #32]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d002      	beq.n	801509e <ip4_frag+0x1f6>
 8015098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801509a:	2b00      	cmp	r3, #0
 801509c:	d003      	beq.n	80150a6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801509e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80150a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80150a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80150a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7f5 ff9b 	bl	800afe4 <lwip_htons>
 80150ae:	4603      	mov	r3, r0
 80150b0:	461a      	mov	r2, r3
 80150b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150b4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80150b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80150b8:	3314      	adds	r3, #20
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	4618      	mov	r0, r3
 80150be:	f7f5 ff91 	bl	800afe4 <lwip_htons>
 80150c2:	4603      	mov	r3, r0
 80150c4:	461a      	mov	r2, r3
 80150c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150c8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80150ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150cc:	2200      	movs	r2, #0
 80150ce:	729a      	strb	r2, [r3, #10]
 80150d0:	2200      	movs	r2, #0
 80150d2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80150d4:	68bb      	ldr	r3, [r7, #8]
 80150d6:	695b      	ldr	r3, [r3, #20]
 80150d8:	687a      	ldr	r2, [r7, #4]
 80150da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80150dc:	68b8      	ldr	r0, [r7, #8]
 80150de:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80150e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80150e2:	f7f7 fb95 	bl	800c810 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80150e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80150ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80150ec:	1ad3      	subs	r3, r2, r3
 80150ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80150f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80150f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80150f8:	4413      	add	r3, r2
 80150fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80150fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015102:	2b00      	cmp	r3, #0
 8015104:	f47f af19 	bne.w	8014f3a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015108:	2300      	movs	r3, #0
 801510a:	e002      	b.n	8015112 <ip4_frag+0x26a>
      goto memerr;
 801510c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801510e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015112:	4618      	mov	r0, r3
 8015114:	3748      	adds	r7, #72	@ 0x48
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}
 801511a:	bf00      	nop
 801511c:	0801c1ac 	.word	0x0801c1ac
 8015120:	0801c388 	.word	0x0801c388
 8015124:	0801c1f4 	.word	0x0801c1f4
 8015128:	0801c3a4 	.word	0x0801c3a4
 801512c:	0801c3c4 	.word	0x0801c3c4
 8015130:	08014e41 	.word	0x08014e41

08015134 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b086      	sub	sp, #24
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801513e:	230e      	movs	r3, #14
 8015140:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	895b      	ldrh	r3, [r3, #10]
 8015146:	2b0e      	cmp	r3, #14
 8015148:	d96e      	bls.n	8015228 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	7bdb      	ldrb	r3, [r3, #15]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d106      	bne.n	8015160 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015158:	3301      	adds	r3, #1
 801515a:	b2da      	uxtb	r2, r3
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	7b1a      	ldrb	r2, [r3, #12]
 801516a:	7b5b      	ldrb	r3, [r3, #13]
 801516c:	021b      	lsls	r3, r3, #8
 801516e:	4313      	orrs	r3, r2
 8015170:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	781b      	ldrb	r3, [r3, #0]
 8015176:	f003 0301 	and.w	r3, r3, #1
 801517a:	2b00      	cmp	r3, #0
 801517c:	d023      	beq.n	80151c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	781b      	ldrb	r3, [r3, #0]
 8015182:	2b01      	cmp	r3, #1
 8015184:	d10f      	bne.n	80151a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	785b      	ldrb	r3, [r3, #1]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d11b      	bne.n	80151c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015192:	2b5e      	cmp	r3, #94	@ 0x5e
 8015194:	d117      	bne.n	80151c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	7b5b      	ldrb	r3, [r3, #13]
 801519a:	f043 0310 	orr.w	r3, r3, #16
 801519e:	b2da      	uxtb	r2, r3
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	735a      	strb	r2, [r3, #13]
 80151a4:	e00f      	b.n	80151c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	2206      	movs	r2, #6
 80151aa:	4928      	ldr	r1, [pc, #160]	@ (801524c <ethernet_input+0x118>)
 80151ac:	4618      	mov	r0, r3
 80151ae:	f001 f9b7 	bl	8016520 <memcmp>
 80151b2:	4603      	mov	r3, r0
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d106      	bne.n	80151c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	7b5b      	ldrb	r3, [r3, #13]
 80151bc:	f043 0308 	orr.w	r3, r3, #8
 80151c0:	b2da      	uxtb	r2, r3
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80151c6:	89fb      	ldrh	r3, [r7, #14]
 80151c8:	2b08      	cmp	r3, #8
 80151ca:	d003      	beq.n	80151d4 <ethernet_input+0xa0>
 80151cc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80151d0:	d014      	beq.n	80151fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80151d2:	e032      	b.n	801523a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80151da:	f003 0308 	and.w	r3, r3, #8
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d024      	beq.n	801522c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80151e2:	8afb      	ldrh	r3, [r7, #22]
 80151e4:	4619      	mov	r1, r3
 80151e6:	6878      	ldr	r0, [r7, #4]
 80151e8:	f7f7 fa8c 	bl	800c704 <pbuf_remove_header>
 80151ec:	4603      	mov	r3, r0
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d11e      	bne.n	8015230 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80151f2:	6839      	ldr	r1, [r7, #0]
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7fe ff21 	bl	801403c <ip4_input>
      break;
 80151fa:	e013      	b.n	8015224 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80151fc:	683b      	ldr	r3, [r7, #0]
 80151fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015202:	f003 0308 	and.w	r3, r3, #8
 8015206:	2b00      	cmp	r3, #0
 8015208:	d014      	beq.n	8015234 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801520a:	8afb      	ldrh	r3, [r7, #22]
 801520c:	4619      	mov	r1, r3
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f7f7 fa78 	bl	800c704 <pbuf_remove_header>
 8015214:	4603      	mov	r3, r0
 8015216:	2b00      	cmp	r3, #0
 8015218:	d10e      	bne.n	8015238 <ethernet_input+0x104>
        etharp_input(p, netif);
 801521a:	6839      	ldr	r1, [r7, #0]
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f7fe f89b 	bl	8013358 <etharp_input>
      break;
 8015222:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015224:	2300      	movs	r3, #0
 8015226:	e00c      	b.n	8015242 <ethernet_input+0x10e>
    goto free_and_return;
 8015228:	bf00      	nop
 801522a:	e006      	b.n	801523a <ethernet_input+0x106>
        goto free_and_return;
 801522c:	bf00      	nop
 801522e:	e004      	b.n	801523a <ethernet_input+0x106>
        goto free_and_return;
 8015230:	bf00      	nop
 8015232:	e002      	b.n	801523a <ethernet_input+0x106>
        goto free_and_return;
 8015234:	bf00      	nop
 8015236:	e000      	b.n	801523a <ethernet_input+0x106>
        goto free_and_return;
 8015238:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801523a:	6878      	ldr	r0, [r7, #4]
 801523c:	f7f7 fae8 	bl	800c810 <pbuf_free>
  return ERR_OK;
 8015240:	2300      	movs	r3, #0
}
 8015242:	4618      	mov	r0, r3
 8015244:	3718      	adds	r7, #24
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
 801524a:	bf00      	nop
 801524c:	0801c590 	.word	0x0801c590

08015250 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015250:	b580      	push	{r7, lr}
 8015252:	b086      	sub	sp, #24
 8015254:	af00      	add	r7, sp, #0
 8015256:	60f8      	str	r0, [r7, #12]
 8015258:	60b9      	str	r1, [r7, #8]
 801525a:	607a      	str	r2, [r7, #4]
 801525c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801525e:	8c3b      	ldrh	r3, [r7, #32]
 8015260:	4618      	mov	r0, r3
 8015262:	f7f5 febf 	bl	800afe4 <lwip_htons>
 8015266:	4603      	mov	r3, r0
 8015268:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801526a:	210e      	movs	r1, #14
 801526c:	68b8      	ldr	r0, [r7, #8]
 801526e:	f7f7 fa39 	bl	800c6e4 <pbuf_add_header>
 8015272:	4603      	mov	r3, r0
 8015274:	2b00      	cmp	r3, #0
 8015276:	d125      	bne.n	80152c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801527e:	693b      	ldr	r3, [r7, #16]
 8015280:	8afa      	ldrh	r2, [r7, #22]
 8015282:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	2206      	movs	r2, #6
 8015288:	6839      	ldr	r1, [r7, #0]
 801528a:	4618      	mov	r0, r3
 801528c:	f001 fa03 	bl	8016696 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015290:	693b      	ldr	r3, [r7, #16]
 8015292:	3306      	adds	r3, #6
 8015294:	2206      	movs	r2, #6
 8015296:	6879      	ldr	r1, [r7, #4]
 8015298:	4618      	mov	r0, r3
 801529a:	f001 f9fc 	bl	8016696 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80152a4:	2b06      	cmp	r3, #6
 80152a6:	d006      	beq.n	80152b6 <ethernet_output+0x66>
 80152a8:	4b0a      	ldr	r3, [pc, #40]	@ (80152d4 <ethernet_output+0x84>)
 80152aa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80152ae:	490a      	ldr	r1, [pc, #40]	@ (80152d8 <ethernet_output+0x88>)
 80152b0:	480a      	ldr	r0, [pc, #40]	@ (80152dc <ethernet_output+0x8c>)
 80152b2:	f000 ffcb 	bl	801624c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	699b      	ldr	r3, [r3, #24]
 80152ba:	68b9      	ldr	r1, [r7, #8]
 80152bc:	68f8      	ldr	r0, [r7, #12]
 80152be:	4798      	blx	r3
 80152c0:	4603      	mov	r3, r0
 80152c2:	e002      	b.n	80152ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80152c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80152c6:	f06f 0301 	mvn.w	r3, #1
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3718      	adds	r7, #24
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}
 80152d2:	bf00      	nop
 80152d4:	0801c3d4 	.word	0x0801c3d4
 80152d8:	0801c40c 	.word	0x0801c40c
 80152dc:	0801c440 	.word	0x0801c440

080152e0 <rand>:
 80152e0:	4b16      	ldr	r3, [pc, #88]	@ (801533c <rand+0x5c>)
 80152e2:	b510      	push	{r4, lr}
 80152e4:	681c      	ldr	r4, [r3, #0]
 80152e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80152e8:	b9b3      	cbnz	r3, 8015318 <rand+0x38>
 80152ea:	2018      	movs	r0, #24
 80152ec:	f002 f838 	bl	8017360 <malloc>
 80152f0:	4602      	mov	r2, r0
 80152f2:	6320      	str	r0, [r4, #48]	@ 0x30
 80152f4:	b920      	cbnz	r0, 8015300 <rand+0x20>
 80152f6:	4b12      	ldr	r3, [pc, #72]	@ (8015340 <rand+0x60>)
 80152f8:	4812      	ldr	r0, [pc, #72]	@ (8015344 <rand+0x64>)
 80152fa:	2152      	movs	r1, #82	@ 0x52
 80152fc:	f001 f9e0 	bl	80166c0 <__assert_func>
 8015300:	4911      	ldr	r1, [pc, #68]	@ (8015348 <rand+0x68>)
 8015302:	4b12      	ldr	r3, [pc, #72]	@ (801534c <rand+0x6c>)
 8015304:	e9c0 1300 	strd	r1, r3, [r0]
 8015308:	4b11      	ldr	r3, [pc, #68]	@ (8015350 <rand+0x70>)
 801530a:	6083      	str	r3, [r0, #8]
 801530c:	230b      	movs	r3, #11
 801530e:	8183      	strh	r3, [r0, #12]
 8015310:	2100      	movs	r1, #0
 8015312:	2001      	movs	r0, #1
 8015314:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015318:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801531a:	480e      	ldr	r0, [pc, #56]	@ (8015354 <rand+0x74>)
 801531c:	690b      	ldr	r3, [r1, #16]
 801531e:	694c      	ldr	r4, [r1, #20]
 8015320:	4a0d      	ldr	r2, [pc, #52]	@ (8015358 <rand+0x78>)
 8015322:	4358      	muls	r0, r3
 8015324:	fb02 0004 	mla	r0, r2, r4, r0
 8015328:	fba3 3202 	umull	r3, r2, r3, r2
 801532c:	3301      	adds	r3, #1
 801532e:	eb40 0002 	adc.w	r0, r0, r2
 8015332:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015336:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801533a:	bd10      	pop	{r4, pc}
 801533c:	2400003c 	.word	0x2400003c
 8015340:	0801c59e 	.word	0x0801c59e
 8015344:	0801c5b5 	.word	0x0801c5b5
 8015348:	abcd330e 	.word	0xabcd330e
 801534c:	e66d1234 	.word	0xe66d1234
 8015350:	0005deec 	.word	0x0005deec
 8015354:	5851f42d 	.word	0x5851f42d
 8015358:	4c957f2d 	.word	0x4c957f2d

0801535c <_strtol_l.isra.0>:
 801535c:	2b24      	cmp	r3, #36	@ 0x24
 801535e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015362:	4686      	mov	lr, r0
 8015364:	4690      	mov	r8, r2
 8015366:	d801      	bhi.n	801536c <_strtol_l.isra.0+0x10>
 8015368:	2b01      	cmp	r3, #1
 801536a:	d106      	bne.n	801537a <_strtol_l.isra.0+0x1e>
 801536c:	f001 f966 	bl	801663c <__errno>
 8015370:	2316      	movs	r3, #22
 8015372:	6003      	str	r3, [r0, #0]
 8015374:	2000      	movs	r0, #0
 8015376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801537a:	4834      	ldr	r0, [pc, #208]	@ (801544c <_strtol_l.isra.0+0xf0>)
 801537c:	460d      	mov	r5, r1
 801537e:	462a      	mov	r2, r5
 8015380:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015384:	5d06      	ldrb	r6, [r0, r4]
 8015386:	f016 0608 	ands.w	r6, r6, #8
 801538a:	d1f8      	bne.n	801537e <_strtol_l.isra.0+0x22>
 801538c:	2c2d      	cmp	r4, #45	@ 0x2d
 801538e:	d110      	bne.n	80153b2 <_strtol_l.isra.0+0x56>
 8015390:	782c      	ldrb	r4, [r5, #0]
 8015392:	2601      	movs	r6, #1
 8015394:	1c95      	adds	r5, r2, #2
 8015396:	f033 0210 	bics.w	r2, r3, #16
 801539a:	d115      	bne.n	80153c8 <_strtol_l.isra.0+0x6c>
 801539c:	2c30      	cmp	r4, #48	@ 0x30
 801539e:	d10d      	bne.n	80153bc <_strtol_l.isra.0+0x60>
 80153a0:	782a      	ldrb	r2, [r5, #0]
 80153a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80153a6:	2a58      	cmp	r2, #88	@ 0x58
 80153a8:	d108      	bne.n	80153bc <_strtol_l.isra.0+0x60>
 80153aa:	786c      	ldrb	r4, [r5, #1]
 80153ac:	3502      	adds	r5, #2
 80153ae:	2310      	movs	r3, #16
 80153b0:	e00a      	b.n	80153c8 <_strtol_l.isra.0+0x6c>
 80153b2:	2c2b      	cmp	r4, #43	@ 0x2b
 80153b4:	bf04      	itt	eq
 80153b6:	782c      	ldrbeq	r4, [r5, #0]
 80153b8:	1c95      	addeq	r5, r2, #2
 80153ba:	e7ec      	b.n	8015396 <_strtol_l.isra.0+0x3a>
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d1f6      	bne.n	80153ae <_strtol_l.isra.0+0x52>
 80153c0:	2c30      	cmp	r4, #48	@ 0x30
 80153c2:	bf14      	ite	ne
 80153c4:	230a      	movne	r3, #10
 80153c6:	2308      	moveq	r3, #8
 80153c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80153cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80153d0:	2200      	movs	r2, #0
 80153d2:	fbbc f9f3 	udiv	r9, ip, r3
 80153d6:	4610      	mov	r0, r2
 80153d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80153dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80153e0:	2f09      	cmp	r7, #9
 80153e2:	d80f      	bhi.n	8015404 <_strtol_l.isra.0+0xa8>
 80153e4:	463c      	mov	r4, r7
 80153e6:	42a3      	cmp	r3, r4
 80153e8:	dd1b      	ble.n	8015422 <_strtol_l.isra.0+0xc6>
 80153ea:	1c57      	adds	r7, r2, #1
 80153ec:	d007      	beq.n	80153fe <_strtol_l.isra.0+0xa2>
 80153ee:	4581      	cmp	r9, r0
 80153f0:	d314      	bcc.n	801541c <_strtol_l.isra.0+0xc0>
 80153f2:	d101      	bne.n	80153f8 <_strtol_l.isra.0+0x9c>
 80153f4:	45a2      	cmp	sl, r4
 80153f6:	db11      	blt.n	801541c <_strtol_l.isra.0+0xc0>
 80153f8:	fb00 4003 	mla	r0, r0, r3, r4
 80153fc:	2201      	movs	r2, #1
 80153fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015402:	e7eb      	b.n	80153dc <_strtol_l.isra.0+0x80>
 8015404:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015408:	2f19      	cmp	r7, #25
 801540a:	d801      	bhi.n	8015410 <_strtol_l.isra.0+0xb4>
 801540c:	3c37      	subs	r4, #55	@ 0x37
 801540e:	e7ea      	b.n	80153e6 <_strtol_l.isra.0+0x8a>
 8015410:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015414:	2f19      	cmp	r7, #25
 8015416:	d804      	bhi.n	8015422 <_strtol_l.isra.0+0xc6>
 8015418:	3c57      	subs	r4, #87	@ 0x57
 801541a:	e7e4      	b.n	80153e6 <_strtol_l.isra.0+0x8a>
 801541c:	f04f 32ff 	mov.w	r2, #4294967295
 8015420:	e7ed      	b.n	80153fe <_strtol_l.isra.0+0xa2>
 8015422:	1c53      	adds	r3, r2, #1
 8015424:	d108      	bne.n	8015438 <_strtol_l.isra.0+0xdc>
 8015426:	2322      	movs	r3, #34	@ 0x22
 8015428:	f8ce 3000 	str.w	r3, [lr]
 801542c:	4660      	mov	r0, ip
 801542e:	f1b8 0f00 	cmp.w	r8, #0
 8015432:	d0a0      	beq.n	8015376 <_strtol_l.isra.0+0x1a>
 8015434:	1e69      	subs	r1, r5, #1
 8015436:	e006      	b.n	8015446 <_strtol_l.isra.0+0xea>
 8015438:	b106      	cbz	r6, 801543c <_strtol_l.isra.0+0xe0>
 801543a:	4240      	negs	r0, r0
 801543c:	f1b8 0f00 	cmp.w	r8, #0
 8015440:	d099      	beq.n	8015376 <_strtol_l.isra.0+0x1a>
 8015442:	2a00      	cmp	r2, #0
 8015444:	d1f6      	bne.n	8015434 <_strtol_l.isra.0+0xd8>
 8015446:	f8c8 1000 	str.w	r1, [r8]
 801544a:	e794      	b.n	8015376 <_strtol_l.isra.0+0x1a>
 801544c:	0801c7cd 	.word	0x0801c7cd

08015450 <_strtol_r>:
 8015450:	f7ff bf84 	b.w	801535c <_strtol_l.isra.0>

08015454 <__cvt>:
 8015454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015456:	ed2d 8b02 	vpush	{d8}
 801545a:	eeb0 8b40 	vmov.f64	d8, d0
 801545e:	b085      	sub	sp, #20
 8015460:	4617      	mov	r7, r2
 8015462:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015464:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015466:	ee18 2a90 	vmov	r2, s17
 801546a:	f025 0520 	bic.w	r5, r5, #32
 801546e:	2a00      	cmp	r2, #0
 8015470:	bfb6      	itet	lt
 8015472:	222d      	movlt	r2, #45	@ 0x2d
 8015474:	2200      	movge	r2, #0
 8015476:	eeb1 8b40 	vneglt.f64	d8, d0
 801547a:	2d46      	cmp	r5, #70	@ 0x46
 801547c:	460c      	mov	r4, r1
 801547e:	701a      	strb	r2, [r3, #0]
 8015480:	d004      	beq.n	801548c <__cvt+0x38>
 8015482:	2d45      	cmp	r5, #69	@ 0x45
 8015484:	d100      	bne.n	8015488 <__cvt+0x34>
 8015486:	3401      	adds	r4, #1
 8015488:	2102      	movs	r1, #2
 801548a:	e000      	b.n	801548e <__cvt+0x3a>
 801548c:	2103      	movs	r1, #3
 801548e:	ab03      	add	r3, sp, #12
 8015490:	9301      	str	r3, [sp, #4]
 8015492:	ab02      	add	r3, sp, #8
 8015494:	9300      	str	r3, [sp, #0]
 8015496:	4622      	mov	r2, r4
 8015498:	4633      	mov	r3, r6
 801549a:	eeb0 0b48 	vmov.f64	d0, d8
 801549e:	f001 f9b7 	bl	8016810 <_dtoa_r>
 80154a2:	2d47      	cmp	r5, #71	@ 0x47
 80154a4:	d114      	bne.n	80154d0 <__cvt+0x7c>
 80154a6:	07fb      	lsls	r3, r7, #31
 80154a8:	d50a      	bpl.n	80154c0 <__cvt+0x6c>
 80154aa:	1902      	adds	r2, r0, r4
 80154ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80154b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154b4:	bf08      	it	eq
 80154b6:	9203      	streq	r2, [sp, #12]
 80154b8:	2130      	movs	r1, #48	@ 0x30
 80154ba:	9b03      	ldr	r3, [sp, #12]
 80154bc:	4293      	cmp	r3, r2
 80154be:	d319      	bcc.n	80154f4 <__cvt+0xa0>
 80154c0:	9b03      	ldr	r3, [sp, #12]
 80154c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80154c4:	1a1b      	subs	r3, r3, r0
 80154c6:	6013      	str	r3, [r2, #0]
 80154c8:	b005      	add	sp, #20
 80154ca:	ecbd 8b02 	vpop	{d8}
 80154ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154d0:	2d46      	cmp	r5, #70	@ 0x46
 80154d2:	eb00 0204 	add.w	r2, r0, r4
 80154d6:	d1e9      	bne.n	80154ac <__cvt+0x58>
 80154d8:	7803      	ldrb	r3, [r0, #0]
 80154da:	2b30      	cmp	r3, #48	@ 0x30
 80154dc:	d107      	bne.n	80154ee <__cvt+0x9a>
 80154de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80154e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154e6:	bf1c      	itt	ne
 80154e8:	f1c4 0401 	rsbne	r4, r4, #1
 80154ec:	6034      	strne	r4, [r6, #0]
 80154ee:	6833      	ldr	r3, [r6, #0]
 80154f0:	441a      	add	r2, r3
 80154f2:	e7db      	b.n	80154ac <__cvt+0x58>
 80154f4:	1c5c      	adds	r4, r3, #1
 80154f6:	9403      	str	r4, [sp, #12]
 80154f8:	7019      	strb	r1, [r3, #0]
 80154fa:	e7de      	b.n	80154ba <__cvt+0x66>

080154fc <__exponent>:
 80154fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154fe:	2900      	cmp	r1, #0
 8015500:	bfba      	itte	lt
 8015502:	4249      	neglt	r1, r1
 8015504:	232d      	movlt	r3, #45	@ 0x2d
 8015506:	232b      	movge	r3, #43	@ 0x2b
 8015508:	2909      	cmp	r1, #9
 801550a:	7002      	strb	r2, [r0, #0]
 801550c:	7043      	strb	r3, [r0, #1]
 801550e:	dd29      	ble.n	8015564 <__exponent+0x68>
 8015510:	f10d 0307 	add.w	r3, sp, #7
 8015514:	461d      	mov	r5, r3
 8015516:	270a      	movs	r7, #10
 8015518:	461a      	mov	r2, r3
 801551a:	fbb1 f6f7 	udiv	r6, r1, r7
 801551e:	fb07 1416 	mls	r4, r7, r6, r1
 8015522:	3430      	adds	r4, #48	@ 0x30
 8015524:	f802 4c01 	strb.w	r4, [r2, #-1]
 8015528:	460c      	mov	r4, r1
 801552a:	2c63      	cmp	r4, #99	@ 0x63
 801552c:	f103 33ff 	add.w	r3, r3, #4294967295
 8015530:	4631      	mov	r1, r6
 8015532:	dcf1      	bgt.n	8015518 <__exponent+0x1c>
 8015534:	3130      	adds	r1, #48	@ 0x30
 8015536:	1e94      	subs	r4, r2, #2
 8015538:	f803 1c01 	strb.w	r1, [r3, #-1]
 801553c:	1c41      	adds	r1, r0, #1
 801553e:	4623      	mov	r3, r4
 8015540:	42ab      	cmp	r3, r5
 8015542:	d30a      	bcc.n	801555a <__exponent+0x5e>
 8015544:	f10d 0309 	add.w	r3, sp, #9
 8015548:	1a9b      	subs	r3, r3, r2
 801554a:	42ac      	cmp	r4, r5
 801554c:	bf88      	it	hi
 801554e:	2300      	movhi	r3, #0
 8015550:	3302      	adds	r3, #2
 8015552:	4403      	add	r3, r0
 8015554:	1a18      	subs	r0, r3, r0
 8015556:	b003      	add	sp, #12
 8015558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801555a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801555e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015562:	e7ed      	b.n	8015540 <__exponent+0x44>
 8015564:	2330      	movs	r3, #48	@ 0x30
 8015566:	3130      	adds	r1, #48	@ 0x30
 8015568:	7083      	strb	r3, [r0, #2]
 801556a:	70c1      	strb	r1, [r0, #3]
 801556c:	1d03      	adds	r3, r0, #4
 801556e:	e7f1      	b.n	8015554 <__exponent+0x58>

08015570 <_printf_float>:
 8015570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015574:	b08d      	sub	sp, #52	@ 0x34
 8015576:	460c      	mov	r4, r1
 8015578:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801557c:	4616      	mov	r6, r2
 801557e:	461f      	mov	r7, r3
 8015580:	4605      	mov	r5, r0
 8015582:	f001 f811 	bl	80165a8 <_localeconv_r>
 8015586:	f8d0 b000 	ldr.w	fp, [r0]
 801558a:	4658      	mov	r0, fp
 801558c:	f7ea ff10 	bl	80003b0 <strlen>
 8015590:	2300      	movs	r3, #0
 8015592:	930a      	str	r3, [sp, #40]	@ 0x28
 8015594:	f8d8 3000 	ldr.w	r3, [r8]
 8015598:	f894 9018 	ldrb.w	r9, [r4, #24]
 801559c:	6822      	ldr	r2, [r4, #0]
 801559e:	9005      	str	r0, [sp, #20]
 80155a0:	3307      	adds	r3, #7
 80155a2:	f023 0307 	bic.w	r3, r3, #7
 80155a6:	f103 0108 	add.w	r1, r3, #8
 80155aa:	f8c8 1000 	str.w	r1, [r8]
 80155ae:	ed93 0b00 	vldr	d0, [r3]
 80155b2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8015810 <_printf_float+0x2a0>
 80155b6:	eeb0 7bc0 	vabs.f64	d7, d0
 80155ba:	eeb4 7b46 	vcmp.f64	d7, d6
 80155be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155c2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80155c6:	dd24      	ble.n	8015612 <_printf_float+0xa2>
 80155c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80155cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155d0:	d502      	bpl.n	80155d8 <_printf_float+0x68>
 80155d2:	232d      	movs	r3, #45	@ 0x2d
 80155d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80155d8:	498f      	ldr	r1, [pc, #572]	@ (8015818 <_printf_float+0x2a8>)
 80155da:	4b90      	ldr	r3, [pc, #576]	@ (801581c <_printf_float+0x2ac>)
 80155dc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80155e0:	bf8c      	ite	hi
 80155e2:	4688      	movhi	r8, r1
 80155e4:	4698      	movls	r8, r3
 80155e6:	f022 0204 	bic.w	r2, r2, #4
 80155ea:	2303      	movs	r3, #3
 80155ec:	6123      	str	r3, [r4, #16]
 80155ee:	6022      	str	r2, [r4, #0]
 80155f0:	f04f 0a00 	mov.w	sl, #0
 80155f4:	9700      	str	r7, [sp, #0]
 80155f6:	4633      	mov	r3, r6
 80155f8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80155fa:	4621      	mov	r1, r4
 80155fc:	4628      	mov	r0, r5
 80155fe:	f000 f9d1 	bl	80159a4 <_printf_common>
 8015602:	3001      	adds	r0, #1
 8015604:	f040 8089 	bne.w	801571a <_printf_float+0x1aa>
 8015608:	f04f 30ff 	mov.w	r0, #4294967295
 801560c:	b00d      	add	sp, #52	@ 0x34
 801560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015612:	eeb4 0b40 	vcmp.f64	d0, d0
 8015616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801561a:	d709      	bvc.n	8015630 <_printf_float+0xc0>
 801561c:	ee10 3a90 	vmov	r3, s1
 8015620:	2b00      	cmp	r3, #0
 8015622:	bfbc      	itt	lt
 8015624:	232d      	movlt	r3, #45	@ 0x2d
 8015626:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801562a:	497d      	ldr	r1, [pc, #500]	@ (8015820 <_printf_float+0x2b0>)
 801562c:	4b7d      	ldr	r3, [pc, #500]	@ (8015824 <_printf_float+0x2b4>)
 801562e:	e7d5      	b.n	80155dc <_printf_float+0x6c>
 8015630:	6863      	ldr	r3, [r4, #4]
 8015632:	1c59      	adds	r1, r3, #1
 8015634:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8015638:	d139      	bne.n	80156ae <_printf_float+0x13e>
 801563a:	2306      	movs	r3, #6
 801563c:	6063      	str	r3, [r4, #4]
 801563e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8015642:	2300      	movs	r3, #0
 8015644:	6022      	str	r2, [r4, #0]
 8015646:	9303      	str	r3, [sp, #12]
 8015648:	ab0a      	add	r3, sp, #40	@ 0x28
 801564a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801564e:	ab09      	add	r3, sp, #36	@ 0x24
 8015650:	9300      	str	r3, [sp, #0]
 8015652:	6861      	ldr	r1, [r4, #4]
 8015654:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8015658:	4628      	mov	r0, r5
 801565a:	f7ff fefb 	bl	8015454 <__cvt>
 801565e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015662:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015664:	4680      	mov	r8, r0
 8015666:	d129      	bne.n	80156bc <_printf_float+0x14c>
 8015668:	1cc8      	adds	r0, r1, #3
 801566a:	db02      	blt.n	8015672 <_printf_float+0x102>
 801566c:	6863      	ldr	r3, [r4, #4]
 801566e:	4299      	cmp	r1, r3
 8015670:	dd41      	ble.n	80156f6 <_printf_float+0x186>
 8015672:	f1a9 0902 	sub.w	r9, r9, #2
 8015676:	fa5f f989 	uxtb.w	r9, r9
 801567a:	3901      	subs	r1, #1
 801567c:	464a      	mov	r2, r9
 801567e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8015682:	9109      	str	r1, [sp, #36]	@ 0x24
 8015684:	f7ff ff3a 	bl	80154fc <__exponent>
 8015688:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801568a:	1813      	adds	r3, r2, r0
 801568c:	2a01      	cmp	r2, #1
 801568e:	4682      	mov	sl, r0
 8015690:	6123      	str	r3, [r4, #16]
 8015692:	dc02      	bgt.n	801569a <_printf_float+0x12a>
 8015694:	6822      	ldr	r2, [r4, #0]
 8015696:	07d2      	lsls	r2, r2, #31
 8015698:	d501      	bpl.n	801569e <_printf_float+0x12e>
 801569a:	3301      	adds	r3, #1
 801569c:	6123      	str	r3, [r4, #16]
 801569e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d0a6      	beq.n	80155f4 <_printf_float+0x84>
 80156a6:	232d      	movs	r3, #45	@ 0x2d
 80156a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80156ac:	e7a2      	b.n	80155f4 <_printf_float+0x84>
 80156ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80156b2:	d1c4      	bne.n	801563e <_printf_float+0xce>
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d1c2      	bne.n	801563e <_printf_float+0xce>
 80156b8:	2301      	movs	r3, #1
 80156ba:	e7bf      	b.n	801563c <_printf_float+0xcc>
 80156bc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80156c0:	d9db      	bls.n	801567a <_printf_float+0x10a>
 80156c2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80156c6:	d118      	bne.n	80156fa <_printf_float+0x18a>
 80156c8:	2900      	cmp	r1, #0
 80156ca:	6863      	ldr	r3, [r4, #4]
 80156cc:	dd0b      	ble.n	80156e6 <_printf_float+0x176>
 80156ce:	6121      	str	r1, [r4, #16]
 80156d0:	b913      	cbnz	r3, 80156d8 <_printf_float+0x168>
 80156d2:	6822      	ldr	r2, [r4, #0]
 80156d4:	07d0      	lsls	r0, r2, #31
 80156d6:	d502      	bpl.n	80156de <_printf_float+0x16e>
 80156d8:	3301      	adds	r3, #1
 80156da:	440b      	add	r3, r1
 80156dc:	6123      	str	r3, [r4, #16]
 80156de:	65a1      	str	r1, [r4, #88]	@ 0x58
 80156e0:	f04f 0a00 	mov.w	sl, #0
 80156e4:	e7db      	b.n	801569e <_printf_float+0x12e>
 80156e6:	b913      	cbnz	r3, 80156ee <_printf_float+0x17e>
 80156e8:	6822      	ldr	r2, [r4, #0]
 80156ea:	07d2      	lsls	r2, r2, #31
 80156ec:	d501      	bpl.n	80156f2 <_printf_float+0x182>
 80156ee:	3302      	adds	r3, #2
 80156f0:	e7f4      	b.n	80156dc <_printf_float+0x16c>
 80156f2:	2301      	movs	r3, #1
 80156f4:	e7f2      	b.n	80156dc <_printf_float+0x16c>
 80156f6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80156fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156fc:	4299      	cmp	r1, r3
 80156fe:	db05      	blt.n	801570c <_printf_float+0x19c>
 8015700:	6823      	ldr	r3, [r4, #0]
 8015702:	6121      	str	r1, [r4, #16]
 8015704:	07d8      	lsls	r0, r3, #31
 8015706:	d5ea      	bpl.n	80156de <_printf_float+0x16e>
 8015708:	1c4b      	adds	r3, r1, #1
 801570a:	e7e7      	b.n	80156dc <_printf_float+0x16c>
 801570c:	2900      	cmp	r1, #0
 801570e:	bfd4      	ite	le
 8015710:	f1c1 0202 	rsble	r2, r1, #2
 8015714:	2201      	movgt	r2, #1
 8015716:	4413      	add	r3, r2
 8015718:	e7e0      	b.n	80156dc <_printf_float+0x16c>
 801571a:	6823      	ldr	r3, [r4, #0]
 801571c:	055a      	lsls	r2, r3, #21
 801571e:	d407      	bmi.n	8015730 <_printf_float+0x1c0>
 8015720:	6923      	ldr	r3, [r4, #16]
 8015722:	4642      	mov	r2, r8
 8015724:	4631      	mov	r1, r6
 8015726:	4628      	mov	r0, r5
 8015728:	47b8      	blx	r7
 801572a:	3001      	adds	r0, #1
 801572c:	d12a      	bne.n	8015784 <_printf_float+0x214>
 801572e:	e76b      	b.n	8015608 <_printf_float+0x98>
 8015730:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015734:	f240 80e0 	bls.w	80158f8 <_printf_float+0x388>
 8015738:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801573c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015744:	d133      	bne.n	80157ae <_printf_float+0x23e>
 8015746:	4a38      	ldr	r2, [pc, #224]	@ (8015828 <_printf_float+0x2b8>)
 8015748:	2301      	movs	r3, #1
 801574a:	4631      	mov	r1, r6
 801574c:	4628      	mov	r0, r5
 801574e:	47b8      	blx	r7
 8015750:	3001      	adds	r0, #1
 8015752:	f43f af59 	beq.w	8015608 <_printf_float+0x98>
 8015756:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801575a:	4543      	cmp	r3, r8
 801575c:	db02      	blt.n	8015764 <_printf_float+0x1f4>
 801575e:	6823      	ldr	r3, [r4, #0]
 8015760:	07d8      	lsls	r0, r3, #31
 8015762:	d50f      	bpl.n	8015784 <_printf_float+0x214>
 8015764:	9b05      	ldr	r3, [sp, #20]
 8015766:	465a      	mov	r2, fp
 8015768:	4631      	mov	r1, r6
 801576a:	4628      	mov	r0, r5
 801576c:	47b8      	blx	r7
 801576e:	3001      	adds	r0, #1
 8015770:	f43f af4a 	beq.w	8015608 <_printf_float+0x98>
 8015774:	f04f 0900 	mov.w	r9, #0
 8015778:	f108 38ff 	add.w	r8, r8, #4294967295
 801577c:	f104 0a1a 	add.w	sl, r4, #26
 8015780:	45c8      	cmp	r8, r9
 8015782:	dc09      	bgt.n	8015798 <_printf_float+0x228>
 8015784:	6823      	ldr	r3, [r4, #0]
 8015786:	079b      	lsls	r3, r3, #30
 8015788:	f100 8107 	bmi.w	801599a <_printf_float+0x42a>
 801578c:	68e0      	ldr	r0, [r4, #12]
 801578e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015790:	4298      	cmp	r0, r3
 8015792:	bfb8      	it	lt
 8015794:	4618      	movlt	r0, r3
 8015796:	e739      	b.n	801560c <_printf_float+0x9c>
 8015798:	2301      	movs	r3, #1
 801579a:	4652      	mov	r2, sl
 801579c:	4631      	mov	r1, r6
 801579e:	4628      	mov	r0, r5
 80157a0:	47b8      	blx	r7
 80157a2:	3001      	adds	r0, #1
 80157a4:	f43f af30 	beq.w	8015608 <_printf_float+0x98>
 80157a8:	f109 0901 	add.w	r9, r9, #1
 80157ac:	e7e8      	b.n	8015780 <_printf_float+0x210>
 80157ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	dc3b      	bgt.n	801582c <_printf_float+0x2bc>
 80157b4:	4a1c      	ldr	r2, [pc, #112]	@ (8015828 <_printf_float+0x2b8>)
 80157b6:	2301      	movs	r3, #1
 80157b8:	4631      	mov	r1, r6
 80157ba:	4628      	mov	r0, r5
 80157bc:	47b8      	blx	r7
 80157be:	3001      	adds	r0, #1
 80157c0:	f43f af22 	beq.w	8015608 <_printf_float+0x98>
 80157c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80157c8:	ea59 0303 	orrs.w	r3, r9, r3
 80157cc:	d102      	bne.n	80157d4 <_printf_float+0x264>
 80157ce:	6823      	ldr	r3, [r4, #0]
 80157d0:	07d9      	lsls	r1, r3, #31
 80157d2:	d5d7      	bpl.n	8015784 <_printf_float+0x214>
 80157d4:	9b05      	ldr	r3, [sp, #20]
 80157d6:	465a      	mov	r2, fp
 80157d8:	4631      	mov	r1, r6
 80157da:	4628      	mov	r0, r5
 80157dc:	47b8      	blx	r7
 80157de:	3001      	adds	r0, #1
 80157e0:	f43f af12 	beq.w	8015608 <_printf_float+0x98>
 80157e4:	f04f 0a00 	mov.w	sl, #0
 80157e8:	f104 0b1a 	add.w	fp, r4, #26
 80157ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157ee:	425b      	negs	r3, r3
 80157f0:	4553      	cmp	r3, sl
 80157f2:	dc01      	bgt.n	80157f8 <_printf_float+0x288>
 80157f4:	464b      	mov	r3, r9
 80157f6:	e794      	b.n	8015722 <_printf_float+0x1b2>
 80157f8:	2301      	movs	r3, #1
 80157fa:	465a      	mov	r2, fp
 80157fc:	4631      	mov	r1, r6
 80157fe:	4628      	mov	r0, r5
 8015800:	47b8      	blx	r7
 8015802:	3001      	adds	r0, #1
 8015804:	f43f af00 	beq.w	8015608 <_printf_float+0x98>
 8015808:	f10a 0a01 	add.w	sl, sl, #1
 801580c:	e7ee      	b.n	80157ec <_printf_float+0x27c>
 801580e:	bf00      	nop
 8015810:	ffffffff 	.word	0xffffffff
 8015814:	7fefffff 	.word	0x7fefffff
 8015818:	0801c611 	.word	0x0801c611
 801581c:	0801c60d 	.word	0x0801c60d
 8015820:	0801c619 	.word	0x0801c619
 8015824:	0801c615 	.word	0x0801c615
 8015828:	0801c61d 	.word	0x0801c61d
 801582c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801582e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015832:	4553      	cmp	r3, sl
 8015834:	bfa8      	it	ge
 8015836:	4653      	movge	r3, sl
 8015838:	2b00      	cmp	r3, #0
 801583a:	4699      	mov	r9, r3
 801583c:	dc37      	bgt.n	80158ae <_printf_float+0x33e>
 801583e:	2300      	movs	r3, #0
 8015840:	9307      	str	r3, [sp, #28]
 8015842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015846:	f104 021a 	add.w	r2, r4, #26
 801584a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801584c:	9907      	ldr	r1, [sp, #28]
 801584e:	9306      	str	r3, [sp, #24]
 8015850:	eba3 0309 	sub.w	r3, r3, r9
 8015854:	428b      	cmp	r3, r1
 8015856:	dc31      	bgt.n	80158bc <_printf_float+0x34c>
 8015858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801585a:	459a      	cmp	sl, r3
 801585c:	dc3b      	bgt.n	80158d6 <_printf_float+0x366>
 801585e:	6823      	ldr	r3, [r4, #0]
 8015860:	07da      	lsls	r2, r3, #31
 8015862:	d438      	bmi.n	80158d6 <_printf_float+0x366>
 8015864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015866:	ebaa 0903 	sub.w	r9, sl, r3
 801586a:	9b06      	ldr	r3, [sp, #24]
 801586c:	ebaa 0303 	sub.w	r3, sl, r3
 8015870:	4599      	cmp	r9, r3
 8015872:	bfa8      	it	ge
 8015874:	4699      	movge	r9, r3
 8015876:	f1b9 0f00 	cmp.w	r9, #0
 801587a:	dc34      	bgt.n	80158e6 <_printf_float+0x376>
 801587c:	f04f 0800 	mov.w	r8, #0
 8015880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015884:	f104 0b1a 	add.w	fp, r4, #26
 8015888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801588a:	ebaa 0303 	sub.w	r3, sl, r3
 801588e:	eba3 0309 	sub.w	r3, r3, r9
 8015892:	4543      	cmp	r3, r8
 8015894:	f77f af76 	ble.w	8015784 <_printf_float+0x214>
 8015898:	2301      	movs	r3, #1
 801589a:	465a      	mov	r2, fp
 801589c:	4631      	mov	r1, r6
 801589e:	4628      	mov	r0, r5
 80158a0:	47b8      	blx	r7
 80158a2:	3001      	adds	r0, #1
 80158a4:	f43f aeb0 	beq.w	8015608 <_printf_float+0x98>
 80158a8:	f108 0801 	add.w	r8, r8, #1
 80158ac:	e7ec      	b.n	8015888 <_printf_float+0x318>
 80158ae:	4642      	mov	r2, r8
 80158b0:	4631      	mov	r1, r6
 80158b2:	4628      	mov	r0, r5
 80158b4:	47b8      	blx	r7
 80158b6:	3001      	adds	r0, #1
 80158b8:	d1c1      	bne.n	801583e <_printf_float+0x2ce>
 80158ba:	e6a5      	b.n	8015608 <_printf_float+0x98>
 80158bc:	2301      	movs	r3, #1
 80158be:	4631      	mov	r1, r6
 80158c0:	4628      	mov	r0, r5
 80158c2:	9206      	str	r2, [sp, #24]
 80158c4:	47b8      	blx	r7
 80158c6:	3001      	adds	r0, #1
 80158c8:	f43f ae9e 	beq.w	8015608 <_printf_float+0x98>
 80158cc:	9b07      	ldr	r3, [sp, #28]
 80158ce:	9a06      	ldr	r2, [sp, #24]
 80158d0:	3301      	adds	r3, #1
 80158d2:	9307      	str	r3, [sp, #28]
 80158d4:	e7b9      	b.n	801584a <_printf_float+0x2da>
 80158d6:	9b05      	ldr	r3, [sp, #20]
 80158d8:	465a      	mov	r2, fp
 80158da:	4631      	mov	r1, r6
 80158dc:	4628      	mov	r0, r5
 80158de:	47b8      	blx	r7
 80158e0:	3001      	adds	r0, #1
 80158e2:	d1bf      	bne.n	8015864 <_printf_float+0x2f4>
 80158e4:	e690      	b.n	8015608 <_printf_float+0x98>
 80158e6:	9a06      	ldr	r2, [sp, #24]
 80158e8:	464b      	mov	r3, r9
 80158ea:	4442      	add	r2, r8
 80158ec:	4631      	mov	r1, r6
 80158ee:	4628      	mov	r0, r5
 80158f0:	47b8      	blx	r7
 80158f2:	3001      	adds	r0, #1
 80158f4:	d1c2      	bne.n	801587c <_printf_float+0x30c>
 80158f6:	e687      	b.n	8015608 <_printf_float+0x98>
 80158f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80158fc:	f1b9 0f01 	cmp.w	r9, #1
 8015900:	dc01      	bgt.n	8015906 <_printf_float+0x396>
 8015902:	07db      	lsls	r3, r3, #31
 8015904:	d536      	bpl.n	8015974 <_printf_float+0x404>
 8015906:	2301      	movs	r3, #1
 8015908:	4642      	mov	r2, r8
 801590a:	4631      	mov	r1, r6
 801590c:	4628      	mov	r0, r5
 801590e:	47b8      	blx	r7
 8015910:	3001      	adds	r0, #1
 8015912:	f43f ae79 	beq.w	8015608 <_printf_float+0x98>
 8015916:	9b05      	ldr	r3, [sp, #20]
 8015918:	465a      	mov	r2, fp
 801591a:	4631      	mov	r1, r6
 801591c:	4628      	mov	r0, r5
 801591e:	47b8      	blx	r7
 8015920:	3001      	adds	r0, #1
 8015922:	f43f ae71 	beq.w	8015608 <_printf_float+0x98>
 8015926:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801592a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015932:	f109 39ff 	add.w	r9, r9, #4294967295
 8015936:	d018      	beq.n	801596a <_printf_float+0x3fa>
 8015938:	464b      	mov	r3, r9
 801593a:	f108 0201 	add.w	r2, r8, #1
 801593e:	4631      	mov	r1, r6
 8015940:	4628      	mov	r0, r5
 8015942:	47b8      	blx	r7
 8015944:	3001      	adds	r0, #1
 8015946:	d10c      	bne.n	8015962 <_printf_float+0x3f2>
 8015948:	e65e      	b.n	8015608 <_printf_float+0x98>
 801594a:	2301      	movs	r3, #1
 801594c:	465a      	mov	r2, fp
 801594e:	4631      	mov	r1, r6
 8015950:	4628      	mov	r0, r5
 8015952:	47b8      	blx	r7
 8015954:	3001      	adds	r0, #1
 8015956:	f43f ae57 	beq.w	8015608 <_printf_float+0x98>
 801595a:	f108 0801 	add.w	r8, r8, #1
 801595e:	45c8      	cmp	r8, r9
 8015960:	dbf3      	blt.n	801594a <_printf_float+0x3da>
 8015962:	4653      	mov	r3, sl
 8015964:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015968:	e6dc      	b.n	8015724 <_printf_float+0x1b4>
 801596a:	f04f 0800 	mov.w	r8, #0
 801596e:	f104 0b1a 	add.w	fp, r4, #26
 8015972:	e7f4      	b.n	801595e <_printf_float+0x3ee>
 8015974:	2301      	movs	r3, #1
 8015976:	4642      	mov	r2, r8
 8015978:	e7e1      	b.n	801593e <_printf_float+0x3ce>
 801597a:	2301      	movs	r3, #1
 801597c:	464a      	mov	r2, r9
 801597e:	4631      	mov	r1, r6
 8015980:	4628      	mov	r0, r5
 8015982:	47b8      	blx	r7
 8015984:	3001      	adds	r0, #1
 8015986:	f43f ae3f 	beq.w	8015608 <_printf_float+0x98>
 801598a:	f108 0801 	add.w	r8, r8, #1
 801598e:	68e3      	ldr	r3, [r4, #12]
 8015990:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015992:	1a5b      	subs	r3, r3, r1
 8015994:	4543      	cmp	r3, r8
 8015996:	dcf0      	bgt.n	801597a <_printf_float+0x40a>
 8015998:	e6f8      	b.n	801578c <_printf_float+0x21c>
 801599a:	f04f 0800 	mov.w	r8, #0
 801599e:	f104 0919 	add.w	r9, r4, #25
 80159a2:	e7f4      	b.n	801598e <_printf_float+0x41e>

080159a4 <_printf_common>:
 80159a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159a8:	4616      	mov	r6, r2
 80159aa:	4698      	mov	r8, r3
 80159ac:	688a      	ldr	r2, [r1, #8]
 80159ae:	690b      	ldr	r3, [r1, #16]
 80159b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80159b4:	4293      	cmp	r3, r2
 80159b6:	bfb8      	it	lt
 80159b8:	4613      	movlt	r3, r2
 80159ba:	6033      	str	r3, [r6, #0]
 80159bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80159c0:	4607      	mov	r7, r0
 80159c2:	460c      	mov	r4, r1
 80159c4:	b10a      	cbz	r2, 80159ca <_printf_common+0x26>
 80159c6:	3301      	adds	r3, #1
 80159c8:	6033      	str	r3, [r6, #0]
 80159ca:	6823      	ldr	r3, [r4, #0]
 80159cc:	0699      	lsls	r1, r3, #26
 80159ce:	bf42      	ittt	mi
 80159d0:	6833      	ldrmi	r3, [r6, #0]
 80159d2:	3302      	addmi	r3, #2
 80159d4:	6033      	strmi	r3, [r6, #0]
 80159d6:	6825      	ldr	r5, [r4, #0]
 80159d8:	f015 0506 	ands.w	r5, r5, #6
 80159dc:	d106      	bne.n	80159ec <_printf_common+0x48>
 80159de:	f104 0a19 	add.w	sl, r4, #25
 80159e2:	68e3      	ldr	r3, [r4, #12]
 80159e4:	6832      	ldr	r2, [r6, #0]
 80159e6:	1a9b      	subs	r3, r3, r2
 80159e8:	42ab      	cmp	r3, r5
 80159ea:	dc26      	bgt.n	8015a3a <_printf_common+0x96>
 80159ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80159f0:	6822      	ldr	r2, [r4, #0]
 80159f2:	3b00      	subs	r3, #0
 80159f4:	bf18      	it	ne
 80159f6:	2301      	movne	r3, #1
 80159f8:	0692      	lsls	r2, r2, #26
 80159fa:	d42b      	bmi.n	8015a54 <_printf_common+0xb0>
 80159fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015a00:	4641      	mov	r1, r8
 8015a02:	4638      	mov	r0, r7
 8015a04:	47c8      	blx	r9
 8015a06:	3001      	adds	r0, #1
 8015a08:	d01e      	beq.n	8015a48 <_printf_common+0xa4>
 8015a0a:	6823      	ldr	r3, [r4, #0]
 8015a0c:	6922      	ldr	r2, [r4, #16]
 8015a0e:	f003 0306 	and.w	r3, r3, #6
 8015a12:	2b04      	cmp	r3, #4
 8015a14:	bf02      	ittt	eq
 8015a16:	68e5      	ldreq	r5, [r4, #12]
 8015a18:	6833      	ldreq	r3, [r6, #0]
 8015a1a:	1aed      	subeq	r5, r5, r3
 8015a1c:	68a3      	ldr	r3, [r4, #8]
 8015a1e:	bf0c      	ite	eq
 8015a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015a24:	2500      	movne	r5, #0
 8015a26:	4293      	cmp	r3, r2
 8015a28:	bfc4      	itt	gt
 8015a2a:	1a9b      	subgt	r3, r3, r2
 8015a2c:	18ed      	addgt	r5, r5, r3
 8015a2e:	2600      	movs	r6, #0
 8015a30:	341a      	adds	r4, #26
 8015a32:	42b5      	cmp	r5, r6
 8015a34:	d11a      	bne.n	8015a6c <_printf_common+0xc8>
 8015a36:	2000      	movs	r0, #0
 8015a38:	e008      	b.n	8015a4c <_printf_common+0xa8>
 8015a3a:	2301      	movs	r3, #1
 8015a3c:	4652      	mov	r2, sl
 8015a3e:	4641      	mov	r1, r8
 8015a40:	4638      	mov	r0, r7
 8015a42:	47c8      	blx	r9
 8015a44:	3001      	adds	r0, #1
 8015a46:	d103      	bne.n	8015a50 <_printf_common+0xac>
 8015a48:	f04f 30ff 	mov.w	r0, #4294967295
 8015a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a50:	3501      	adds	r5, #1
 8015a52:	e7c6      	b.n	80159e2 <_printf_common+0x3e>
 8015a54:	18e1      	adds	r1, r4, r3
 8015a56:	1c5a      	adds	r2, r3, #1
 8015a58:	2030      	movs	r0, #48	@ 0x30
 8015a5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015a5e:	4422      	add	r2, r4
 8015a60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015a64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015a68:	3302      	adds	r3, #2
 8015a6a:	e7c7      	b.n	80159fc <_printf_common+0x58>
 8015a6c:	2301      	movs	r3, #1
 8015a6e:	4622      	mov	r2, r4
 8015a70:	4641      	mov	r1, r8
 8015a72:	4638      	mov	r0, r7
 8015a74:	47c8      	blx	r9
 8015a76:	3001      	adds	r0, #1
 8015a78:	d0e6      	beq.n	8015a48 <_printf_common+0xa4>
 8015a7a:	3601      	adds	r6, #1
 8015a7c:	e7d9      	b.n	8015a32 <_printf_common+0x8e>
	...

08015a80 <_printf_i>:
 8015a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015a84:	7e0f      	ldrb	r7, [r1, #24]
 8015a86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015a88:	2f78      	cmp	r7, #120	@ 0x78
 8015a8a:	4691      	mov	r9, r2
 8015a8c:	4680      	mov	r8, r0
 8015a8e:	460c      	mov	r4, r1
 8015a90:	469a      	mov	sl, r3
 8015a92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015a96:	d807      	bhi.n	8015aa8 <_printf_i+0x28>
 8015a98:	2f62      	cmp	r7, #98	@ 0x62
 8015a9a:	d80a      	bhi.n	8015ab2 <_printf_i+0x32>
 8015a9c:	2f00      	cmp	r7, #0
 8015a9e:	f000 80d1 	beq.w	8015c44 <_printf_i+0x1c4>
 8015aa2:	2f58      	cmp	r7, #88	@ 0x58
 8015aa4:	f000 80b8 	beq.w	8015c18 <_printf_i+0x198>
 8015aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015aac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015ab0:	e03a      	b.n	8015b28 <_printf_i+0xa8>
 8015ab2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015ab6:	2b15      	cmp	r3, #21
 8015ab8:	d8f6      	bhi.n	8015aa8 <_printf_i+0x28>
 8015aba:	a101      	add	r1, pc, #4	@ (adr r1, 8015ac0 <_printf_i+0x40>)
 8015abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015ac0:	08015b19 	.word	0x08015b19
 8015ac4:	08015b2d 	.word	0x08015b2d
 8015ac8:	08015aa9 	.word	0x08015aa9
 8015acc:	08015aa9 	.word	0x08015aa9
 8015ad0:	08015aa9 	.word	0x08015aa9
 8015ad4:	08015aa9 	.word	0x08015aa9
 8015ad8:	08015b2d 	.word	0x08015b2d
 8015adc:	08015aa9 	.word	0x08015aa9
 8015ae0:	08015aa9 	.word	0x08015aa9
 8015ae4:	08015aa9 	.word	0x08015aa9
 8015ae8:	08015aa9 	.word	0x08015aa9
 8015aec:	08015c2b 	.word	0x08015c2b
 8015af0:	08015b57 	.word	0x08015b57
 8015af4:	08015be5 	.word	0x08015be5
 8015af8:	08015aa9 	.word	0x08015aa9
 8015afc:	08015aa9 	.word	0x08015aa9
 8015b00:	08015c4d 	.word	0x08015c4d
 8015b04:	08015aa9 	.word	0x08015aa9
 8015b08:	08015b57 	.word	0x08015b57
 8015b0c:	08015aa9 	.word	0x08015aa9
 8015b10:	08015aa9 	.word	0x08015aa9
 8015b14:	08015bed 	.word	0x08015bed
 8015b18:	6833      	ldr	r3, [r6, #0]
 8015b1a:	1d1a      	adds	r2, r3, #4
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	6032      	str	r2, [r6, #0]
 8015b20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015b24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015b28:	2301      	movs	r3, #1
 8015b2a:	e09c      	b.n	8015c66 <_printf_i+0x1e6>
 8015b2c:	6833      	ldr	r3, [r6, #0]
 8015b2e:	6820      	ldr	r0, [r4, #0]
 8015b30:	1d19      	adds	r1, r3, #4
 8015b32:	6031      	str	r1, [r6, #0]
 8015b34:	0606      	lsls	r6, r0, #24
 8015b36:	d501      	bpl.n	8015b3c <_printf_i+0xbc>
 8015b38:	681d      	ldr	r5, [r3, #0]
 8015b3a:	e003      	b.n	8015b44 <_printf_i+0xc4>
 8015b3c:	0645      	lsls	r5, r0, #25
 8015b3e:	d5fb      	bpl.n	8015b38 <_printf_i+0xb8>
 8015b40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015b44:	2d00      	cmp	r5, #0
 8015b46:	da03      	bge.n	8015b50 <_printf_i+0xd0>
 8015b48:	232d      	movs	r3, #45	@ 0x2d
 8015b4a:	426d      	negs	r5, r5
 8015b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015b50:	4858      	ldr	r0, [pc, #352]	@ (8015cb4 <_printf_i+0x234>)
 8015b52:	230a      	movs	r3, #10
 8015b54:	e011      	b.n	8015b7a <_printf_i+0xfa>
 8015b56:	6821      	ldr	r1, [r4, #0]
 8015b58:	6833      	ldr	r3, [r6, #0]
 8015b5a:	0608      	lsls	r0, r1, #24
 8015b5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015b60:	d402      	bmi.n	8015b68 <_printf_i+0xe8>
 8015b62:	0649      	lsls	r1, r1, #25
 8015b64:	bf48      	it	mi
 8015b66:	b2ad      	uxthmi	r5, r5
 8015b68:	2f6f      	cmp	r7, #111	@ 0x6f
 8015b6a:	4852      	ldr	r0, [pc, #328]	@ (8015cb4 <_printf_i+0x234>)
 8015b6c:	6033      	str	r3, [r6, #0]
 8015b6e:	bf14      	ite	ne
 8015b70:	230a      	movne	r3, #10
 8015b72:	2308      	moveq	r3, #8
 8015b74:	2100      	movs	r1, #0
 8015b76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015b7a:	6866      	ldr	r6, [r4, #4]
 8015b7c:	60a6      	str	r6, [r4, #8]
 8015b7e:	2e00      	cmp	r6, #0
 8015b80:	db05      	blt.n	8015b8e <_printf_i+0x10e>
 8015b82:	6821      	ldr	r1, [r4, #0]
 8015b84:	432e      	orrs	r6, r5
 8015b86:	f021 0104 	bic.w	r1, r1, #4
 8015b8a:	6021      	str	r1, [r4, #0]
 8015b8c:	d04b      	beq.n	8015c26 <_printf_i+0x1a6>
 8015b8e:	4616      	mov	r6, r2
 8015b90:	fbb5 f1f3 	udiv	r1, r5, r3
 8015b94:	fb03 5711 	mls	r7, r3, r1, r5
 8015b98:	5dc7      	ldrb	r7, [r0, r7]
 8015b9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015b9e:	462f      	mov	r7, r5
 8015ba0:	42bb      	cmp	r3, r7
 8015ba2:	460d      	mov	r5, r1
 8015ba4:	d9f4      	bls.n	8015b90 <_printf_i+0x110>
 8015ba6:	2b08      	cmp	r3, #8
 8015ba8:	d10b      	bne.n	8015bc2 <_printf_i+0x142>
 8015baa:	6823      	ldr	r3, [r4, #0]
 8015bac:	07df      	lsls	r7, r3, #31
 8015bae:	d508      	bpl.n	8015bc2 <_printf_i+0x142>
 8015bb0:	6923      	ldr	r3, [r4, #16]
 8015bb2:	6861      	ldr	r1, [r4, #4]
 8015bb4:	4299      	cmp	r1, r3
 8015bb6:	bfde      	ittt	le
 8015bb8:	2330      	movle	r3, #48	@ 0x30
 8015bba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015bbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015bc2:	1b92      	subs	r2, r2, r6
 8015bc4:	6122      	str	r2, [r4, #16]
 8015bc6:	f8cd a000 	str.w	sl, [sp]
 8015bca:	464b      	mov	r3, r9
 8015bcc:	aa03      	add	r2, sp, #12
 8015bce:	4621      	mov	r1, r4
 8015bd0:	4640      	mov	r0, r8
 8015bd2:	f7ff fee7 	bl	80159a4 <_printf_common>
 8015bd6:	3001      	adds	r0, #1
 8015bd8:	d14a      	bne.n	8015c70 <_printf_i+0x1f0>
 8015bda:	f04f 30ff 	mov.w	r0, #4294967295
 8015bde:	b004      	add	sp, #16
 8015be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015be4:	6823      	ldr	r3, [r4, #0]
 8015be6:	f043 0320 	orr.w	r3, r3, #32
 8015bea:	6023      	str	r3, [r4, #0]
 8015bec:	4832      	ldr	r0, [pc, #200]	@ (8015cb8 <_printf_i+0x238>)
 8015bee:	2778      	movs	r7, #120	@ 0x78
 8015bf0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015bf4:	6823      	ldr	r3, [r4, #0]
 8015bf6:	6831      	ldr	r1, [r6, #0]
 8015bf8:	061f      	lsls	r7, r3, #24
 8015bfa:	f851 5b04 	ldr.w	r5, [r1], #4
 8015bfe:	d402      	bmi.n	8015c06 <_printf_i+0x186>
 8015c00:	065f      	lsls	r7, r3, #25
 8015c02:	bf48      	it	mi
 8015c04:	b2ad      	uxthmi	r5, r5
 8015c06:	6031      	str	r1, [r6, #0]
 8015c08:	07d9      	lsls	r1, r3, #31
 8015c0a:	bf44      	itt	mi
 8015c0c:	f043 0320 	orrmi.w	r3, r3, #32
 8015c10:	6023      	strmi	r3, [r4, #0]
 8015c12:	b11d      	cbz	r5, 8015c1c <_printf_i+0x19c>
 8015c14:	2310      	movs	r3, #16
 8015c16:	e7ad      	b.n	8015b74 <_printf_i+0xf4>
 8015c18:	4826      	ldr	r0, [pc, #152]	@ (8015cb4 <_printf_i+0x234>)
 8015c1a:	e7e9      	b.n	8015bf0 <_printf_i+0x170>
 8015c1c:	6823      	ldr	r3, [r4, #0]
 8015c1e:	f023 0320 	bic.w	r3, r3, #32
 8015c22:	6023      	str	r3, [r4, #0]
 8015c24:	e7f6      	b.n	8015c14 <_printf_i+0x194>
 8015c26:	4616      	mov	r6, r2
 8015c28:	e7bd      	b.n	8015ba6 <_printf_i+0x126>
 8015c2a:	6833      	ldr	r3, [r6, #0]
 8015c2c:	6825      	ldr	r5, [r4, #0]
 8015c2e:	6961      	ldr	r1, [r4, #20]
 8015c30:	1d18      	adds	r0, r3, #4
 8015c32:	6030      	str	r0, [r6, #0]
 8015c34:	062e      	lsls	r6, r5, #24
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	d501      	bpl.n	8015c3e <_printf_i+0x1be>
 8015c3a:	6019      	str	r1, [r3, #0]
 8015c3c:	e002      	b.n	8015c44 <_printf_i+0x1c4>
 8015c3e:	0668      	lsls	r0, r5, #25
 8015c40:	d5fb      	bpl.n	8015c3a <_printf_i+0x1ba>
 8015c42:	8019      	strh	r1, [r3, #0]
 8015c44:	2300      	movs	r3, #0
 8015c46:	6123      	str	r3, [r4, #16]
 8015c48:	4616      	mov	r6, r2
 8015c4a:	e7bc      	b.n	8015bc6 <_printf_i+0x146>
 8015c4c:	6833      	ldr	r3, [r6, #0]
 8015c4e:	1d1a      	adds	r2, r3, #4
 8015c50:	6032      	str	r2, [r6, #0]
 8015c52:	681e      	ldr	r6, [r3, #0]
 8015c54:	6862      	ldr	r2, [r4, #4]
 8015c56:	2100      	movs	r1, #0
 8015c58:	4630      	mov	r0, r6
 8015c5a:	f7ea fb59 	bl	8000310 <memchr>
 8015c5e:	b108      	cbz	r0, 8015c64 <_printf_i+0x1e4>
 8015c60:	1b80      	subs	r0, r0, r6
 8015c62:	6060      	str	r0, [r4, #4]
 8015c64:	6863      	ldr	r3, [r4, #4]
 8015c66:	6123      	str	r3, [r4, #16]
 8015c68:	2300      	movs	r3, #0
 8015c6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015c6e:	e7aa      	b.n	8015bc6 <_printf_i+0x146>
 8015c70:	6923      	ldr	r3, [r4, #16]
 8015c72:	4632      	mov	r2, r6
 8015c74:	4649      	mov	r1, r9
 8015c76:	4640      	mov	r0, r8
 8015c78:	47d0      	blx	sl
 8015c7a:	3001      	adds	r0, #1
 8015c7c:	d0ad      	beq.n	8015bda <_printf_i+0x15a>
 8015c7e:	6823      	ldr	r3, [r4, #0]
 8015c80:	079b      	lsls	r3, r3, #30
 8015c82:	d413      	bmi.n	8015cac <_printf_i+0x22c>
 8015c84:	68e0      	ldr	r0, [r4, #12]
 8015c86:	9b03      	ldr	r3, [sp, #12]
 8015c88:	4298      	cmp	r0, r3
 8015c8a:	bfb8      	it	lt
 8015c8c:	4618      	movlt	r0, r3
 8015c8e:	e7a6      	b.n	8015bde <_printf_i+0x15e>
 8015c90:	2301      	movs	r3, #1
 8015c92:	4632      	mov	r2, r6
 8015c94:	4649      	mov	r1, r9
 8015c96:	4640      	mov	r0, r8
 8015c98:	47d0      	blx	sl
 8015c9a:	3001      	adds	r0, #1
 8015c9c:	d09d      	beq.n	8015bda <_printf_i+0x15a>
 8015c9e:	3501      	adds	r5, #1
 8015ca0:	68e3      	ldr	r3, [r4, #12]
 8015ca2:	9903      	ldr	r1, [sp, #12]
 8015ca4:	1a5b      	subs	r3, r3, r1
 8015ca6:	42ab      	cmp	r3, r5
 8015ca8:	dcf2      	bgt.n	8015c90 <_printf_i+0x210>
 8015caa:	e7eb      	b.n	8015c84 <_printf_i+0x204>
 8015cac:	2500      	movs	r5, #0
 8015cae:	f104 0619 	add.w	r6, r4, #25
 8015cb2:	e7f5      	b.n	8015ca0 <_printf_i+0x220>
 8015cb4:	0801c61f 	.word	0x0801c61f
 8015cb8:	0801c630 	.word	0x0801c630

08015cbc <_scanf_float>:
 8015cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc0:	b087      	sub	sp, #28
 8015cc2:	4691      	mov	r9, r2
 8015cc4:	9303      	str	r3, [sp, #12]
 8015cc6:	688b      	ldr	r3, [r1, #8]
 8015cc8:	1e5a      	subs	r2, r3, #1
 8015cca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8015cce:	bf81      	itttt	hi
 8015cd0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8015cd4:	eb03 0b05 	addhi.w	fp, r3, r5
 8015cd8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8015cdc:	608b      	strhi	r3, [r1, #8]
 8015cde:	680b      	ldr	r3, [r1, #0]
 8015ce0:	460a      	mov	r2, r1
 8015ce2:	f04f 0500 	mov.w	r5, #0
 8015ce6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8015cea:	f842 3b1c 	str.w	r3, [r2], #28
 8015cee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015cf2:	4680      	mov	r8, r0
 8015cf4:	460c      	mov	r4, r1
 8015cf6:	bf98      	it	ls
 8015cf8:	f04f 0b00 	movls.w	fp, #0
 8015cfc:	9201      	str	r2, [sp, #4]
 8015cfe:	4616      	mov	r6, r2
 8015d00:	46aa      	mov	sl, r5
 8015d02:	462f      	mov	r7, r5
 8015d04:	9502      	str	r5, [sp, #8]
 8015d06:	68a2      	ldr	r2, [r4, #8]
 8015d08:	b15a      	cbz	r2, 8015d22 <_scanf_float+0x66>
 8015d0a:	f8d9 3000 	ldr.w	r3, [r9]
 8015d0e:	781b      	ldrb	r3, [r3, #0]
 8015d10:	2b4e      	cmp	r3, #78	@ 0x4e
 8015d12:	d863      	bhi.n	8015ddc <_scanf_float+0x120>
 8015d14:	2b40      	cmp	r3, #64	@ 0x40
 8015d16:	d83b      	bhi.n	8015d90 <_scanf_float+0xd4>
 8015d18:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8015d1c:	b2c8      	uxtb	r0, r1
 8015d1e:	280e      	cmp	r0, #14
 8015d20:	d939      	bls.n	8015d96 <_scanf_float+0xda>
 8015d22:	b11f      	cbz	r7, 8015d2c <_scanf_float+0x70>
 8015d24:	6823      	ldr	r3, [r4, #0]
 8015d26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015d2a:	6023      	str	r3, [r4, #0]
 8015d2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015d30:	f1ba 0f01 	cmp.w	sl, #1
 8015d34:	f200 8114 	bhi.w	8015f60 <_scanf_float+0x2a4>
 8015d38:	9b01      	ldr	r3, [sp, #4]
 8015d3a:	429e      	cmp	r6, r3
 8015d3c:	f200 8105 	bhi.w	8015f4a <_scanf_float+0x28e>
 8015d40:	2001      	movs	r0, #1
 8015d42:	b007      	add	sp, #28
 8015d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d48:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8015d4c:	2a0d      	cmp	r2, #13
 8015d4e:	d8e8      	bhi.n	8015d22 <_scanf_float+0x66>
 8015d50:	a101      	add	r1, pc, #4	@ (adr r1, 8015d58 <_scanf_float+0x9c>)
 8015d52:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015d56:	bf00      	nop
 8015d58:	08015ea1 	.word	0x08015ea1
 8015d5c:	08015d23 	.word	0x08015d23
 8015d60:	08015d23 	.word	0x08015d23
 8015d64:	08015d23 	.word	0x08015d23
 8015d68:	08015efd 	.word	0x08015efd
 8015d6c:	08015ed7 	.word	0x08015ed7
 8015d70:	08015d23 	.word	0x08015d23
 8015d74:	08015d23 	.word	0x08015d23
 8015d78:	08015eaf 	.word	0x08015eaf
 8015d7c:	08015d23 	.word	0x08015d23
 8015d80:	08015d23 	.word	0x08015d23
 8015d84:	08015d23 	.word	0x08015d23
 8015d88:	08015d23 	.word	0x08015d23
 8015d8c:	08015e6b 	.word	0x08015e6b
 8015d90:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8015d94:	e7da      	b.n	8015d4c <_scanf_float+0x90>
 8015d96:	290e      	cmp	r1, #14
 8015d98:	d8c3      	bhi.n	8015d22 <_scanf_float+0x66>
 8015d9a:	a001      	add	r0, pc, #4	@ (adr r0, 8015da0 <_scanf_float+0xe4>)
 8015d9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015da0:	08015e5b 	.word	0x08015e5b
 8015da4:	08015d23 	.word	0x08015d23
 8015da8:	08015e5b 	.word	0x08015e5b
 8015dac:	08015eeb 	.word	0x08015eeb
 8015db0:	08015d23 	.word	0x08015d23
 8015db4:	08015dfd 	.word	0x08015dfd
 8015db8:	08015e41 	.word	0x08015e41
 8015dbc:	08015e41 	.word	0x08015e41
 8015dc0:	08015e41 	.word	0x08015e41
 8015dc4:	08015e41 	.word	0x08015e41
 8015dc8:	08015e41 	.word	0x08015e41
 8015dcc:	08015e41 	.word	0x08015e41
 8015dd0:	08015e41 	.word	0x08015e41
 8015dd4:	08015e41 	.word	0x08015e41
 8015dd8:	08015e41 	.word	0x08015e41
 8015ddc:	2b6e      	cmp	r3, #110	@ 0x6e
 8015dde:	d809      	bhi.n	8015df4 <_scanf_float+0x138>
 8015de0:	2b60      	cmp	r3, #96	@ 0x60
 8015de2:	d8b1      	bhi.n	8015d48 <_scanf_float+0x8c>
 8015de4:	2b54      	cmp	r3, #84	@ 0x54
 8015de6:	d07b      	beq.n	8015ee0 <_scanf_float+0x224>
 8015de8:	2b59      	cmp	r3, #89	@ 0x59
 8015dea:	d19a      	bne.n	8015d22 <_scanf_float+0x66>
 8015dec:	2d07      	cmp	r5, #7
 8015dee:	d198      	bne.n	8015d22 <_scanf_float+0x66>
 8015df0:	2508      	movs	r5, #8
 8015df2:	e02f      	b.n	8015e54 <_scanf_float+0x198>
 8015df4:	2b74      	cmp	r3, #116	@ 0x74
 8015df6:	d073      	beq.n	8015ee0 <_scanf_float+0x224>
 8015df8:	2b79      	cmp	r3, #121	@ 0x79
 8015dfa:	e7f6      	b.n	8015dea <_scanf_float+0x12e>
 8015dfc:	6821      	ldr	r1, [r4, #0]
 8015dfe:	05c8      	lsls	r0, r1, #23
 8015e00:	d51e      	bpl.n	8015e40 <_scanf_float+0x184>
 8015e02:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8015e06:	6021      	str	r1, [r4, #0]
 8015e08:	3701      	adds	r7, #1
 8015e0a:	f1bb 0f00 	cmp.w	fp, #0
 8015e0e:	d003      	beq.n	8015e18 <_scanf_float+0x15c>
 8015e10:	3201      	adds	r2, #1
 8015e12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015e16:	60a2      	str	r2, [r4, #8]
 8015e18:	68a3      	ldr	r3, [r4, #8]
 8015e1a:	3b01      	subs	r3, #1
 8015e1c:	60a3      	str	r3, [r4, #8]
 8015e1e:	6923      	ldr	r3, [r4, #16]
 8015e20:	3301      	adds	r3, #1
 8015e22:	6123      	str	r3, [r4, #16]
 8015e24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015e28:	3b01      	subs	r3, #1
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	f8c9 3004 	str.w	r3, [r9, #4]
 8015e30:	f340 8082 	ble.w	8015f38 <_scanf_float+0x27c>
 8015e34:	f8d9 3000 	ldr.w	r3, [r9]
 8015e38:	3301      	adds	r3, #1
 8015e3a:	f8c9 3000 	str.w	r3, [r9]
 8015e3e:	e762      	b.n	8015d06 <_scanf_float+0x4a>
 8015e40:	eb1a 0105 	adds.w	r1, sl, r5
 8015e44:	f47f af6d 	bne.w	8015d22 <_scanf_float+0x66>
 8015e48:	6822      	ldr	r2, [r4, #0]
 8015e4a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8015e4e:	6022      	str	r2, [r4, #0]
 8015e50:	460d      	mov	r5, r1
 8015e52:	468a      	mov	sl, r1
 8015e54:	f806 3b01 	strb.w	r3, [r6], #1
 8015e58:	e7de      	b.n	8015e18 <_scanf_float+0x15c>
 8015e5a:	6822      	ldr	r2, [r4, #0]
 8015e5c:	0610      	lsls	r0, r2, #24
 8015e5e:	f57f af60 	bpl.w	8015d22 <_scanf_float+0x66>
 8015e62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8015e66:	6022      	str	r2, [r4, #0]
 8015e68:	e7f4      	b.n	8015e54 <_scanf_float+0x198>
 8015e6a:	f1ba 0f00 	cmp.w	sl, #0
 8015e6e:	d10c      	bne.n	8015e8a <_scanf_float+0x1ce>
 8015e70:	b977      	cbnz	r7, 8015e90 <_scanf_float+0x1d4>
 8015e72:	6822      	ldr	r2, [r4, #0]
 8015e74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8015e78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8015e7c:	d108      	bne.n	8015e90 <_scanf_float+0x1d4>
 8015e7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015e82:	6022      	str	r2, [r4, #0]
 8015e84:	f04f 0a01 	mov.w	sl, #1
 8015e88:	e7e4      	b.n	8015e54 <_scanf_float+0x198>
 8015e8a:	f1ba 0f02 	cmp.w	sl, #2
 8015e8e:	d050      	beq.n	8015f32 <_scanf_float+0x276>
 8015e90:	2d01      	cmp	r5, #1
 8015e92:	d002      	beq.n	8015e9a <_scanf_float+0x1de>
 8015e94:	2d04      	cmp	r5, #4
 8015e96:	f47f af44 	bne.w	8015d22 <_scanf_float+0x66>
 8015e9a:	3501      	adds	r5, #1
 8015e9c:	b2ed      	uxtb	r5, r5
 8015e9e:	e7d9      	b.n	8015e54 <_scanf_float+0x198>
 8015ea0:	f1ba 0f01 	cmp.w	sl, #1
 8015ea4:	f47f af3d 	bne.w	8015d22 <_scanf_float+0x66>
 8015ea8:	f04f 0a02 	mov.w	sl, #2
 8015eac:	e7d2      	b.n	8015e54 <_scanf_float+0x198>
 8015eae:	b975      	cbnz	r5, 8015ece <_scanf_float+0x212>
 8015eb0:	2f00      	cmp	r7, #0
 8015eb2:	f47f af37 	bne.w	8015d24 <_scanf_float+0x68>
 8015eb6:	6822      	ldr	r2, [r4, #0]
 8015eb8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8015ebc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8015ec0:	f040 80fc 	bne.w	80160bc <_scanf_float+0x400>
 8015ec4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015ec8:	6022      	str	r2, [r4, #0]
 8015eca:	2501      	movs	r5, #1
 8015ecc:	e7c2      	b.n	8015e54 <_scanf_float+0x198>
 8015ece:	2d03      	cmp	r5, #3
 8015ed0:	d0e3      	beq.n	8015e9a <_scanf_float+0x1de>
 8015ed2:	2d05      	cmp	r5, #5
 8015ed4:	e7df      	b.n	8015e96 <_scanf_float+0x1da>
 8015ed6:	2d02      	cmp	r5, #2
 8015ed8:	f47f af23 	bne.w	8015d22 <_scanf_float+0x66>
 8015edc:	2503      	movs	r5, #3
 8015ede:	e7b9      	b.n	8015e54 <_scanf_float+0x198>
 8015ee0:	2d06      	cmp	r5, #6
 8015ee2:	f47f af1e 	bne.w	8015d22 <_scanf_float+0x66>
 8015ee6:	2507      	movs	r5, #7
 8015ee8:	e7b4      	b.n	8015e54 <_scanf_float+0x198>
 8015eea:	6822      	ldr	r2, [r4, #0]
 8015eec:	0591      	lsls	r1, r2, #22
 8015eee:	f57f af18 	bpl.w	8015d22 <_scanf_float+0x66>
 8015ef2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8015ef6:	6022      	str	r2, [r4, #0]
 8015ef8:	9702      	str	r7, [sp, #8]
 8015efa:	e7ab      	b.n	8015e54 <_scanf_float+0x198>
 8015efc:	6822      	ldr	r2, [r4, #0]
 8015efe:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8015f02:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015f06:	d005      	beq.n	8015f14 <_scanf_float+0x258>
 8015f08:	0550      	lsls	r0, r2, #21
 8015f0a:	f57f af0a 	bpl.w	8015d22 <_scanf_float+0x66>
 8015f0e:	2f00      	cmp	r7, #0
 8015f10:	f000 80d4 	beq.w	80160bc <_scanf_float+0x400>
 8015f14:	0591      	lsls	r1, r2, #22
 8015f16:	bf58      	it	pl
 8015f18:	9902      	ldrpl	r1, [sp, #8]
 8015f1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015f1e:	bf58      	it	pl
 8015f20:	1a79      	subpl	r1, r7, r1
 8015f22:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8015f26:	bf58      	it	pl
 8015f28:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015f2c:	6022      	str	r2, [r4, #0]
 8015f2e:	2700      	movs	r7, #0
 8015f30:	e790      	b.n	8015e54 <_scanf_float+0x198>
 8015f32:	f04f 0a03 	mov.w	sl, #3
 8015f36:	e78d      	b.n	8015e54 <_scanf_float+0x198>
 8015f38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015f3c:	4649      	mov	r1, r9
 8015f3e:	4640      	mov	r0, r8
 8015f40:	4798      	blx	r3
 8015f42:	2800      	cmp	r0, #0
 8015f44:	f43f aedf 	beq.w	8015d06 <_scanf_float+0x4a>
 8015f48:	e6eb      	b.n	8015d22 <_scanf_float+0x66>
 8015f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015f4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015f52:	464a      	mov	r2, r9
 8015f54:	4640      	mov	r0, r8
 8015f56:	4798      	blx	r3
 8015f58:	6923      	ldr	r3, [r4, #16]
 8015f5a:	3b01      	subs	r3, #1
 8015f5c:	6123      	str	r3, [r4, #16]
 8015f5e:	e6eb      	b.n	8015d38 <_scanf_float+0x7c>
 8015f60:	1e6b      	subs	r3, r5, #1
 8015f62:	2b06      	cmp	r3, #6
 8015f64:	d824      	bhi.n	8015fb0 <_scanf_float+0x2f4>
 8015f66:	2d02      	cmp	r5, #2
 8015f68:	d836      	bhi.n	8015fd8 <_scanf_float+0x31c>
 8015f6a:	9b01      	ldr	r3, [sp, #4]
 8015f6c:	429e      	cmp	r6, r3
 8015f6e:	f67f aee7 	bls.w	8015d40 <_scanf_float+0x84>
 8015f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015f76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015f7a:	464a      	mov	r2, r9
 8015f7c:	4640      	mov	r0, r8
 8015f7e:	4798      	blx	r3
 8015f80:	6923      	ldr	r3, [r4, #16]
 8015f82:	3b01      	subs	r3, #1
 8015f84:	6123      	str	r3, [r4, #16]
 8015f86:	e7f0      	b.n	8015f6a <_scanf_float+0x2ae>
 8015f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015f8c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8015f90:	464a      	mov	r2, r9
 8015f92:	4640      	mov	r0, r8
 8015f94:	4798      	blx	r3
 8015f96:	6923      	ldr	r3, [r4, #16]
 8015f98:	3b01      	subs	r3, #1
 8015f9a:	6123      	str	r3, [r4, #16]
 8015f9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015fa0:	fa5f fa8a 	uxtb.w	sl, sl
 8015fa4:	f1ba 0f02 	cmp.w	sl, #2
 8015fa8:	d1ee      	bne.n	8015f88 <_scanf_float+0x2cc>
 8015faa:	3d03      	subs	r5, #3
 8015fac:	b2ed      	uxtb	r5, r5
 8015fae:	1b76      	subs	r6, r6, r5
 8015fb0:	6823      	ldr	r3, [r4, #0]
 8015fb2:	05da      	lsls	r2, r3, #23
 8015fb4:	d530      	bpl.n	8016018 <_scanf_float+0x35c>
 8015fb6:	055b      	lsls	r3, r3, #21
 8015fb8:	d511      	bpl.n	8015fde <_scanf_float+0x322>
 8015fba:	9b01      	ldr	r3, [sp, #4]
 8015fbc:	429e      	cmp	r6, r3
 8015fbe:	f67f aebf 	bls.w	8015d40 <_scanf_float+0x84>
 8015fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015fc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015fca:	464a      	mov	r2, r9
 8015fcc:	4640      	mov	r0, r8
 8015fce:	4798      	blx	r3
 8015fd0:	6923      	ldr	r3, [r4, #16]
 8015fd2:	3b01      	subs	r3, #1
 8015fd4:	6123      	str	r3, [r4, #16]
 8015fd6:	e7f0      	b.n	8015fba <_scanf_float+0x2fe>
 8015fd8:	46aa      	mov	sl, r5
 8015fda:	46b3      	mov	fp, r6
 8015fdc:	e7de      	b.n	8015f9c <_scanf_float+0x2e0>
 8015fde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015fe2:	6923      	ldr	r3, [r4, #16]
 8015fe4:	2965      	cmp	r1, #101	@ 0x65
 8015fe6:	f103 33ff 	add.w	r3, r3, #4294967295
 8015fea:	f106 35ff 	add.w	r5, r6, #4294967295
 8015fee:	6123      	str	r3, [r4, #16]
 8015ff0:	d00c      	beq.n	801600c <_scanf_float+0x350>
 8015ff2:	2945      	cmp	r1, #69	@ 0x45
 8015ff4:	d00a      	beq.n	801600c <_scanf_float+0x350>
 8015ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015ffa:	464a      	mov	r2, r9
 8015ffc:	4640      	mov	r0, r8
 8015ffe:	4798      	blx	r3
 8016000:	6923      	ldr	r3, [r4, #16]
 8016002:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016006:	3b01      	subs	r3, #1
 8016008:	1eb5      	subs	r5, r6, #2
 801600a:	6123      	str	r3, [r4, #16]
 801600c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016010:	464a      	mov	r2, r9
 8016012:	4640      	mov	r0, r8
 8016014:	4798      	blx	r3
 8016016:	462e      	mov	r6, r5
 8016018:	6822      	ldr	r2, [r4, #0]
 801601a:	f012 0210 	ands.w	r2, r2, #16
 801601e:	d001      	beq.n	8016024 <_scanf_float+0x368>
 8016020:	2000      	movs	r0, #0
 8016022:	e68e      	b.n	8015d42 <_scanf_float+0x86>
 8016024:	7032      	strb	r2, [r6, #0]
 8016026:	6823      	ldr	r3, [r4, #0]
 8016028:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801602c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016030:	d123      	bne.n	801607a <_scanf_float+0x3be>
 8016032:	9b02      	ldr	r3, [sp, #8]
 8016034:	429f      	cmp	r7, r3
 8016036:	d00a      	beq.n	801604e <_scanf_float+0x392>
 8016038:	1bda      	subs	r2, r3, r7
 801603a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801603e:	429e      	cmp	r6, r3
 8016040:	bf28      	it	cs
 8016042:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8016046:	491e      	ldr	r1, [pc, #120]	@ (80160c0 <_scanf_float+0x404>)
 8016048:	4630      	mov	r0, r6
 801604a:	f000 f96f 	bl	801632c <siprintf>
 801604e:	9901      	ldr	r1, [sp, #4]
 8016050:	2200      	movs	r2, #0
 8016052:	4640      	mov	r0, r8
 8016054:	f002 fc96 	bl	8018984 <_strtod_r>
 8016058:	9b03      	ldr	r3, [sp, #12]
 801605a:	6821      	ldr	r1, [r4, #0]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	f011 0f02 	tst.w	r1, #2
 8016062:	f103 0204 	add.w	r2, r3, #4
 8016066:	d015      	beq.n	8016094 <_scanf_float+0x3d8>
 8016068:	9903      	ldr	r1, [sp, #12]
 801606a:	600a      	str	r2, [r1, #0]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	ed83 0b00 	vstr	d0, [r3]
 8016072:	68e3      	ldr	r3, [r4, #12]
 8016074:	3301      	adds	r3, #1
 8016076:	60e3      	str	r3, [r4, #12]
 8016078:	e7d2      	b.n	8016020 <_scanf_float+0x364>
 801607a:	9b04      	ldr	r3, [sp, #16]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d0e6      	beq.n	801604e <_scanf_float+0x392>
 8016080:	9905      	ldr	r1, [sp, #20]
 8016082:	230a      	movs	r3, #10
 8016084:	3101      	adds	r1, #1
 8016086:	4640      	mov	r0, r8
 8016088:	f7ff f9e2 	bl	8015450 <_strtol_r>
 801608c:	9b04      	ldr	r3, [sp, #16]
 801608e:	9e05      	ldr	r6, [sp, #20]
 8016090:	1ac2      	subs	r2, r0, r3
 8016092:	e7d2      	b.n	801603a <_scanf_float+0x37e>
 8016094:	f011 0f04 	tst.w	r1, #4
 8016098:	9903      	ldr	r1, [sp, #12]
 801609a:	600a      	str	r2, [r1, #0]
 801609c:	d1e6      	bne.n	801606c <_scanf_float+0x3b0>
 801609e:	eeb4 0b40 	vcmp.f64	d0, d0
 80160a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a6:	681d      	ldr	r5, [r3, #0]
 80160a8:	d705      	bvc.n	80160b6 <_scanf_float+0x3fa>
 80160aa:	4806      	ldr	r0, [pc, #24]	@ (80160c4 <_scanf_float+0x408>)
 80160ac:	f000 fb02 	bl	80166b4 <nanf>
 80160b0:	ed85 0a00 	vstr	s0, [r5]
 80160b4:	e7dd      	b.n	8016072 <_scanf_float+0x3b6>
 80160b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80160ba:	e7f9      	b.n	80160b0 <_scanf_float+0x3f4>
 80160bc:	2700      	movs	r7, #0
 80160be:	e635      	b.n	8015d2c <_scanf_float+0x70>
 80160c0:	0801c641 	.word	0x0801c641
 80160c4:	0801c681 	.word	0x0801c681

080160c8 <std>:
 80160c8:	2300      	movs	r3, #0
 80160ca:	b510      	push	{r4, lr}
 80160cc:	4604      	mov	r4, r0
 80160ce:	e9c0 3300 	strd	r3, r3, [r0]
 80160d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80160d6:	6083      	str	r3, [r0, #8]
 80160d8:	8181      	strh	r1, [r0, #12]
 80160da:	6643      	str	r3, [r0, #100]	@ 0x64
 80160dc:	81c2      	strh	r2, [r0, #14]
 80160de:	6183      	str	r3, [r0, #24]
 80160e0:	4619      	mov	r1, r3
 80160e2:	2208      	movs	r2, #8
 80160e4:	305c      	adds	r0, #92	@ 0x5c
 80160e6:	f000 fa45 	bl	8016574 <memset>
 80160ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016120 <std+0x58>)
 80160ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80160ee:	4b0d      	ldr	r3, [pc, #52]	@ (8016124 <std+0x5c>)
 80160f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80160f2:	4b0d      	ldr	r3, [pc, #52]	@ (8016128 <std+0x60>)
 80160f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80160f6:	4b0d      	ldr	r3, [pc, #52]	@ (801612c <std+0x64>)
 80160f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80160fa:	4b0d      	ldr	r3, [pc, #52]	@ (8016130 <std+0x68>)
 80160fc:	6224      	str	r4, [r4, #32]
 80160fe:	429c      	cmp	r4, r3
 8016100:	d006      	beq.n	8016110 <std+0x48>
 8016102:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016106:	4294      	cmp	r4, r2
 8016108:	d002      	beq.n	8016110 <std+0x48>
 801610a:	33d0      	adds	r3, #208	@ 0xd0
 801610c:	429c      	cmp	r4, r3
 801610e:	d105      	bne.n	801611c <std+0x54>
 8016110:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016118:	f000 baba 	b.w	8016690 <__retarget_lock_init_recursive>
 801611c:	bd10      	pop	{r4, pc}
 801611e:	bf00      	nop
 8016120:	08016371 	.word	0x08016371
 8016124:	08016393 	.word	0x08016393
 8016128:	080163cb 	.word	0x080163cb
 801612c:	080163ef 	.word	0x080163ef
 8016130:	240083e0 	.word	0x240083e0

08016134 <stdio_exit_handler>:
 8016134:	4a02      	ldr	r2, [pc, #8]	@ (8016140 <stdio_exit_handler+0xc>)
 8016136:	4903      	ldr	r1, [pc, #12]	@ (8016144 <stdio_exit_handler+0x10>)
 8016138:	4803      	ldr	r0, [pc, #12]	@ (8016148 <stdio_exit_handler+0x14>)
 801613a:	f000 b869 	b.w	8016210 <_fwalk_sglue>
 801613e:	bf00      	nop
 8016140:	24000030 	.word	0x24000030
 8016144:	08018fcd 	.word	0x08018fcd
 8016148:	24000040 	.word	0x24000040

0801614c <cleanup_stdio>:
 801614c:	6841      	ldr	r1, [r0, #4]
 801614e:	4b0c      	ldr	r3, [pc, #48]	@ (8016180 <cleanup_stdio+0x34>)
 8016150:	4299      	cmp	r1, r3
 8016152:	b510      	push	{r4, lr}
 8016154:	4604      	mov	r4, r0
 8016156:	d001      	beq.n	801615c <cleanup_stdio+0x10>
 8016158:	f002 ff38 	bl	8018fcc <_fflush_r>
 801615c:	68a1      	ldr	r1, [r4, #8]
 801615e:	4b09      	ldr	r3, [pc, #36]	@ (8016184 <cleanup_stdio+0x38>)
 8016160:	4299      	cmp	r1, r3
 8016162:	d002      	beq.n	801616a <cleanup_stdio+0x1e>
 8016164:	4620      	mov	r0, r4
 8016166:	f002 ff31 	bl	8018fcc <_fflush_r>
 801616a:	68e1      	ldr	r1, [r4, #12]
 801616c:	4b06      	ldr	r3, [pc, #24]	@ (8016188 <cleanup_stdio+0x3c>)
 801616e:	4299      	cmp	r1, r3
 8016170:	d004      	beq.n	801617c <cleanup_stdio+0x30>
 8016172:	4620      	mov	r0, r4
 8016174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016178:	f002 bf28 	b.w	8018fcc <_fflush_r>
 801617c:	bd10      	pop	{r4, pc}
 801617e:	bf00      	nop
 8016180:	240083e0 	.word	0x240083e0
 8016184:	24008448 	.word	0x24008448
 8016188:	240084b0 	.word	0x240084b0

0801618c <global_stdio_init.part.0>:
 801618c:	b510      	push	{r4, lr}
 801618e:	4b0b      	ldr	r3, [pc, #44]	@ (80161bc <global_stdio_init.part.0+0x30>)
 8016190:	4c0b      	ldr	r4, [pc, #44]	@ (80161c0 <global_stdio_init.part.0+0x34>)
 8016192:	4a0c      	ldr	r2, [pc, #48]	@ (80161c4 <global_stdio_init.part.0+0x38>)
 8016194:	601a      	str	r2, [r3, #0]
 8016196:	4620      	mov	r0, r4
 8016198:	2200      	movs	r2, #0
 801619a:	2104      	movs	r1, #4
 801619c:	f7ff ff94 	bl	80160c8 <std>
 80161a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80161a4:	2201      	movs	r2, #1
 80161a6:	2109      	movs	r1, #9
 80161a8:	f7ff ff8e 	bl	80160c8 <std>
 80161ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80161b0:	2202      	movs	r2, #2
 80161b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161b6:	2112      	movs	r1, #18
 80161b8:	f7ff bf86 	b.w	80160c8 <std>
 80161bc:	24008518 	.word	0x24008518
 80161c0:	240083e0 	.word	0x240083e0
 80161c4:	08016135 	.word	0x08016135

080161c8 <__sfp_lock_acquire>:
 80161c8:	4801      	ldr	r0, [pc, #4]	@ (80161d0 <__sfp_lock_acquire+0x8>)
 80161ca:	f000 ba62 	b.w	8016692 <__retarget_lock_acquire_recursive>
 80161ce:	bf00      	nop
 80161d0:	24008521 	.word	0x24008521

080161d4 <__sfp_lock_release>:
 80161d4:	4801      	ldr	r0, [pc, #4]	@ (80161dc <__sfp_lock_release+0x8>)
 80161d6:	f000 ba5d 	b.w	8016694 <__retarget_lock_release_recursive>
 80161da:	bf00      	nop
 80161dc:	24008521 	.word	0x24008521

080161e0 <__sinit>:
 80161e0:	b510      	push	{r4, lr}
 80161e2:	4604      	mov	r4, r0
 80161e4:	f7ff fff0 	bl	80161c8 <__sfp_lock_acquire>
 80161e8:	6a23      	ldr	r3, [r4, #32]
 80161ea:	b11b      	cbz	r3, 80161f4 <__sinit+0x14>
 80161ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161f0:	f7ff bff0 	b.w	80161d4 <__sfp_lock_release>
 80161f4:	4b04      	ldr	r3, [pc, #16]	@ (8016208 <__sinit+0x28>)
 80161f6:	6223      	str	r3, [r4, #32]
 80161f8:	4b04      	ldr	r3, [pc, #16]	@ (801620c <__sinit+0x2c>)
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d1f5      	bne.n	80161ec <__sinit+0xc>
 8016200:	f7ff ffc4 	bl	801618c <global_stdio_init.part.0>
 8016204:	e7f2      	b.n	80161ec <__sinit+0xc>
 8016206:	bf00      	nop
 8016208:	0801614d 	.word	0x0801614d
 801620c:	24008518 	.word	0x24008518

08016210 <_fwalk_sglue>:
 8016210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016214:	4607      	mov	r7, r0
 8016216:	4688      	mov	r8, r1
 8016218:	4614      	mov	r4, r2
 801621a:	2600      	movs	r6, #0
 801621c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016220:	f1b9 0901 	subs.w	r9, r9, #1
 8016224:	d505      	bpl.n	8016232 <_fwalk_sglue+0x22>
 8016226:	6824      	ldr	r4, [r4, #0]
 8016228:	2c00      	cmp	r4, #0
 801622a:	d1f7      	bne.n	801621c <_fwalk_sglue+0xc>
 801622c:	4630      	mov	r0, r6
 801622e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016232:	89ab      	ldrh	r3, [r5, #12]
 8016234:	2b01      	cmp	r3, #1
 8016236:	d907      	bls.n	8016248 <_fwalk_sglue+0x38>
 8016238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801623c:	3301      	adds	r3, #1
 801623e:	d003      	beq.n	8016248 <_fwalk_sglue+0x38>
 8016240:	4629      	mov	r1, r5
 8016242:	4638      	mov	r0, r7
 8016244:	47c0      	blx	r8
 8016246:	4306      	orrs	r6, r0
 8016248:	3568      	adds	r5, #104	@ 0x68
 801624a:	e7e9      	b.n	8016220 <_fwalk_sglue+0x10>

0801624c <iprintf>:
 801624c:	b40f      	push	{r0, r1, r2, r3}
 801624e:	b507      	push	{r0, r1, r2, lr}
 8016250:	4906      	ldr	r1, [pc, #24]	@ (801626c <iprintf+0x20>)
 8016252:	ab04      	add	r3, sp, #16
 8016254:	6808      	ldr	r0, [r1, #0]
 8016256:	f853 2b04 	ldr.w	r2, [r3], #4
 801625a:	6881      	ldr	r1, [r0, #8]
 801625c:	9301      	str	r3, [sp, #4]
 801625e:	f002 fd19 	bl	8018c94 <_vfiprintf_r>
 8016262:	b003      	add	sp, #12
 8016264:	f85d eb04 	ldr.w	lr, [sp], #4
 8016268:	b004      	add	sp, #16
 801626a:	4770      	bx	lr
 801626c:	2400003c 	.word	0x2400003c

08016270 <_puts_r>:
 8016270:	6a03      	ldr	r3, [r0, #32]
 8016272:	b570      	push	{r4, r5, r6, lr}
 8016274:	6884      	ldr	r4, [r0, #8]
 8016276:	4605      	mov	r5, r0
 8016278:	460e      	mov	r6, r1
 801627a:	b90b      	cbnz	r3, 8016280 <_puts_r+0x10>
 801627c:	f7ff ffb0 	bl	80161e0 <__sinit>
 8016280:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016282:	07db      	lsls	r3, r3, #31
 8016284:	d405      	bmi.n	8016292 <_puts_r+0x22>
 8016286:	89a3      	ldrh	r3, [r4, #12]
 8016288:	0598      	lsls	r0, r3, #22
 801628a:	d402      	bmi.n	8016292 <_puts_r+0x22>
 801628c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801628e:	f000 fa00 	bl	8016692 <__retarget_lock_acquire_recursive>
 8016292:	89a3      	ldrh	r3, [r4, #12]
 8016294:	0719      	lsls	r1, r3, #28
 8016296:	d502      	bpl.n	801629e <_puts_r+0x2e>
 8016298:	6923      	ldr	r3, [r4, #16]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d135      	bne.n	801630a <_puts_r+0x9a>
 801629e:	4621      	mov	r1, r4
 80162a0:	4628      	mov	r0, r5
 80162a2:	f000 f8e7 	bl	8016474 <__swsetup_r>
 80162a6:	b380      	cbz	r0, 801630a <_puts_r+0x9a>
 80162a8:	f04f 35ff 	mov.w	r5, #4294967295
 80162ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80162ae:	07da      	lsls	r2, r3, #31
 80162b0:	d405      	bmi.n	80162be <_puts_r+0x4e>
 80162b2:	89a3      	ldrh	r3, [r4, #12]
 80162b4:	059b      	lsls	r3, r3, #22
 80162b6:	d402      	bmi.n	80162be <_puts_r+0x4e>
 80162b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80162ba:	f000 f9eb 	bl	8016694 <__retarget_lock_release_recursive>
 80162be:	4628      	mov	r0, r5
 80162c0:	bd70      	pop	{r4, r5, r6, pc}
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	da04      	bge.n	80162d0 <_puts_r+0x60>
 80162c6:	69a2      	ldr	r2, [r4, #24]
 80162c8:	429a      	cmp	r2, r3
 80162ca:	dc17      	bgt.n	80162fc <_puts_r+0x8c>
 80162cc:	290a      	cmp	r1, #10
 80162ce:	d015      	beq.n	80162fc <_puts_r+0x8c>
 80162d0:	6823      	ldr	r3, [r4, #0]
 80162d2:	1c5a      	adds	r2, r3, #1
 80162d4:	6022      	str	r2, [r4, #0]
 80162d6:	7019      	strb	r1, [r3, #0]
 80162d8:	68a3      	ldr	r3, [r4, #8]
 80162da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80162de:	3b01      	subs	r3, #1
 80162e0:	60a3      	str	r3, [r4, #8]
 80162e2:	2900      	cmp	r1, #0
 80162e4:	d1ed      	bne.n	80162c2 <_puts_r+0x52>
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	da11      	bge.n	801630e <_puts_r+0x9e>
 80162ea:	4622      	mov	r2, r4
 80162ec:	210a      	movs	r1, #10
 80162ee:	4628      	mov	r0, r5
 80162f0:	f000 f881 	bl	80163f6 <__swbuf_r>
 80162f4:	3001      	adds	r0, #1
 80162f6:	d0d7      	beq.n	80162a8 <_puts_r+0x38>
 80162f8:	250a      	movs	r5, #10
 80162fa:	e7d7      	b.n	80162ac <_puts_r+0x3c>
 80162fc:	4622      	mov	r2, r4
 80162fe:	4628      	mov	r0, r5
 8016300:	f000 f879 	bl	80163f6 <__swbuf_r>
 8016304:	3001      	adds	r0, #1
 8016306:	d1e7      	bne.n	80162d8 <_puts_r+0x68>
 8016308:	e7ce      	b.n	80162a8 <_puts_r+0x38>
 801630a:	3e01      	subs	r6, #1
 801630c:	e7e4      	b.n	80162d8 <_puts_r+0x68>
 801630e:	6823      	ldr	r3, [r4, #0]
 8016310:	1c5a      	adds	r2, r3, #1
 8016312:	6022      	str	r2, [r4, #0]
 8016314:	220a      	movs	r2, #10
 8016316:	701a      	strb	r2, [r3, #0]
 8016318:	e7ee      	b.n	80162f8 <_puts_r+0x88>
	...

0801631c <puts>:
 801631c:	4b02      	ldr	r3, [pc, #8]	@ (8016328 <puts+0xc>)
 801631e:	4601      	mov	r1, r0
 8016320:	6818      	ldr	r0, [r3, #0]
 8016322:	f7ff bfa5 	b.w	8016270 <_puts_r>
 8016326:	bf00      	nop
 8016328:	2400003c 	.word	0x2400003c

0801632c <siprintf>:
 801632c:	b40e      	push	{r1, r2, r3}
 801632e:	b510      	push	{r4, lr}
 8016330:	b09d      	sub	sp, #116	@ 0x74
 8016332:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016334:	9002      	str	r0, [sp, #8]
 8016336:	9006      	str	r0, [sp, #24]
 8016338:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801633c:	480a      	ldr	r0, [pc, #40]	@ (8016368 <siprintf+0x3c>)
 801633e:	9107      	str	r1, [sp, #28]
 8016340:	9104      	str	r1, [sp, #16]
 8016342:	490a      	ldr	r1, [pc, #40]	@ (801636c <siprintf+0x40>)
 8016344:	f853 2b04 	ldr.w	r2, [r3], #4
 8016348:	9105      	str	r1, [sp, #20]
 801634a:	2400      	movs	r4, #0
 801634c:	a902      	add	r1, sp, #8
 801634e:	6800      	ldr	r0, [r0, #0]
 8016350:	9301      	str	r3, [sp, #4]
 8016352:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016354:	f002 fb78 	bl	8018a48 <_svfiprintf_r>
 8016358:	9b02      	ldr	r3, [sp, #8]
 801635a:	701c      	strb	r4, [r3, #0]
 801635c:	b01d      	add	sp, #116	@ 0x74
 801635e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016362:	b003      	add	sp, #12
 8016364:	4770      	bx	lr
 8016366:	bf00      	nop
 8016368:	2400003c 	.word	0x2400003c
 801636c:	ffff0208 	.word	0xffff0208

08016370 <__sread>:
 8016370:	b510      	push	{r4, lr}
 8016372:	460c      	mov	r4, r1
 8016374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016378:	f000 f93c 	bl	80165f4 <_read_r>
 801637c:	2800      	cmp	r0, #0
 801637e:	bfab      	itete	ge
 8016380:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016382:	89a3      	ldrhlt	r3, [r4, #12]
 8016384:	181b      	addge	r3, r3, r0
 8016386:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801638a:	bfac      	ite	ge
 801638c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801638e:	81a3      	strhlt	r3, [r4, #12]
 8016390:	bd10      	pop	{r4, pc}

08016392 <__swrite>:
 8016392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016396:	461f      	mov	r7, r3
 8016398:	898b      	ldrh	r3, [r1, #12]
 801639a:	05db      	lsls	r3, r3, #23
 801639c:	4605      	mov	r5, r0
 801639e:	460c      	mov	r4, r1
 80163a0:	4616      	mov	r6, r2
 80163a2:	d505      	bpl.n	80163b0 <__swrite+0x1e>
 80163a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163a8:	2302      	movs	r3, #2
 80163aa:	2200      	movs	r2, #0
 80163ac:	f000 f910 	bl	80165d0 <_lseek_r>
 80163b0:	89a3      	ldrh	r3, [r4, #12]
 80163b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80163ba:	81a3      	strh	r3, [r4, #12]
 80163bc:	4632      	mov	r2, r6
 80163be:	463b      	mov	r3, r7
 80163c0:	4628      	mov	r0, r5
 80163c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163c6:	f000 b927 	b.w	8016618 <_write_r>

080163ca <__sseek>:
 80163ca:	b510      	push	{r4, lr}
 80163cc:	460c      	mov	r4, r1
 80163ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163d2:	f000 f8fd 	bl	80165d0 <_lseek_r>
 80163d6:	1c43      	adds	r3, r0, #1
 80163d8:	89a3      	ldrh	r3, [r4, #12]
 80163da:	bf15      	itete	ne
 80163dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80163de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80163e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80163e6:	81a3      	strheq	r3, [r4, #12]
 80163e8:	bf18      	it	ne
 80163ea:	81a3      	strhne	r3, [r4, #12]
 80163ec:	bd10      	pop	{r4, pc}

080163ee <__sclose>:
 80163ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163f2:	f000 b8dd 	b.w	80165b0 <_close_r>

080163f6 <__swbuf_r>:
 80163f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163f8:	460e      	mov	r6, r1
 80163fa:	4614      	mov	r4, r2
 80163fc:	4605      	mov	r5, r0
 80163fe:	b118      	cbz	r0, 8016408 <__swbuf_r+0x12>
 8016400:	6a03      	ldr	r3, [r0, #32]
 8016402:	b90b      	cbnz	r3, 8016408 <__swbuf_r+0x12>
 8016404:	f7ff feec 	bl	80161e0 <__sinit>
 8016408:	69a3      	ldr	r3, [r4, #24]
 801640a:	60a3      	str	r3, [r4, #8]
 801640c:	89a3      	ldrh	r3, [r4, #12]
 801640e:	071a      	lsls	r2, r3, #28
 8016410:	d501      	bpl.n	8016416 <__swbuf_r+0x20>
 8016412:	6923      	ldr	r3, [r4, #16]
 8016414:	b943      	cbnz	r3, 8016428 <__swbuf_r+0x32>
 8016416:	4621      	mov	r1, r4
 8016418:	4628      	mov	r0, r5
 801641a:	f000 f82b 	bl	8016474 <__swsetup_r>
 801641e:	b118      	cbz	r0, 8016428 <__swbuf_r+0x32>
 8016420:	f04f 37ff 	mov.w	r7, #4294967295
 8016424:	4638      	mov	r0, r7
 8016426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016428:	6823      	ldr	r3, [r4, #0]
 801642a:	6922      	ldr	r2, [r4, #16]
 801642c:	1a98      	subs	r0, r3, r2
 801642e:	6963      	ldr	r3, [r4, #20]
 8016430:	b2f6      	uxtb	r6, r6
 8016432:	4283      	cmp	r3, r0
 8016434:	4637      	mov	r7, r6
 8016436:	dc05      	bgt.n	8016444 <__swbuf_r+0x4e>
 8016438:	4621      	mov	r1, r4
 801643a:	4628      	mov	r0, r5
 801643c:	f002 fdc6 	bl	8018fcc <_fflush_r>
 8016440:	2800      	cmp	r0, #0
 8016442:	d1ed      	bne.n	8016420 <__swbuf_r+0x2a>
 8016444:	68a3      	ldr	r3, [r4, #8]
 8016446:	3b01      	subs	r3, #1
 8016448:	60a3      	str	r3, [r4, #8]
 801644a:	6823      	ldr	r3, [r4, #0]
 801644c:	1c5a      	adds	r2, r3, #1
 801644e:	6022      	str	r2, [r4, #0]
 8016450:	701e      	strb	r6, [r3, #0]
 8016452:	6962      	ldr	r2, [r4, #20]
 8016454:	1c43      	adds	r3, r0, #1
 8016456:	429a      	cmp	r2, r3
 8016458:	d004      	beq.n	8016464 <__swbuf_r+0x6e>
 801645a:	89a3      	ldrh	r3, [r4, #12]
 801645c:	07db      	lsls	r3, r3, #31
 801645e:	d5e1      	bpl.n	8016424 <__swbuf_r+0x2e>
 8016460:	2e0a      	cmp	r6, #10
 8016462:	d1df      	bne.n	8016424 <__swbuf_r+0x2e>
 8016464:	4621      	mov	r1, r4
 8016466:	4628      	mov	r0, r5
 8016468:	f002 fdb0 	bl	8018fcc <_fflush_r>
 801646c:	2800      	cmp	r0, #0
 801646e:	d0d9      	beq.n	8016424 <__swbuf_r+0x2e>
 8016470:	e7d6      	b.n	8016420 <__swbuf_r+0x2a>
	...

08016474 <__swsetup_r>:
 8016474:	b538      	push	{r3, r4, r5, lr}
 8016476:	4b29      	ldr	r3, [pc, #164]	@ (801651c <__swsetup_r+0xa8>)
 8016478:	4605      	mov	r5, r0
 801647a:	6818      	ldr	r0, [r3, #0]
 801647c:	460c      	mov	r4, r1
 801647e:	b118      	cbz	r0, 8016488 <__swsetup_r+0x14>
 8016480:	6a03      	ldr	r3, [r0, #32]
 8016482:	b90b      	cbnz	r3, 8016488 <__swsetup_r+0x14>
 8016484:	f7ff feac 	bl	80161e0 <__sinit>
 8016488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801648c:	0719      	lsls	r1, r3, #28
 801648e:	d422      	bmi.n	80164d6 <__swsetup_r+0x62>
 8016490:	06da      	lsls	r2, r3, #27
 8016492:	d407      	bmi.n	80164a4 <__swsetup_r+0x30>
 8016494:	2209      	movs	r2, #9
 8016496:	602a      	str	r2, [r5, #0]
 8016498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801649c:	81a3      	strh	r3, [r4, #12]
 801649e:	f04f 30ff 	mov.w	r0, #4294967295
 80164a2:	e033      	b.n	801650c <__swsetup_r+0x98>
 80164a4:	0758      	lsls	r0, r3, #29
 80164a6:	d512      	bpl.n	80164ce <__swsetup_r+0x5a>
 80164a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80164aa:	b141      	cbz	r1, 80164be <__swsetup_r+0x4a>
 80164ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80164b0:	4299      	cmp	r1, r3
 80164b2:	d002      	beq.n	80164ba <__swsetup_r+0x46>
 80164b4:	4628      	mov	r0, r5
 80164b6:	f000 ff09 	bl	80172cc <_free_r>
 80164ba:	2300      	movs	r3, #0
 80164bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80164be:	89a3      	ldrh	r3, [r4, #12]
 80164c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80164c4:	81a3      	strh	r3, [r4, #12]
 80164c6:	2300      	movs	r3, #0
 80164c8:	6063      	str	r3, [r4, #4]
 80164ca:	6923      	ldr	r3, [r4, #16]
 80164cc:	6023      	str	r3, [r4, #0]
 80164ce:	89a3      	ldrh	r3, [r4, #12]
 80164d0:	f043 0308 	orr.w	r3, r3, #8
 80164d4:	81a3      	strh	r3, [r4, #12]
 80164d6:	6923      	ldr	r3, [r4, #16]
 80164d8:	b94b      	cbnz	r3, 80164ee <__swsetup_r+0x7a>
 80164da:	89a3      	ldrh	r3, [r4, #12]
 80164dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80164e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80164e4:	d003      	beq.n	80164ee <__swsetup_r+0x7a>
 80164e6:	4621      	mov	r1, r4
 80164e8:	4628      	mov	r0, r5
 80164ea:	f002 fdcf 	bl	801908c <__smakebuf_r>
 80164ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164f2:	f013 0201 	ands.w	r2, r3, #1
 80164f6:	d00a      	beq.n	801650e <__swsetup_r+0x9a>
 80164f8:	2200      	movs	r2, #0
 80164fa:	60a2      	str	r2, [r4, #8]
 80164fc:	6962      	ldr	r2, [r4, #20]
 80164fe:	4252      	negs	r2, r2
 8016500:	61a2      	str	r2, [r4, #24]
 8016502:	6922      	ldr	r2, [r4, #16]
 8016504:	b942      	cbnz	r2, 8016518 <__swsetup_r+0xa4>
 8016506:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801650a:	d1c5      	bne.n	8016498 <__swsetup_r+0x24>
 801650c:	bd38      	pop	{r3, r4, r5, pc}
 801650e:	0799      	lsls	r1, r3, #30
 8016510:	bf58      	it	pl
 8016512:	6962      	ldrpl	r2, [r4, #20]
 8016514:	60a2      	str	r2, [r4, #8]
 8016516:	e7f4      	b.n	8016502 <__swsetup_r+0x8e>
 8016518:	2000      	movs	r0, #0
 801651a:	e7f7      	b.n	801650c <__swsetup_r+0x98>
 801651c:	2400003c 	.word	0x2400003c

08016520 <memcmp>:
 8016520:	b510      	push	{r4, lr}
 8016522:	3901      	subs	r1, #1
 8016524:	4402      	add	r2, r0
 8016526:	4290      	cmp	r0, r2
 8016528:	d101      	bne.n	801652e <memcmp+0xe>
 801652a:	2000      	movs	r0, #0
 801652c:	e005      	b.n	801653a <memcmp+0x1a>
 801652e:	7803      	ldrb	r3, [r0, #0]
 8016530:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016534:	42a3      	cmp	r3, r4
 8016536:	d001      	beq.n	801653c <memcmp+0x1c>
 8016538:	1b18      	subs	r0, r3, r4
 801653a:	bd10      	pop	{r4, pc}
 801653c:	3001      	adds	r0, #1
 801653e:	e7f2      	b.n	8016526 <memcmp+0x6>

08016540 <memmove>:
 8016540:	4288      	cmp	r0, r1
 8016542:	b510      	push	{r4, lr}
 8016544:	eb01 0402 	add.w	r4, r1, r2
 8016548:	d902      	bls.n	8016550 <memmove+0x10>
 801654a:	4284      	cmp	r4, r0
 801654c:	4623      	mov	r3, r4
 801654e:	d807      	bhi.n	8016560 <memmove+0x20>
 8016550:	1e43      	subs	r3, r0, #1
 8016552:	42a1      	cmp	r1, r4
 8016554:	d008      	beq.n	8016568 <memmove+0x28>
 8016556:	f811 2b01 	ldrb.w	r2, [r1], #1
 801655a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801655e:	e7f8      	b.n	8016552 <memmove+0x12>
 8016560:	4402      	add	r2, r0
 8016562:	4601      	mov	r1, r0
 8016564:	428a      	cmp	r2, r1
 8016566:	d100      	bne.n	801656a <memmove+0x2a>
 8016568:	bd10      	pop	{r4, pc}
 801656a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801656e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016572:	e7f7      	b.n	8016564 <memmove+0x24>

08016574 <memset>:
 8016574:	4402      	add	r2, r0
 8016576:	4603      	mov	r3, r0
 8016578:	4293      	cmp	r3, r2
 801657a:	d100      	bne.n	801657e <memset+0xa>
 801657c:	4770      	bx	lr
 801657e:	f803 1b01 	strb.w	r1, [r3], #1
 8016582:	e7f9      	b.n	8016578 <memset+0x4>

08016584 <strncmp>:
 8016584:	b510      	push	{r4, lr}
 8016586:	b16a      	cbz	r2, 80165a4 <strncmp+0x20>
 8016588:	3901      	subs	r1, #1
 801658a:	1884      	adds	r4, r0, r2
 801658c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016590:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016594:	429a      	cmp	r2, r3
 8016596:	d103      	bne.n	80165a0 <strncmp+0x1c>
 8016598:	42a0      	cmp	r0, r4
 801659a:	d001      	beq.n	80165a0 <strncmp+0x1c>
 801659c:	2a00      	cmp	r2, #0
 801659e:	d1f5      	bne.n	801658c <strncmp+0x8>
 80165a0:	1ad0      	subs	r0, r2, r3
 80165a2:	bd10      	pop	{r4, pc}
 80165a4:	4610      	mov	r0, r2
 80165a6:	e7fc      	b.n	80165a2 <strncmp+0x1e>

080165a8 <_localeconv_r>:
 80165a8:	4800      	ldr	r0, [pc, #0]	@ (80165ac <_localeconv_r+0x4>)
 80165aa:	4770      	bx	lr
 80165ac:	2400017c 	.word	0x2400017c

080165b0 <_close_r>:
 80165b0:	b538      	push	{r3, r4, r5, lr}
 80165b2:	4d06      	ldr	r5, [pc, #24]	@ (80165cc <_close_r+0x1c>)
 80165b4:	2300      	movs	r3, #0
 80165b6:	4604      	mov	r4, r0
 80165b8:	4608      	mov	r0, r1
 80165ba:	602b      	str	r3, [r5, #0]
 80165bc:	f7eb fc44 	bl	8001e48 <_close>
 80165c0:	1c43      	adds	r3, r0, #1
 80165c2:	d102      	bne.n	80165ca <_close_r+0x1a>
 80165c4:	682b      	ldr	r3, [r5, #0]
 80165c6:	b103      	cbz	r3, 80165ca <_close_r+0x1a>
 80165c8:	6023      	str	r3, [r4, #0]
 80165ca:	bd38      	pop	{r3, r4, r5, pc}
 80165cc:	2400851c 	.word	0x2400851c

080165d0 <_lseek_r>:
 80165d0:	b538      	push	{r3, r4, r5, lr}
 80165d2:	4d07      	ldr	r5, [pc, #28]	@ (80165f0 <_lseek_r+0x20>)
 80165d4:	4604      	mov	r4, r0
 80165d6:	4608      	mov	r0, r1
 80165d8:	4611      	mov	r1, r2
 80165da:	2200      	movs	r2, #0
 80165dc:	602a      	str	r2, [r5, #0]
 80165de:	461a      	mov	r2, r3
 80165e0:	f7eb fc59 	bl	8001e96 <_lseek>
 80165e4:	1c43      	adds	r3, r0, #1
 80165e6:	d102      	bne.n	80165ee <_lseek_r+0x1e>
 80165e8:	682b      	ldr	r3, [r5, #0]
 80165ea:	b103      	cbz	r3, 80165ee <_lseek_r+0x1e>
 80165ec:	6023      	str	r3, [r4, #0]
 80165ee:	bd38      	pop	{r3, r4, r5, pc}
 80165f0:	2400851c 	.word	0x2400851c

080165f4 <_read_r>:
 80165f4:	b538      	push	{r3, r4, r5, lr}
 80165f6:	4d07      	ldr	r5, [pc, #28]	@ (8016614 <_read_r+0x20>)
 80165f8:	4604      	mov	r4, r0
 80165fa:	4608      	mov	r0, r1
 80165fc:	4611      	mov	r1, r2
 80165fe:	2200      	movs	r2, #0
 8016600:	602a      	str	r2, [r5, #0]
 8016602:	461a      	mov	r2, r3
 8016604:	f7eb fbe7 	bl	8001dd6 <_read>
 8016608:	1c43      	adds	r3, r0, #1
 801660a:	d102      	bne.n	8016612 <_read_r+0x1e>
 801660c:	682b      	ldr	r3, [r5, #0]
 801660e:	b103      	cbz	r3, 8016612 <_read_r+0x1e>
 8016610:	6023      	str	r3, [r4, #0]
 8016612:	bd38      	pop	{r3, r4, r5, pc}
 8016614:	2400851c 	.word	0x2400851c

08016618 <_write_r>:
 8016618:	b538      	push	{r3, r4, r5, lr}
 801661a:	4d07      	ldr	r5, [pc, #28]	@ (8016638 <_write_r+0x20>)
 801661c:	4604      	mov	r4, r0
 801661e:	4608      	mov	r0, r1
 8016620:	4611      	mov	r1, r2
 8016622:	2200      	movs	r2, #0
 8016624:	602a      	str	r2, [r5, #0]
 8016626:	461a      	mov	r2, r3
 8016628:	f7eb fbf2 	bl	8001e10 <_write>
 801662c:	1c43      	adds	r3, r0, #1
 801662e:	d102      	bne.n	8016636 <_write_r+0x1e>
 8016630:	682b      	ldr	r3, [r5, #0]
 8016632:	b103      	cbz	r3, 8016636 <_write_r+0x1e>
 8016634:	6023      	str	r3, [r4, #0]
 8016636:	bd38      	pop	{r3, r4, r5, pc}
 8016638:	2400851c 	.word	0x2400851c

0801663c <__errno>:
 801663c:	4b01      	ldr	r3, [pc, #4]	@ (8016644 <__errno+0x8>)
 801663e:	6818      	ldr	r0, [r3, #0]
 8016640:	4770      	bx	lr
 8016642:	bf00      	nop
 8016644:	2400003c 	.word	0x2400003c

08016648 <__libc_init_array>:
 8016648:	b570      	push	{r4, r5, r6, lr}
 801664a:	4d0d      	ldr	r5, [pc, #52]	@ (8016680 <__libc_init_array+0x38>)
 801664c:	4c0d      	ldr	r4, [pc, #52]	@ (8016684 <__libc_init_array+0x3c>)
 801664e:	1b64      	subs	r4, r4, r5
 8016650:	10a4      	asrs	r4, r4, #2
 8016652:	2600      	movs	r6, #0
 8016654:	42a6      	cmp	r6, r4
 8016656:	d109      	bne.n	801666c <__libc_init_array+0x24>
 8016658:	4d0b      	ldr	r5, [pc, #44]	@ (8016688 <__libc_init_array+0x40>)
 801665a:	4c0c      	ldr	r4, [pc, #48]	@ (801668c <__libc_init_array+0x44>)
 801665c:	f003 f978 	bl	8019950 <_init>
 8016660:	1b64      	subs	r4, r4, r5
 8016662:	10a4      	asrs	r4, r4, #2
 8016664:	2600      	movs	r6, #0
 8016666:	42a6      	cmp	r6, r4
 8016668:	d105      	bne.n	8016676 <__libc_init_array+0x2e>
 801666a:	bd70      	pop	{r4, r5, r6, pc}
 801666c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016670:	4798      	blx	r3
 8016672:	3601      	adds	r6, #1
 8016674:	e7ee      	b.n	8016654 <__libc_init_array+0xc>
 8016676:	f855 3b04 	ldr.w	r3, [r5], #4
 801667a:	4798      	blx	r3
 801667c:	3601      	adds	r6, #1
 801667e:	e7f2      	b.n	8016666 <__libc_init_array+0x1e>
 8016680:	0801ca28 	.word	0x0801ca28
 8016684:	0801ca28 	.word	0x0801ca28
 8016688:	0801ca28 	.word	0x0801ca28
 801668c:	0801ca2c 	.word	0x0801ca2c

08016690 <__retarget_lock_init_recursive>:
 8016690:	4770      	bx	lr

08016692 <__retarget_lock_acquire_recursive>:
 8016692:	4770      	bx	lr

08016694 <__retarget_lock_release_recursive>:
 8016694:	4770      	bx	lr

08016696 <memcpy>:
 8016696:	440a      	add	r2, r1
 8016698:	4291      	cmp	r1, r2
 801669a:	f100 33ff 	add.w	r3, r0, #4294967295
 801669e:	d100      	bne.n	80166a2 <memcpy+0xc>
 80166a0:	4770      	bx	lr
 80166a2:	b510      	push	{r4, lr}
 80166a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80166ac:	4291      	cmp	r1, r2
 80166ae:	d1f9      	bne.n	80166a4 <memcpy+0xe>
 80166b0:	bd10      	pop	{r4, pc}
	...

080166b4 <nanf>:
 80166b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80166bc <nanf+0x8>
 80166b8:	4770      	bx	lr
 80166ba:	bf00      	nop
 80166bc:	7fc00000 	.word	0x7fc00000

080166c0 <__assert_func>:
 80166c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80166c2:	4614      	mov	r4, r2
 80166c4:	461a      	mov	r2, r3
 80166c6:	4b09      	ldr	r3, [pc, #36]	@ (80166ec <__assert_func+0x2c>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	4605      	mov	r5, r0
 80166cc:	68d8      	ldr	r0, [r3, #12]
 80166ce:	b14c      	cbz	r4, 80166e4 <__assert_func+0x24>
 80166d0:	4b07      	ldr	r3, [pc, #28]	@ (80166f0 <__assert_func+0x30>)
 80166d2:	9100      	str	r1, [sp, #0]
 80166d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80166d8:	4906      	ldr	r1, [pc, #24]	@ (80166f4 <__assert_func+0x34>)
 80166da:	462b      	mov	r3, r5
 80166dc:	f002 fc9e 	bl	801901c <fiprintf>
 80166e0:	f002 fd4a 	bl	8019178 <abort>
 80166e4:	4b04      	ldr	r3, [pc, #16]	@ (80166f8 <__assert_func+0x38>)
 80166e6:	461c      	mov	r4, r3
 80166e8:	e7f3      	b.n	80166d2 <__assert_func+0x12>
 80166ea:	bf00      	nop
 80166ec:	2400003c 	.word	0x2400003c
 80166f0:	0801c646 	.word	0x0801c646
 80166f4:	0801c653 	.word	0x0801c653
 80166f8:	0801c681 	.word	0x0801c681

080166fc <quorem>:
 80166fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016700:	6903      	ldr	r3, [r0, #16]
 8016702:	690c      	ldr	r4, [r1, #16]
 8016704:	42a3      	cmp	r3, r4
 8016706:	4607      	mov	r7, r0
 8016708:	db7e      	blt.n	8016808 <quorem+0x10c>
 801670a:	3c01      	subs	r4, #1
 801670c:	f101 0814 	add.w	r8, r1, #20
 8016710:	00a3      	lsls	r3, r4, #2
 8016712:	f100 0514 	add.w	r5, r0, #20
 8016716:	9300      	str	r3, [sp, #0]
 8016718:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801671c:	9301      	str	r3, [sp, #4]
 801671e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016726:	3301      	adds	r3, #1
 8016728:	429a      	cmp	r2, r3
 801672a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801672e:	fbb2 f6f3 	udiv	r6, r2, r3
 8016732:	d32e      	bcc.n	8016792 <quorem+0x96>
 8016734:	f04f 0a00 	mov.w	sl, #0
 8016738:	46c4      	mov	ip, r8
 801673a:	46ae      	mov	lr, r5
 801673c:	46d3      	mov	fp, sl
 801673e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016742:	b298      	uxth	r0, r3
 8016744:	fb06 a000 	mla	r0, r6, r0, sl
 8016748:	0c02      	lsrs	r2, r0, #16
 801674a:	0c1b      	lsrs	r3, r3, #16
 801674c:	fb06 2303 	mla	r3, r6, r3, r2
 8016750:	f8de 2000 	ldr.w	r2, [lr]
 8016754:	b280      	uxth	r0, r0
 8016756:	b292      	uxth	r2, r2
 8016758:	1a12      	subs	r2, r2, r0
 801675a:	445a      	add	r2, fp
 801675c:	f8de 0000 	ldr.w	r0, [lr]
 8016760:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016764:	b29b      	uxth	r3, r3
 8016766:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801676a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801676e:	b292      	uxth	r2, r2
 8016770:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016774:	45e1      	cmp	r9, ip
 8016776:	f84e 2b04 	str.w	r2, [lr], #4
 801677a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801677e:	d2de      	bcs.n	801673e <quorem+0x42>
 8016780:	9b00      	ldr	r3, [sp, #0]
 8016782:	58eb      	ldr	r3, [r5, r3]
 8016784:	b92b      	cbnz	r3, 8016792 <quorem+0x96>
 8016786:	9b01      	ldr	r3, [sp, #4]
 8016788:	3b04      	subs	r3, #4
 801678a:	429d      	cmp	r5, r3
 801678c:	461a      	mov	r2, r3
 801678e:	d32f      	bcc.n	80167f0 <quorem+0xf4>
 8016790:	613c      	str	r4, [r7, #16]
 8016792:	4638      	mov	r0, r7
 8016794:	f001 f956 	bl	8017a44 <__mcmp>
 8016798:	2800      	cmp	r0, #0
 801679a:	db25      	blt.n	80167e8 <quorem+0xec>
 801679c:	4629      	mov	r1, r5
 801679e:	2000      	movs	r0, #0
 80167a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80167a4:	f8d1 c000 	ldr.w	ip, [r1]
 80167a8:	fa1f fe82 	uxth.w	lr, r2
 80167ac:	fa1f f38c 	uxth.w	r3, ip
 80167b0:	eba3 030e 	sub.w	r3, r3, lr
 80167b4:	4403      	add	r3, r0
 80167b6:	0c12      	lsrs	r2, r2, #16
 80167b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80167bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80167c0:	b29b      	uxth	r3, r3
 80167c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167c6:	45c1      	cmp	r9, r8
 80167c8:	f841 3b04 	str.w	r3, [r1], #4
 80167cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80167d0:	d2e6      	bcs.n	80167a0 <quorem+0xa4>
 80167d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80167d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80167da:	b922      	cbnz	r2, 80167e6 <quorem+0xea>
 80167dc:	3b04      	subs	r3, #4
 80167de:	429d      	cmp	r5, r3
 80167e0:	461a      	mov	r2, r3
 80167e2:	d30b      	bcc.n	80167fc <quorem+0x100>
 80167e4:	613c      	str	r4, [r7, #16]
 80167e6:	3601      	adds	r6, #1
 80167e8:	4630      	mov	r0, r6
 80167ea:	b003      	add	sp, #12
 80167ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f0:	6812      	ldr	r2, [r2, #0]
 80167f2:	3b04      	subs	r3, #4
 80167f4:	2a00      	cmp	r2, #0
 80167f6:	d1cb      	bne.n	8016790 <quorem+0x94>
 80167f8:	3c01      	subs	r4, #1
 80167fa:	e7c6      	b.n	801678a <quorem+0x8e>
 80167fc:	6812      	ldr	r2, [r2, #0]
 80167fe:	3b04      	subs	r3, #4
 8016800:	2a00      	cmp	r2, #0
 8016802:	d1ef      	bne.n	80167e4 <quorem+0xe8>
 8016804:	3c01      	subs	r4, #1
 8016806:	e7ea      	b.n	80167de <quorem+0xe2>
 8016808:	2000      	movs	r0, #0
 801680a:	e7ee      	b.n	80167ea <quorem+0xee>
 801680c:	0000      	movs	r0, r0
	...

08016810 <_dtoa_r>:
 8016810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016814:	ed2d 8b02 	vpush	{d8}
 8016818:	69c7      	ldr	r7, [r0, #28]
 801681a:	b091      	sub	sp, #68	@ 0x44
 801681c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016820:	ec55 4b10 	vmov	r4, r5, d0
 8016824:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8016826:	9107      	str	r1, [sp, #28]
 8016828:	4681      	mov	r9, r0
 801682a:	9209      	str	r2, [sp, #36]	@ 0x24
 801682c:	930d      	str	r3, [sp, #52]	@ 0x34
 801682e:	b97f      	cbnz	r7, 8016850 <_dtoa_r+0x40>
 8016830:	2010      	movs	r0, #16
 8016832:	f000 fd95 	bl	8017360 <malloc>
 8016836:	4602      	mov	r2, r0
 8016838:	f8c9 001c 	str.w	r0, [r9, #28]
 801683c:	b920      	cbnz	r0, 8016848 <_dtoa_r+0x38>
 801683e:	4ba0      	ldr	r3, [pc, #640]	@ (8016ac0 <_dtoa_r+0x2b0>)
 8016840:	21ef      	movs	r1, #239	@ 0xef
 8016842:	48a0      	ldr	r0, [pc, #640]	@ (8016ac4 <_dtoa_r+0x2b4>)
 8016844:	f7ff ff3c 	bl	80166c0 <__assert_func>
 8016848:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801684c:	6007      	str	r7, [r0, #0]
 801684e:	60c7      	str	r7, [r0, #12]
 8016850:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016854:	6819      	ldr	r1, [r3, #0]
 8016856:	b159      	cbz	r1, 8016870 <_dtoa_r+0x60>
 8016858:	685a      	ldr	r2, [r3, #4]
 801685a:	604a      	str	r2, [r1, #4]
 801685c:	2301      	movs	r3, #1
 801685e:	4093      	lsls	r3, r2
 8016860:	608b      	str	r3, [r1, #8]
 8016862:	4648      	mov	r0, r9
 8016864:	f000 fe72 	bl	801754c <_Bfree>
 8016868:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801686c:	2200      	movs	r2, #0
 801686e:	601a      	str	r2, [r3, #0]
 8016870:	1e2b      	subs	r3, r5, #0
 8016872:	bfbb      	ittet	lt
 8016874:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016878:	9303      	strlt	r3, [sp, #12]
 801687a:	2300      	movge	r3, #0
 801687c:	2201      	movlt	r2, #1
 801687e:	bfac      	ite	ge
 8016880:	6033      	strge	r3, [r6, #0]
 8016882:	6032      	strlt	r2, [r6, #0]
 8016884:	4b90      	ldr	r3, [pc, #576]	@ (8016ac8 <_dtoa_r+0x2b8>)
 8016886:	9e03      	ldr	r6, [sp, #12]
 8016888:	43b3      	bics	r3, r6
 801688a:	d110      	bne.n	80168ae <_dtoa_r+0x9e>
 801688c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801688e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016892:	6013      	str	r3, [r2, #0]
 8016894:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8016898:	4323      	orrs	r3, r4
 801689a:	f000 84e6 	beq.w	801726a <_dtoa_r+0xa5a>
 801689e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80168a0:	4f8a      	ldr	r7, [pc, #552]	@ (8016acc <_dtoa_r+0x2bc>)
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	f000 84e8 	beq.w	8017278 <_dtoa_r+0xa68>
 80168a8:	1cfb      	adds	r3, r7, #3
 80168aa:	f000 bce3 	b.w	8017274 <_dtoa_r+0xa64>
 80168ae:	ed9d 8b02 	vldr	d8, [sp, #8]
 80168b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80168b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ba:	d10a      	bne.n	80168d2 <_dtoa_r+0xc2>
 80168bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80168be:	2301      	movs	r3, #1
 80168c0:	6013      	str	r3, [r2, #0]
 80168c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80168c4:	b113      	cbz	r3, 80168cc <_dtoa_r+0xbc>
 80168c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80168c8:	4b81      	ldr	r3, [pc, #516]	@ (8016ad0 <_dtoa_r+0x2c0>)
 80168ca:	6013      	str	r3, [r2, #0]
 80168cc:	4f81      	ldr	r7, [pc, #516]	@ (8016ad4 <_dtoa_r+0x2c4>)
 80168ce:	f000 bcd3 	b.w	8017278 <_dtoa_r+0xa68>
 80168d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80168d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80168d6:	4648      	mov	r0, r9
 80168d8:	eeb0 0b48 	vmov.f64	d0, d8
 80168dc:	f001 f9d2 	bl	8017c84 <__d2b>
 80168e0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80168e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80168e6:	9001      	str	r0, [sp, #4]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d045      	beq.n	8016978 <_dtoa_r+0x168>
 80168ec:	eeb0 7b48 	vmov.f64	d7, d8
 80168f0:	ee18 1a90 	vmov	r1, s17
 80168f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80168f8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80168fc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8016900:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016904:	2500      	movs	r5, #0
 8016906:	ee07 1a90 	vmov	s15, r1
 801690a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801690e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016aa8 <_dtoa_r+0x298>
 8016912:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016916:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8016ab0 <_dtoa_r+0x2a0>
 801691a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801691e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016ab8 <_dtoa_r+0x2a8>
 8016922:	ee07 3a90 	vmov	s15, r3
 8016926:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801692a:	eeb0 7b46 	vmov.f64	d7, d6
 801692e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8016932:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8016936:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801693e:	ee16 8a90 	vmov	r8, s13
 8016942:	d508      	bpl.n	8016956 <_dtoa_r+0x146>
 8016944:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016948:	eeb4 6b47 	vcmp.f64	d6, d7
 801694c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016950:	bf18      	it	ne
 8016952:	f108 38ff 	addne.w	r8, r8, #4294967295
 8016956:	f1b8 0f16 	cmp.w	r8, #22
 801695a:	d82b      	bhi.n	80169b4 <_dtoa_r+0x1a4>
 801695c:	495e      	ldr	r1, [pc, #376]	@ (8016ad8 <_dtoa_r+0x2c8>)
 801695e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8016962:	ed91 7b00 	vldr	d7, [r1]
 8016966:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801696a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801696e:	d501      	bpl.n	8016974 <_dtoa_r+0x164>
 8016970:	f108 38ff 	add.w	r8, r8, #4294967295
 8016974:	2100      	movs	r1, #0
 8016976:	e01e      	b.n	80169b6 <_dtoa_r+0x1a6>
 8016978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801697a:	4413      	add	r3, r2
 801697c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8016980:	2920      	cmp	r1, #32
 8016982:	bfc1      	itttt	gt
 8016984:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8016988:	408e      	lslgt	r6, r1
 801698a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801698e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8016992:	bfd6      	itet	le
 8016994:	f1c1 0120 	rsble	r1, r1, #32
 8016998:	4331      	orrgt	r1, r6
 801699a:	fa04 f101 	lslle.w	r1, r4, r1
 801699e:	ee07 1a90 	vmov	s15, r1
 80169a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80169a6:	3b01      	subs	r3, #1
 80169a8:	ee17 1a90 	vmov	r1, s15
 80169ac:	2501      	movs	r5, #1
 80169ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80169b2:	e7a8      	b.n	8016906 <_dtoa_r+0xf6>
 80169b4:	2101      	movs	r1, #1
 80169b6:	1ad2      	subs	r2, r2, r3
 80169b8:	1e53      	subs	r3, r2, #1
 80169ba:	9306      	str	r3, [sp, #24]
 80169bc:	bf45      	ittet	mi
 80169be:	f1c2 0301 	rsbmi	r3, r2, #1
 80169c2:	9304      	strmi	r3, [sp, #16]
 80169c4:	2300      	movpl	r3, #0
 80169c6:	2300      	movmi	r3, #0
 80169c8:	bf4c      	ite	mi
 80169ca:	9306      	strmi	r3, [sp, #24]
 80169cc:	9304      	strpl	r3, [sp, #16]
 80169ce:	f1b8 0f00 	cmp.w	r8, #0
 80169d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80169d4:	db18      	blt.n	8016a08 <_dtoa_r+0x1f8>
 80169d6:	9b06      	ldr	r3, [sp, #24]
 80169d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80169dc:	4443      	add	r3, r8
 80169de:	9306      	str	r3, [sp, #24]
 80169e0:	2300      	movs	r3, #0
 80169e2:	9a07      	ldr	r2, [sp, #28]
 80169e4:	2a09      	cmp	r2, #9
 80169e6:	d845      	bhi.n	8016a74 <_dtoa_r+0x264>
 80169e8:	2a05      	cmp	r2, #5
 80169ea:	bfc4      	itt	gt
 80169ec:	3a04      	subgt	r2, #4
 80169ee:	9207      	strgt	r2, [sp, #28]
 80169f0:	9a07      	ldr	r2, [sp, #28]
 80169f2:	f1a2 0202 	sub.w	r2, r2, #2
 80169f6:	bfcc      	ite	gt
 80169f8:	2400      	movgt	r4, #0
 80169fa:	2401      	movle	r4, #1
 80169fc:	2a03      	cmp	r2, #3
 80169fe:	d844      	bhi.n	8016a8a <_dtoa_r+0x27a>
 8016a00:	e8df f002 	tbb	[pc, r2]
 8016a04:	0b173634 	.word	0x0b173634
 8016a08:	9b04      	ldr	r3, [sp, #16]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	eba3 0308 	sub.w	r3, r3, r8
 8016a10:	9304      	str	r3, [sp, #16]
 8016a12:	920a      	str	r2, [sp, #40]	@ 0x28
 8016a14:	f1c8 0300 	rsb	r3, r8, #0
 8016a18:	e7e3      	b.n	80169e2 <_dtoa_r+0x1d2>
 8016a1a:	2201      	movs	r2, #1
 8016a1c:	9208      	str	r2, [sp, #32]
 8016a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016a20:	eb08 0b02 	add.w	fp, r8, r2
 8016a24:	f10b 0a01 	add.w	sl, fp, #1
 8016a28:	4652      	mov	r2, sl
 8016a2a:	2a01      	cmp	r2, #1
 8016a2c:	bfb8      	it	lt
 8016a2e:	2201      	movlt	r2, #1
 8016a30:	e006      	b.n	8016a40 <_dtoa_r+0x230>
 8016a32:	2201      	movs	r2, #1
 8016a34:	9208      	str	r2, [sp, #32]
 8016a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016a38:	2a00      	cmp	r2, #0
 8016a3a:	dd29      	ble.n	8016a90 <_dtoa_r+0x280>
 8016a3c:	4693      	mov	fp, r2
 8016a3e:	4692      	mov	sl, r2
 8016a40:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8016a44:	2100      	movs	r1, #0
 8016a46:	2004      	movs	r0, #4
 8016a48:	f100 0614 	add.w	r6, r0, #20
 8016a4c:	4296      	cmp	r6, r2
 8016a4e:	d926      	bls.n	8016a9e <_dtoa_r+0x28e>
 8016a50:	6079      	str	r1, [r7, #4]
 8016a52:	4648      	mov	r0, r9
 8016a54:	9305      	str	r3, [sp, #20]
 8016a56:	f000 fd39 	bl	80174cc <_Balloc>
 8016a5a:	9b05      	ldr	r3, [sp, #20]
 8016a5c:	4607      	mov	r7, r0
 8016a5e:	2800      	cmp	r0, #0
 8016a60:	d13e      	bne.n	8016ae0 <_dtoa_r+0x2d0>
 8016a62:	4b1e      	ldr	r3, [pc, #120]	@ (8016adc <_dtoa_r+0x2cc>)
 8016a64:	4602      	mov	r2, r0
 8016a66:	f240 11af 	movw	r1, #431	@ 0x1af
 8016a6a:	e6ea      	b.n	8016842 <_dtoa_r+0x32>
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	e7e1      	b.n	8016a34 <_dtoa_r+0x224>
 8016a70:	2200      	movs	r2, #0
 8016a72:	e7d3      	b.n	8016a1c <_dtoa_r+0x20c>
 8016a74:	2401      	movs	r4, #1
 8016a76:	2200      	movs	r2, #0
 8016a78:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8016a7c:	f04f 3bff 	mov.w	fp, #4294967295
 8016a80:	2100      	movs	r1, #0
 8016a82:	46da      	mov	sl, fp
 8016a84:	2212      	movs	r2, #18
 8016a86:	9109      	str	r1, [sp, #36]	@ 0x24
 8016a88:	e7da      	b.n	8016a40 <_dtoa_r+0x230>
 8016a8a:	2201      	movs	r2, #1
 8016a8c:	9208      	str	r2, [sp, #32]
 8016a8e:	e7f5      	b.n	8016a7c <_dtoa_r+0x26c>
 8016a90:	f04f 0b01 	mov.w	fp, #1
 8016a94:	46da      	mov	sl, fp
 8016a96:	465a      	mov	r2, fp
 8016a98:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016a9c:	e7d0      	b.n	8016a40 <_dtoa_r+0x230>
 8016a9e:	3101      	adds	r1, #1
 8016aa0:	0040      	lsls	r0, r0, #1
 8016aa2:	e7d1      	b.n	8016a48 <_dtoa_r+0x238>
 8016aa4:	f3af 8000 	nop.w
 8016aa8:	636f4361 	.word	0x636f4361
 8016aac:	3fd287a7 	.word	0x3fd287a7
 8016ab0:	8b60c8b3 	.word	0x8b60c8b3
 8016ab4:	3fc68a28 	.word	0x3fc68a28
 8016ab8:	509f79fb 	.word	0x509f79fb
 8016abc:	3fd34413 	.word	0x3fd34413
 8016ac0:	0801c59e 	.word	0x0801c59e
 8016ac4:	0801c68f 	.word	0x0801c68f
 8016ac8:	7ff00000 	.word	0x7ff00000
 8016acc:	0801c68b 	.word	0x0801c68b
 8016ad0:	0801c61e 	.word	0x0801c61e
 8016ad4:	0801c61d 	.word	0x0801c61d
 8016ad8:	0801c908 	.word	0x0801c908
 8016adc:	0801c6e7 	.word	0x0801c6e7
 8016ae0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8016ae4:	f1ba 0f0e 	cmp.w	sl, #14
 8016ae8:	6010      	str	r0, [r2, #0]
 8016aea:	d86e      	bhi.n	8016bca <_dtoa_r+0x3ba>
 8016aec:	2c00      	cmp	r4, #0
 8016aee:	d06c      	beq.n	8016bca <_dtoa_r+0x3ba>
 8016af0:	f1b8 0f00 	cmp.w	r8, #0
 8016af4:	f340 80b4 	ble.w	8016c60 <_dtoa_r+0x450>
 8016af8:	4ac8      	ldr	r2, [pc, #800]	@ (8016e1c <_dtoa_r+0x60c>)
 8016afa:	f008 010f 	and.w	r1, r8, #15
 8016afe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016b02:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8016b06:	ed92 7b00 	vldr	d7, [r2]
 8016b0a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8016b0e:	f000 809b 	beq.w	8016c48 <_dtoa_r+0x438>
 8016b12:	4ac3      	ldr	r2, [pc, #780]	@ (8016e20 <_dtoa_r+0x610>)
 8016b14:	ed92 6b08 	vldr	d6, [r2, #32]
 8016b18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8016b1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016b20:	f001 010f 	and.w	r1, r1, #15
 8016b24:	2203      	movs	r2, #3
 8016b26:	48be      	ldr	r0, [pc, #760]	@ (8016e20 <_dtoa_r+0x610>)
 8016b28:	2900      	cmp	r1, #0
 8016b2a:	f040 808f 	bne.w	8016c4c <_dtoa_r+0x43c>
 8016b2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016b32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016b36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016b3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016b40:	2900      	cmp	r1, #0
 8016b42:	f000 80b3 	beq.w	8016cac <_dtoa_r+0x49c>
 8016b46:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8016b4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b52:	f140 80ab 	bpl.w	8016cac <_dtoa_r+0x49c>
 8016b56:	f1ba 0f00 	cmp.w	sl, #0
 8016b5a:	f000 80a7 	beq.w	8016cac <_dtoa_r+0x49c>
 8016b5e:	f1bb 0f00 	cmp.w	fp, #0
 8016b62:	dd30      	ble.n	8016bc6 <_dtoa_r+0x3b6>
 8016b64:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8016b68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016b70:	f108 31ff 	add.w	r1, r8, #4294967295
 8016b74:	9105      	str	r1, [sp, #20]
 8016b76:	3201      	adds	r2, #1
 8016b78:	465c      	mov	r4, fp
 8016b7a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016b7e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8016b82:	ee07 2a90 	vmov	s15, r2
 8016b86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016b8a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8016b8e:	ee15 2a90 	vmov	r2, s11
 8016b92:	ec51 0b15 	vmov	r0, r1, d5
 8016b96:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8016b9a:	2c00      	cmp	r4, #0
 8016b9c:	f040 808a 	bne.w	8016cb4 <_dtoa_r+0x4a4>
 8016ba0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016ba4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8016ba8:	ec41 0b17 	vmov	d7, r0, r1
 8016bac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb4:	f300 826a 	bgt.w	801708c <_dtoa_r+0x87c>
 8016bb8:	eeb1 7b47 	vneg.f64	d7, d7
 8016bbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bc4:	d423      	bmi.n	8016c0e <_dtoa_r+0x3fe>
 8016bc6:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016bca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016bcc:	2a00      	cmp	r2, #0
 8016bce:	f2c0 8129 	blt.w	8016e24 <_dtoa_r+0x614>
 8016bd2:	f1b8 0f0e 	cmp.w	r8, #14
 8016bd6:	f300 8125 	bgt.w	8016e24 <_dtoa_r+0x614>
 8016bda:	4b90      	ldr	r3, [pc, #576]	@ (8016e1c <_dtoa_r+0x60c>)
 8016bdc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016be0:	ed93 6b00 	vldr	d6, [r3]
 8016be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	f280 80c8 	bge.w	8016d7c <_dtoa_r+0x56c>
 8016bec:	f1ba 0f00 	cmp.w	sl, #0
 8016bf0:	f300 80c4 	bgt.w	8016d7c <_dtoa_r+0x56c>
 8016bf4:	d10b      	bne.n	8016c0e <_dtoa_r+0x3fe>
 8016bf6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016bfa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016bfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016c02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c0a:	f2c0 823c 	blt.w	8017086 <_dtoa_r+0x876>
 8016c0e:	2400      	movs	r4, #0
 8016c10:	4625      	mov	r5, r4
 8016c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c14:	43db      	mvns	r3, r3
 8016c16:	9305      	str	r3, [sp, #20]
 8016c18:	463e      	mov	r6, r7
 8016c1a:	f04f 0800 	mov.w	r8, #0
 8016c1e:	4621      	mov	r1, r4
 8016c20:	4648      	mov	r0, r9
 8016c22:	f000 fc93 	bl	801754c <_Bfree>
 8016c26:	2d00      	cmp	r5, #0
 8016c28:	f000 80a2 	beq.w	8016d70 <_dtoa_r+0x560>
 8016c2c:	f1b8 0f00 	cmp.w	r8, #0
 8016c30:	d005      	beq.n	8016c3e <_dtoa_r+0x42e>
 8016c32:	45a8      	cmp	r8, r5
 8016c34:	d003      	beq.n	8016c3e <_dtoa_r+0x42e>
 8016c36:	4641      	mov	r1, r8
 8016c38:	4648      	mov	r0, r9
 8016c3a:	f000 fc87 	bl	801754c <_Bfree>
 8016c3e:	4629      	mov	r1, r5
 8016c40:	4648      	mov	r0, r9
 8016c42:	f000 fc83 	bl	801754c <_Bfree>
 8016c46:	e093      	b.n	8016d70 <_dtoa_r+0x560>
 8016c48:	2202      	movs	r2, #2
 8016c4a:	e76c      	b.n	8016b26 <_dtoa_r+0x316>
 8016c4c:	07cc      	lsls	r4, r1, #31
 8016c4e:	d504      	bpl.n	8016c5a <_dtoa_r+0x44a>
 8016c50:	ed90 6b00 	vldr	d6, [r0]
 8016c54:	3201      	adds	r2, #1
 8016c56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016c5a:	1049      	asrs	r1, r1, #1
 8016c5c:	3008      	adds	r0, #8
 8016c5e:	e763      	b.n	8016b28 <_dtoa_r+0x318>
 8016c60:	d022      	beq.n	8016ca8 <_dtoa_r+0x498>
 8016c62:	f1c8 0100 	rsb	r1, r8, #0
 8016c66:	4a6d      	ldr	r2, [pc, #436]	@ (8016e1c <_dtoa_r+0x60c>)
 8016c68:	f001 000f 	and.w	r0, r1, #15
 8016c6c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016c70:	ed92 7b00 	vldr	d7, [r2]
 8016c74:	ee28 7b07 	vmul.f64	d7, d8, d7
 8016c78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016c7c:	4868      	ldr	r0, [pc, #416]	@ (8016e20 <_dtoa_r+0x610>)
 8016c7e:	1109      	asrs	r1, r1, #4
 8016c80:	2400      	movs	r4, #0
 8016c82:	2202      	movs	r2, #2
 8016c84:	b929      	cbnz	r1, 8016c92 <_dtoa_r+0x482>
 8016c86:	2c00      	cmp	r4, #0
 8016c88:	f43f af57 	beq.w	8016b3a <_dtoa_r+0x32a>
 8016c8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016c90:	e753      	b.n	8016b3a <_dtoa_r+0x32a>
 8016c92:	07ce      	lsls	r6, r1, #31
 8016c94:	d505      	bpl.n	8016ca2 <_dtoa_r+0x492>
 8016c96:	ed90 6b00 	vldr	d6, [r0]
 8016c9a:	3201      	adds	r2, #1
 8016c9c:	2401      	movs	r4, #1
 8016c9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ca2:	1049      	asrs	r1, r1, #1
 8016ca4:	3008      	adds	r0, #8
 8016ca6:	e7ed      	b.n	8016c84 <_dtoa_r+0x474>
 8016ca8:	2202      	movs	r2, #2
 8016caa:	e746      	b.n	8016b3a <_dtoa_r+0x32a>
 8016cac:	f8cd 8014 	str.w	r8, [sp, #20]
 8016cb0:	4654      	mov	r4, sl
 8016cb2:	e762      	b.n	8016b7a <_dtoa_r+0x36a>
 8016cb4:	4a59      	ldr	r2, [pc, #356]	@ (8016e1c <_dtoa_r+0x60c>)
 8016cb6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8016cba:	ed12 4b02 	vldr	d4, [r2, #-8]
 8016cbe:	9a08      	ldr	r2, [sp, #32]
 8016cc0:	ec41 0b17 	vmov	d7, r0, r1
 8016cc4:	443c      	add	r4, r7
 8016cc6:	b34a      	cbz	r2, 8016d1c <_dtoa_r+0x50c>
 8016cc8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8016ccc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8016cd0:	463e      	mov	r6, r7
 8016cd2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8016cd6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016cda:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016cde:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016ce2:	ee14 2a90 	vmov	r2, s9
 8016ce6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016cea:	3230      	adds	r2, #48	@ 0x30
 8016cec:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016cf0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf8:	f806 2b01 	strb.w	r2, [r6], #1
 8016cfc:	d438      	bmi.n	8016d70 <_dtoa_r+0x560>
 8016cfe:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016d02:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d0a:	d46e      	bmi.n	8016dea <_dtoa_r+0x5da>
 8016d0c:	42a6      	cmp	r6, r4
 8016d0e:	f43f af5a 	beq.w	8016bc6 <_dtoa_r+0x3b6>
 8016d12:	ee27 7b03 	vmul.f64	d7, d7, d3
 8016d16:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016d1a:	e7e0      	b.n	8016cde <_dtoa_r+0x4ce>
 8016d1c:	4621      	mov	r1, r4
 8016d1e:	463e      	mov	r6, r7
 8016d20:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016d24:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016d28:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016d2c:	ee14 2a90 	vmov	r2, s9
 8016d30:	3230      	adds	r2, #48	@ 0x30
 8016d32:	f806 2b01 	strb.w	r2, [r6], #1
 8016d36:	42a6      	cmp	r6, r4
 8016d38:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016d3c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016d40:	d119      	bne.n	8016d76 <_dtoa_r+0x566>
 8016d42:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8016d46:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016d4a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d52:	dc4a      	bgt.n	8016dea <_dtoa_r+0x5da>
 8016d54:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016d58:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8016d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d60:	f57f af31 	bpl.w	8016bc6 <_dtoa_r+0x3b6>
 8016d64:	460e      	mov	r6, r1
 8016d66:	3901      	subs	r1, #1
 8016d68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016d6c:	2b30      	cmp	r3, #48	@ 0x30
 8016d6e:	d0f9      	beq.n	8016d64 <_dtoa_r+0x554>
 8016d70:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016d74:	e027      	b.n	8016dc6 <_dtoa_r+0x5b6>
 8016d76:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016d7a:	e7d5      	b.n	8016d28 <_dtoa_r+0x518>
 8016d7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016d80:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8016d84:	463e      	mov	r6, r7
 8016d86:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8016d8a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8016d8e:	ee15 3a10 	vmov	r3, s10
 8016d92:	3330      	adds	r3, #48	@ 0x30
 8016d94:	f806 3b01 	strb.w	r3, [r6], #1
 8016d98:	1bf3      	subs	r3, r6, r7
 8016d9a:	459a      	cmp	sl, r3
 8016d9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016da0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8016da4:	d132      	bne.n	8016e0c <_dtoa_r+0x5fc>
 8016da6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016daa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016db2:	dc18      	bgt.n	8016de6 <_dtoa_r+0x5d6>
 8016db4:	eeb4 7b46 	vcmp.f64	d7, d6
 8016db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dbc:	d103      	bne.n	8016dc6 <_dtoa_r+0x5b6>
 8016dbe:	ee15 3a10 	vmov	r3, s10
 8016dc2:	07db      	lsls	r3, r3, #31
 8016dc4:	d40f      	bmi.n	8016de6 <_dtoa_r+0x5d6>
 8016dc6:	9901      	ldr	r1, [sp, #4]
 8016dc8:	4648      	mov	r0, r9
 8016dca:	f000 fbbf 	bl	801754c <_Bfree>
 8016dce:	2300      	movs	r3, #0
 8016dd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016dd2:	7033      	strb	r3, [r6, #0]
 8016dd4:	f108 0301 	add.w	r3, r8, #1
 8016dd8:	6013      	str	r3, [r2, #0]
 8016dda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	f000 824b 	beq.w	8017278 <_dtoa_r+0xa68>
 8016de2:	601e      	str	r6, [r3, #0]
 8016de4:	e248      	b.n	8017278 <_dtoa_r+0xa68>
 8016de6:	f8cd 8014 	str.w	r8, [sp, #20]
 8016dea:	4633      	mov	r3, r6
 8016dec:	461e      	mov	r6, r3
 8016dee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016df2:	2a39      	cmp	r2, #57	@ 0x39
 8016df4:	d106      	bne.n	8016e04 <_dtoa_r+0x5f4>
 8016df6:	429f      	cmp	r7, r3
 8016df8:	d1f8      	bne.n	8016dec <_dtoa_r+0x5dc>
 8016dfa:	9a05      	ldr	r2, [sp, #20]
 8016dfc:	3201      	adds	r2, #1
 8016dfe:	9205      	str	r2, [sp, #20]
 8016e00:	2230      	movs	r2, #48	@ 0x30
 8016e02:	703a      	strb	r2, [r7, #0]
 8016e04:	781a      	ldrb	r2, [r3, #0]
 8016e06:	3201      	adds	r2, #1
 8016e08:	701a      	strb	r2, [r3, #0]
 8016e0a:	e7b1      	b.n	8016d70 <_dtoa_r+0x560>
 8016e0c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016e10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e18:	d1b5      	bne.n	8016d86 <_dtoa_r+0x576>
 8016e1a:	e7d4      	b.n	8016dc6 <_dtoa_r+0x5b6>
 8016e1c:	0801c908 	.word	0x0801c908
 8016e20:	0801c8e0 	.word	0x0801c8e0
 8016e24:	9908      	ldr	r1, [sp, #32]
 8016e26:	2900      	cmp	r1, #0
 8016e28:	f000 80e9 	beq.w	8016ffe <_dtoa_r+0x7ee>
 8016e2c:	9907      	ldr	r1, [sp, #28]
 8016e2e:	2901      	cmp	r1, #1
 8016e30:	f300 80cb 	bgt.w	8016fca <_dtoa_r+0x7ba>
 8016e34:	2d00      	cmp	r5, #0
 8016e36:	f000 80c4 	beq.w	8016fc2 <_dtoa_r+0x7b2>
 8016e3a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016e3e:	9e04      	ldr	r6, [sp, #16]
 8016e40:	461c      	mov	r4, r3
 8016e42:	9305      	str	r3, [sp, #20]
 8016e44:	9b04      	ldr	r3, [sp, #16]
 8016e46:	4413      	add	r3, r2
 8016e48:	9304      	str	r3, [sp, #16]
 8016e4a:	9b06      	ldr	r3, [sp, #24]
 8016e4c:	2101      	movs	r1, #1
 8016e4e:	4413      	add	r3, r2
 8016e50:	4648      	mov	r0, r9
 8016e52:	9306      	str	r3, [sp, #24]
 8016e54:	f000 fc78 	bl	8017748 <__i2b>
 8016e58:	9b05      	ldr	r3, [sp, #20]
 8016e5a:	4605      	mov	r5, r0
 8016e5c:	b166      	cbz	r6, 8016e78 <_dtoa_r+0x668>
 8016e5e:	9a06      	ldr	r2, [sp, #24]
 8016e60:	2a00      	cmp	r2, #0
 8016e62:	dd09      	ble.n	8016e78 <_dtoa_r+0x668>
 8016e64:	42b2      	cmp	r2, r6
 8016e66:	9904      	ldr	r1, [sp, #16]
 8016e68:	bfa8      	it	ge
 8016e6a:	4632      	movge	r2, r6
 8016e6c:	1a89      	subs	r1, r1, r2
 8016e6e:	9104      	str	r1, [sp, #16]
 8016e70:	9906      	ldr	r1, [sp, #24]
 8016e72:	1ab6      	subs	r6, r6, r2
 8016e74:	1a8a      	subs	r2, r1, r2
 8016e76:	9206      	str	r2, [sp, #24]
 8016e78:	b30b      	cbz	r3, 8016ebe <_dtoa_r+0x6ae>
 8016e7a:	9a08      	ldr	r2, [sp, #32]
 8016e7c:	2a00      	cmp	r2, #0
 8016e7e:	f000 80c5 	beq.w	801700c <_dtoa_r+0x7fc>
 8016e82:	2c00      	cmp	r4, #0
 8016e84:	f000 80bf 	beq.w	8017006 <_dtoa_r+0x7f6>
 8016e88:	4629      	mov	r1, r5
 8016e8a:	4622      	mov	r2, r4
 8016e8c:	4648      	mov	r0, r9
 8016e8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016e90:	f000 fd12 	bl	80178b8 <__pow5mult>
 8016e94:	9a01      	ldr	r2, [sp, #4]
 8016e96:	4601      	mov	r1, r0
 8016e98:	4605      	mov	r5, r0
 8016e9a:	4648      	mov	r0, r9
 8016e9c:	f000 fc6a 	bl	8017774 <__multiply>
 8016ea0:	9901      	ldr	r1, [sp, #4]
 8016ea2:	9005      	str	r0, [sp, #20]
 8016ea4:	4648      	mov	r0, r9
 8016ea6:	f000 fb51 	bl	801754c <_Bfree>
 8016eaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016eac:	1b1b      	subs	r3, r3, r4
 8016eae:	f000 80b0 	beq.w	8017012 <_dtoa_r+0x802>
 8016eb2:	9905      	ldr	r1, [sp, #20]
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	4648      	mov	r0, r9
 8016eb8:	f000 fcfe 	bl	80178b8 <__pow5mult>
 8016ebc:	9001      	str	r0, [sp, #4]
 8016ebe:	2101      	movs	r1, #1
 8016ec0:	4648      	mov	r0, r9
 8016ec2:	f000 fc41 	bl	8017748 <__i2b>
 8016ec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ec8:	4604      	mov	r4, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	f000 81da 	beq.w	8017284 <_dtoa_r+0xa74>
 8016ed0:	461a      	mov	r2, r3
 8016ed2:	4601      	mov	r1, r0
 8016ed4:	4648      	mov	r0, r9
 8016ed6:	f000 fcef 	bl	80178b8 <__pow5mult>
 8016eda:	9b07      	ldr	r3, [sp, #28]
 8016edc:	2b01      	cmp	r3, #1
 8016ede:	4604      	mov	r4, r0
 8016ee0:	f300 80a0 	bgt.w	8017024 <_dtoa_r+0x814>
 8016ee4:	9b02      	ldr	r3, [sp, #8]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	f040 8096 	bne.w	8017018 <_dtoa_r+0x808>
 8016eec:	9b03      	ldr	r3, [sp, #12]
 8016eee:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016ef2:	2a00      	cmp	r2, #0
 8016ef4:	f040 8092 	bne.w	801701c <_dtoa_r+0x80c>
 8016ef8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016efc:	0d12      	lsrs	r2, r2, #20
 8016efe:	0512      	lsls	r2, r2, #20
 8016f00:	2a00      	cmp	r2, #0
 8016f02:	f000 808d 	beq.w	8017020 <_dtoa_r+0x810>
 8016f06:	9b04      	ldr	r3, [sp, #16]
 8016f08:	3301      	adds	r3, #1
 8016f0a:	9304      	str	r3, [sp, #16]
 8016f0c:	9b06      	ldr	r3, [sp, #24]
 8016f0e:	3301      	adds	r3, #1
 8016f10:	9306      	str	r3, [sp, #24]
 8016f12:	2301      	movs	r3, #1
 8016f14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016f16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	f000 81b9 	beq.w	8017290 <_dtoa_r+0xa80>
 8016f1e:	6922      	ldr	r2, [r4, #16]
 8016f20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016f24:	6910      	ldr	r0, [r2, #16]
 8016f26:	f000 fbc3 	bl	80176b0 <__hi0bits>
 8016f2a:	f1c0 0020 	rsb	r0, r0, #32
 8016f2e:	9b06      	ldr	r3, [sp, #24]
 8016f30:	4418      	add	r0, r3
 8016f32:	f010 001f 	ands.w	r0, r0, #31
 8016f36:	f000 8081 	beq.w	801703c <_dtoa_r+0x82c>
 8016f3a:	f1c0 0220 	rsb	r2, r0, #32
 8016f3e:	2a04      	cmp	r2, #4
 8016f40:	dd73      	ble.n	801702a <_dtoa_r+0x81a>
 8016f42:	9b04      	ldr	r3, [sp, #16]
 8016f44:	f1c0 001c 	rsb	r0, r0, #28
 8016f48:	4403      	add	r3, r0
 8016f4a:	9304      	str	r3, [sp, #16]
 8016f4c:	9b06      	ldr	r3, [sp, #24]
 8016f4e:	4406      	add	r6, r0
 8016f50:	4403      	add	r3, r0
 8016f52:	9306      	str	r3, [sp, #24]
 8016f54:	9b04      	ldr	r3, [sp, #16]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	dd05      	ble.n	8016f66 <_dtoa_r+0x756>
 8016f5a:	9901      	ldr	r1, [sp, #4]
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	4648      	mov	r0, r9
 8016f60:	f000 fd04 	bl	801796c <__lshift>
 8016f64:	9001      	str	r0, [sp, #4]
 8016f66:	9b06      	ldr	r3, [sp, #24]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	dd05      	ble.n	8016f78 <_dtoa_r+0x768>
 8016f6c:	4621      	mov	r1, r4
 8016f6e:	461a      	mov	r2, r3
 8016f70:	4648      	mov	r0, r9
 8016f72:	f000 fcfb 	bl	801796c <__lshift>
 8016f76:	4604      	mov	r4, r0
 8016f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d060      	beq.n	8017040 <_dtoa_r+0x830>
 8016f7e:	9801      	ldr	r0, [sp, #4]
 8016f80:	4621      	mov	r1, r4
 8016f82:	f000 fd5f 	bl	8017a44 <__mcmp>
 8016f86:	2800      	cmp	r0, #0
 8016f88:	da5a      	bge.n	8017040 <_dtoa_r+0x830>
 8016f8a:	f108 33ff 	add.w	r3, r8, #4294967295
 8016f8e:	9305      	str	r3, [sp, #20]
 8016f90:	9901      	ldr	r1, [sp, #4]
 8016f92:	2300      	movs	r3, #0
 8016f94:	220a      	movs	r2, #10
 8016f96:	4648      	mov	r0, r9
 8016f98:	f000 fafa 	bl	8017590 <__multadd>
 8016f9c:	9b08      	ldr	r3, [sp, #32]
 8016f9e:	9001      	str	r0, [sp, #4]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	f000 8177 	beq.w	8017294 <_dtoa_r+0xa84>
 8016fa6:	4629      	mov	r1, r5
 8016fa8:	2300      	movs	r3, #0
 8016faa:	220a      	movs	r2, #10
 8016fac:	4648      	mov	r0, r9
 8016fae:	f000 faef 	bl	8017590 <__multadd>
 8016fb2:	f1bb 0f00 	cmp.w	fp, #0
 8016fb6:	4605      	mov	r5, r0
 8016fb8:	dc6e      	bgt.n	8017098 <_dtoa_r+0x888>
 8016fba:	9b07      	ldr	r3, [sp, #28]
 8016fbc:	2b02      	cmp	r3, #2
 8016fbe:	dc48      	bgt.n	8017052 <_dtoa_r+0x842>
 8016fc0:	e06a      	b.n	8017098 <_dtoa_r+0x888>
 8016fc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016fc4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016fc8:	e739      	b.n	8016e3e <_dtoa_r+0x62e>
 8016fca:	f10a 34ff 	add.w	r4, sl, #4294967295
 8016fce:	42a3      	cmp	r3, r4
 8016fd0:	db07      	blt.n	8016fe2 <_dtoa_r+0x7d2>
 8016fd2:	f1ba 0f00 	cmp.w	sl, #0
 8016fd6:	eba3 0404 	sub.w	r4, r3, r4
 8016fda:	db0b      	blt.n	8016ff4 <_dtoa_r+0x7e4>
 8016fdc:	9e04      	ldr	r6, [sp, #16]
 8016fde:	4652      	mov	r2, sl
 8016fe0:	e72f      	b.n	8016e42 <_dtoa_r+0x632>
 8016fe2:	1ae2      	subs	r2, r4, r3
 8016fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fe6:	9e04      	ldr	r6, [sp, #16]
 8016fe8:	4413      	add	r3, r2
 8016fea:	930a      	str	r3, [sp, #40]	@ 0x28
 8016fec:	4652      	mov	r2, sl
 8016fee:	4623      	mov	r3, r4
 8016ff0:	2400      	movs	r4, #0
 8016ff2:	e726      	b.n	8016e42 <_dtoa_r+0x632>
 8016ff4:	9a04      	ldr	r2, [sp, #16]
 8016ff6:	eba2 060a 	sub.w	r6, r2, sl
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	e721      	b.n	8016e42 <_dtoa_r+0x632>
 8016ffe:	9e04      	ldr	r6, [sp, #16]
 8017000:	9d08      	ldr	r5, [sp, #32]
 8017002:	461c      	mov	r4, r3
 8017004:	e72a      	b.n	8016e5c <_dtoa_r+0x64c>
 8017006:	9a01      	ldr	r2, [sp, #4]
 8017008:	9205      	str	r2, [sp, #20]
 801700a:	e752      	b.n	8016eb2 <_dtoa_r+0x6a2>
 801700c:	9901      	ldr	r1, [sp, #4]
 801700e:	461a      	mov	r2, r3
 8017010:	e751      	b.n	8016eb6 <_dtoa_r+0x6a6>
 8017012:	9b05      	ldr	r3, [sp, #20]
 8017014:	9301      	str	r3, [sp, #4]
 8017016:	e752      	b.n	8016ebe <_dtoa_r+0x6ae>
 8017018:	2300      	movs	r3, #0
 801701a:	e77b      	b.n	8016f14 <_dtoa_r+0x704>
 801701c:	9b02      	ldr	r3, [sp, #8]
 801701e:	e779      	b.n	8016f14 <_dtoa_r+0x704>
 8017020:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017022:	e778      	b.n	8016f16 <_dtoa_r+0x706>
 8017024:	2300      	movs	r3, #0
 8017026:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017028:	e779      	b.n	8016f1e <_dtoa_r+0x70e>
 801702a:	d093      	beq.n	8016f54 <_dtoa_r+0x744>
 801702c:	9b04      	ldr	r3, [sp, #16]
 801702e:	321c      	adds	r2, #28
 8017030:	4413      	add	r3, r2
 8017032:	9304      	str	r3, [sp, #16]
 8017034:	9b06      	ldr	r3, [sp, #24]
 8017036:	4416      	add	r6, r2
 8017038:	4413      	add	r3, r2
 801703a:	e78a      	b.n	8016f52 <_dtoa_r+0x742>
 801703c:	4602      	mov	r2, r0
 801703e:	e7f5      	b.n	801702c <_dtoa_r+0x81c>
 8017040:	f1ba 0f00 	cmp.w	sl, #0
 8017044:	f8cd 8014 	str.w	r8, [sp, #20]
 8017048:	46d3      	mov	fp, sl
 801704a:	dc21      	bgt.n	8017090 <_dtoa_r+0x880>
 801704c:	9b07      	ldr	r3, [sp, #28]
 801704e:	2b02      	cmp	r3, #2
 8017050:	dd1e      	ble.n	8017090 <_dtoa_r+0x880>
 8017052:	f1bb 0f00 	cmp.w	fp, #0
 8017056:	f47f addc 	bne.w	8016c12 <_dtoa_r+0x402>
 801705a:	4621      	mov	r1, r4
 801705c:	465b      	mov	r3, fp
 801705e:	2205      	movs	r2, #5
 8017060:	4648      	mov	r0, r9
 8017062:	f000 fa95 	bl	8017590 <__multadd>
 8017066:	4601      	mov	r1, r0
 8017068:	4604      	mov	r4, r0
 801706a:	9801      	ldr	r0, [sp, #4]
 801706c:	f000 fcea 	bl	8017a44 <__mcmp>
 8017070:	2800      	cmp	r0, #0
 8017072:	f77f adce 	ble.w	8016c12 <_dtoa_r+0x402>
 8017076:	463e      	mov	r6, r7
 8017078:	2331      	movs	r3, #49	@ 0x31
 801707a:	f806 3b01 	strb.w	r3, [r6], #1
 801707e:	9b05      	ldr	r3, [sp, #20]
 8017080:	3301      	adds	r3, #1
 8017082:	9305      	str	r3, [sp, #20]
 8017084:	e5c9      	b.n	8016c1a <_dtoa_r+0x40a>
 8017086:	f8cd 8014 	str.w	r8, [sp, #20]
 801708a:	4654      	mov	r4, sl
 801708c:	4625      	mov	r5, r4
 801708e:	e7f2      	b.n	8017076 <_dtoa_r+0x866>
 8017090:	9b08      	ldr	r3, [sp, #32]
 8017092:	2b00      	cmp	r3, #0
 8017094:	f000 8102 	beq.w	801729c <_dtoa_r+0xa8c>
 8017098:	2e00      	cmp	r6, #0
 801709a:	dd05      	ble.n	80170a8 <_dtoa_r+0x898>
 801709c:	4629      	mov	r1, r5
 801709e:	4632      	mov	r2, r6
 80170a0:	4648      	mov	r0, r9
 80170a2:	f000 fc63 	bl	801796c <__lshift>
 80170a6:	4605      	mov	r5, r0
 80170a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d058      	beq.n	8017160 <_dtoa_r+0x950>
 80170ae:	6869      	ldr	r1, [r5, #4]
 80170b0:	4648      	mov	r0, r9
 80170b2:	f000 fa0b 	bl	80174cc <_Balloc>
 80170b6:	4606      	mov	r6, r0
 80170b8:	b928      	cbnz	r0, 80170c6 <_dtoa_r+0x8b6>
 80170ba:	4b82      	ldr	r3, [pc, #520]	@ (80172c4 <_dtoa_r+0xab4>)
 80170bc:	4602      	mov	r2, r0
 80170be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80170c2:	f7ff bbbe 	b.w	8016842 <_dtoa_r+0x32>
 80170c6:	692a      	ldr	r2, [r5, #16]
 80170c8:	3202      	adds	r2, #2
 80170ca:	0092      	lsls	r2, r2, #2
 80170cc:	f105 010c 	add.w	r1, r5, #12
 80170d0:	300c      	adds	r0, #12
 80170d2:	f7ff fae0 	bl	8016696 <memcpy>
 80170d6:	2201      	movs	r2, #1
 80170d8:	4631      	mov	r1, r6
 80170da:	4648      	mov	r0, r9
 80170dc:	f000 fc46 	bl	801796c <__lshift>
 80170e0:	1c7b      	adds	r3, r7, #1
 80170e2:	9304      	str	r3, [sp, #16]
 80170e4:	eb07 030b 	add.w	r3, r7, fp
 80170e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80170ea:	9b02      	ldr	r3, [sp, #8]
 80170ec:	f003 0301 	and.w	r3, r3, #1
 80170f0:	46a8      	mov	r8, r5
 80170f2:	9308      	str	r3, [sp, #32]
 80170f4:	4605      	mov	r5, r0
 80170f6:	9b04      	ldr	r3, [sp, #16]
 80170f8:	9801      	ldr	r0, [sp, #4]
 80170fa:	4621      	mov	r1, r4
 80170fc:	f103 3bff 	add.w	fp, r3, #4294967295
 8017100:	f7ff fafc 	bl	80166fc <quorem>
 8017104:	4641      	mov	r1, r8
 8017106:	9002      	str	r0, [sp, #8]
 8017108:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801710c:	9801      	ldr	r0, [sp, #4]
 801710e:	f000 fc99 	bl	8017a44 <__mcmp>
 8017112:	462a      	mov	r2, r5
 8017114:	9006      	str	r0, [sp, #24]
 8017116:	4621      	mov	r1, r4
 8017118:	4648      	mov	r0, r9
 801711a:	f000 fcaf 	bl	8017a7c <__mdiff>
 801711e:	68c2      	ldr	r2, [r0, #12]
 8017120:	4606      	mov	r6, r0
 8017122:	b9fa      	cbnz	r2, 8017164 <_dtoa_r+0x954>
 8017124:	4601      	mov	r1, r0
 8017126:	9801      	ldr	r0, [sp, #4]
 8017128:	f000 fc8c 	bl	8017a44 <__mcmp>
 801712c:	4602      	mov	r2, r0
 801712e:	4631      	mov	r1, r6
 8017130:	4648      	mov	r0, r9
 8017132:	920a      	str	r2, [sp, #40]	@ 0x28
 8017134:	f000 fa0a 	bl	801754c <_Bfree>
 8017138:	9b07      	ldr	r3, [sp, #28]
 801713a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801713c:	9e04      	ldr	r6, [sp, #16]
 801713e:	ea42 0103 	orr.w	r1, r2, r3
 8017142:	9b08      	ldr	r3, [sp, #32]
 8017144:	4319      	orrs	r1, r3
 8017146:	d10f      	bne.n	8017168 <_dtoa_r+0x958>
 8017148:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801714c:	d028      	beq.n	80171a0 <_dtoa_r+0x990>
 801714e:	9b06      	ldr	r3, [sp, #24]
 8017150:	2b00      	cmp	r3, #0
 8017152:	dd02      	ble.n	801715a <_dtoa_r+0x94a>
 8017154:	9b02      	ldr	r3, [sp, #8]
 8017156:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801715a:	f88b a000 	strb.w	sl, [fp]
 801715e:	e55e      	b.n	8016c1e <_dtoa_r+0x40e>
 8017160:	4628      	mov	r0, r5
 8017162:	e7bd      	b.n	80170e0 <_dtoa_r+0x8d0>
 8017164:	2201      	movs	r2, #1
 8017166:	e7e2      	b.n	801712e <_dtoa_r+0x91e>
 8017168:	9b06      	ldr	r3, [sp, #24]
 801716a:	2b00      	cmp	r3, #0
 801716c:	db04      	blt.n	8017178 <_dtoa_r+0x968>
 801716e:	9907      	ldr	r1, [sp, #28]
 8017170:	430b      	orrs	r3, r1
 8017172:	9908      	ldr	r1, [sp, #32]
 8017174:	430b      	orrs	r3, r1
 8017176:	d120      	bne.n	80171ba <_dtoa_r+0x9aa>
 8017178:	2a00      	cmp	r2, #0
 801717a:	ddee      	ble.n	801715a <_dtoa_r+0x94a>
 801717c:	9901      	ldr	r1, [sp, #4]
 801717e:	2201      	movs	r2, #1
 8017180:	4648      	mov	r0, r9
 8017182:	f000 fbf3 	bl	801796c <__lshift>
 8017186:	4621      	mov	r1, r4
 8017188:	9001      	str	r0, [sp, #4]
 801718a:	f000 fc5b 	bl	8017a44 <__mcmp>
 801718e:	2800      	cmp	r0, #0
 8017190:	dc03      	bgt.n	801719a <_dtoa_r+0x98a>
 8017192:	d1e2      	bne.n	801715a <_dtoa_r+0x94a>
 8017194:	f01a 0f01 	tst.w	sl, #1
 8017198:	d0df      	beq.n	801715a <_dtoa_r+0x94a>
 801719a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801719e:	d1d9      	bne.n	8017154 <_dtoa_r+0x944>
 80171a0:	2339      	movs	r3, #57	@ 0x39
 80171a2:	f88b 3000 	strb.w	r3, [fp]
 80171a6:	4633      	mov	r3, r6
 80171a8:	461e      	mov	r6, r3
 80171aa:	3b01      	subs	r3, #1
 80171ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80171b0:	2a39      	cmp	r2, #57	@ 0x39
 80171b2:	d052      	beq.n	801725a <_dtoa_r+0xa4a>
 80171b4:	3201      	adds	r2, #1
 80171b6:	701a      	strb	r2, [r3, #0]
 80171b8:	e531      	b.n	8016c1e <_dtoa_r+0x40e>
 80171ba:	2a00      	cmp	r2, #0
 80171bc:	dd07      	ble.n	80171ce <_dtoa_r+0x9be>
 80171be:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80171c2:	d0ed      	beq.n	80171a0 <_dtoa_r+0x990>
 80171c4:	f10a 0301 	add.w	r3, sl, #1
 80171c8:	f88b 3000 	strb.w	r3, [fp]
 80171cc:	e527      	b.n	8016c1e <_dtoa_r+0x40e>
 80171ce:	9b04      	ldr	r3, [sp, #16]
 80171d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171d2:	f803 ac01 	strb.w	sl, [r3, #-1]
 80171d6:	4293      	cmp	r3, r2
 80171d8:	d029      	beq.n	801722e <_dtoa_r+0xa1e>
 80171da:	9901      	ldr	r1, [sp, #4]
 80171dc:	2300      	movs	r3, #0
 80171de:	220a      	movs	r2, #10
 80171e0:	4648      	mov	r0, r9
 80171e2:	f000 f9d5 	bl	8017590 <__multadd>
 80171e6:	45a8      	cmp	r8, r5
 80171e8:	9001      	str	r0, [sp, #4]
 80171ea:	f04f 0300 	mov.w	r3, #0
 80171ee:	f04f 020a 	mov.w	r2, #10
 80171f2:	4641      	mov	r1, r8
 80171f4:	4648      	mov	r0, r9
 80171f6:	d107      	bne.n	8017208 <_dtoa_r+0x9f8>
 80171f8:	f000 f9ca 	bl	8017590 <__multadd>
 80171fc:	4680      	mov	r8, r0
 80171fe:	4605      	mov	r5, r0
 8017200:	9b04      	ldr	r3, [sp, #16]
 8017202:	3301      	adds	r3, #1
 8017204:	9304      	str	r3, [sp, #16]
 8017206:	e776      	b.n	80170f6 <_dtoa_r+0x8e6>
 8017208:	f000 f9c2 	bl	8017590 <__multadd>
 801720c:	4629      	mov	r1, r5
 801720e:	4680      	mov	r8, r0
 8017210:	2300      	movs	r3, #0
 8017212:	220a      	movs	r2, #10
 8017214:	4648      	mov	r0, r9
 8017216:	f000 f9bb 	bl	8017590 <__multadd>
 801721a:	4605      	mov	r5, r0
 801721c:	e7f0      	b.n	8017200 <_dtoa_r+0x9f0>
 801721e:	f1bb 0f00 	cmp.w	fp, #0
 8017222:	bfcc      	ite	gt
 8017224:	465e      	movgt	r6, fp
 8017226:	2601      	movle	r6, #1
 8017228:	443e      	add	r6, r7
 801722a:	f04f 0800 	mov.w	r8, #0
 801722e:	9901      	ldr	r1, [sp, #4]
 8017230:	2201      	movs	r2, #1
 8017232:	4648      	mov	r0, r9
 8017234:	f000 fb9a 	bl	801796c <__lshift>
 8017238:	4621      	mov	r1, r4
 801723a:	9001      	str	r0, [sp, #4]
 801723c:	f000 fc02 	bl	8017a44 <__mcmp>
 8017240:	2800      	cmp	r0, #0
 8017242:	dcb0      	bgt.n	80171a6 <_dtoa_r+0x996>
 8017244:	d102      	bne.n	801724c <_dtoa_r+0xa3c>
 8017246:	f01a 0f01 	tst.w	sl, #1
 801724a:	d1ac      	bne.n	80171a6 <_dtoa_r+0x996>
 801724c:	4633      	mov	r3, r6
 801724e:	461e      	mov	r6, r3
 8017250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017254:	2a30      	cmp	r2, #48	@ 0x30
 8017256:	d0fa      	beq.n	801724e <_dtoa_r+0xa3e>
 8017258:	e4e1      	b.n	8016c1e <_dtoa_r+0x40e>
 801725a:	429f      	cmp	r7, r3
 801725c:	d1a4      	bne.n	80171a8 <_dtoa_r+0x998>
 801725e:	9b05      	ldr	r3, [sp, #20]
 8017260:	3301      	adds	r3, #1
 8017262:	9305      	str	r3, [sp, #20]
 8017264:	2331      	movs	r3, #49	@ 0x31
 8017266:	703b      	strb	r3, [r7, #0]
 8017268:	e4d9      	b.n	8016c1e <_dtoa_r+0x40e>
 801726a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801726c:	4f16      	ldr	r7, [pc, #88]	@ (80172c8 <_dtoa_r+0xab8>)
 801726e:	b11b      	cbz	r3, 8017278 <_dtoa_r+0xa68>
 8017270:	f107 0308 	add.w	r3, r7, #8
 8017274:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8017276:	6013      	str	r3, [r2, #0]
 8017278:	4638      	mov	r0, r7
 801727a:	b011      	add	sp, #68	@ 0x44
 801727c:	ecbd 8b02 	vpop	{d8}
 8017280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017284:	9b07      	ldr	r3, [sp, #28]
 8017286:	2b01      	cmp	r3, #1
 8017288:	f77f ae2c 	ble.w	8016ee4 <_dtoa_r+0x6d4>
 801728c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801728e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017290:	2001      	movs	r0, #1
 8017292:	e64c      	b.n	8016f2e <_dtoa_r+0x71e>
 8017294:	f1bb 0f00 	cmp.w	fp, #0
 8017298:	f77f aed8 	ble.w	801704c <_dtoa_r+0x83c>
 801729c:	463e      	mov	r6, r7
 801729e:	9801      	ldr	r0, [sp, #4]
 80172a0:	4621      	mov	r1, r4
 80172a2:	f7ff fa2b 	bl	80166fc <quorem>
 80172a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80172aa:	f806 ab01 	strb.w	sl, [r6], #1
 80172ae:	1bf2      	subs	r2, r6, r7
 80172b0:	4593      	cmp	fp, r2
 80172b2:	ddb4      	ble.n	801721e <_dtoa_r+0xa0e>
 80172b4:	9901      	ldr	r1, [sp, #4]
 80172b6:	2300      	movs	r3, #0
 80172b8:	220a      	movs	r2, #10
 80172ba:	4648      	mov	r0, r9
 80172bc:	f000 f968 	bl	8017590 <__multadd>
 80172c0:	9001      	str	r0, [sp, #4]
 80172c2:	e7ec      	b.n	801729e <_dtoa_r+0xa8e>
 80172c4:	0801c6e7 	.word	0x0801c6e7
 80172c8:	0801c682 	.word	0x0801c682

080172cc <_free_r>:
 80172cc:	b538      	push	{r3, r4, r5, lr}
 80172ce:	4605      	mov	r5, r0
 80172d0:	2900      	cmp	r1, #0
 80172d2:	d041      	beq.n	8017358 <_free_r+0x8c>
 80172d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172d8:	1f0c      	subs	r4, r1, #4
 80172da:	2b00      	cmp	r3, #0
 80172dc:	bfb8      	it	lt
 80172de:	18e4      	addlt	r4, r4, r3
 80172e0:	f000 f8e8 	bl	80174b4 <__malloc_lock>
 80172e4:	4a1d      	ldr	r2, [pc, #116]	@ (801735c <_free_r+0x90>)
 80172e6:	6813      	ldr	r3, [r2, #0]
 80172e8:	b933      	cbnz	r3, 80172f8 <_free_r+0x2c>
 80172ea:	6063      	str	r3, [r4, #4]
 80172ec:	6014      	str	r4, [r2, #0]
 80172ee:	4628      	mov	r0, r5
 80172f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80172f4:	f000 b8e4 	b.w	80174c0 <__malloc_unlock>
 80172f8:	42a3      	cmp	r3, r4
 80172fa:	d908      	bls.n	801730e <_free_r+0x42>
 80172fc:	6820      	ldr	r0, [r4, #0]
 80172fe:	1821      	adds	r1, r4, r0
 8017300:	428b      	cmp	r3, r1
 8017302:	bf01      	itttt	eq
 8017304:	6819      	ldreq	r1, [r3, #0]
 8017306:	685b      	ldreq	r3, [r3, #4]
 8017308:	1809      	addeq	r1, r1, r0
 801730a:	6021      	streq	r1, [r4, #0]
 801730c:	e7ed      	b.n	80172ea <_free_r+0x1e>
 801730e:	461a      	mov	r2, r3
 8017310:	685b      	ldr	r3, [r3, #4]
 8017312:	b10b      	cbz	r3, 8017318 <_free_r+0x4c>
 8017314:	42a3      	cmp	r3, r4
 8017316:	d9fa      	bls.n	801730e <_free_r+0x42>
 8017318:	6811      	ldr	r1, [r2, #0]
 801731a:	1850      	adds	r0, r2, r1
 801731c:	42a0      	cmp	r0, r4
 801731e:	d10b      	bne.n	8017338 <_free_r+0x6c>
 8017320:	6820      	ldr	r0, [r4, #0]
 8017322:	4401      	add	r1, r0
 8017324:	1850      	adds	r0, r2, r1
 8017326:	4283      	cmp	r3, r0
 8017328:	6011      	str	r1, [r2, #0]
 801732a:	d1e0      	bne.n	80172ee <_free_r+0x22>
 801732c:	6818      	ldr	r0, [r3, #0]
 801732e:	685b      	ldr	r3, [r3, #4]
 8017330:	6053      	str	r3, [r2, #4]
 8017332:	4408      	add	r0, r1
 8017334:	6010      	str	r0, [r2, #0]
 8017336:	e7da      	b.n	80172ee <_free_r+0x22>
 8017338:	d902      	bls.n	8017340 <_free_r+0x74>
 801733a:	230c      	movs	r3, #12
 801733c:	602b      	str	r3, [r5, #0]
 801733e:	e7d6      	b.n	80172ee <_free_r+0x22>
 8017340:	6820      	ldr	r0, [r4, #0]
 8017342:	1821      	adds	r1, r4, r0
 8017344:	428b      	cmp	r3, r1
 8017346:	bf04      	itt	eq
 8017348:	6819      	ldreq	r1, [r3, #0]
 801734a:	685b      	ldreq	r3, [r3, #4]
 801734c:	6063      	str	r3, [r4, #4]
 801734e:	bf04      	itt	eq
 8017350:	1809      	addeq	r1, r1, r0
 8017352:	6021      	streq	r1, [r4, #0]
 8017354:	6054      	str	r4, [r2, #4]
 8017356:	e7ca      	b.n	80172ee <_free_r+0x22>
 8017358:	bd38      	pop	{r3, r4, r5, pc}
 801735a:	bf00      	nop
 801735c:	24008528 	.word	0x24008528

08017360 <malloc>:
 8017360:	4b02      	ldr	r3, [pc, #8]	@ (801736c <malloc+0xc>)
 8017362:	4601      	mov	r1, r0
 8017364:	6818      	ldr	r0, [r3, #0]
 8017366:	f000 b825 	b.w	80173b4 <_malloc_r>
 801736a:	bf00      	nop
 801736c:	2400003c 	.word	0x2400003c

08017370 <sbrk_aligned>:
 8017370:	b570      	push	{r4, r5, r6, lr}
 8017372:	4e0f      	ldr	r6, [pc, #60]	@ (80173b0 <sbrk_aligned+0x40>)
 8017374:	460c      	mov	r4, r1
 8017376:	6831      	ldr	r1, [r6, #0]
 8017378:	4605      	mov	r5, r0
 801737a:	b911      	cbnz	r1, 8017382 <sbrk_aligned+0x12>
 801737c:	f001 fee4 	bl	8019148 <_sbrk_r>
 8017380:	6030      	str	r0, [r6, #0]
 8017382:	4621      	mov	r1, r4
 8017384:	4628      	mov	r0, r5
 8017386:	f001 fedf 	bl	8019148 <_sbrk_r>
 801738a:	1c43      	adds	r3, r0, #1
 801738c:	d103      	bne.n	8017396 <sbrk_aligned+0x26>
 801738e:	f04f 34ff 	mov.w	r4, #4294967295
 8017392:	4620      	mov	r0, r4
 8017394:	bd70      	pop	{r4, r5, r6, pc}
 8017396:	1cc4      	adds	r4, r0, #3
 8017398:	f024 0403 	bic.w	r4, r4, #3
 801739c:	42a0      	cmp	r0, r4
 801739e:	d0f8      	beq.n	8017392 <sbrk_aligned+0x22>
 80173a0:	1a21      	subs	r1, r4, r0
 80173a2:	4628      	mov	r0, r5
 80173a4:	f001 fed0 	bl	8019148 <_sbrk_r>
 80173a8:	3001      	adds	r0, #1
 80173aa:	d1f2      	bne.n	8017392 <sbrk_aligned+0x22>
 80173ac:	e7ef      	b.n	801738e <sbrk_aligned+0x1e>
 80173ae:	bf00      	nop
 80173b0:	24008524 	.word	0x24008524

080173b4 <_malloc_r>:
 80173b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173b8:	1ccd      	adds	r5, r1, #3
 80173ba:	f025 0503 	bic.w	r5, r5, #3
 80173be:	3508      	adds	r5, #8
 80173c0:	2d0c      	cmp	r5, #12
 80173c2:	bf38      	it	cc
 80173c4:	250c      	movcc	r5, #12
 80173c6:	2d00      	cmp	r5, #0
 80173c8:	4606      	mov	r6, r0
 80173ca:	db01      	blt.n	80173d0 <_malloc_r+0x1c>
 80173cc:	42a9      	cmp	r1, r5
 80173ce:	d904      	bls.n	80173da <_malloc_r+0x26>
 80173d0:	230c      	movs	r3, #12
 80173d2:	6033      	str	r3, [r6, #0]
 80173d4:	2000      	movs	r0, #0
 80173d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80174b0 <_malloc_r+0xfc>
 80173de:	f000 f869 	bl	80174b4 <__malloc_lock>
 80173e2:	f8d8 3000 	ldr.w	r3, [r8]
 80173e6:	461c      	mov	r4, r3
 80173e8:	bb44      	cbnz	r4, 801743c <_malloc_r+0x88>
 80173ea:	4629      	mov	r1, r5
 80173ec:	4630      	mov	r0, r6
 80173ee:	f7ff ffbf 	bl	8017370 <sbrk_aligned>
 80173f2:	1c43      	adds	r3, r0, #1
 80173f4:	4604      	mov	r4, r0
 80173f6:	d158      	bne.n	80174aa <_malloc_r+0xf6>
 80173f8:	f8d8 4000 	ldr.w	r4, [r8]
 80173fc:	4627      	mov	r7, r4
 80173fe:	2f00      	cmp	r7, #0
 8017400:	d143      	bne.n	801748a <_malloc_r+0xd6>
 8017402:	2c00      	cmp	r4, #0
 8017404:	d04b      	beq.n	801749e <_malloc_r+0xea>
 8017406:	6823      	ldr	r3, [r4, #0]
 8017408:	4639      	mov	r1, r7
 801740a:	4630      	mov	r0, r6
 801740c:	eb04 0903 	add.w	r9, r4, r3
 8017410:	f001 fe9a 	bl	8019148 <_sbrk_r>
 8017414:	4581      	cmp	r9, r0
 8017416:	d142      	bne.n	801749e <_malloc_r+0xea>
 8017418:	6821      	ldr	r1, [r4, #0]
 801741a:	1a6d      	subs	r5, r5, r1
 801741c:	4629      	mov	r1, r5
 801741e:	4630      	mov	r0, r6
 8017420:	f7ff ffa6 	bl	8017370 <sbrk_aligned>
 8017424:	3001      	adds	r0, #1
 8017426:	d03a      	beq.n	801749e <_malloc_r+0xea>
 8017428:	6823      	ldr	r3, [r4, #0]
 801742a:	442b      	add	r3, r5
 801742c:	6023      	str	r3, [r4, #0]
 801742e:	f8d8 3000 	ldr.w	r3, [r8]
 8017432:	685a      	ldr	r2, [r3, #4]
 8017434:	bb62      	cbnz	r2, 8017490 <_malloc_r+0xdc>
 8017436:	f8c8 7000 	str.w	r7, [r8]
 801743a:	e00f      	b.n	801745c <_malloc_r+0xa8>
 801743c:	6822      	ldr	r2, [r4, #0]
 801743e:	1b52      	subs	r2, r2, r5
 8017440:	d420      	bmi.n	8017484 <_malloc_r+0xd0>
 8017442:	2a0b      	cmp	r2, #11
 8017444:	d917      	bls.n	8017476 <_malloc_r+0xc2>
 8017446:	1961      	adds	r1, r4, r5
 8017448:	42a3      	cmp	r3, r4
 801744a:	6025      	str	r5, [r4, #0]
 801744c:	bf18      	it	ne
 801744e:	6059      	strne	r1, [r3, #4]
 8017450:	6863      	ldr	r3, [r4, #4]
 8017452:	bf08      	it	eq
 8017454:	f8c8 1000 	streq.w	r1, [r8]
 8017458:	5162      	str	r2, [r4, r5]
 801745a:	604b      	str	r3, [r1, #4]
 801745c:	4630      	mov	r0, r6
 801745e:	f000 f82f 	bl	80174c0 <__malloc_unlock>
 8017462:	f104 000b 	add.w	r0, r4, #11
 8017466:	1d23      	adds	r3, r4, #4
 8017468:	f020 0007 	bic.w	r0, r0, #7
 801746c:	1ac2      	subs	r2, r0, r3
 801746e:	bf1c      	itt	ne
 8017470:	1a1b      	subne	r3, r3, r0
 8017472:	50a3      	strne	r3, [r4, r2]
 8017474:	e7af      	b.n	80173d6 <_malloc_r+0x22>
 8017476:	6862      	ldr	r2, [r4, #4]
 8017478:	42a3      	cmp	r3, r4
 801747a:	bf0c      	ite	eq
 801747c:	f8c8 2000 	streq.w	r2, [r8]
 8017480:	605a      	strne	r2, [r3, #4]
 8017482:	e7eb      	b.n	801745c <_malloc_r+0xa8>
 8017484:	4623      	mov	r3, r4
 8017486:	6864      	ldr	r4, [r4, #4]
 8017488:	e7ae      	b.n	80173e8 <_malloc_r+0x34>
 801748a:	463c      	mov	r4, r7
 801748c:	687f      	ldr	r7, [r7, #4]
 801748e:	e7b6      	b.n	80173fe <_malloc_r+0x4a>
 8017490:	461a      	mov	r2, r3
 8017492:	685b      	ldr	r3, [r3, #4]
 8017494:	42a3      	cmp	r3, r4
 8017496:	d1fb      	bne.n	8017490 <_malloc_r+0xdc>
 8017498:	2300      	movs	r3, #0
 801749a:	6053      	str	r3, [r2, #4]
 801749c:	e7de      	b.n	801745c <_malloc_r+0xa8>
 801749e:	230c      	movs	r3, #12
 80174a0:	6033      	str	r3, [r6, #0]
 80174a2:	4630      	mov	r0, r6
 80174a4:	f000 f80c 	bl	80174c0 <__malloc_unlock>
 80174a8:	e794      	b.n	80173d4 <_malloc_r+0x20>
 80174aa:	6005      	str	r5, [r0, #0]
 80174ac:	e7d6      	b.n	801745c <_malloc_r+0xa8>
 80174ae:	bf00      	nop
 80174b0:	24008528 	.word	0x24008528

080174b4 <__malloc_lock>:
 80174b4:	4801      	ldr	r0, [pc, #4]	@ (80174bc <__malloc_lock+0x8>)
 80174b6:	f7ff b8ec 	b.w	8016692 <__retarget_lock_acquire_recursive>
 80174ba:	bf00      	nop
 80174bc:	24008520 	.word	0x24008520

080174c0 <__malloc_unlock>:
 80174c0:	4801      	ldr	r0, [pc, #4]	@ (80174c8 <__malloc_unlock+0x8>)
 80174c2:	f7ff b8e7 	b.w	8016694 <__retarget_lock_release_recursive>
 80174c6:	bf00      	nop
 80174c8:	24008520 	.word	0x24008520

080174cc <_Balloc>:
 80174cc:	b570      	push	{r4, r5, r6, lr}
 80174ce:	69c6      	ldr	r6, [r0, #28]
 80174d0:	4604      	mov	r4, r0
 80174d2:	460d      	mov	r5, r1
 80174d4:	b976      	cbnz	r6, 80174f4 <_Balloc+0x28>
 80174d6:	2010      	movs	r0, #16
 80174d8:	f7ff ff42 	bl	8017360 <malloc>
 80174dc:	4602      	mov	r2, r0
 80174de:	61e0      	str	r0, [r4, #28]
 80174e0:	b920      	cbnz	r0, 80174ec <_Balloc+0x20>
 80174e2:	4b18      	ldr	r3, [pc, #96]	@ (8017544 <_Balloc+0x78>)
 80174e4:	4818      	ldr	r0, [pc, #96]	@ (8017548 <_Balloc+0x7c>)
 80174e6:	216b      	movs	r1, #107	@ 0x6b
 80174e8:	f7ff f8ea 	bl	80166c0 <__assert_func>
 80174ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80174f0:	6006      	str	r6, [r0, #0]
 80174f2:	60c6      	str	r6, [r0, #12]
 80174f4:	69e6      	ldr	r6, [r4, #28]
 80174f6:	68f3      	ldr	r3, [r6, #12]
 80174f8:	b183      	cbz	r3, 801751c <_Balloc+0x50>
 80174fa:	69e3      	ldr	r3, [r4, #28]
 80174fc:	68db      	ldr	r3, [r3, #12]
 80174fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017502:	b9b8      	cbnz	r0, 8017534 <_Balloc+0x68>
 8017504:	2101      	movs	r1, #1
 8017506:	fa01 f605 	lsl.w	r6, r1, r5
 801750a:	1d72      	adds	r2, r6, #5
 801750c:	0092      	lsls	r2, r2, #2
 801750e:	4620      	mov	r0, r4
 8017510:	f001 fe39 	bl	8019186 <_calloc_r>
 8017514:	b160      	cbz	r0, 8017530 <_Balloc+0x64>
 8017516:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801751a:	e00e      	b.n	801753a <_Balloc+0x6e>
 801751c:	2221      	movs	r2, #33	@ 0x21
 801751e:	2104      	movs	r1, #4
 8017520:	4620      	mov	r0, r4
 8017522:	f001 fe30 	bl	8019186 <_calloc_r>
 8017526:	69e3      	ldr	r3, [r4, #28]
 8017528:	60f0      	str	r0, [r6, #12]
 801752a:	68db      	ldr	r3, [r3, #12]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d1e4      	bne.n	80174fa <_Balloc+0x2e>
 8017530:	2000      	movs	r0, #0
 8017532:	bd70      	pop	{r4, r5, r6, pc}
 8017534:	6802      	ldr	r2, [r0, #0]
 8017536:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801753a:	2300      	movs	r3, #0
 801753c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017540:	e7f7      	b.n	8017532 <_Balloc+0x66>
 8017542:	bf00      	nop
 8017544:	0801c59e 	.word	0x0801c59e
 8017548:	0801c6f8 	.word	0x0801c6f8

0801754c <_Bfree>:
 801754c:	b570      	push	{r4, r5, r6, lr}
 801754e:	69c6      	ldr	r6, [r0, #28]
 8017550:	4605      	mov	r5, r0
 8017552:	460c      	mov	r4, r1
 8017554:	b976      	cbnz	r6, 8017574 <_Bfree+0x28>
 8017556:	2010      	movs	r0, #16
 8017558:	f7ff ff02 	bl	8017360 <malloc>
 801755c:	4602      	mov	r2, r0
 801755e:	61e8      	str	r0, [r5, #28]
 8017560:	b920      	cbnz	r0, 801756c <_Bfree+0x20>
 8017562:	4b09      	ldr	r3, [pc, #36]	@ (8017588 <_Bfree+0x3c>)
 8017564:	4809      	ldr	r0, [pc, #36]	@ (801758c <_Bfree+0x40>)
 8017566:	218f      	movs	r1, #143	@ 0x8f
 8017568:	f7ff f8aa 	bl	80166c0 <__assert_func>
 801756c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017570:	6006      	str	r6, [r0, #0]
 8017572:	60c6      	str	r6, [r0, #12]
 8017574:	b13c      	cbz	r4, 8017586 <_Bfree+0x3a>
 8017576:	69eb      	ldr	r3, [r5, #28]
 8017578:	6862      	ldr	r2, [r4, #4]
 801757a:	68db      	ldr	r3, [r3, #12]
 801757c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017580:	6021      	str	r1, [r4, #0]
 8017582:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017586:	bd70      	pop	{r4, r5, r6, pc}
 8017588:	0801c59e 	.word	0x0801c59e
 801758c:	0801c6f8 	.word	0x0801c6f8

08017590 <__multadd>:
 8017590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017594:	690d      	ldr	r5, [r1, #16]
 8017596:	4607      	mov	r7, r0
 8017598:	460c      	mov	r4, r1
 801759a:	461e      	mov	r6, r3
 801759c:	f101 0c14 	add.w	ip, r1, #20
 80175a0:	2000      	movs	r0, #0
 80175a2:	f8dc 3000 	ldr.w	r3, [ip]
 80175a6:	b299      	uxth	r1, r3
 80175a8:	fb02 6101 	mla	r1, r2, r1, r6
 80175ac:	0c1e      	lsrs	r6, r3, #16
 80175ae:	0c0b      	lsrs	r3, r1, #16
 80175b0:	fb02 3306 	mla	r3, r2, r6, r3
 80175b4:	b289      	uxth	r1, r1
 80175b6:	3001      	adds	r0, #1
 80175b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80175bc:	4285      	cmp	r5, r0
 80175be:	f84c 1b04 	str.w	r1, [ip], #4
 80175c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80175c6:	dcec      	bgt.n	80175a2 <__multadd+0x12>
 80175c8:	b30e      	cbz	r6, 801760e <__multadd+0x7e>
 80175ca:	68a3      	ldr	r3, [r4, #8]
 80175cc:	42ab      	cmp	r3, r5
 80175ce:	dc19      	bgt.n	8017604 <__multadd+0x74>
 80175d0:	6861      	ldr	r1, [r4, #4]
 80175d2:	4638      	mov	r0, r7
 80175d4:	3101      	adds	r1, #1
 80175d6:	f7ff ff79 	bl	80174cc <_Balloc>
 80175da:	4680      	mov	r8, r0
 80175dc:	b928      	cbnz	r0, 80175ea <__multadd+0x5a>
 80175de:	4602      	mov	r2, r0
 80175e0:	4b0c      	ldr	r3, [pc, #48]	@ (8017614 <__multadd+0x84>)
 80175e2:	480d      	ldr	r0, [pc, #52]	@ (8017618 <__multadd+0x88>)
 80175e4:	21ba      	movs	r1, #186	@ 0xba
 80175e6:	f7ff f86b 	bl	80166c0 <__assert_func>
 80175ea:	6922      	ldr	r2, [r4, #16]
 80175ec:	3202      	adds	r2, #2
 80175ee:	f104 010c 	add.w	r1, r4, #12
 80175f2:	0092      	lsls	r2, r2, #2
 80175f4:	300c      	adds	r0, #12
 80175f6:	f7ff f84e 	bl	8016696 <memcpy>
 80175fa:	4621      	mov	r1, r4
 80175fc:	4638      	mov	r0, r7
 80175fe:	f7ff ffa5 	bl	801754c <_Bfree>
 8017602:	4644      	mov	r4, r8
 8017604:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017608:	3501      	adds	r5, #1
 801760a:	615e      	str	r6, [r3, #20]
 801760c:	6125      	str	r5, [r4, #16]
 801760e:	4620      	mov	r0, r4
 8017610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017614:	0801c6e7 	.word	0x0801c6e7
 8017618:	0801c6f8 	.word	0x0801c6f8

0801761c <__s2b>:
 801761c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017620:	460c      	mov	r4, r1
 8017622:	4615      	mov	r5, r2
 8017624:	461f      	mov	r7, r3
 8017626:	2209      	movs	r2, #9
 8017628:	3308      	adds	r3, #8
 801762a:	4606      	mov	r6, r0
 801762c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017630:	2100      	movs	r1, #0
 8017632:	2201      	movs	r2, #1
 8017634:	429a      	cmp	r2, r3
 8017636:	db09      	blt.n	801764c <__s2b+0x30>
 8017638:	4630      	mov	r0, r6
 801763a:	f7ff ff47 	bl	80174cc <_Balloc>
 801763e:	b940      	cbnz	r0, 8017652 <__s2b+0x36>
 8017640:	4602      	mov	r2, r0
 8017642:	4b19      	ldr	r3, [pc, #100]	@ (80176a8 <__s2b+0x8c>)
 8017644:	4819      	ldr	r0, [pc, #100]	@ (80176ac <__s2b+0x90>)
 8017646:	21d3      	movs	r1, #211	@ 0xd3
 8017648:	f7ff f83a 	bl	80166c0 <__assert_func>
 801764c:	0052      	lsls	r2, r2, #1
 801764e:	3101      	adds	r1, #1
 8017650:	e7f0      	b.n	8017634 <__s2b+0x18>
 8017652:	9b08      	ldr	r3, [sp, #32]
 8017654:	6143      	str	r3, [r0, #20]
 8017656:	2d09      	cmp	r5, #9
 8017658:	f04f 0301 	mov.w	r3, #1
 801765c:	6103      	str	r3, [r0, #16]
 801765e:	dd16      	ble.n	801768e <__s2b+0x72>
 8017660:	f104 0909 	add.w	r9, r4, #9
 8017664:	46c8      	mov	r8, r9
 8017666:	442c      	add	r4, r5
 8017668:	f818 3b01 	ldrb.w	r3, [r8], #1
 801766c:	4601      	mov	r1, r0
 801766e:	3b30      	subs	r3, #48	@ 0x30
 8017670:	220a      	movs	r2, #10
 8017672:	4630      	mov	r0, r6
 8017674:	f7ff ff8c 	bl	8017590 <__multadd>
 8017678:	45a0      	cmp	r8, r4
 801767a:	d1f5      	bne.n	8017668 <__s2b+0x4c>
 801767c:	f1a5 0408 	sub.w	r4, r5, #8
 8017680:	444c      	add	r4, r9
 8017682:	1b2d      	subs	r5, r5, r4
 8017684:	1963      	adds	r3, r4, r5
 8017686:	42bb      	cmp	r3, r7
 8017688:	db04      	blt.n	8017694 <__s2b+0x78>
 801768a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801768e:	340a      	adds	r4, #10
 8017690:	2509      	movs	r5, #9
 8017692:	e7f6      	b.n	8017682 <__s2b+0x66>
 8017694:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017698:	4601      	mov	r1, r0
 801769a:	3b30      	subs	r3, #48	@ 0x30
 801769c:	220a      	movs	r2, #10
 801769e:	4630      	mov	r0, r6
 80176a0:	f7ff ff76 	bl	8017590 <__multadd>
 80176a4:	e7ee      	b.n	8017684 <__s2b+0x68>
 80176a6:	bf00      	nop
 80176a8:	0801c6e7 	.word	0x0801c6e7
 80176ac:	0801c6f8 	.word	0x0801c6f8

080176b0 <__hi0bits>:
 80176b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80176b4:	4603      	mov	r3, r0
 80176b6:	bf36      	itet	cc
 80176b8:	0403      	lslcc	r3, r0, #16
 80176ba:	2000      	movcs	r0, #0
 80176bc:	2010      	movcc	r0, #16
 80176be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80176c2:	bf3c      	itt	cc
 80176c4:	021b      	lslcc	r3, r3, #8
 80176c6:	3008      	addcc	r0, #8
 80176c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80176cc:	bf3c      	itt	cc
 80176ce:	011b      	lslcc	r3, r3, #4
 80176d0:	3004      	addcc	r0, #4
 80176d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80176d6:	bf3c      	itt	cc
 80176d8:	009b      	lslcc	r3, r3, #2
 80176da:	3002      	addcc	r0, #2
 80176dc:	2b00      	cmp	r3, #0
 80176de:	db05      	blt.n	80176ec <__hi0bits+0x3c>
 80176e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80176e4:	f100 0001 	add.w	r0, r0, #1
 80176e8:	bf08      	it	eq
 80176ea:	2020      	moveq	r0, #32
 80176ec:	4770      	bx	lr

080176ee <__lo0bits>:
 80176ee:	6803      	ldr	r3, [r0, #0]
 80176f0:	4602      	mov	r2, r0
 80176f2:	f013 0007 	ands.w	r0, r3, #7
 80176f6:	d00b      	beq.n	8017710 <__lo0bits+0x22>
 80176f8:	07d9      	lsls	r1, r3, #31
 80176fa:	d421      	bmi.n	8017740 <__lo0bits+0x52>
 80176fc:	0798      	lsls	r0, r3, #30
 80176fe:	bf49      	itett	mi
 8017700:	085b      	lsrmi	r3, r3, #1
 8017702:	089b      	lsrpl	r3, r3, #2
 8017704:	2001      	movmi	r0, #1
 8017706:	6013      	strmi	r3, [r2, #0]
 8017708:	bf5c      	itt	pl
 801770a:	6013      	strpl	r3, [r2, #0]
 801770c:	2002      	movpl	r0, #2
 801770e:	4770      	bx	lr
 8017710:	b299      	uxth	r1, r3
 8017712:	b909      	cbnz	r1, 8017718 <__lo0bits+0x2a>
 8017714:	0c1b      	lsrs	r3, r3, #16
 8017716:	2010      	movs	r0, #16
 8017718:	b2d9      	uxtb	r1, r3
 801771a:	b909      	cbnz	r1, 8017720 <__lo0bits+0x32>
 801771c:	3008      	adds	r0, #8
 801771e:	0a1b      	lsrs	r3, r3, #8
 8017720:	0719      	lsls	r1, r3, #28
 8017722:	bf04      	itt	eq
 8017724:	091b      	lsreq	r3, r3, #4
 8017726:	3004      	addeq	r0, #4
 8017728:	0799      	lsls	r1, r3, #30
 801772a:	bf04      	itt	eq
 801772c:	089b      	lsreq	r3, r3, #2
 801772e:	3002      	addeq	r0, #2
 8017730:	07d9      	lsls	r1, r3, #31
 8017732:	d403      	bmi.n	801773c <__lo0bits+0x4e>
 8017734:	085b      	lsrs	r3, r3, #1
 8017736:	f100 0001 	add.w	r0, r0, #1
 801773a:	d003      	beq.n	8017744 <__lo0bits+0x56>
 801773c:	6013      	str	r3, [r2, #0]
 801773e:	4770      	bx	lr
 8017740:	2000      	movs	r0, #0
 8017742:	4770      	bx	lr
 8017744:	2020      	movs	r0, #32
 8017746:	4770      	bx	lr

08017748 <__i2b>:
 8017748:	b510      	push	{r4, lr}
 801774a:	460c      	mov	r4, r1
 801774c:	2101      	movs	r1, #1
 801774e:	f7ff febd 	bl	80174cc <_Balloc>
 8017752:	4602      	mov	r2, r0
 8017754:	b928      	cbnz	r0, 8017762 <__i2b+0x1a>
 8017756:	4b05      	ldr	r3, [pc, #20]	@ (801776c <__i2b+0x24>)
 8017758:	4805      	ldr	r0, [pc, #20]	@ (8017770 <__i2b+0x28>)
 801775a:	f240 1145 	movw	r1, #325	@ 0x145
 801775e:	f7fe ffaf 	bl	80166c0 <__assert_func>
 8017762:	2301      	movs	r3, #1
 8017764:	6144      	str	r4, [r0, #20]
 8017766:	6103      	str	r3, [r0, #16]
 8017768:	bd10      	pop	{r4, pc}
 801776a:	bf00      	nop
 801776c:	0801c6e7 	.word	0x0801c6e7
 8017770:	0801c6f8 	.word	0x0801c6f8

08017774 <__multiply>:
 8017774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017778:	4617      	mov	r7, r2
 801777a:	690a      	ldr	r2, [r1, #16]
 801777c:	693b      	ldr	r3, [r7, #16]
 801777e:	429a      	cmp	r2, r3
 8017780:	bfa8      	it	ge
 8017782:	463b      	movge	r3, r7
 8017784:	4689      	mov	r9, r1
 8017786:	bfa4      	itt	ge
 8017788:	460f      	movge	r7, r1
 801778a:	4699      	movge	r9, r3
 801778c:	693d      	ldr	r5, [r7, #16]
 801778e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	6879      	ldr	r1, [r7, #4]
 8017796:	eb05 060a 	add.w	r6, r5, sl
 801779a:	42b3      	cmp	r3, r6
 801779c:	b085      	sub	sp, #20
 801779e:	bfb8      	it	lt
 80177a0:	3101      	addlt	r1, #1
 80177a2:	f7ff fe93 	bl	80174cc <_Balloc>
 80177a6:	b930      	cbnz	r0, 80177b6 <__multiply+0x42>
 80177a8:	4602      	mov	r2, r0
 80177aa:	4b41      	ldr	r3, [pc, #260]	@ (80178b0 <__multiply+0x13c>)
 80177ac:	4841      	ldr	r0, [pc, #260]	@ (80178b4 <__multiply+0x140>)
 80177ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80177b2:	f7fe ff85 	bl	80166c0 <__assert_func>
 80177b6:	f100 0414 	add.w	r4, r0, #20
 80177ba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80177be:	4623      	mov	r3, r4
 80177c0:	2200      	movs	r2, #0
 80177c2:	4573      	cmp	r3, lr
 80177c4:	d320      	bcc.n	8017808 <__multiply+0x94>
 80177c6:	f107 0814 	add.w	r8, r7, #20
 80177ca:	f109 0114 	add.w	r1, r9, #20
 80177ce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80177d2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80177d6:	9302      	str	r3, [sp, #8]
 80177d8:	1beb      	subs	r3, r5, r7
 80177da:	3b15      	subs	r3, #21
 80177dc:	f023 0303 	bic.w	r3, r3, #3
 80177e0:	3304      	adds	r3, #4
 80177e2:	3715      	adds	r7, #21
 80177e4:	42bd      	cmp	r5, r7
 80177e6:	bf38      	it	cc
 80177e8:	2304      	movcc	r3, #4
 80177ea:	9301      	str	r3, [sp, #4]
 80177ec:	9b02      	ldr	r3, [sp, #8]
 80177ee:	9103      	str	r1, [sp, #12]
 80177f0:	428b      	cmp	r3, r1
 80177f2:	d80c      	bhi.n	801780e <__multiply+0x9a>
 80177f4:	2e00      	cmp	r6, #0
 80177f6:	dd03      	ble.n	8017800 <__multiply+0x8c>
 80177f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d055      	beq.n	80178ac <__multiply+0x138>
 8017800:	6106      	str	r6, [r0, #16]
 8017802:	b005      	add	sp, #20
 8017804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017808:	f843 2b04 	str.w	r2, [r3], #4
 801780c:	e7d9      	b.n	80177c2 <__multiply+0x4e>
 801780e:	f8b1 a000 	ldrh.w	sl, [r1]
 8017812:	f1ba 0f00 	cmp.w	sl, #0
 8017816:	d01f      	beq.n	8017858 <__multiply+0xe4>
 8017818:	46c4      	mov	ip, r8
 801781a:	46a1      	mov	r9, r4
 801781c:	2700      	movs	r7, #0
 801781e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017822:	f8d9 3000 	ldr.w	r3, [r9]
 8017826:	fa1f fb82 	uxth.w	fp, r2
 801782a:	b29b      	uxth	r3, r3
 801782c:	fb0a 330b 	mla	r3, sl, fp, r3
 8017830:	443b      	add	r3, r7
 8017832:	f8d9 7000 	ldr.w	r7, [r9]
 8017836:	0c12      	lsrs	r2, r2, #16
 8017838:	0c3f      	lsrs	r7, r7, #16
 801783a:	fb0a 7202 	mla	r2, sl, r2, r7
 801783e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8017842:	b29b      	uxth	r3, r3
 8017844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017848:	4565      	cmp	r5, ip
 801784a:	f849 3b04 	str.w	r3, [r9], #4
 801784e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8017852:	d8e4      	bhi.n	801781e <__multiply+0xaa>
 8017854:	9b01      	ldr	r3, [sp, #4]
 8017856:	50e7      	str	r7, [r4, r3]
 8017858:	9b03      	ldr	r3, [sp, #12]
 801785a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801785e:	3104      	adds	r1, #4
 8017860:	f1b9 0f00 	cmp.w	r9, #0
 8017864:	d020      	beq.n	80178a8 <__multiply+0x134>
 8017866:	6823      	ldr	r3, [r4, #0]
 8017868:	4647      	mov	r7, r8
 801786a:	46a4      	mov	ip, r4
 801786c:	f04f 0a00 	mov.w	sl, #0
 8017870:	f8b7 b000 	ldrh.w	fp, [r7]
 8017874:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8017878:	fb09 220b 	mla	r2, r9, fp, r2
 801787c:	4452      	add	r2, sl
 801787e:	b29b      	uxth	r3, r3
 8017880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017884:	f84c 3b04 	str.w	r3, [ip], #4
 8017888:	f857 3b04 	ldr.w	r3, [r7], #4
 801788c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017890:	f8bc 3000 	ldrh.w	r3, [ip]
 8017894:	fb09 330a 	mla	r3, r9, sl, r3
 8017898:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801789c:	42bd      	cmp	r5, r7
 801789e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80178a2:	d8e5      	bhi.n	8017870 <__multiply+0xfc>
 80178a4:	9a01      	ldr	r2, [sp, #4]
 80178a6:	50a3      	str	r3, [r4, r2]
 80178a8:	3404      	adds	r4, #4
 80178aa:	e79f      	b.n	80177ec <__multiply+0x78>
 80178ac:	3e01      	subs	r6, #1
 80178ae:	e7a1      	b.n	80177f4 <__multiply+0x80>
 80178b0:	0801c6e7 	.word	0x0801c6e7
 80178b4:	0801c6f8 	.word	0x0801c6f8

080178b8 <__pow5mult>:
 80178b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178bc:	4615      	mov	r5, r2
 80178be:	f012 0203 	ands.w	r2, r2, #3
 80178c2:	4607      	mov	r7, r0
 80178c4:	460e      	mov	r6, r1
 80178c6:	d007      	beq.n	80178d8 <__pow5mult+0x20>
 80178c8:	4c25      	ldr	r4, [pc, #148]	@ (8017960 <__pow5mult+0xa8>)
 80178ca:	3a01      	subs	r2, #1
 80178cc:	2300      	movs	r3, #0
 80178ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80178d2:	f7ff fe5d 	bl	8017590 <__multadd>
 80178d6:	4606      	mov	r6, r0
 80178d8:	10ad      	asrs	r5, r5, #2
 80178da:	d03d      	beq.n	8017958 <__pow5mult+0xa0>
 80178dc:	69fc      	ldr	r4, [r7, #28]
 80178de:	b97c      	cbnz	r4, 8017900 <__pow5mult+0x48>
 80178e0:	2010      	movs	r0, #16
 80178e2:	f7ff fd3d 	bl	8017360 <malloc>
 80178e6:	4602      	mov	r2, r0
 80178e8:	61f8      	str	r0, [r7, #28]
 80178ea:	b928      	cbnz	r0, 80178f8 <__pow5mult+0x40>
 80178ec:	4b1d      	ldr	r3, [pc, #116]	@ (8017964 <__pow5mult+0xac>)
 80178ee:	481e      	ldr	r0, [pc, #120]	@ (8017968 <__pow5mult+0xb0>)
 80178f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80178f4:	f7fe fee4 	bl	80166c0 <__assert_func>
 80178f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80178fc:	6004      	str	r4, [r0, #0]
 80178fe:	60c4      	str	r4, [r0, #12]
 8017900:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017908:	b94c      	cbnz	r4, 801791e <__pow5mult+0x66>
 801790a:	f240 2171 	movw	r1, #625	@ 0x271
 801790e:	4638      	mov	r0, r7
 8017910:	f7ff ff1a 	bl	8017748 <__i2b>
 8017914:	2300      	movs	r3, #0
 8017916:	f8c8 0008 	str.w	r0, [r8, #8]
 801791a:	4604      	mov	r4, r0
 801791c:	6003      	str	r3, [r0, #0]
 801791e:	f04f 0900 	mov.w	r9, #0
 8017922:	07eb      	lsls	r3, r5, #31
 8017924:	d50a      	bpl.n	801793c <__pow5mult+0x84>
 8017926:	4631      	mov	r1, r6
 8017928:	4622      	mov	r2, r4
 801792a:	4638      	mov	r0, r7
 801792c:	f7ff ff22 	bl	8017774 <__multiply>
 8017930:	4631      	mov	r1, r6
 8017932:	4680      	mov	r8, r0
 8017934:	4638      	mov	r0, r7
 8017936:	f7ff fe09 	bl	801754c <_Bfree>
 801793a:	4646      	mov	r6, r8
 801793c:	106d      	asrs	r5, r5, #1
 801793e:	d00b      	beq.n	8017958 <__pow5mult+0xa0>
 8017940:	6820      	ldr	r0, [r4, #0]
 8017942:	b938      	cbnz	r0, 8017954 <__pow5mult+0x9c>
 8017944:	4622      	mov	r2, r4
 8017946:	4621      	mov	r1, r4
 8017948:	4638      	mov	r0, r7
 801794a:	f7ff ff13 	bl	8017774 <__multiply>
 801794e:	6020      	str	r0, [r4, #0]
 8017950:	f8c0 9000 	str.w	r9, [r0]
 8017954:	4604      	mov	r4, r0
 8017956:	e7e4      	b.n	8017922 <__pow5mult+0x6a>
 8017958:	4630      	mov	r0, r6
 801795a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801795e:	bf00      	nop
 8017960:	0801c8d0 	.word	0x0801c8d0
 8017964:	0801c59e 	.word	0x0801c59e
 8017968:	0801c6f8 	.word	0x0801c6f8

0801796c <__lshift>:
 801796c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017970:	460c      	mov	r4, r1
 8017972:	6849      	ldr	r1, [r1, #4]
 8017974:	6923      	ldr	r3, [r4, #16]
 8017976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801797a:	68a3      	ldr	r3, [r4, #8]
 801797c:	4607      	mov	r7, r0
 801797e:	4691      	mov	r9, r2
 8017980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017984:	f108 0601 	add.w	r6, r8, #1
 8017988:	42b3      	cmp	r3, r6
 801798a:	db0b      	blt.n	80179a4 <__lshift+0x38>
 801798c:	4638      	mov	r0, r7
 801798e:	f7ff fd9d 	bl	80174cc <_Balloc>
 8017992:	4605      	mov	r5, r0
 8017994:	b948      	cbnz	r0, 80179aa <__lshift+0x3e>
 8017996:	4602      	mov	r2, r0
 8017998:	4b28      	ldr	r3, [pc, #160]	@ (8017a3c <__lshift+0xd0>)
 801799a:	4829      	ldr	r0, [pc, #164]	@ (8017a40 <__lshift+0xd4>)
 801799c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80179a0:	f7fe fe8e 	bl	80166c0 <__assert_func>
 80179a4:	3101      	adds	r1, #1
 80179a6:	005b      	lsls	r3, r3, #1
 80179a8:	e7ee      	b.n	8017988 <__lshift+0x1c>
 80179aa:	2300      	movs	r3, #0
 80179ac:	f100 0114 	add.w	r1, r0, #20
 80179b0:	f100 0210 	add.w	r2, r0, #16
 80179b4:	4618      	mov	r0, r3
 80179b6:	4553      	cmp	r3, sl
 80179b8:	db33      	blt.n	8017a22 <__lshift+0xb6>
 80179ba:	6920      	ldr	r0, [r4, #16]
 80179bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80179c0:	f104 0314 	add.w	r3, r4, #20
 80179c4:	f019 091f 	ands.w	r9, r9, #31
 80179c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80179cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80179d0:	d02b      	beq.n	8017a2a <__lshift+0xbe>
 80179d2:	f1c9 0e20 	rsb	lr, r9, #32
 80179d6:	468a      	mov	sl, r1
 80179d8:	2200      	movs	r2, #0
 80179da:	6818      	ldr	r0, [r3, #0]
 80179dc:	fa00 f009 	lsl.w	r0, r0, r9
 80179e0:	4310      	orrs	r0, r2
 80179e2:	f84a 0b04 	str.w	r0, [sl], #4
 80179e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80179ea:	459c      	cmp	ip, r3
 80179ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80179f0:	d8f3      	bhi.n	80179da <__lshift+0x6e>
 80179f2:	ebac 0304 	sub.w	r3, ip, r4
 80179f6:	3b15      	subs	r3, #21
 80179f8:	f023 0303 	bic.w	r3, r3, #3
 80179fc:	3304      	adds	r3, #4
 80179fe:	f104 0015 	add.w	r0, r4, #21
 8017a02:	4560      	cmp	r0, ip
 8017a04:	bf88      	it	hi
 8017a06:	2304      	movhi	r3, #4
 8017a08:	50ca      	str	r2, [r1, r3]
 8017a0a:	b10a      	cbz	r2, 8017a10 <__lshift+0xa4>
 8017a0c:	f108 0602 	add.w	r6, r8, #2
 8017a10:	3e01      	subs	r6, #1
 8017a12:	4638      	mov	r0, r7
 8017a14:	612e      	str	r6, [r5, #16]
 8017a16:	4621      	mov	r1, r4
 8017a18:	f7ff fd98 	bl	801754c <_Bfree>
 8017a1c:	4628      	mov	r0, r5
 8017a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8017a26:	3301      	adds	r3, #1
 8017a28:	e7c5      	b.n	80179b6 <__lshift+0x4a>
 8017a2a:	3904      	subs	r1, #4
 8017a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8017a34:	459c      	cmp	ip, r3
 8017a36:	d8f9      	bhi.n	8017a2c <__lshift+0xc0>
 8017a38:	e7ea      	b.n	8017a10 <__lshift+0xa4>
 8017a3a:	bf00      	nop
 8017a3c:	0801c6e7 	.word	0x0801c6e7
 8017a40:	0801c6f8 	.word	0x0801c6f8

08017a44 <__mcmp>:
 8017a44:	690a      	ldr	r2, [r1, #16]
 8017a46:	4603      	mov	r3, r0
 8017a48:	6900      	ldr	r0, [r0, #16]
 8017a4a:	1a80      	subs	r0, r0, r2
 8017a4c:	b530      	push	{r4, r5, lr}
 8017a4e:	d10e      	bne.n	8017a6e <__mcmp+0x2a>
 8017a50:	3314      	adds	r3, #20
 8017a52:	3114      	adds	r1, #20
 8017a54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017a58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017a5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017a60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017a64:	4295      	cmp	r5, r2
 8017a66:	d003      	beq.n	8017a70 <__mcmp+0x2c>
 8017a68:	d205      	bcs.n	8017a76 <__mcmp+0x32>
 8017a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a6e:	bd30      	pop	{r4, r5, pc}
 8017a70:	42a3      	cmp	r3, r4
 8017a72:	d3f3      	bcc.n	8017a5c <__mcmp+0x18>
 8017a74:	e7fb      	b.n	8017a6e <__mcmp+0x2a>
 8017a76:	2001      	movs	r0, #1
 8017a78:	e7f9      	b.n	8017a6e <__mcmp+0x2a>
	...

08017a7c <__mdiff>:
 8017a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a80:	4689      	mov	r9, r1
 8017a82:	4606      	mov	r6, r0
 8017a84:	4611      	mov	r1, r2
 8017a86:	4648      	mov	r0, r9
 8017a88:	4614      	mov	r4, r2
 8017a8a:	f7ff ffdb 	bl	8017a44 <__mcmp>
 8017a8e:	1e05      	subs	r5, r0, #0
 8017a90:	d112      	bne.n	8017ab8 <__mdiff+0x3c>
 8017a92:	4629      	mov	r1, r5
 8017a94:	4630      	mov	r0, r6
 8017a96:	f7ff fd19 	bl	80174cc <_Balloc>
 8017a9a:	4602      	mov	r2, r0
 8017a9c:	b928      	cbnz	r0, 8017aaa <__mdiff+0x2e>
 8017a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8017b9c <__mdiff+0x120>)
 8017aa0:	f240 2137 	movw	r1, #567	@ 0x237
 8017aa4:	483e      	ldr	r0, [pc, #248]	@ (8017ba0 <__mdiff+0x124>)
 8017aa6:	f7fe fe0b 	bl	80166c0 <__assert_func>
 8017aaa:	2301      	movs	r3, #1
 8017aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017ab0:	4610      	mov	r0, r2
 8017ab2:	b003      	add	sp, #12
 8017ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab8:	bfbc      	itt	lt
 8017aba:	464b      	movlt	r3, r9
 8017abc:	46a1      	movlt	r9, r4
 8017abe:	4630      	mov	r0, r6
 8017ac0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017ac4:	bfba      	itte	lt
 8017ac6:	461c      	movlt	r4, r3
 8017ac8:	2501      	movlt	r5, #1
 8017aca:	2500      	movge	r5, #0
 8017acc:	f7ff fcfe 	bl	80174cc <_Balloc>
 8017ad0:	4602      	mov	r2, r0
 8017ad2:	b918      	cbnz	r0, 8017adc <__mdiff+0x60>
 8017ad4:	4b31      	ldr	r3, [pc, #196]	@ (8017b9c <__mdiff+0x120>)
 8017ad6:	f240 2145 	movw	r1, #581	@ 0x245
 8017ada:	e7e3      	b.n	8017aa4 <__mdiff+0x28>
 8017adc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017ae0:	6926      	ldr	r6, [r4, #16]
 8017ae2:	60c5      	str	r5, [r0, #12]
 8017ae4:	f109 0310 	add.w	r3, r9, #16
 8017ae8:	f109 0514 	add.w	r5, r9, #20
 8017aec:	f104 0e14 	add.w	lr, r4, #20
 8017af0:	f100 0b14 	add.w	fp, r0, #20
 8017af4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017af8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017afc:	9301      	str	r3, [sp, #4]
 8017afe:	46d9      	mov	r9, fp
 8017b00:	f04f 0c00 	mov.w	ip, #0
 8017b04:	9b01      	ldr	r3, [sp, #4]
 8017b06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017b0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017b0e:	9301      	str	r3, [sp, #4]
 8017b10:	fa1f f38a 	uxth.w	r3, sl
 8017b14:	4619      	mov	r1, r3
 8017b16:	b283      	uxth	r3, r0
 8017b18:	1acb      	subs	r3, r1, r3
 8017b1a:	0c00      	lsrs	r0, r0, #16
 8017b1c:	4463      	add	r3, ip
 8017b1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017b22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017b26:	b29b      	uxth	r3, r3
 8017b28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017b2c:	4576      	cmp	r6, lr
 8017b2e:	f849 3b04 	str.w	r3, [r9], #4
 8017b32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017b36:	d8e5      	bhi.n	8017b04 <__mdiff+0x88>
 8017b38:	1b33      	subs	r3, r6, r4
 8017b3a:	3b15      	subs	r3, #21
 8017b3c:	f023 0303 	bic.w	r3, r3, #3
 8017b40:	3415      	adds	r4, #21
 8017b42:	3304      	adds	r3, #4
 8017b44:	42a6      	cmp	r6, r4
 8017b46:	bf38      	it	cc
 8017b48:	2304      	movcc	r3, #4
 8017b4a:	441d      	add	r5, r3
 8017b4c:	445b      	add	r3, fp
 8017b4e:	461e      	mov	r6, r3
 8017b50:	462c      	mov	r4, r5
 8017b52:	4544      	cmp	r4, r8
 8017b54:	d30e      	bcc.n	8017b74 <__mdiff+0xf8>
 8017b56:	f108 0103 	add.w	r1, r8, #3
 8017b5a:	1b49      	subs	r1, r1, r5
 8017b5c:	f021 0103 	bic.w	r1, r1, #3
 8017b60:	3d03      	subs	r5, #3
 8017b62:	45a8      	cmp	r8, r5
 8017b64:	bf38      	it	cc
 8017b66:	2100      	movcc	r1, #0
 8017b68:	440b      	add	r3, r1
 8017b6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017b6e:	b191      	cbz	r1, 8017b96 <__mdiff+0x11a>
 8017b70:	6117      	str	r7, [r2, #16]
 8017b72:	e79d      	b.n	8017ab0 <__mdiff+0x34>
 8017b74:	f854 1b04 	ldr.w	r1, [r4], #4
 8017b78:	46e6      	mov	lr, ip
 8017b7a:	0c08      	lsrs	r0, r1, #16
 8017b7c:	fa1c fc81 	uxtah	ip, ip, r1
 8017b80:	4471      	add	r1, lr
 8017b82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017b86:	b289      	uxth	r1, r1
 8017b88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017b8c:	f846 1b04 	str.w	r1, [r6], #4
 8017b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017b94:	e7dd      	b.n	8017b52 <__mdiff+0xd6>
 8017b96:	3f01      	subs	r7, #1
 8017b98:	e7e7      	b.n	8017b6a <__mdiff+0xee>
 8017b9a:	bf00      	nop
 8017b9c:	0801c6e7 	.word	0x0801c6e7
 8017ba0:	0801c6f8 	.word	0x0801c6f8

08017ba4 <__ulp>:
 8017ba4:	b082      	sub	sp, #8
 8017ba6:	ed8d 0b00 	vstr	d0, [sp]
 8017baa:	9a01      	ldr	r2, [sp, #4]
 8017bac:	4b0f      	ldr	r3, [pc, #60]	@ (8017bec <__ulp+0x48>)
 8017bae:	4013      	ands	r3, r2
 8017bb0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	dc08      	bgt.n	8017bca <__ulp+0x26>
 8017bb8:	425b      	negs	r3, r3
 8017bba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017bbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017bc2:	da04      	bge.n	8017bce <__ulp+0x2a>
 8017bc4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017bc8:	4113      	asrs	r3, r2
 8017bca:	2200      	movs	r2, #0
 8017bcc:	e008      	b.n	8017be0 <__ulp+0x3c>
 8017bce:	f1a2 0314 	sub.w	r3, r2, #20
 8017bd2:	2b1e      	cmp	r3, #30
 8017bd4:	bfda      	itte	le
 8017bd6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017bda:	40da      	lsrle	r2, r3
 8017bdc:	2201      	movgt	r2, #1
 8017bde:	2300      	movs	r3, #0
 8017be0:	4619      	mov	r1, r3
 8017be2:	4610      	mov	r0, r2
 8017be4:	ec41 0b10 	vmov	d0, r0, r1
 8017be8:	b002      	add	sp, #8
 8017bea:	4770      	bx	lr
 8017bec:	7ff00000 	.word	0x7ff00000

08017bf0 <__b2d>:
 8017bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bf4:	6906      	ldr	r6, [r0, #16]
 8017bf6:	f100 0814 	add.w	r8, r0, #20
 8017bfa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017bfe:	1f37      	subs	r7, r6, #4
 8017c00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017c04:	4610      	mov	r0, r2
 8017c06:	f7ff fd53 	bl	80176b0 <__hi0bits>
 8017c0a:	f1c0 0320 	rsb	r3, r0, #32
 8017c0e:	280a      	cmp	r0, #10
 8017c10:	600b      	str	r3, [r1, #0]
 8017c12:	491b      	ldr	r1, [pc, #108]	@ (8017c80 <__b2d+0x90>)
 8017c14:	dc15      	bgt.n	8017c42 <__b2d+0x52>
 8017c16:	f1c0 0c0b 	rsb	ip, r0, #11
 8017c1a:	fa22 f30c 	lsr.w	r3, r2, ip
 8017c1e:	45b8      	cmp	r8, r7
 8017c20:	ea43 0501 	orr.w	r5, r3, r1
 8017c24:	bf34      	ite	cc
 8017c26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017c2a:	2300      	movcs	r3, #0
 8017c2c:	3015      	adds	r0, #21
 8017c2e:	fa02 f000 	lsl.w	r0, r2, r0
 8017c32:	fa23 f30c 	lsr.w	r3, r3, ip
 8017c36:	4303      	orrs	r3, r0
 8017c38:	461c      	mov	r4, r3
 8017c3a:	ec45 4b10 	vmov	d0, r4, r5
 8017c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c42:	45b8      	cmp	r8, r7
 8017c44:	bf3a      	itte	cc
 8017c46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017c4a:	f1a6 0708 	subcc.w	r7, r6, #8
 8017c4e:	2300      	movcs	r3, #0
 8017c50:	380b      	subs	r0, #11
 8017c52:	d012      	beq.n	8017c7a <__b2d+0x8a>
 8017c54:	f1c0 0120 	rsb	r1, r0, #32
 8017c58:	fa23 f401 	lsr.w	r4, r3, r1
 8017c5c:	4082      	lsls	r2, r0
 8017c5e:	4322      	orrs	r2, r4
 8017c60:	4547      	cmp	r7, r8
 8017c62:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017c66:	bf8c      	ite	hi
 8017c68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017c6c:	2200      	movls	r2, #0
 8017c6e:	4083      	lsls	r3, r0
 8017c70:	40ca      	lsrs	r2, r1
 8017c72:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017c76:	4313      	orrs	r3, r2
 8017c78:	e7de      	b.n	8017c38 <__b2d+0x48>
 8017c7a:	ea42 0501 	orr.w	r5, r2, r1
 8017c7e:	e7db      	b.n	8017c38 <__b2d+0x48>
 8017c80:	3ff00000 	.word	0x3ff00000

08017c84 <__d2b>:
 8017c84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017c88:	460f      	mov	r7, r1
 8017c8a:	2101      	movs	r1, #1
 8017c8c:	ec59 8b10 	vmov	r8, r9, d0
 8017c90:	4616      	mov	r6, r2
 8017c92:	f7ff fc1b 	bl	80174cc <_Balloc>
 8017c96:	4604      	mov	r4, r0
 8017c98:	b930      	cbnz	r0, 8017ca8 <__d2b+0x24>
 8017c9a:	4602      	mov	r2, r0
 8017c9c:	4b23      	ldr	r3, [pc, #140]	@ (8017d2c <__d2b+0xa8>)
 8017c9e:	4824      	ldr	r0, [pc, #144]	@ (8017d30 <__d2b+0xac>)
 8017ca0:	f240 310f 	movw	r1, #783	@ 0x30f
 8017ca4:	f7fe fd0c 	bl	80166c0 <__assert_func>
 8017ca8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017cac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017cb0:	b10d      	cbz	r5, 8017cb6 <__d2b+0x32>
 8017cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017cb6:	9301      	str	r3, [sp, #4]
 8017cb8:	f1b8 0300 	subs.w	r3, r8, #0
 8017cbc:	d023      	beq.n	8017d06 <__d2b+0x82>
 8017cbe:	4668      	mov	r0, sp
 8017cc0:	9300      	str	r3, [sp, #0]
 8017cc2:	f7ff fd14 	bl	80176ee <__lo0bits>
 8017cc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017cca:	b1d0      	cbz	r0, 8017d02 <__d2b+0x7e>
 8017ccc:	f1c0 0320 	rsb	r3, r0, #32
 8017cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8017cd4:	430b      	orrs	r3, r1
 8017cd6:	40c2      	lsrs	r2, r0
 8017cd8:	6163      	str	r3, [r4, #20]
 8017cda:	9201      	str	r2, [sp, #4]
 8017cdc:	9b01      	ldr	r3, [sp, #4]
 8017cde:	61a3      	str	r3, [r4, #24]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	bf0c      	ite	eq
 8017ce4:	2201      	moveq	r2, #1
 8017ce6:	2202      	movne	r2, #2
 8017ce8:	6122      	str	r2, [r4, #16]
 8017cea:	b1a5      	cbz	r5, 8017d16 <__d2b+0x92>
 8017cec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017cf0:	4405      	add	r5, r0
 8017cf2:	603d      	str	r5, [r7, #0]
 8017cf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017cf8:	6030      	str	r0, [r6, #0]
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	b003      	add	sp, #12
 8017cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d02:	6161      	str	r1, [r4, #20]
 8017d04:	e7ea      	b.n	8017cdc <__d2b+0x58>
 8017d06:	a801      	add	r0, sp, #4
 8017d08:	f7ff fcf1 	bl	80176ee <__lo0bits>
 8017d0c:	9b01      	ldr	r3, [sp, #4]
 8017d0e:	6163      	str	r3, [r4, #20]
 8017d10:	3020      	adds	r0, #32
 8017d12:	2201      	movs	r2, #1
 8017d14:	e7e8      	b.n	8017ce8 <__d2b+0x64>
 8017d16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017d1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017d1e:	6038      	str	r0, [r7, #0]
 8017d20:	6918      	ldr	r0, [r3, #16]
 8017d22:	f7ff fcc5 	bl	80176b0 <__hi0bits>
 8017d26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017d2a:	e7e5      	b.n	8017cf8 <__d2b+0x74>
 8017d2c:	0801c6e7 	.word	0x0801c6e7
 8017d30:	0801c6f8 	.word	0x0801c6f8

08017d34 <__ratio>:
 8017d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d38:	4688      	mov	r8, r1
 8017d3a:	4669      	mov	r1, sp
 8017d3c:	4681      	mov	r9, r0
 8017d3e:	f7ff ff57 	bl	8017bf0 <__b2d>
 8017d42:	a901      	add	r1, sp, #4
 8017d44:	4640      	mov	r0, r8
 8017d46:	ec55 4b10 	vmov	r4, r5, d0
 8017d4a:	f7ff ff51 	bl	8017bf0 <__b2d>
 8017d4e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017d52:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017d56:	1ad2      	subs	r2, r2, r3
 8017d58:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017d5c:	1a5b      	subs	r3, r3, r1
 8017d5e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017d62:	ec57 6b10 	vmov	r6, r7, d0
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	bfd6      	itet	le
 8017d6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017d6e:	462a      	movgt	r2, r5
 8017d70:	463a      	movle	r2, r7
 8017d72:	46ab      	mov	fp, r5
 8017d74:	46a2      	mov	sl, r4
 8017d76:	bfce      	itee	gt
 8017d78:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017d7c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017d80:	ee00 3a90 	vmovle	s1, r3
 8017d84:	ec4b ab17 	vmov	d7, sl, fp
 8017d88:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017d8c:	b003      	add	sp, #12
 8017d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017d92 <__copybits>:
 8017d92:	3901      	subs	r1, #1
 8017d94:	b570      	push	{r4, r5, r6, lr}
 8017d96:	1149      	asrs	r1, r1, #5
 8017d98:	6914      	ldr	r4, [r2, #16]
 8017d9a:	3101      	adds	r1, #1
 8017d9c:	f102 0314 	add.w	r3, r2, #20
 8017da0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017da4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017da8:	1f05      	subs	r5, r0, #4
 8017daa:	42a3      	cmp	r3, r4
 8017dac:	d30c      	bcc.n	8017dc8 <__copybits+0x36>
 8017dae:	1aa3      	subs	r3, r4, r2
 8017db0:	3b11      	subs	r3, #17
 8017db2:	f023 0303 	bic.w	r3, r3, #3
 8017db6:	3211      	adds	r2, #17
 8017db8:	42a2      	cmp	r2, r4
 8017dba:	bf88      	it	hi
 8017dbc:	2300      	movhi	r3, #0
 8017dbe:	4418      	add	r0, r3
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	4288      	cmp	r0, r1
 8017dc4:	d305      	bcc.n	8017dd2 <__copybits+0x40>
 8017dc6:	bd70      	pop	{r4, r5, r6, pc}
 8017dc8:	f853 6b04 	ldr.w	r6, [r3], #4
 8017dcc:	f845 6f04 	str.w	r6, [r5, #4]!
 8017dd0:	e7eb      	b.n	8017daa <__copybits+0x18>
 8017dd2:	f840 3b04 	str.w	r3, [r0], #4
 8017dd6:	e7f4      	b.n	8017dc2 <__copybits+0x30>

08017dd8 <__any_on>:
 8017dd8:	f100 0214 	add.w	r2, r0, #20
 8017ddc:	6900      	ldr	r0, [r0, #16]
 8017dde:	114b      	asrs	r3, r1, #5
 8017de0:	4298      	cmp	r0, r3
 8017de2:	b510      	push	{r4, lr}
 8017de4:	db11      	blt.n	8017e0a <__any_on+0x32>
 8017de6:	dd0a      	ble.n	8017dfe <__any_on+0x26>
 8017de8:	f011 011f 	ands.w	r1, r1, #31
 8017dec:	d007      	beq.n	8017dfe <__any_on+0x26>
 8017dee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017df2:	fa24 f001 	lsr.w	r0, r4, r1
 8017df6:	fa00 f101 	lsl.w	r1, r0, r1
 8017dfa:	428c      	cmp	r4, r1
 8017dfc:	d10b      	bne.n	8017e16 <__any_on+0x3e>
 8017dfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017e02:	4293      	cmp	r3, r2
 8017e04:	d803      	bhi.n	8017e0e <__any_on+0x36>
 8017e06:	2000      	movs	r0, #0
 8017e08:	bd10      	pop	{r4, pc}
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	e7f7      	b.n	8017dfe <__any_on+0x26>
 8017e0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017e12:	2900      	cmp	r1, #0
 8017e14:	d0f5      	beq.n	8017e02 <__any_on+0x2a>
 8017e16:	2001      	movs	r0, #1
 8017e18:	e7f6      	b.n	8017e08 <__any_on+0x30>

08017e1a <sulp>:
 8017e1a:	b570      	push	{r4, r5, r6, lr}
 8017e1c:	4604      	mov	r4, r0
 8017e1e:	460d      	mov	r5, r1
 8017e20:	4616      	mov	r6, r2
 8017e22:	ec45 4b10 	vmov	d0, r4, r5
 8017e26:	f7ff febd 	bl	8017ba4 <__ulp>
 8017e2a:	b17e      	cbz	r6, 8017e4c <sulp+0x32>
 8017e2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017e30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	dd09      	ble.n	8017e4c <sulp+0x32>
 8017e38:	051b      	lsls	r3, r3, #20
 8017e3a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8017e3e:	2000      	movs	r0, #0
 8017e40:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8017e44:	ec41 0b17 	vmov	d7, r0, r1
 8017e48:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017e4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017e50 <_strtod_l>:
 8017e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e54:	ed2d 8b0a 	vpush	{d8-d12}
 8017e58:	b097      	sub	sp, #92	@ 0x5c
 8017e5a:	4688      	mov	r8, r1
 8017e5c:	920e      	str	r2, [sp, #56]	@ 0x38
 8017e5e:	2200      	movs	r2, #0
 8017e60:	9212      	str	r2, [sp, #72]	@ 0x48
 8017e62:	9005      	str	r0, [sp, #20]
 8017e64:	f04f 0a00 	mov.w	sl, #0
 8017e68:	f04f 0b00 	mov.w	fp, #0
 8017e6c:	460a      	mov	r2, r1
 8017e6e:	9211      	str	r2, [sp, #68]	@ 0x44
 8017e70:	7811      	ldrb	r1, [r2, #0]
 8017e72:	292b      	cmp	r1, #43	@ 0x2b
 8017e74:	d04c      	beq.n	8017f10 <_strtod_l+0xc0>
 8017e76:	d839      	bhi.n	8017eec <_strtod_l+0x9c>
 8017e78:	290d      	cmp	r1, #13
 8017e7a:	d833      	bhi.n	8017ee4 <_strtod_l+0x94>
 8017e7c:	2908      	cmp	r1, #8
 8017e7e:	d833      	bhi.n	8017ee8 <_strtod_l+0x98>
 8017e80:	2900      	cmp	r1, #0
 8017e82:	d03c      	beq.n	8017efe <_strtod_l+0xae>
 8017e84:	2200      	movs	r2, #0
 8017e86:	9208      	str	r2, [sp, #32]
 8017e88:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8017e8a:	782a      	ldrb	r2, [r5, #0]
 8017e8c:	2a30      	cmp	r2, #48	@ 0x30
 8017e8e:	f040 80b7 	bne.w	8018000 <_strtod_l+0x1b0>
 8017e92:	786a      	ldrb	r2, [r5, #1]
 8017e94:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017e98:	2a58      	cmp	r2, #88	@ 0x58
 8017e9a:	d170      	bne.n	8017f7e <_strtod_l+0x12e>
 8017e9c:	9302      	str	r3, [sp, #8]
 8017e9e:	9b08      	ldr	r3, [sp, #32]
 8017ea0:	9301      	str	r3, [sp, #4]
 8017ea2:	ab12      	add	r3, sp, #72	@ 0x48
 8017ea4:	9300      	str	r3, [sp, #0]
 8017ea6:	4a90      	ldr	r2, [pc, #576]	@ (80180e8 <_strtod_l+0x298>)
 8017ea8:	9805      	ldr	r0, [sp, #20]
 8017eaa:	ab13      	add	r3, sp, #76	@ 0x4c
 8017eac:	a911      	add	r1, sp, #68	@ 0x44
 8017eae:	f001 f9e5 	bl	801927c <__gethex>
 8017eb2:	f010 060f 	ands.w	r6, r0, #15
 8017eb6:	4604      	mov	r4, r0
 8017eb8:	d005      	beq.n	8017ec6 <_strtod_l+0x76>
 8017eba:	2e06      	cmp	r6, #6
 8017ebc:	d12a      	bne.n	8017f14 <_strtod_l+0xc4>
 8017ebe:	3501      	adds	r5, #1
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	9511      	str	r5, [sp, #68]	@ 0x44
 8017ec4:	9308      	str	r3, [sp, #32]
 8017ec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	f040 8537 	bne.w	801893c <_strtod_l+0xaec>
 8017ece:	9b08      	ldr	r3, [sp, #32]
 8017ed0:	ec4b ab10 	vmov	d0, sl, fp
 8017ed4:	b1cb      	cbz	r3, 8017f0a <_strtod_l+0xba>
 8017ed6:	eeb1 0b40 	vneg.f64	d0, d0
 8017eda:	b017      	add	sp, #92	@ 0x5c
 8017edc:	ecbd 8b0a 	vpop	{d8-d12}
 8017ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ee4:	2920      	cmp	r1, #32
 8017ee6:	d1cd      	bne.n	8017e84 <_strtod_l+0x34>
 8017ee8:	3201      	adds	r2, #1
 8017eea:	e7c0      	b.n	8017e6e <_strtod_l+0x1e>
 8017eec:	292d      	cmp	r1, #45	@ 0x2d
 8017eee:	d1c9      	bne.n	8017e84 <_strtod_l+0x34>
 8017ef0:	2101      	movs	r1, #1
 8017ef2:	9108      	str	r1, [sp, #32]
 8017ef4:	1c51      	adds	r1, r2, #1
 8017ef6:	9111      	str	r1, [sp, #68]	@ 0x44
 8017ef8:	7852      	ldrb	r2, [r2, #1]
 8017efa:	2a00      	cmp	r2, #0
 8017efc:	d1c4      	bne.n	8017e88 <_strtod_l+0x38>
 8017efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f00:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	f040 8517 	bne.w	8018938 <_strtod_l+0xae8>
 8017f0a:	ec4b ab10 	vmov	d0, sl, fp
 8017f0e:	e7e4      	b.n	8017eda <_strtod_l+0x8a>
 8017f10:	2100      	movs	r1, #0
 8017f12:	e7ee      	b.n	8017ef2 <_strtod_l+0xa2>
 8017f14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017f16:	b13a      	cbz	r2, 8017f28 <_strtod_l+0xd8>
 8017f18:	2135      	movs	r1, #53	@ 0x35
 8017f1a:	a814      	add	r0, sp, #80	@ 0x50
 8017f1c:	f7ff ff39 	bl	8017d92 <__copybits>
 8017f20:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017f22:	9805      	ldr	r0, [sp, #20]
 8017f24:	f7ff fb12 	bl	801754c <_Bfree>
 8017f28:	1e73      	subs	r3, r6, #1
 8017f2a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017f2c:	2b04      	cmp	r3, #4
 8017f2e:	d806      	bhi.n	8017f3e <_strtod_l+0xee>
 8017f30:	e8df f003 	tbb	[pc, r3]
 8017f34:	201d0314 	.word	0x201d0314
 8017f38:	14          	.byte	0x14
 8017f39:	00          	.byte	0x00
 8017f3a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8017f3e:	05e3      	lsls	r3, r4, #23
 8017f40:	bf48      	it	mi
 8017f42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8017f46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017f4a:	0d1b      	lsrs	r3, r3, #20
 8017f4c:	051b      	lsls	r3, r3, #20
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d1b9      	bne.n	8017ec6 <_strtod_l+0x76>
 8017f52:	f7fe fb73 	bl	801663c <__errno>
 8017f56:	2322      	movs	r3, #34	@ 0x22
 8017f58:	6003      	str	r3, [r0, #0]
 8017f5a:	e7b4      	b.n	8017ec6 <_strtod_l+0x76>
 8017f5c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8017f60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8017f64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8017f68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017f6c:	e7e7      	b.n	8017f3e <_strtod_l+0xee>
 8017f6e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80180f0 <_strtod_l+0x2a0>
 8017f72:	e7e4      	b.n	8017f3e <_strtod_l+0xee>
 8017f74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8017f78:	f04f 3aff 	mov.w	sl, #4294967295
 8017f7c:	e7df      	b.n	8017f3e <_strtod_l+0xee>
 8017f7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017f80:	1c5a      	adds	r2, r3, #1
 8017f82:	9211      	str	r2, [sp, #68]	@ 0x44
 8017f84:	785b      	ldrb	r3, [r3, #1]
 8017f86:	2b30      	cmp	r3, #48	@ 0x30
 8017f88:	d0f9      	beq.n	8017f7e <_strtod_l+0x12e>
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d09b      	beq.n	8017ec6 <_strtod_l+0x76>
 8017f8e:	2301      	movs	r3, #1
 8017f90:	9307      	str	r3, [sp, #28]
 8017f92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017f94:	930a      	str	r3, [sp, #40]	@ 0x28
 8017f96:	2300      	movs	r3, #0
 8017f98:	9306      	str	r3, [sp, #24]
 8017f9a:	4699      	mov	r9, r3
 8017f9c:	461d      	mov	r5, r3
 8017f9e:	220a      	movs	r2, #10
 8017fa0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017fa2:	7804      	ldrb	r4, [r0, #0]
 8017fa4:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8017fa8:	b2d9      	uxtb	r1, r3
 8017faa:	2909      	cmp	r1, #9
 8017fac:	d92a      	bls.n	8018004 <_strtod_l+0x1b4>
 8017fae:	494f      	ldr	r1, [pc, #316]	@ (80180ec <_strtod_l+0x29c>)
 8017fb0:	2201      	movs	r2, #1
 8017fb2:	f7fe fae7 	bl	8016584 <strncmp>
 8017fb6:	b398      	cbz	r0, 8018020 <_strtod_l+0x1d0>
 8017fb8:	2000      	movs	r0, #0
 8017fba:	4622      	mov	r2, r4
 8017fbc:	462b      	mov	r3, r5
 8017fbe:	4607      	mov	r7, r0
 8017fc0:	4601      	mov	r1, r0
 8017fc2:	2a65      	cmp	r2, #101	@ 0x65
 8017fc4:	d001      	beq.n	8017fca <_strtod_l+0x17a>
 8017fc6:	2a45      	cmp	r2, #69	@ 0x45
 8017fc8:	d118      	bne.n	8017ffc <_strtod_l+0x1ac>
 8017fca:	b91b      	cbnz	r3, 8017fd4 <_strtod_l+0x184>
 8017fcc:	9b07      	ldr	r3, [sp, #28]
 8017fce:	4303      	orrs	r3, r0
 8017fd0:	d095      	beq.n	8017efe <_strtod_l+0xae>
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8017fd8:	f108 0201 	add.w	r2, r8, #1
 8017fdc:	9211      	str	r2, [sp, #68]	@ 0x44
 8017fde:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017fe2:	2a2b      	cmp	r2, #43	@ 0x2b
 8017fe4:	d074      	beq.n	80180d0 <_strtod_l+0x280>
 8017fe6:	2a2d      	cmp	r2, #45	@ 0x2d
 8017fe8:	d07a      	beq.n	80180e0 <_strtod_l+0x290>
 8017fea:	f04f 0e00 	mov.w	lr, #0
 8017fee:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8017ff2:	2c09      	cmp	r4, #9
 8017ff4:	f240 8082 	bls.w	80180fc <_strtod_l+0x2ac>
 8017ff8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8017ffc:	2400      	movs	r4, #0
 8017ffe:	e09d      	b.n	801813c <_strtod_l+0x2ec>
 8018000:	2300      	movs	r3, #0
 8018002:	e7c5      	b.n	8017f90 <_strtod_l+0x140>
 8018004:	2d08      	cmp	r5, #8
 8018006:	bfc8      	it	gt
 8018008:	9906      	ldrgt	r1, [sp, #24]
 801800a:	f100 0001 	add.w	r0, r0, #1
 801800e:	bfca      	itet	gt
 8018010:	fb02 3301 	mlagt	r3, r2, r1, r3
 8018014:	fb02 3909 	mlale	r9, r2, r9, r3
 8018018:	9306      	strgt	r3, [sp, #24]
 801801a:	3501      	adds	r5, #1
 801801c:	9011      	str	r0, [sp, #68]	@ 0x44
 801801e:	e7bf      	b.n	8017fa0 <_strtod_l+0x150>
 8018020:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018022:	1c5a      	adds	r2, r3, #1
 8018024:	9211      	str	r2, [sp, #68]	@ 0x44
 8018026:	785a      	ldrb	r2, [r3, #1]
 8018028:	b3bd      	cbz	r5, 801809a <_strtod_l+0x24a>
 801802a:	4607      	mov	r7, r0
 801802c:	462b      	mov	r3, r5
 801802e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8018032:	2909      	cmp	r1, #9
 8018034:	d912      	bls.n	801805c <_strtod_l+0x20c>
 8018036:	2101      	movs	r1, #1
 8018038:	e7c3      	b.n	8017fc2 <_strtod_l+0x172>
 801803a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801803c:	1c5a      	adds	r2, r3, #1
 801803e:	9211      	str	r2, [sp, #68]	@ 0x44
 8018040:	785a      	ldrb	r2, [r3, #1]
 8018042:	3001      	adds	r0, #1
 8018044:	2a30      	cmp	r2, #48	@ 0x30
 8018046:	d0f8      	beq.n	801803a <_strtod_l+0x1ea>
 8018048:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801804c:	2b08      	cmp	r3, #8
 801804e:	f200 847a 	bhi.w	8018946 <_strtod_l+0xaf6>
 8018052:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018054:	930a      	str	r3, [sp, #40]	@ 0x28
 8018056:	4607      	mov	r7, r0
 8018058:	2000      	movs	r0, #0
 801805a:	4603      	mov	r3, r0
 801805c:	3a30      	subs	r2, #48	@ 0x30
 801805e:	f100 0101 	add.w	r1, r0, #1
 8018062:	d014      	beq.n	801808e <_strtod_l+0x23e>
 8018064:	440f      	add	r7, r1
 8018066:	469c      	mov	ip, r3
 8018068:	f04f 0e0a 	mov.w	lr, #10
 801806c:	f10c 0401 	add.w	r4, ip, #1
 8018070:	1ae6      	subs	r6, r4, r3
 8018072:	42b1      	cmp	r1, r6
 8018074:	dc13      	bgt.n	801809e <_strtod_l+0x24e>
 8018076:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801807a:	1819      	adds	r1, r3, r0
 801807c:	2908      	cmp	r1, #8
 801807e:	f103 0301 	add.w	r3, r3, #1
 8018082:	4403      	add	r3, r0
 8018084:	dc19      	bgt.n	80180ba <_strtod_l+0x26a>
 8018086:	210a      	movs	r1, #10
 8018088:	fb01 2909 	mla	r9, r1, r9, r2
 801808c:	2100      	movs	r1, #0
 801808e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018090:	1c50      	adds	r0, r2, #1
 8018092:	9011      	str	r0, [sp, #68]	@ 0x44
 8018094:	7852      	ldrb	r2, [r2, #1]
 8018096:	4608      	mov	r0, r1
 8018098:	e7c9      	b.n	801802e <_strtod_l+0x1de>
 801809a:	4628      	mov	r0, r5
 801809c:	e7d2      	b.n	8018044 <_strtod_l+0x1f4>
 801809e:	f1bc 0f08 	cmp.w	ip, #8
 80180a2:	dc03      	bgt.n	80180ac <_strtod_l+0x25c>
 80180a4:	fb0e f909 	mul.w	r9, lr, r9
 80180a8:	46a4      	mov	ip, r4
 80180aa:	e7df      	b.n	801806c <_strtod_l+0x21c>
 80180ac:	2c10      	cmp	r4, #16
 80180ae:	bfde      	ittt	le
 80180b0:	9e06      	ldrle	r6, [sp, #24]
 80180b2:	fb0e f606 	mulle.w	r6, lr, r6
 80180b6:	9606      	strle	r6, [sp, #24]
 80180b8:	e7f6      	b.n	80180a8 <_strtod_l+0x258>
 80180ba:	290f      	cmp	r1, #15
 80180bc:	bfdf      	itttt	le
 80180be:	9806      	ldrle	r0, [sp, #24]
 80180c0:	210a      	movle	r1, #10
 80180c2:	fb01 2200 	mlale	r2, r1, r0, r2
 80180c6:	9206      	strle	r2, [sp, #24]
 80180c8:	e7e0      	b.n	801808c <_strtod_l+0x23c>
 80180ca:	2700      	movs	r7, #0
 80180cc:	2101      	movs	r1, #1
 80180ce:	e77d      	b.n	8017fcc <_strtod_l+0x17c>
 80180d0:	f04f 0e00 	mov.w	lr, #0
 80180d4:	f108 0202 	add.w	r2, r8, #2
 80180d8:	9211      	str	r2, [sp, #68]	@ 0x44
 80180da:	f898 2002 	ldrb.w	r2, [r8, #2]
 80180de:	e786      	b.n	8017fee <_strtod_l+0x19e>
 80180e0:	f04f 0e01 	mov.w	lr, #1
 80180e4:	e7f6      	b.n	80180d4 <_strtod_l+0x284>
 80180e6:	bf00      	nop
 80180e8:	0801c9e4 	.word	0x0801c9e4
 80180ec:	0801c751 	.word	0x0801c751
 80180f0:	7ff00000 	.word	0x7ff00000
 80180f4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80180f6:	1c54      	adds	r4, r2, #1
 80180f8:	9411      	str	r4, [sp, #68]	@ 0x44
 80180fa:	7852      	ldrb	r2, [r2, #1]
 80180fc:	2a30      	cmp	r2, #48	@ 0x30
 80180fe:	d0f9      	beq.n	80180f4 <_strtod_l+0x2a4>
 8018100:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8018104:	2c08      	cmp	r4, #8
 8018106:	f63f af79 	bhi.w	8017ffc <_strtod_l+0x1ac>
 801810a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 801810e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018110:	9209      	str	r2, [sp, #36]	@ 0x24
 8018112:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018114:	1c54      	adds	r4, r2, #1
 8018116:	9411      	str	r4, [sp, #68]	@ 0x44
 8018118:	7852      	ldrb	r2, [r2, #1]
 801811a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 801811e:	2e09      	cmp	r6, #9
 8018120:	d937      	bls.n	8018192 <_strtod_l+0x342>
 8018122:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8018124:	1ba4      	subs	r4, r4, r6
 8018126:	2c08      	cmp	r4, #8
 8018128:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801812c:	dc02      	bgt.n	8018134 <_strtod_l+0x2e4>
 801812e:	4564      	cmp	r4, ip
 8018130:	bfa8      	it	ge
 8018132:	4664      	movge	r4, ip
 8018134:	f1be 0f00 	cmp.w	lr, #0
 8018138:	d000      	beq.n	801813c <_strtod_l+0x2ec>
 801813a:	4264      	negs	r4, r4
 801813c:	2b00      	cmp	r3, #0
 801813e:	d14d      	bne.n	80181dc <_strtod_l+0x38c>
 8018140:	9b07      	ldr	r3, [sp, #28]
 8018142:	4318      	orrs	r0, r3
 8018144:	f47f aebf 	bne.w	8017ec6 <_strtod_l+0x76>
 8018148:	2900      	cmp	r1, #0
 801814a:	f47f aed8 	bne.w	8017efe <_strtod_l+0xae>
 801814e:	2a69      	cmp	r2, #105	@ 0x69
 8018150:	d027      	beq.n	80181a2 <_strtod_l+0x352>
 8018152:	dc24      	bgt.n	801819e <_strtod_l+0x34e>
 8018154:	2a49      	cmp	r2, #73	@ 0x49
 8018156:	d024      	beq.n	80181a2 <_strtod_l+0x352>
 8018158:	2a4e      	cmp	r2, #78	@ 0x4e
 801815a:	f47f aed0 	bne.w	8017efe <_strtod_l+0xae>
 801815e:	4997      	ldr	r1, [pc, #604]	@ (80183bc <_strtod_l+0x56c>)
 8018160:	a811      	add	r0, sp, #68	@ 0x44
 8018162:	f001 faad 	bl	80196c0 <__match>
 8018166:	2800      	cmp	r0, #0
 8018168:	f43f aec9 	beq.w	8017efe <_strtod_l+0xae>
 801816c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	2b28      	cmp	r3, #40	@ 0x28
 8018172:	d12d      	bne.n	80181d0 <_strtod_l+0x380>
 8018174:	4992      	ldr	r1, [pc, #584]	@ (80183c0 <_strtod_l+0x570>)
 8018176:	aa14      	add	r2, sp, #80	@ 0x50
 8018178:	a811      	add	r0, sp, #68	@ 0x44
 801817a:	f001 fab5 	bl	80196e8 <__hexnan>
 801817e:	2805      	cmp	r0, #5
 8018180:	d126      	bne.n	80181d0 <_strtod_l+0x380>
 8018182:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018184:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8018188:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801818c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8018190:	e699      	b.n	8017ec6 <_strtod_l+0x76>
 8018192:	240a      	movs	r4, #10
 8018194:	fb04 2c0c 	mla	ip, r4, ip, r2
 8018198:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 801819c:	e7b9      	b.n	8018112 <_strtod_l+0x2c2>
 801819e:	2a6e      	cmp	r2, #110	@ 0x6e
 80181a0:	e7db      	b.n	801815a <_strtod_l+0x30a>
 80181a2:	4988      	ldr	r1, [pc, #544]	@ (80183c4 <_strtod_l+0x574>)
 80181a4:	a811      	add	r0, sp, #68	@ 0x44
 80181a6:	f001 fa8b 	bl	80196c0 <__match>
 80181aa:	2800      	cmp	r0, #0
 80181ac:	f43f aea7 	beq.w	8017efe <_strtod_l+0xae>
 80181b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80181b2:	4985      	ldr	r1, [pc, #532]	@ (80183c8 <_strtod_l+0x578>)
 80181b4:	3b01      	subs	r3, #1
 80181b6:	a811      	add	r0, sp, #68	@ 0x44
 80181b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80181ba:	f001 fa81 	bl	80196c0 <__match>
 80181be:	b910      	cbnz	r0, 80181c6 <_strtod_l+0x376>
 80181c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80181c2:	3301      	adds	r3, #1
 80181c4:	9311      	str	r3, [sp, #68]	@ 0x44
 80181c6:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80183dc <_strtod_l+0x58c>
 80181ca:	f04f 0a00 	mov.w	sl, #0
 80181ce:	e67a      	b.n	8017ec6 <_strtod_l+0x76>
 80181d0:	487e      	ldr	r0, [pc, #504]	@ (80183cc <_strtod_l+0x57c>)
 80181d2:	f000 ffc9 	bl	8019168 <nan>
 80181d6:	ec5b ab10 	vmov	sl, fp, d0
 80181da:	e674      	b.n	8017ec6 <_strtod_l+0x76>
 80181dc:	ee07 9a90 	vmov	s15, r9
 80181e0:	1be2      	subs	r2, r4, r7
 80181e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80181e6:	2d00      	cmp	r5, #0
 80181e8:	bf08      	it	eq
 80181ea:	461d      	moveq	r5, r3
 80181ec:	2b10      	cmp	r3, #16
 80181ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80181f0:	461a      	mov	r2, r3
 80181f2:	bfa8      	it	ge
 80181f4:	2210      	movge	r2, #16
 80181f6:	2b09      	cmp	r3, #9
 80181f8:	ec5b ab17 	vmov	sl, fp, d7
 80181fc:	dc15      	bgt.n	801822a <_strtod_l+0x3da>
 80181fe:	1be1      	subs	r1, r4, r7
 8018200:	2900      	cmp	r1, #0
 8018202:	f43f ae60 	beq.w	8017ec6 <_strtod_l+0x76>
 8018206:	eba4 0107 	sub.w	r1, r4, r7
 801820a:	dd72      	ble.n	80182f2 <_strtod_l+0x4a2>
 801820c:	2916      	cmp	r1, #22
 801820e:	dc59      	bgt.n	80182c4 <_strtod_l+0x474>
 8018210:	4b6f      	ldr	r3, [pc, #444]	@ (80183d0 <_strtod_l+0x580>)
 8018212:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018218:	ed93 7b00 	vldr	d7, [r3]
 801821c:	ec4b ab16 	vmov	d6, sl, fp
 8018220:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018224:	ec5b ab17 	vmov	sl, fp, d7
 8018228:	e64d      	b.n	8017ec6 <_strtod_l+0x76>
 801822a:	4969      	ldr	r1, [pc, #420]	@ (80183d0 <_strtod_l+0x580>)
 801822c:	eddd 6a06 	vldr	s13, [sp, #24]
 8018230:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018234:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8018238:	2b0f      	cmp	r3, #15
 801823a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801823e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018242:	ec5b ab16 	vmov	sl, fp, d6
 8018246:	ddda      	ble.n	80181fe <_strtod_l+0x3ae>
 8018248:	1a9a      	subs	r2, r3, r2
 801824a:	1be1      	subs	r1, r4, r7
 801824c:	440a      	add	r2, r1
 801824e:	2a00      	cmp	r2, #0
 8018250:	f340 8094 	ble.w	801837c <_strtod_l+0x52c>
 8018254:	f012 000f 	ands.w	r0, r2, #15
 8018258:	d00a      	beq.n	8018270 <_strtod_l+0x420>
 801825a:	495d      	ldr	r1, [pc, #372]	@ (80183d0 <_strtod_l+0x580>)
 801825c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018260:	ed91 7b00 	vldr	d7, [r1]
 8018264:	ec4b ab16 	vmov	d6, sl, fp
 8018268:	ee27 7b06 	vmul.f64	d7, d7, d6
 801826c:	ec5b ab17 	vmov	sl, fp, d7
 8018270:	f032 020f 	bics.w	r2, r2, #15
 8018274:	d073      	beq.n	801835e <_strtod_l+0x50e>
 8018276:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801827a:	dd47      	ble.n	801830c <_strtod_l+0x4bc>
 801827c:	2400      	movs	r4, #0
 801827e:	4625      	mov	r5, r4
 8018280:	9407      	str	r4, [sp, #28]
 8018282:	4626      	mov	r6, r4
 8018284:	9a05      	ldr	r2, [sp, #20]
 8018286:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80183dc <_strtod_l+0x58c>
 801828a:	2322      	movs	r3, #34	@ 0x22
 801828c:	6013      	str	r3, [r2, #0]
 801828e:	f04f 0a00 	mov.w	sl, #0
 8018292:	9b07      	ldr	r3, [sp, #28]
 8018294:	2b00      	cmp	r3, #0
 8018296:	f43f ae16 	beq.w	8017ec6 <_strtod_l+0x76>
 801829a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801829c:	9805      	ldr	r0, [sp, #20]
 801829e:	f7ff f955 	bl	801754c <_Bfree>
 80182a2:	9805      	ldr	r0, [sp, #20]
 80182a4:	4631      	mov	r1, r6
 80182a6:	f7ff f951 	bl	801754c <_Bfree>
 80182aa:	9805      	ldr	r0, [sp, #20]
 80182ac:	4629      	mov	r1, r5
 80182ae:	f7ff f94d 	bl	801754c <_Bfree>
 80182b2:	9907      	ldr	r1, [sp, #28]
 80182b4:	9805      	ldr	r0, [sp, #20]
 80182b6:	f7ff f949 	bl	801754c <_Bfree>
 80182ba:	9805      	ldr	r0, [sp, #20]
 80182bc:	4621      	mov	r1, r4
 80182be:	f7ff f945 	bl	801754c <_Bfree>
 80182c2:	e600      	b.n	8017ec6 <_strtod_l+0x76>
 80182c4:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80182c8:	1be0      	subs	r0, r4, r7
 80182ca:	4281      	cmp	r1, r0
 80182cc:	dbbc      	blt.n	8018248 <_strtod_l+0x3f8>
 80182ce:	4a40      	ldr	r2, [pc, #256]	@ (80183d0 <_strtod_l+0x580>)
 80182d0:	f1c3 030f 	rsb	r3, r3, #15
 80182d4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80182d8:	ed91 7b00 	vldr	d7, [r1]
 80182dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80182de:	ec4b ab16 	vmov	d6, sl, fp
 80182e2:	1acb      	subs	r3, r1, r3
 80182e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80182e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80182ec:	ed92 6b00 	vldr	d6, [r2]
 80182f0:	e796      	b.n	8018220 <_strtod_l+0x3d0>
 80182f2:	3116      	adds	r1, #22
 80182f4:	dba8      	blt.n	8018248 <_strtod_l+0x3f8>
 80182f6:	4b36      	ldr	r3, [pc, #216]	@ (80183d0 <_strtod_l+0x580>)
 80182f8:	1b3c      	subs	r4, r7, r4
 80182fa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80182fe:	ed94 7b00 	vldr	d7, [r4]
 8018302:	ec4b ab16 	vmov	d6, sl, fp
 8018306:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801830a:	e78b      	b.n	8018224 <_strtod_l+0x3d4>
 801830c:	2000      	movs	r0, #0
 801830e:	ec4b ab17 	vmov	d7, sl, fp
 8018312:	4e30      	ldr	r6, [pc, #192]	@ (80183d4 <_strtod_l+0x584>)
 8018314:	1112      	asrs	r2, r2, #4
 8018316:	4601      	mov	r1, r0
 8018318:	2a01      	cmp	r2, #1
 801831a:	dc23      	bgt.n	8018364 <_strtod_l+0x514>
 801831c:	b108      	cbz	r0, 8018322 <_strtod_l+0x4d2>
 801831e:	ec5b ab17 	vmov	sl, fp, d7
 8018322:	4a2c      	ldr	r2, [pc, #176]	@ (80183d4 <_strtod_l+0x584>)
 8018324:	482c      	ldr	r0, [pc, #176]	@ (80183d8 <_strtod_l+0x588>)
 8018326:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801832a:	ed92 7b00 	vldr	d7, [r2]
 801832e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8018332:	ec4b ab16 	vmov	d6, sl, fp
 8018336:	4a29      	ldr	r2, [pc, #164]	@ (80183dc <_strtod_l+0x58c>)
 8018338:	ee27 7b06 	vmul.f64	d7, d7, d6
 801833c:	ee17 1a90 	vmov	r1, s15
 8018340:	400a      	ands	r2, r1
 8018342:	4282      	cmp	r2, r0
 8018344:	ec5b ab17 	vmov	sl, fp, d7
 8018348:	d898      	bhi.n	801827c <_strtod_l+0x42c>
 801834a:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801834e:	4282      	cmp	r2, r0
 8018350:	bf86      	itte	hi
 8018352:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80183e0 <_strtod_l+0x590>
 8018356:	f04f 3aff 	movhi.w	sl, #4294967295
 801835a:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801835e:	2200      	movs	r2, #0
 8018360:	9206      	str	r2, [sp, #24]
 8018362:	e076      	b.n	8018452 <_strtod_l+0x602>
 8018364:	f012 0f01 	tst.w	r2, #1
 8018368:	d004      	beq.n	8018374 <_strtod_l+0x524>
 801836a:	ed96 6b00 	vldr	d6, [r6]
 801836e:	2001      	movs	r0, #1
 8018370:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018374:	3101      	adds	r1, #1
 8018376:	1052      	asrs	r2, r2, #1
 8018378:	3608      	adds	r6, #8
 801837a:	e7cd      	b.n	8018318 <_strtod_l+0x4c8>
 801837c:	d0ef      	beq.n	801835e <_strtod_l+0x50e>
 801837e:	4252      	negs	r2, r2
 8018380:	f012 000f 	ands.w	r0, r2, #15
 8018384:	d00a      	beq.n	801839c <_strtod_l+0x54c>
 8018386:	4912      	ldr	r1, [pc, #72]	@ (80183d0 <_strtod_l+0x580>)
 8018388:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801838c:	ed91 7b00 	vldr	d7, [r1]
 8018390:	ec4b ab16 	vmov	d6, sl, fp
 8018394:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018398:	ec5b ab17 	vmov	sl, fp, d7
 801839c:	1112      	asrs	r2, r2, #4
 801839e:	d0de      	beq.n	801835e <_strtod_l+0x50e>
 80183a0:	2a1f      	cmp	r2, #31
 80183a2:	dd1f      	ble.n	80183e4 <_strtod_l+0x594>
 80183a4:	2400      	movs	r4, #0
 80183a6:	4625      	mov	r5, r4
 80183a8:	9407      	str	r4, [sp, #28]
 80183aa:	4626      	mov	r6, r4
 80183ac:	9a05      	ldr	r2, [sp, #20]
 80183ae:	2322      	movs	r3, #34	@ 0x22
 80183b0:	f04f 0a00 	mov.w	sl, #0
 80183b4:	f04f 0b00 	mov.w	fp, #0
 80183b8:	6013      	str	r3, [r2, #0]
 80183ba:	e76a      	b.n	8018292 <_strtod_l+0x442>
 80183bc:	0801c61a 	.word	0x0801c61a
 80183c0:	0801c9d0 	.word	0x0801c9d0
 80183c4:	0801c612 	.word	0x0801c612
 80183c8:	0801c685 	.word	0x0801c685
 80183cc:	0801c681 	.word	0x0801c681
 80183d0:	0801c908 	.word	0x0801c908
 80183d4:	0801c8e0 	.word	0x0801c8e0
 80183d8:	7ca00000 	.word	0x7ca00000
 80183dc:	7ff00000 	.word	0x7ff00000
 80183e0:	7fefffff 	.word	0x7fefffff
 80183e4:	f012 0110 	ands.w	r1, r2, #16
 80183e8:	bf18      	it	ne
 80183ea:	216a      	movne	r1, #106	@ 0x6a
 80183ec:	9106      	str	r1, [sp, #24]
 80183ee:	ec4b ab17 	vmov	d7, sl, fp
 80183f2:	49af      	ldr	r1, [pc, #700]	@ (80186b0 <_strtod_l+0x860>)
 80183f4:	2000      	movs	r0, #0
 80183f6:	07d6      	lsls	r6, r2, #31
 80183f8:	d504      	bpl.n	8018404 <_strtod_l+0x5b4>
 80183fa:	ed91 6b00 	vldr	d6, [r1]
 80183fe:	2001      	movs	r0, #1
 8018400:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018404:	1052      	asrs	r2, r2, #1
 8018406:	f101 0108 	add.w	r1, r1, #8
 801840a:	d1f4      	bne.n	80183f6 <_strtod_l+0x5a6>
 801840c:	b108      	cbz	r0, 8018412 <_strtod_l+0x5c2>
 801840e:	ec5b ab17 	vmov	sl, fp, d7
 8018412:	9a06      	ldr	r2, [sp, #24]
 8018414:	b1b2      	cbz	r2, 8018444 <_strtod_l+0x5f4>
 8018416:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801841a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801841e:	2a00      	cmp	r2, #0
 8018420:	4658      	mov	r0, fp
 8018422:	dd0f      	ble.n	8018444 <_strtod_l+0x5f4>
 8018424:	2a1f      	cmp	r2, #31
 8018426:	dd55      	ble.n	80184d4 <_strtod_l+0x684>
 8018428:	2a34      	cmp	r2, #52	@ 0x34
 801842a:	bfde      	ittt	le
 801842c:	f04f 32ff 	movle.w	r2, #4294967295
 8018430:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8018434:	408a      	lslle	r2, r1
 8018436:	f04f 0a00 	mov.w	sl, #0
 801843a:	bfcc      	ite	gt
 801843c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018440:	ea02 0b00 	andle.w	fp, r2, r0
 8018444:	ec4b ab17 	vmov	d7, sl, fp
 8018448:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018450:	d0a8      	beq.n	80183a4 <_strtod_l+0x554>
 8018452:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018454:	9805      	ldr	r0, [sp, #20]
 8018456:	f8cd 9000 	str.w	r9, [sp]
 801845a:	462a      	mov	r2, r5
 801845c:	f7ff f8de 	bl	801761c <__s2b>
 8018460:	9007      	str	r0, [sp, #28]
 8018462:	2800      	cmp	r0, #0
 8018464:	f43f af0a 	beq.w	801827c <_strtod_l+0x42c>
 8018468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801846a:	1b3f      	subs	r7, r7, r4
 801846c:	2b00      	cmp	r3, #0
 801846e:	bfb4      	ite	lt
 8018470:	463b      	movlt	r3, r7
 8018472:	2300      	movge	r3, #0
 8018474:	930a      	str	r3, [sp, #40]	@ 0x28
 8018476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018478:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80186a0 <_strtod_l+0x850>
 801847c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018480:	2400      	movs	r4, #0
 8018482:	930d      	str	r3, [sp, #52]	@ 0x34
 8018484:	4625      	mov	r5, r4
 8018486:	9b07      	ldr	r3, [sp, #28]
 8018488:	9805      	ldr	r0, [sp, #20]
 801848a:	6859      	ldr	r1, [r3, #4]
 801848c:	f7ff f81e 	bl	80174cc <_Balloc>
 8018490:	4606      	mov	r6, r0
 8018492:	2800      	cmp	r0, #0
 8018494:	f43f aef6 	beq.w	8018284 <_strtod_l+0x434>
 8018498:	9b07      	ldr	r3, [sp, #28]
 801849a:	691a      	ldr	r2, [r3, #16]
 801849c:	ec4b ab19 	vmov	d9, sl, fp
 80184a0:	3202      	adds	r2, #2
 80184a2:	f103 010c 	add.w	r1, r3, #12
 80184a6:	0092      	lsls	r2, r2, #2
 80184a8:	300c      	adds	r0, #12
 80184aa:	f7fe f8f4 	bl	8016696 <memcpy>
 80184ae:	eeb0 0b49 	vmov.f64	d0, d9
 80184b2:	9805      	ldr	r0, [sp, #20]
 80184b4:	aa14      	add	r2, sp, #80	@ 0x50
 80184b6:	a913      	add	r1, sp, #76	@ 0x4c
 80184b8:	f7ff fbe4 	bl	8017c84 <__d2b>
 80184bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80184be:	2800      	cmp	r0, #0
 80184c0:	f43f aee0 	beq.w	8018284 <_strtod_l+0x434>
 80184c4:	9805      	ldr	r0, [sp, #20]
 80184c6:	2101      	movs	r1, #1
 80184c8:	f7ff f93e 	bl	8017748 <__i2b>
 80184cc:	4605      	mov	r5, r0
 80184ce:	b940      	cbnz	r0, 80184e2 <_strtod_l+0x692>
 80184d0:	2500      	movs	r5, #0
 80184d2:	e6d7      	b.n	8018284 <_strtod_l+0x434>
 80184d4:	f04f 31ff 	mov.w	r1, #4294967295
 80184d8:	fa01 f202 	lsl.w	r2, r1, r2
 80184dc:	ea02 0a0a 	and.w	sl, r2, sl
 80184e0:	e7b0      	b.n	8018444 <_strtod_l+0x5f4>
 80184e2:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80184e4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80184e6:	2f00      	cmp	r7, #0
 80184e8:	bfab      	itete	ge
 80184ea:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80184ec:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80184ee:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80184f2:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80184f6:	bfac      	ite	ge
 80184f8:	eb07 0903 	addge.w	r9, r7, r3
 80184fc:	eba3 0807 	sublt.w	r8, r3, r7
 8018500:	9b06      	ldr	r3, [sp, #24]
 8018502:	1aff      	subs	r7, r7, r3
 8018504:	4417      	add	r7, r2
 8018506:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801850a:	4a6a      	ldr	r2, [pc, #424]	@ (80186b4 <_strtod_l+0x864>)
 801850c:	3f01      	subs	r7, #1
 801850e:	4297      	cmp	r7, r2
 8018510:	da51      	bge.n	80185b6 <_strtod_l+0x766>
 8018512:	1bd1      	subs	r1, r2, r7
 8018514:	291f      	cmp	r1, #31
 8018516:	eba3 0301 	sub.w	r3, r3, r1
 801851a:	f04f 0201 	mov.w	r2, #1
 801851e:	dc3e      	bgt.n	801859e <_strtod_l+0x74e>
 8018520:	408a      	lsls	r2, r1
 8018522:	920c      	str	r2, [sp, #48]	@ 0x30
 8018524:	2200      	movs	r2, #0
 8018526:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018528:	eb09 0703 	add.w	r7, r9, r3
 801852c:	4498      	add	r8, r3
 801852e:	9b06      	ldr	r3, [sp, #24]
 8018530:	45b9      	cmp	r9, r7
 8018532:	4498      	add	r8, r3
 8018534:	464b      	mov	r3, r9
 8018536:	bfa8      	it	ge
 8018538:	463b      	movge	r3, r7
 801853a:	4543      	cmp	r3, r8
 801853c:	bfa8      	it	ge
 801853e:	4643      	movge	r3, r8
 8018540:	2b00      	cmp	r3, #0
 8018542:	bfc2      	ittt	gt
 8018544:	1aff      	subgt	r7, r7, r3
 8018546:	eba8 0803 	subgt.w	r8, r8, r3
 801854a:	eba9 0903 	subgt.w	r9, r9, r3
 801854e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018550:	2b00      	cmp	r3, #0
 8018552:	dd16      	ble.n	8018582 <_strtod_l+0x732>
 8018554:	4629      	mov	r1, r5
 8018556:	9805      	ldr	r0, [sp, #20]
 8018558:	461a      	mov	r2, r3
 801855a:	f7ff f9ad 	bl	80178b8 <__pow5mult>
 801855e:	4605      	mov	r5, r0
 8018560:	2800      	cmp	r0, #0
 8018562:	d0b5      	beq.n	80184d0 <_strtod_l+0x680>
 8018564:	4601      	mov	r1, r0
 8018566:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018568:	9805      	ldr	r0, [sp, #20]
 801856a:	f7ff f903 	bl	8017774 <__multiply>
 801856e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8018570:	2800      	cmp	r0, #0
 8018572:	f43f ae87 	beq.w	8018284 <_strtod_l+0x434>
 8018576:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018578:	9805      	ldr	r0, [sp, #20]
 801857a:	f7fe ffe7 	bl	801754c <_Bfree>
 801857e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018580:	9312      	str	r3, [sp, #72]	@ 0x48
 8018582:	2f00      	cmp	r7, #0
 8018584:	dc1b      	bgt.n	80185be <_strtod_l+0x76e>
 8018586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018588:	2b00      	cmp	r3, #0
 801858a:	dd21      	ble.n	80185d0 <_strtod_l+0x780>
 801858c:	4631      	mov	r1, r6
 801858e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018590:	9805      	ldr	r0, [sp, #20]
 8018592:	f7ff f991 	bl	80178b8 <__pow5mult>
 8018596:	4606      	mov	r6, r0
 8018598:	b9d0      	cbnz	r0, 80185d0 <_strtod_l+0x780>
 801859a:	2600      	movs	r6, #0
 801859c:	e672      	b.n	8018284 <_strtod_l+0x434>
 801859e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80185a2:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80185a6:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80185aa:	37e2      	adds	r7, #226	@ 0xe2
 80185ac:	fa02 f107 	lsl.w	r1, r2, r7
 80185b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80185b2:	920c      	str	r2, [sp, #48]	@ 0x30
 80185b4:	e7b8      	b.n	8018528 <_strtod_l+0x6d8>
 80185b6:	2200      	movs	r2, #0
 80185b8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80185ba:	2201      	movs	r2, #1
 80185bc:	e7f9      	b.n	80185b2 <_strtod_l+0x762>
 80185be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80185c0:	9805      	ldr	r0, [sp, #20]
 80185c2:	463a      	mov	r2, r7
 80185c4:	f7ff f9d2 	bl	801796c <__lshift>
 80185c8:	9012      	str	r0, [sp, #72]	@ 0x48
 80185ca:	2800      	cmp	r0, #0
 80185cc:	d1db      	bne.n	8018586 <_strtod_l+0x736>
 80185ce:	e659      	b.n	8018284 <_strtod_l+0x434>
 80185d0:	f1b8 0f00 	cmp.w	r8, #0
 80185d4:	dd07      	ble.n	80185e6 <_strtod_l+0x796>
 80185d6:	4631      	mov	r1, r6
 80185d8:	9805      	ldr	r0, [sp, #20]
 80185da:	4642      	mov	r2, r8
 80185dc:	f7ff f9c6 	bl	801796c <__lshift>
 80185e0:	4606      	mov	r6, r0
 80185e2:	2800      	cmp	r0, #0
 80185e4:	d0d9      	beq.n	801859a <_strtod_l+0x74a>
 80185e6:	f1b9 0f00 	cmp.w	r9, #0
 80185ea:	dd08      	ble.n	80185fe <_strtod_l+0x7ae>
 80185ec:	4629      	mov	r1, r5
 80185ee:	9805      	ldr	r0, [sp, #20]
 80185f0:	464a      	mov	r2, r9
 80185f2:	f7ff f9bb 	bl	801796c <__lshift>
 80185f6:	4605      	mov	r5, r0
 80185f8:	2800      	cmp	r0, #0
 80185fa:	f43f ae43 	beq.w	8018284 <_strtod_l+0x434>
 80185fe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018600:	9805      	ldr	r0, [sp, #20]
 8018602:	4632      	mov	r2, r6
 8018604:	f7ff fa3a 	bl	8017a7c <__mdiff>
 8018608:	4604      	mov	r4, r0
 801860a:	2800      	cmp	r0, #0
 801860c:	f43f ae3a 	beq.w	8018284 <_strtod_l+0x434>
 8018610:	2300      	movs	r3, #0
 8018612:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8018616:	60c3      	str	r3, [r0, #12]
 8018618:	4629      	mov	r1, r5
 801861a:	f7ff fa13 	bl	8017a44 <__mcmp>
 801861e:	2800      	cmp	r0, #0
 8018620:	da4c      	bge.n	80186bc <_strtod_l+0x86c>
 8018622:	ea58 080a 	orrs.w	r8, r8, sl
 8018626:	d172      	bne.n	801870e <_strtod_l+0x8be>
 8018628:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801862c:	2b00      	cmp	r3, #0
 801862e:	d16e      	bne.n	801870e <_strtod_l+0x8be>
 8018630:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018634:	0d1b      	lsrs	r3, r3, #20
 8018636:	051b      	lsls	r3, r3, #20
 8018638:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801863c:	d967      	bls.n	801870e <_strtod_l+0x8be>
 801863e:	6963      	ldr	r3, [r4, #20]
 8018640:	b913      	cbnz	r3, 8018648 <_strtod_l+0x7f8>
 8018642:	6923      	ldr	r3, [r4, #16]
 8018644:	2b01      	cmp	r3, #1
 8018646:	dd62      	ble.n	801870e <_strtod_l+0x8be>
 8018648:	4621      	mov	r1, r4
 801864a:	2201      	movs	r2, #1
 801864c:	9805      	ldr	r0, [sp, #20]
 801864e:	f7ff f98d 	bl	801796c <__lshift>
 8018652:	4629      	mov	r1, r5
 8018654:	4604      	mov	r4, r0
 8018656:	f7ff f9f5 	bl	8017a44 <__mcmp>
 801865a:	2800      	cmp	r0, #0
 801865c:	dd57      	ble.n	801870e <_strtod_l+0x8be>
 801865e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018662:	9a06      	ldr	r2, [sp, #24]
 8018664:	0d1b      	lsrs	r3, r3, #20
 8018666:	051b      	lsls	r3, r3, #20
 8018668:	2a00      	cmp	r2, #0
 801866a:	d06e      	beq.n	801874a <_strtod_l+0x8fa>
 801866c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018670:	d86b      	bhi.n	801874a <_strtod_l+0x8fa>
 8018672:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8018676:	f67f ae99 	bls.w	80183ac <_strtod_l+0x55c>
 801867a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80186a8 <_strtod_l+0x858>
 801867e:	ec4b ab16 	vmov	d6, sl, fp
 8018682:	4b0d      	ldr	r3, [pc, #52]	@ (80186b8 <_strtod_l+0x868>)
 8018684:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018688:	ee17 2a90 	vmov	r2, s15
 801868c:	4013      	ands	r3, r2
 801868e:	ec5b ab17 	vmov	sl, fp, d7
 8018692:	2b00      	cmp	r3, #0
 8018694:	f47f ae01 	bne.w	801829a <_strtod_l+0x44a>
 8018698:	9a05      	ldr	r2, [sp, #20]
 801869a:	2322      	movs	r3, #34	@ 0x22
 801869c:	6013      	str	r3, [r2, #0]
 801869e:	e5fc      	b.n	801829a <_strtod_l+0x44a>
 80186a0:	ffc00000 	.word	0xffc00000
 80186a4:	41dfffff 	.word	0x41dfffff
 80186a8:	00000000 	.word	0x00000000
 80186ac:	39500000 	.word	0x39500000
 80186b0:	0801c9f8 	.word	0x0801c9f8
 80186b4:	fffffc02 	.word	0xfffffc02
 80186b8:	7ff00000 	.word	0x7ff00000
 80186bc:	46d9      	mov	r9, fp
 80186be:	d15d      	bne.n	801877c <_strtod_l+0x92c>
 80186c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80186c4:	f1b8 0f00 	cmp.w	r8, #0
 80186c8:	d02a      	beq.n	8018720 <_strtod_l+0x8d0>
 80186ca:	4aa9      	ldr	r2, [pc, #676]	@ (8018970 <_strtod_l+0xb20>)
 80186cc:	4293      	cmp	r3, r2
 80186ce:	d12a      	bne.n	8018726 <_strtod_l+0x8d6>
 80186d0:	9b06      	ldr	r3, [sp, #24]
 80186d2:	4652      	mov	r2, sl
 80186d4:	b1fb      	cbz	r3, 8018716 <_strtod_l+0x8c6>
 80186d6:	4ba7      	ldr	r3, [pc, #668]	@ (8018974 <_strtod_l+0xb24>)
 80186d8:	ea0b 0303 	and.w	r3, fp, r3
 80186dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80186e0:	f04f 31ff 	mov.w	r1, #4294967295
 80186e4:	d81a      	bhi.n	801871c <_strtod_l+0x8cc>
 80186e6:	0d1b      	lsrs	r3, r3, #20
 80186e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80186ec:	fa01 f303 	lsl.w	r3, r1, r3
 80186f0:	429a      	cmp	r2, r3
 80186f2:	d118      	bne.n	8018726 <_strtod_l+0x8d6>
 80186f4:	4ba0      	ldr	r3, [pc, #640]	@ (8018978 <_strtod_l+0xb28>)
 80186f6:	4599      	cmp	r9, r3
 80186f8:	d102      	bne.n	8018700 <_strtod_l+0x8b0>
 80186fa:	3201      	adds	r2, #1
 80186fc:	f43f adc2 	beq.w	8018284 <_strtod_l+0x434>
 8018700:	4b9c      	ldr	r3, [pc, #624]	@ (8018974 <_strtod_l+0xb24>)
 8018702:	ea09 0303 	and.w	r3, r9, r3
 8018706:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801870a:	f04f 0a00 	mov.w	sl, #0
 801870e:	9b06      	ldr	r3, [sp, #24]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d1b2      	bne.n	801867a <_strtod_l+0x82a>
 8018714:	e5c1      	b.n	801829a <_strtod_l+0x44a>
 8018716:	f04f 33ff 	mov.w	r3, #4294967295
 801871a:	e7e9      	b.n	80186f0 <_strtod_l+0x8a0>
 801871c:	460b      	mov	r3, r1
 801871e:	e7e7      	b.n	80186f0 <_strtod_l+0x8a0>
 8018720:	ea53 030a 	orrs.w	r3, r3, sl
 8018724:	d09b      	beq.n	801865e <_strtod_l+0x80e>
 8018726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018728:	b1c3      	cbz	r3, 801875c <_strtod_l+0x90c>
 801872a:	ea13 0f09 	tst.w	r3, r9
 801872e:	d0ee      	beq.n	801870e <_strtod_l+0x8be>
 8018730:	9a06      	ldr	r2, [sp, #24]
 8018732:	4650      	mov	r0, sl
 8018734:	4659      	mov	r1, fp
 8018736:	f1b8 0f00 	cmp.w	r8, #0
 801873a:	d013      	beq.n	8018764 <_strtod_l+0x914>
 801873c:	f7ff fb6d 	bl	8017e1a <sulp>
 8018740:	ee39 7b00 	vadd.f64	d7, d9, d0
 8018744:	ec5b ab17 	vmov	sl, fp, d7
 8018748:	e7e1      	b.n	801870e <_strtod_l+0x8be>
 801874a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801874e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018752:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018756:	f04f 3aff 	mov.w	sl, #4294967295
 801875a:	e7d8      	b.n	801870e <_strtod_l+0x8be>
 801875c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801875e:	ea13 0f0a 	tst.w	r3, sl
 8018762:	e7e4      	b.n	801872e <_strtod_l+0x8de>
 8018764:	f7ff fb59 	bl	8017e1a <sulp>
 8018768:	ee39 0b40 	vsub.f64	d0, d9, d0
 801876c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018774:	ec5b ab10 	vmov	sl, fp, d0
 8018778:	d1c9      	bne.n	801870e <_strtod_l+0x8be>
 801877a:	e617      	b.n	80183ac <_strtod_l+0x55c>
 801877c:	4629      	mov	r1, r5
 801877e:	4620      	mov	r0, r4
 8018780:	f7ff fad8 	bl	8017d34 <__ratio>
 8018784:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8018788:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801878c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018790:	d85d      	bhi.n	801884e <_strtod_l+0x9fe>
 8018792:	f1b8 0f00 	cmp.w	r8, #0
 8018796:	d164      	bne.n	8018862 <_strtod_l+0xa12>
 8018798:	f1ba 0f00 	cmp.w	sl, #0
 801879c:	d14b      	bne.n	8018836 <_strtod_l+0x9e6>
 801879e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80187a2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d160      	bne.n	801886c <_strtod_l+0xa1c>
 80187aa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80187ae:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80187b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b6:	d401      	bmi.n	80187bc <_strtod_l+0x96c>
 80187b8:	ee20 8b08 	vmul.f64	d8, d0, d8
 80187bc:	eeb1 ab48 	vneg.f64	d10, d8
 80187c0:	486c      	ldr	r0, [pc, #432]	@ (8018974 <_strtod_l+0xb24>)
 80187c2:	496e      	ldr	r1, [pc, #440]	@ (801897c <_strtod_l+0xb2c>)
 80187c4:	ea09 0700 	and.w	r7, r9, r0
 80187c8:	428f      	cmp	r7, r1
 80187ca:	ec53 2b1a 	vmov	r2, r3, d10
 80187ce:	d17d      	bne.n	80188cc <_strtod_l+0xa7c>
 80187d0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80187d4:	ec4b ab1c 	vmov	d12, sl, fp
 80187d8:	eeb0 0b4c 	vmov.f64	d0, d12
 80187dc:	f7ff f9e2 	bl	8017ba4 <__ulp>
 80187e0:	4864      	ldr	r0, [pc, #400]	@ (8018974 <_strtod_l+0xb24>)
 80187e2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80187e6:	ee1c 3a90 	vmov	r3, s25
 80187ea:	4a65      	ldr	r2, [pc, #404]	@ (8018980 <_strtod_l+0xb30>)
 80187ec:	ea03 0100 	and.w	r1, r3, r0
 80187f0:	4291      	cmp	r1, r2
 80187f2:	ec5b ab1c 	vmov	sl, fp, d12
 80187f6:	d93c      	bls.n	8018872 <_strtod_l+0xa22>
 80187f8:	ee19 2a90 	vmov	r2, s19
 80187fc:	4b5e      	ldr	r3, [pc, #376]	@ (8018978 <_strtod_l+0xb28>)
 80187fe:	429a      	cmp	r2, r3
 8018800:	d104      	bne.n	801880c <_strtod_l+0x9bc>
 8018802:	ee19 3a10 	vmov	r3, s18
 8018806:	3301      	adds	r3, #1
 8018808:	f43f ad3c 	beq.w	8018284 <_strtod_l+0x434>
 801880c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8018978 <_strtod_l+0xb28>
 8018810:	f04f 3aff 	mov.w	sl, #4294967295
 8018814:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018816:	9805      	ldr	r0, [sp, #20]
 8018818:	f7fe fe98 	bl	801754c <_Bfree>
 801881c:	9805      	ldr	r0, [sp, #20]
 801881e:	4631      	mov	r1, r6
 8018820:	f7fe fe94 	bl	801754c <_Bfree>
 8018824:	9805      	ldr	r0, [sp, #20]
 8018826:	4629      	mov	r1, r5
 8018828:	f7fe fe90 	bl	801754c <_Bfree>
 801882c:	9805      	ldr	r0, [sp, #20]
 801882e:	4621      	mov	r1, r4
 8018830:	f7fe fe8c 	bl	801754c <_Bfree>
 8018834:	e627      	b.n	8018486 <_strtod_l+0x636>
 8018836:	f1ba 0f01 	cmp.w	sl, #1
 801883a:	d103      	bne.n	8018844 <_strtod_l+0x9f4>
 801883c:	f1bb 0f00 	cmp.w	fp, #0
 8018840:	f43f adb4 	beq.w	80183ac <_strtod_l+0x55c>
 8018844:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018848:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801884c:	e7b8      	b.n	80187c0 <_strtod_l+0x970>
 801884e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8018852:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018856:	f1b8 0f00 	cmp.w	r8, #0
 801885a:	d0af      	beq.n	80187bc <_strtod_l+0x96c>
 801885c:	eeb0 ab48 	vmov.f64	d10, d8
 8018860:	e7ae      	b.n	80187c0 <_strtod_l+0x970>
 8018862:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8018866:	eeb0 8b4a 	vmov.f64	d8, d10
 801886a:	e7a9      	b.n	80187c0 <_strtod_l+0x970>
 801886c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018870:	e7a6      	b.n	80187c0 <_strtod_l+0x970>
 8018872:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8018876:	9b06      	ldr	r3, [sp, #24]
 8018878:	46d9      	mov	r9, fp
 801887a:	2b00      	cmp	r3, #0
 801887c:	d1ca      	bne.n	8018814 <_strtod_l+0x9c4>
 801887e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018882:	0d1b      	lsrs	r3, r3, #20
 8018884:	051b      	lsls	r3, r3, #20
 8018886:	429f      	cmp	r7, r3
 8018888:	d1c4      	bne.n	8018814 <_strtod_l+0x9c4>
 801888a:	ec51 0b18 	vmov	r0, r1, d8
 801888e:	f7e7 ff6b 	bl	8000768 <__aeabi_d2lz>
 8018892:	f7e7 ff23 	bl	80006dc <__aeabi_l2d>
 8018896:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801889a:	ec41 0b17 	vmov	d7, r0, r1
 801889e:	ea49 090a 	orr.w	r9, r9, sl
 80188a2:	ea59 0908 	orrs.w	r9, r9, r8
 80188a6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80188aa:	d03c      	beq.n	8018926 <_strtod_l+0xad6>
 80188ac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018958 <_strtod_l+0xb08>
 80188b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80188b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b8:	f53f acef 	bmi.w	801829a <_strtod_l+0x44a>
 80188bc:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8018960 <_strtod_l+0xb10>
 80188c0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80188c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188c8:	dda4      	ble.n	8018814 <_strtod_l+0x9c4>
 80188ca:	e4e6      	b.n	801829a <_strtod_l+0x44a>
 80188cc:	9906      	ldr	r1, [sp, #24]
 80188ce:	b1e1      	cbz	r1, 801890a <_strtod_l+0xaba>
 80188d0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80188d4:	d819      	bhi.n	801890a <_strtod_l+0xaba>
 80188d6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80188da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188de:	d811      	bhi.n	8018904 <_strtod_l+0xab4>
 80188e0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80188e4:	ee18 3a10 	vmov	r3, s16
 80188e8:	2b01      	cmp	r3, #1
 80188ea:	bf38      	it	cc
 80188ec:	2301      	movcc	r3, #1
 80188ee:	ee08 3a10 	vmov	s16, r3
 80188f2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80188f6:	f1b8 0f00 	cmp.w	r8, #0
 80188fa:	d111      	bne.n	8018920 <_strtod_l+0xad0>
 80188fc:	eeb1 7b48 	vneg.f64	d7, d8
 8018900:	ec53 2b17 	vmov	r2, r3, d7
 8018904:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8018908:	1bcb      	subs	r3, r1, r7
 801890a:	eeb0 0b49 	vmov.f64	d0, d9
 801890e:	ec43 2b1a 	vmov	d10, r2, r3
 8018912:	f7ff f947 	bl	8017ba4 <__ulp>
 8018916:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801891a:	ec5b ab19 	vmov	sl, fp, d9
 801891e:	e7aa      	b.n	8018876 <_strtod_l+0xa26>
 8018920:	eeb0 7b48 	vmov.f64	d7, d8
 8018924:	e7ec      	b.n	8018900 <_strtod_l+0xab0>
 8018926:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8018968 <_strtod_l+0xb18>
 801892a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801892e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018932:	f57f af6f 	bpl.w	8018814 <_strtod_l+0x9c4>
 8018936:	e4b0      	b.n	801829a <_strtod_l+0x44a>
 8018938:	2300      	movs	r3, #0
 801893a:	9308      	str	r3, [sp, #32]
 801893c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801893e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018940:	6013      	str	r3, [r2, #0]
 8018942:	f7ff bac4 	b.w	8017ece <_strtod_l+0x7e>
 8018946:	2a65      	cmp	r2, #101	@ 0x65
 8018948:	f43f abbf 	beq.w	80180ca <_strtod_l+0x27a>
 801894c:	2a45      	cmp	r2, #69	@ 0x45
 801894e:	f43f abbc 	beq.w	80180ca <_strtod_l+0x27a>
 8018952:	2101      	movs	r1, #1
 8018954:	f7ff bbf4 	b.w	8018140 <_strtod_l+0x2f0>
 8018958:	94a03595 	.word	0x94a03595
 801895c:	3fdfffff 	.word	0x3fdfffff
 8018960:	35afe535 	.word	0x35afe535
 8018964:	3fe00000 	.word	0x3fe00000
 8018968:	94a03595 	.word	0x94a03595
 801896c:	3fcfffff 	.word	0x3fcfffff
 8018970:	000fffff 	.word	0x000fffff
 8018974:	7ff00000 	.word	0x7ff00000
 8018978:	7fefffff 	.word	0x7fefffff
 801897c:	7fe00000 	.word	0x7fe00000
 8018980:	7c9fffff 	.word	0x7c9fffff

08018984 <_strtod_r>:
 8018984:	4b01      	ldr	r3, [pc, #4]	@ (801898c <_strtod_r+0x8>)
 8018986:	f7ff ba63 	b.w	8017e50 <_strtod_l>
 801898a:	bf00      	nop
 801898c:	2400008c 	.word	0x2400008c

08018990 <__ssputs_r>:
 8018990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018994:	688e      	ldr	r6, [r1, #8]
 8018996:	461f      	mov	r7, r3
 8018998:	42be      	cmp	r6, r7
 801899a:	680b      	ldr	r3, [r1, #0]
 801899c:	4682      	mov	sl, r0
 801899e:	460c      	mov	r4, r1
 80189a0:	4690      	mov	r8, r2
 80189a2:	d82d      	bhi.n	8018a00 <__ssputs_r+0x70>
 80189a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80189a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80189ac:	d026      	beq.n	80189fc <__ssputs_r+0x6c>
 80189ae:	6965      	ldr	r5, [r4, #20]
 80189b0:	6909      	ldr	r1, [r1, #16]
 80189b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80189b6:	eba3 0901 	sub.w	r9, r3, r1
 80189ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80189be:	1c7b      	adds	r3, r7, #1
 80189c0:	444b      	add	r3, r9
 80189c2:	106d      	asrs	r5, r5, #1
 80189c4:	429d      	cmp	r5, r3
 80189c6:	bf38      	it	cc
 80189c8:	461d      	movcc	r5, r3
 80189ca:	0553      	lsls	r3, r2, #21
 80189cc:	d527      	bpl.n	8018a1e <__ssputs_r+0x8e>
 80189ce:	4629      	mov	r1, r5
 80189d0:	f7fe fcf0 	bl	80173b4 <_malloc_r>
 80189d4:	4606      	mov	r6, r0
 80189d6:	b360      	cbz	r0, 8018a32 <__ssputs_r+0xa2>
 80189d8:	6921      	ldr	r1, [r4, #16]
 80189da:	464a      	mov	r2, r9
 80189dc:	f7fd fe5b 	bl	8016696 <memcpy>
 80189e0:	89a3      	ldrh	r3, [r4, #12]
 80189e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80189e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80189ea:	81a3      	strh	r3, [r4, #12]
 80189ec:	6126      	str	r6, [r4, #16]
 80189ee:	6165      	str	r5, [r4, #20]
 80189f0:	444e      	add	r6, r9
 80189f2:	eba5 0509 	sub.w	r5, r5, r9
 80189f6:	6026      	str	r6, [r4, #0]
 80189f8:	60a5      	str	r5, [r4, #8]
 80189fa:	463e      	mov	r6, r7
 80189fc:	42be      	cmp	r6, r7
 80189fe:	d900      	bls.n	8018a02 <__ssputs_r+0x72>
 8018a00:	463e      	mov	r6, r7
 8018a02:	6820      	ldr	r0, [r4, #0]
 8018a04:	4632      	mov	r2, r6
 8018a06:	4641      	mov	r1, r8
 8018a08:	f7fd fd9a 	bl	8016540 <memmove>
 8018a0c:	68a3      	ldr	r3, [r4, #8]
 8018a0e:	1b9b      	subs	r3, r3, r6
 8018a10:	60a3      	str	r3, [r4, #8]
 8018a12:	6823      	ldr	r3, [r4, #0]
 8018a14:	4433      	add	r3, r6
 8018a16:	6023      	str	r3, [r4, #0]
 8018a18:	2000      	movs	r0, #0
 8018a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a1e:	462a      	mov	r2, r5
 8018a20:	f000 ff0f 	bl	8019842 <_realloc_r>
 8018a24:	4606      	mov	r6, r0
 8018a26:	2800      	cmp	r0, #0
 8018a28:	d1e0      	bne.n	80189ec <__ssputs_r+0x5c>
 8018a2a:	6921      	ldr	r1, [r4, #16]
 8018a2c:	4650      	mov	r0, sl
 8018a2e:	f7fe fc4d 	bl	80172cc <_free_r>
 8018a32:	230c      	movs	r3, #12
 8018a34:	f8ca 3000 	str.w	r3, [sl]
 8018a38:	89a3      	ldrh	r3, [r4, #12]
 8018a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a3e:	81a3      	strh	r3, [r4, #12]
 8018a40:	f04f 30ff 	mov.w	r0, #4294967295
 8018a44:	e7e9      	b.n	8018a1a <__ssputs_r+0x8a>
	...

08018a48 <_svfiprintf_r>:
 8018a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a4c:	4698      	mov	r8, r3
 8018a4e:	898b      	ldrh	r3, [r1, #12]
 8018a50:	061b      	lsls	r3, r3, #24
 8018a52:	b09d      	sub	sp, #116	@ 0x74
 8018a54:	4607      	mov	r7, r0
 8018a56:	460d      	mov	r5, r1
 8018a58:	4614      	mov	r4, r2
 8018a5a:	d510      	bpl.n	8018a7e <_svfiprintf_r+0x36>
 8018a5c:	690b      	ldr	r3, [r1, #16]
 8018a5e:	b973      	cbnz	r3, 8018a7e <_svfiprintf_r+0x36>
 8018a60:	2140      	movs	r1, #64	@ 0x40
 8018a62:	f7fe fca7 	bl	80173b4 <_malloc_r>
 8018a66:	6028      	str	r0, [r5, #0]
 8018a68:	6128      	str	r0, [r5, #16]
 8018a6a:	b930      	cbnz	r0, 8018a7a <_svfiprintf_r+0x32>
 8018a6c:	230c      	movs	r3, #12
 8018a6e:	603b      	str	r3, [r7, #0]
 8018a70:	f04f 30ff 	mov.w	r0, #4294967295
 8018a74:	b01d      	add	sp, #116	@ 0x74
 8018a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a7a:	2340      	movs	r3, #64	@ 0x40
 8018a7c:	616b      	str	r3, [r5, #20]
 8018a7e:	2300      	movs	r3, #0
 8018a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a82:	2320      	movs	r3, #32
 8018a84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a8c:	2330      	movs	r3, #48	@ 0x30
 8018a8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018c2c <_svfiprintf_r+0x1e4>
 8018a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018a96:	f04f 0901 	mov.w	r9, #1
 8018a9a:	4623      	mov	r3, r4
 8018a9c:	469a      	mov	sl, r3
 8018a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018aa2:	b10a      	cbz	r2, 8018aa8 <_svfiprintf_r+0x60>
 8018aa4:	2a25      	cmp	r2, #37	@ 0x25
 8018aa6:	d1f9      	bne.n	8018a9c <_svfiprintf_r+0x54>
 8018aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8018aac:	d00b      	beq.n	8018ac6 <_svfiprintf_r+0x7e>
 8018aae:	465b      	mov	r3, fp
 8018ab0:	4622      	mov	r2, r4
 8018ab2:	4629      	mov	r1, r5
 8018ab4:	4638      	mov	r0, r7
 8018ab6:	f7ff ff6b 	bl	8018990 <__ssputs_r>
 8018aba:	3001      	adds	r0, #1
 8018abc:	f000 80a7 	beq.w	8018c0e <_svfiprintf_r+0x1c6>
 8018ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018ac2:	445a      	add	r2, fp
 8018ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8018ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	f000 809f 	beq.w	8018c0e <_svfiprintf_r+0x1c6>
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8018ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018ada:	f10a 0a01 	add.w	sl, sl, #1
 8018ade:	9304      	str	r3, [sp, #16]
 8018ae0:	9307      	str	r3, [sp, #28]
 8018ae2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018ae6:	931a      	str	r3, [sp, #104]	@ 0x68
 8018ae8:	4654      	mov	r4, sl
 8018aea:	2205      	movs	r2, #5
 8018aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018af0:	484e      	ldr	r0, [pc, #312]	@ (8018c2c <_svfiprintf_r+0x1e4>)
 8018af2:	f7e7 fc0d 	bl	8000310 <memchr>
 8018af6:	9a04      	ldr	r2, [sp, #16]
 8018af8:	b9d8      	cbnz	r0, 8018b32 <_svfiprintf_r+0xea>
 8018afa:	06d0      	lsls	r0, r2, #27
 8018afc:	bf44      	itt	mi
 8018afe:	2320      	movmi	r3, #32
 8018b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018b04:	0711      	lsls	r1, r2, #28
 8018b06:	bf44      	itt	mi
 8018b08:	232b      	movmi	r3, #43	@ 0x2b
 8018b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8018b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8018b14:	d015      	beq.n	8018b42 <_svfiprintf_r+0xfa>
 8018b16:	9a07      	ldr	r2, [sp, #28]
 8018b18:	4654      	mov	r4, sl
 8018b1a:	2000      	movs	r0, #0
 8018b1c:	f04f 0c0a 	mov.w	ip, #10
 8018b20:	4621      	mov	r1, r4
 8018b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b26:	3b30      	subs	r3, #48	@ 0x30
 8018b28:	2b09      	cmp	r3, #9
 8018b2a:	d94b      	bls.n	8018bc4 <_svfiprintf_r+0x17c>
 8018b2c:	b1b0      	cbz	r0, 8018b5c <_svfiprintf_r+0x114>
 8018b2e:	9207      	str	r2, [sp, #28]
 8018b30:	e014      	b.n	8018b5c <_svfiprintf_r+0x114>
 8018b32:	eba0 0308 	sub.w	r3, r0, r8
 8018b36:	fa09 f303 	lsl.w	r3, r9, r3
 8018b3a:	4313      	orrs	r3, r2
 8018b3c:	9304      	str	r3, [sp, #16]
 8018b3e:	46a2      	mov	sl, r4
 8018b40:	e7d2      	b.n	8018ae8 <_svfiprintf_r+0xa0>
 8018b42:	9b03      	ldr	r3, [sp, #12]
 8018b44:	1d19      	adds	r1, r3, #4
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	9103      	str	r1, [sp, #12]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	bfbb      	ittet	lt
 8018b4e:	425b      	neglt	r3, r3
 8018b50:	f042 0202 	orrlt.w	r2, r2, #2
 8018b54:	9307      	strge	r3, [sp, #28]
 8018b56:	9307      	strlt	r3, [sp, #28]
 8018b58:	bfb8      	it	lt
 8018b5a:	9204      	strlt	r2, [sp, #16]
 8018b5c:	7823      	ldrb	r3, [r4, #0]
 8018b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018b60:	d10a      	bne.n	8018b78 <_svfiprintf_r+0x130>
 8018b62:	7863      	ldrb	r3, [r4, #1]
 8018b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8018b66:	d132      	bne.n	8018bce <_svfiprintf_r+0x186>
 8018b68:	9b03      	ldr	r3, [sp, #12]
 8018b6a:	1d1a      	adds	r2, r3, #4
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	9203      	str	r2, [sp, #12]
 8018b70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018b74:	3402      	adds	r4, #2
 8018b76:	9305      	str	r3, [sp, #20]
 8018b78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018c3c <_svfiprintf_r+0x1f4>
 8018b7c:	7821      	ldrb	r1, [r4, #0]
 8018b7e:	2203      	movs	r2, #3
 8018b80:	4650      	mov	r0, sl
 8018b82:	f7e7 fbc5 	bl	8000310 <memchr>
 8018b86:	b138      	cbz	r0, 8018b98 <_svfiprintf_r+0x150>
 8018b88:	9b04      	ldr	r3, [sp, #16]
 8018b8a:	eba0 000a 	sub.w	r0, r0, sl
 8018b8e:	2240      	movs	r2, #64	@ 0x40
 8018b90:	4082      	lsls	r2, r0
 8018b92:	4313      	orrs	r3, r2
 8018b94:	3401      	adds	r4, #1
 8018b96:	9304      	str	r3, [sp, #16]
 8018b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b9c:	4824      	ldr	r0, [pc, #144]	@ (8018c30 <_svfiprintf_r+0x1e8>)
 8018b9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018ba2:	2206      	movs	r2, #6
 8018ba4:	f7e7 fbb4 	bl	8000310 <memchr>
 8018ba8:	2800      	cmp	r0, #0
 8018baa:	d036      	beq.n	8018c1a <_svfiprintf_r+0x1d2>
 8018bac:	4b21      	ldr	r3, [pc, #132]	@ (8018c34 <_svfiprintf_r+0x1ec>)
 8018bae:	bb1b      	cbnz	r3, 8018bf8 <_svfiprintf_r+0x1b0>
 8018bb0:	9b03      	ldr	r3, [sp, #12]
 8018bb2:	3307      	adds	r3, #7
 8018bb4:	f023 0307 	bic.w	r3, r3, #7
 8018bb8:	3308      	adds	r3, #8
 8018bba:	9303      	str	r3, [sp, #12]
 8018bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bbe:	4433      	add	r3, r6
 8018bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8018bc2:	e76a      	b.n	8018a9a <_svfiprintf_r+0x52>
 8018bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8018bc8:	460c      	mov	r4, r1
 8018bca:	2001      	movs	r0, #1
 8018bcc:	e7a8      	b.n	8018b20 <_svfiprintf_r+0xd8>
 8018bce:	2300      	movs	r3, #0
 8018bd0:	3401      	adds	r4, #1
 8018bd2:	9305      	str	r3, [sp, #20]
 8018bd4:	4619      	mov	r1, r3
 8018bd6:	f04f 0c0a 	mov.w	ip, #10
 8018bda:	4620      	mov	r0, r4
 8018bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018be0:	3a30      	subs	r2, #48	@ 0x30
 8018be2:	2a09      	cmp	r2, #9
 8018be4:	d903      	bls.n	8018bee <_svfiprintf_r+0x1a6>
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d0c6      	beq.n	8018b78 <_svfiprintf_r+0x130>
 8018bea:	9105      	str	r1, [sp, #20]
 8018bec:	e7c4      	b.n	8018b78 <_svfiprintf_r+0x130>
 8018bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8018bf2:	4604      	mov	r4, r0
 8018bf4:	2301      	movs	r3, #1
 8018bf6:	e7f0      	b.n	8018bda <_svfiprintf_r+0x192>
 8018bf8:	ab03      	add	r3, sp, #12
 8018bfa:	9300      	str	r3, [sp, #0]
 8018bfc:	462a      	mov	r2, r5
 8018bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8018c38 <_svfiprintf_r+0x1f0>)
 8018c00:	a904      	add	r1, sp, #16
 8018c02:	4638      	mov	r0, r7
 8018c04:	f7fc fcb4 	bl	8015570 <_printf_float>
 8018c08:	1c42      	adds	r2, r0, #1
 8018c0a:	4606      	mov	r6, r0
 8018c0c:	d1d6      	bne.n	8018bbc <_svfiprintf_r+0x174>
 8018c0e:	89ab      	ldrh	r3, [r5, #12]
 8018c10:	065b      	lsls	r3, r3, #25
 8018c12:	f53f af2d 	bmi.w	8018a70 <_svfiprintf_r+0x28>
 8018c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018c18:	e72c      	b.n	8018a74 <_svfiprintf_r+0x2c>
 8018c1a:	ab03      	add	r3, sp, #12
 8018c1c:	9300      	str	r3, [sp, #0]
 8018c1e:	462a      	mov	r2, r5
 8018c20:	4b05      	ldr	r3, [pc, #20]	@ (8018c38 <_svfiprintf_r+0x1f0>)
 8018c22:	a904      	add	r1, sp, #16
 8018c24:	4638      	mov	r0, r7
 8018c26:	f7fc ff2b 	bl	8015a80 <_printf_i>
 8018c2a:	e7ed      	b.n	8018c08 <_svfiprintf_r+0x1c0>
 8018c2c:	0801c753 	.word	0x0801c753
 8018c30:	0801c75d 	.word	0x0801c75d
 8018c34:	08015571 	.word	0x08015571
 8018c38:	08018991 	.word	0x08018991
 8018c3c:	0801c759 	.word	0x0801c759

08018c40 <__sfputc_r>:
 8018c40:	6893      	ldr	r3, [r2, #8]
 8018c42:	3b01      	subs	r3, #1
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	b410      	push	{r4}
 8018c48:	6093      	str	r3, [r2, #8]
 8018c4a:	da08      	bge.n	8018c5e <__sfputc_r+0x1e>
 8018c4c:	6994      	ldr	r4, [r2, #24]
 8018c4e:	42a3      	cmp	r3, r4
 8018c50:	db01      	blt.n	8018c56 <__sfputc_r+0x16>
 8018c52:	290a      	cmp	r1, #10
 8018c54:	d103      	bne.n	8018c5e <__sfputc_r+0x1e>
 8018c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c5a:	f7fd bbcc 	b.w	80163f6 <__swbuf_r>
 8018c5e:	6813      	ldr	r3, [r2, #0]
 8018c60:	1c58      	adds	r0, r3, #1
 8018c62:	6010      	str	r0, [r2, #0]
 8018c64:	7019      	strb	r1, [r3, #0]
 8018c66:	4608      	mov	r0, r1
 8018c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c6c:	4770      	bx	lr

08018c6e <__sfputs_r>:
 8018c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c70:	4606      	mov	r6, r0
 8018c72:	460f      	mov	r7, r1
 8018c74:	4614      	mov	r4, r2
 8018c76:	18d5      	adds	r5, r2, r3
 8018c78:	42ac      	cmp	r4, r5
 8018c7a:	d101      	bne.n	8018c80 <__sfputs_r+0x12>
 8018c7c:	2000      	movs	r0, #0
 8018c7e:	e007      	b.n	8018c90 <__sfputs_r+0x22>
 8018c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c84:	463a      	mov	r2, r7
 8018c86:	4630      	mov	r0, r6
 8018c88:	f7ff ffda 	bl	8018c40 <__sfputc_r>
 8018c8c:	1c43      	adds	r3, r0, #1
 8018c8e:	d1f3      	bne.n	8018c78 <__sfputs_r+0xa>
 8018c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018c94 <_vfiprintf_r>:
 8018c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c98:	460d      	mov	r5, r1
 8018c9a:	b09d      	sub	sp, #116	@ 0x74
 8018c9c:	4614      	mov	r4, r2
 8018c9e:	4698      	mov	r8, r3
 8018ca0:	4606      	mov	r6, r0
 8018ca2:	b118      	cbz	r0, 8018cac <_vfiprintf_r+0x18>
 8018ca4:	6a03      	ldr	r3, [r0, #32]
 8018ca6:	b90b      	cbnz	r3, 8018cac <_vfiprintf_r+0x18>
 8018ca8:	f7fd fa9a 	bl	80161e0 <__sinit>
 8018cac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018cae:	07d9      	lsls	r1, r3, #31
 8018cb0:	d405      	bmi.n	8018cbe <_vfiprintf_r+0x2a>
 8018cb2:	89ab      	ldrh	r3, [r5, #12]
 8018cb4:	059a      	lsls	r2, r3, #22
 8018cb6:	d402      	bmi.n	8018cbe <_vfiprintf_r+0x2a>
 8018cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018cba:	f7fd fcea 	bl	8016692 <__retarget_lock_acquire_recursive>
 8018cbe:	89ab      	ldrh	r3, [r5, #12]
 8018cc0:	071b      	lsls	r3, r3, #28
 8018cc2:	d501      	bpl.n	8018cc8 <_vfiprintf_r+0x34>
 8018cc4:	692b      	ldr	r3, [r5, #16]
 8018cc6:	b99b      	cbnz	r3, 8018cf0 <_vfiprintf_r+0x5c>
 8018cc8:	4629      	mov	r1, r5
 8018cca:	4630      	mov	r0, r6
 8018ccc:	f7fd fbd2 	bl	8016474 <__swsetup_r>
 8018cd0:	b170      	cbz	r0, 8018cf0 <_vfiprintf_r+0x5c>
 8018cd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018cd4:	07dc      	lsls	r4, r3, #31
 8018cd6:	d504      	bpl.n	8018ce2 <_vfiprintf_r+0x4e>
 8018cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8018cdc:	b01d      	add	sp, #116	@ 0x74
 8018cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ce2:	89ab      	ldrh	r3, [r5, #12]
 8018ce4:	0598      	lsls	r0, r3, #22
 8018ce6:	d4f7      	bmi.n	8018cd8 <_vfiprintf_r+0x44>
 8018ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018cea:	f7fd fcd3 	bl	8016694 <__retarget_lock_release_recursive>
 8018cee:	e7f3      	b.n	8018cd8 <_vfiprintf_r+0x44>
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018cf4:	2320      	movs	r3, #32
 8018cf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8018cfe:	2330      	movs	r3, #48	@ 0x30
 8018d00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018eb0 <_vfiprintf_r+0x21c>
 8018d04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018d08:	f04f 0901 	mov.w	r9, #1
 8018d0c:	4623      	mov	r3, r4
 8018d0e:	469a      	mov	sl, r3
 8018d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d14:	b10a      	cbz	r2, 8018d1a <_vfiprintf_r+0x86>
 8018d16:	2a25      	cmp	r2, #37	@ 0x25
 8018d18:	d1f9      	bne.n	8018d0e <_vfiprintf_r+0x7a>
 8018d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8018d1e:	d00b      	beq.n	8018d38 <_vfiprintf_r+0xa4>
 8018d20:	465b      	mov	r3, fp
 8018d22:	4622      	mov	r2, r4
 8018d24:	4629      	mov	r1, r5
 8018d26:	4630      	mov	r0, r6
 8018d28:	f7ff ffa1 	bl	8018c6e <__sfputs_r>
 8018d2c:	3001      	adds	r0, #1
 8018d2e:	f000 80a7 	beq.w	8018e80 <_vfiprintf_r+0x1ec>
 8018d32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d34:	445a      	add	r2, fp
 8018d36:	9209      	str	r2, [sp, #36]	@ 0x24
 8018d38:	f89a 3000 	ldrb.w	r3, [sl]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	f000 809f 	beq.w	8018e80 <_vfiprintf_r+0x1ec>
 8018d42:	2300      	movs	r3, #0
 8018d44:	f04f 32ff 	mov.w	r2, #4294967295
 8018d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d4c:	f10a 0a01 	add.w	sl, sl, #1
 8018d50:	9304      	str	r3, [sp, #16]
 8018d52:	9307      	str	r3, [sp, #28]
 8018d54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018d58:	931a      	str	r3, [sp, #104]	@ 0x68
 8018d5a:	4654      	mov	r4, sl
 8018d5c:	2205      	movs	r2, #5
 8018d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d62:	4853      	ldr	r0, [pc, #332]	@ (8018eb0 <_vfiprintf_r+0x21c>)
 8018d64:	f7e7 fad4 	bl	8000310 <memchr>
 8018d68:	9a04      	ldr	r2, [sp, #16]
 8018d6a:	b9d8      	cbnz	r0, 8018da4 <_vfiprintf_r+0x110>
 8018d6c:	06d1      	lsls	r1, r2, #27
 8018d6e:	bf44      	itt	mi
 8018d70:	2320      	movmi	r3, #32
 8018d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018d76:	0713      	lsls	r3, r2, #28
 8018d78:	bf44      	itt	mi
 8018d7a:	232b      	movmi	r3, #43	@ 0x2b
 8018d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018d80:	f89a 3000 	ldrb.w	r3, [sl]
 8018d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8018d86:	d015      	beq.n	8018db4 <_vfiprintf_r+0x120>
 8018d88:	9a07      	ldr	r2, [sp, #28]
 8018d8a:	4654      	mov	r4, sl
 8018d8c:	2000      	movs	r0, #0
 8018d8e:	f04f 0c0a 	mov.w	ip, #10
 8018d92:	4621      	mov	r1, r4
 8018d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d98:	3b30      	subs	r3, #48	@ 0x30
 8018d9a:	2b09      	cmp	r3, #9
 8018d9c:	d94b      	bls.n	8018e36 <_vfiprintf_r+0x1a2>
 8018d9e:	b1b0      	cbz	r0, 8018dce <_vfiprintf_r+0x13a>
 8018da0:	9207      	str	r2, [sp, #28]
 8018da2:	e014      	b.n	8018dce <_vfiprintf_r+0x13a>
 8018da4:	eba0 0308 	sub.w	r3, r0, r8
 8018da8:	fa09 f303 	lsl.w	r3, r9, r3
 8018dac:	4313      	orrs	r3, r2
 8018dae:	9304      	str	r3, [sp, #16]
 8018db0:	46a2      	mov	sl, r4
 8018db2:	e7d2      	b.n	8018d5a <_vfiprintf_r+0xc6>
 8018db4:	9b03      	ldr	r3, [sp, #12]
 8018db6:	1d19      	adds	r1, r3, #4
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	9103      	str	r1, [sp, #12]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	bfbb      	ittet	lt
 8018dc0:	425b      	neglt	r3, r3
 8018dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8018dc6:	9307      	strge	r3, [sp, #28]
 8018dc8:	9307      	strlt	r3, [sp, #28]
 8018dca:	bfb8      	it	lt
 8018dcc:	9204      	strlt	r2, [sp, #16]
 8018dce:	7823      	ldrb	r3, [r4, #0]
 8018dd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8018dd2:	d10a      	bne.n	8018dea <_vfiprintf_r+0x156>
 8018dd4:	7863      	ldrb	r3, [r4, #1]
 8018dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8018dd8:	d132      	bne.n	8018e40 <_vfiprintf_r+0x1ac>
 8018dda:	9b03      	ldr	r3, [sp, #12]
 8018ddc:	1d1a      	adds	r2, r3, #4
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	9203      	str	r2, [sp, #12]
 8018de2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018de6:	3402      	adds	r4, #2
 8018de8:	9305      	str	r3, [sp, #20]
 8018dea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018ec0 <_vfiprintf_r+0x22c>
 8018dee:	7821      	ldrb	r1, [r4, #0]
 8018df0:	2203      	movs	r2, #3
 8018df2:	4650      	mov	r0, sl
 8018df4:	f7e7 fa8c 	bl	8000310 <memchr>
 8018df8:	b138      	cbz	r0, 8018e0a <_vfiprintf_r+0x176>
 8018dfa:	9b04      	ldr	r3, [sp, #16]
 8018dfc:	eba0 000a 	sub.w	r0, r0, sl
 8018e00:	2240      	movs	r2, #64	@ 0x40
 8018e02:	4082      	lsls	r2, r0
 8018e04:	4313      	orrs	r3, r2
 8018e06:	3401      	adds	r4, #1
 8018e08:	9304      	str	r3, [sp, #16]
 8018e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e0e:	4829      	ldr	r0, [pc, #164]	@ (8018eb4 <_vfiprintf_r+0x220>)
 8018e10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018e14:	2206      	movs	r2, #6
 8018e16:	f7e7 fa7b 	bl	8000310 <memchr>
 8018e1a:	2800      	cmp	r0, #0
 8018e1c:	d03f      	beq.n	8018e9e <_vfiprintf_r+0x20a>
 8018e1e:	4b26      	ldr	r3, [pc, #152]	@ (8018eb8 <_vfiprintf_r+0x224>)
 8018e20:	bb1b      	cbnz	r3, 8018e6a <_vfiprintf_r+0x1d6>
 8018e22:	9b03      	ldr	r3, [sp, #12]
 8018e24:	3307      	adds	r3, #7
 8018e26:	f023 0307 	bic.w	r3, r3, #7
 8018e2a:	3308      	adds	r3, #8
 8018e2c:	9303      	str	r3, [sp, #12]
 8018e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e30:	443b      	add	r3, r7
 8018e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e34:	e76a      	b.n	8018d0c <_vfiprintf_r+0x78>
 8018e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e3a:	460c      	mov	r4, r1
 8018e3c:	2001      	movs	r0, #1
 8018e3e:	e7a8      	b.n	8018d92 <_vfiprintf_r+0xfe>
 8018e40:	2300      	movs	r3, #0
 8018e42:	3401      	adds	r4, #1
 8018e44:	9305      	str	r3, [sp, #20]
 8018e46:	4619      	mov	r1, r3
 8018e48:	f04f 0c0a 	mov.w	ip, #10
 8018e4c:	4620      	mov	r0, r4
 8018e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e52:	3a30      	subs	r2, #48	@ 0x30
 8018e54:	2a09      	cmp	r2, #9
 8018e56:	d903      	bls.n	8018e60 <_vfiprintf_r+0x1cc>
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d0c6      	beq.n	8018dea <_vfiprintf_r+0x156>
 8018e5c:	9105      	str	r1, [sp, #20]
 8018e5e:	e7c4      	b.n	8018dea <_vfiprintf_r+0x156>
 8018e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e64:	4604      	mov	r4, r0
 8018e66:	2301      	movs	r3, #1
 8018e68:	e7f0      	b.n	8018e4c <_vfiprintf_r+0x1b8>
 8018e6a:	ab03      	add	r3, sp, #12
 8018e6c:	9300      	str	r3, [sp, #0]
 8018e6e:	462a      	mov	r2, r5
 8018e70:	4b12      	ldr	r3, [pc, #72]	@ (8018ebc <_vfiprintf_r+0x228>)
 8018e72:	a904      	add	r1, sp, #16
 8018e74:	4630      	mov	r0, r6
 8018e76:	f7fc fb7b 	bl	8015570 <_printf_float>
 8018e7a:	4607      	mov	r7, r0
 8018e7c:	1c78      	adds	r0, r7, #1
 8018e7e:	d1d6      	bne.n	8018e2e <_vfiprintf_r+0x19a>
 8018e80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e82:	07d9      	lsls	r1, r3, #31
 8018e84:	d405      	bmi.n	8018e92 <_vfiprintf_r+0x1fe>
 8018e86:	89ab      	ldrh	r3, [r5, #12]
 8018e88:	059a      	lsls	r2, r3, #22
 8018e8a:	d402      	bmi.n	8018e92 <_vfiprintf_r+0x1fe>
 8018e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e8e:	f7fd fc01 	bl	8016694 <__retarget_lock_release_recursive>
 8018e92:	89ab      	ldrh	r3, [r5, #12]
 8018e94:	065b      	lsls	r3, r3, #25
 8018e96:	f53f af1f 	bmi.w	8018cd8 <_vfiprintf_r+0x44>
 8018e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018e9c:	e71e      	b.n	8018cdc <_vfiprintf_r+0x48>
 8018e9e:	ab03      	add	r3, sp, #12
 8018ea0:	9300      	str	r3, [sp, #0]
 8018ea2:	462a      	mov	r2, r5
 8018ea4:	4b05      	ldr	r3, [pc, #20]	@ (8018ebc <_vfiprintf_r+0x228>)
 8018ea6:	a904      	add	r1, sp, #16
 8018ea8:	4630      	mov	r0, r6
 8018eaa:	f7fc fde9 	bl	8015a80 <_printf_i>
 8018eae:	e7e4      	b.n	8018e7a <_vfiprintf_r+0x1e6>
 8018eb0:	0801c753 	.word	0x0801c753
 8018eb4:	0801c75d 	.word	0x0801c75d
 8018eb8:	08015571 	.word	0x08015571
 8018ebc:	08018c6f 	.word	0x08018c6f
 8018ec0:	0801c759 	.word	0x0801c759

08018ec4 <__sflush_r>:
 8018ec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ecc:	0716      	lsls	r6, r2, #28
 8018ece:	4605      	mov	r5, r0
 8018ed0:	460c      	mov	r4, r1
 8018ed2:	d454      	bmi.n	8018f7e <__sflush_r+0xba>
 8018ed4:	684b      	ldr	r3, [r1, #4]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	dc02      	bgt.n	8018ee0 <__sflush_r+0x1c>
 8018eda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	dd48      	ble.n	8018f72 <__sflush_r+0xae>
 8018ee0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018ee2:	2e00      	cmp	r6, #0
 8018ee4:	d045      	beq.n	8018f72 <__sflush_r+0xae>
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018eec:	682f      	ldr	r7, [r5, #0]
 8018eee:	6a21      	ldr	r1, [r4, #32]
 8018ef0:	602b      	str	r3, [r5, #0]
 8018ef2:	d030      	beq.n	8018f56 <__sflush_r+0x92>
 8018ef4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018ef6:	89a3      	ldrh	r3, [r4, #12]
 8018ef8:	0759      	lsls	r1, r3, #29
 8018efa:	d505      	bpl.n	8018f08 <__sflush_r+0x44>
 8018efc:	6863      	ldr	r3, [r4, #4]
 8018efe:	1ad2      	subs	r2, r2, r3
 8018f00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018f02:	b10b      	cbz	r3, 8018f08 <__sflush_r+0x44>
 8018f04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018f06:	1ad2      	subs	r2, r2, r3
 8018f08:	2300      	movs	r3, #0
 8018f0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018f0c:	6a21      	ldr	r1, [r4, #32]
 8018f0e:	4628      	mov	r0, r5
 8018f10:	47b0      	blx	r6
 8018f12:	1c43      	adds	r3, r0, #1
 8018f14:	89a3      	ldrh	r3, [r4, #12]
 8018f16:	d106      	bne.n	8018f26 <__sflush_r+0x62>
 8018f18:	6829      	ldr	r1, [r5, #0]
 8018f1a:	291d      	cmp	r1, #29
 8018f1c:	d82b      	bhi.n	8018f76 <__sflush_r+0xb2>
 8018f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8018fc8 <__sflush_r+0x104>)
 8018f20:	40ca      	lsrs	r2, r1
 8018f22:	07d6      	lsls	r6, r2, #31
 8018f24:	d527      	bpl.n	8018f76 <__sflush_r+0xb2>
 8018f26:	2200      	movs	r2, #0
 8018f28:	6062      	str	r2, [r4, #4]
 8018f2a:	04d9      	lsls	r1, r3, #19
 8018f2c:	6922      	ldr	r2, [r4, #16]
 8018f2e:	6022      	str	r2, [r4, #0]
 8018f30:	d504      	bpl.n	8018f3c <__sflush_r+0x78>
 8018f32:	1c42      	adds	r2, r0, #1
 8018f34:	d101      	bne.n	8018f3a <__sflush_r+0x76>
 8018f36:	682b      	ldr	r3, [r5, #0]
 8018f38:	b903      	cbnz	r3, 8018f3c <__sflush_r+0x78>
 8018f3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8018f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018f3e:	602f      	str	r7, [r5, #0]
 8018f40:	b1b9      	cbz	r1, 8018f72 <__sflush_r+0xae>
 8018f42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018f46:	4299      	cmp	r1, r3
 8018f48:	d002      	beq.n	8018f50 <__sflush_r+0x8c>
 8018f4a:	4628      	mov	r0, r5
 8018f4c:	f7fe f9be 	bl	80172cc <_free_r>
 8018f50:	2300      	movs	r3, #0
 8018f52:	6363      	str	r3, [r4, #52]	@ 0x34
 8018f54:	e00d      	b.n	8018f72 <__sflush_r+0xae>
 8018f56:	2301      	movs	r3, #1
 8018f58:	4628      	mov	r0, r5
 8018f5a:	47b0      	blx	r6
 8018f5c:	4602      	mov	r2, r0
 8018f5e:	1c50      	adds	r0, r2, #1
 8018f60:	d1c9      	bne.n	8018ef6 <__sflush_r+0x32>
 8018f62:	682b      	ldr	r3, [r5, #0]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d0c6      	beq.n	8018ef6 <__sflush_r+0x32>
 8018f68:	2b1d      	cmp	r3, #29
 8018f6a:	d001      	beq.n	8018f70 <__sflush_r+0xac>
 8018f6c:	2b16      	cmp	r3, #22
 8018f6e:	d11e      	bne.n	8018fae <__sflush_r+0xea>
 8018f70:	602f      	str	r7, [r5, #0]
 8018f72:	2000      	movs	r0, #0
 8018f74:	e022      	b.n	8018fbc <__sflush_r+0xf8>
 8018f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018f7a:	b21b      	sxth	r3, r3
 8018f7c:	e01b      	b.n	8018fb6 <__sflush_r+0xf2>
 8018f7e:	690f      	ldr	r7, [r1, #16]
 8018f80:	2f00      	cmp	r7, #0
 8018f82:	d0f6      	beq.n	8018f72 <__sflush_r+0xae>
 8018f84:	0793      	lsls	r3, r2, #30
 8018f86:	680e      	ldr	r6, [r1, #0]
 8018f88:	bf08      	it	eq
 8018f8a:	694b      	ldreq	r3, [r1, #20]
 8018f8c:	600f      	str	r7, [r1, #0]
 8018f8e:	bf18      	it	ne
 8018f90:	2300      	movne	r3, #0
 8018f92:	eba6 0807 	sub.w	r8, r6, r7
 8018f96:	608b      	str	r3, [r1, #8]
 8018f98:	f1b8 0f00 	cmp.w	r8, #0
 8018f9c:	dde9      	ble.n	8018f72 <__sflush_r+0xae>
 8018f9e:	6a21      	ldr	r1, [r4, #32]
 8018fa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018fa2:	4643      	mov	r3, r8
 8018fa4:	463a      	mov	r2, r7
 8018fa6:	4628      	mov	r0, r5
 8018fa8:	47b0      	blx	r6
 8018faa:	2800      	cmp	r0, #0
 8018fac:	dc08      	bgt.n	8018fc0 <__sflush_r+0xfc>
 8018fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018fb6:	81a3      	strh	r3, [r4, #12]
 8018fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8018fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fc0:	4407      	add	r7, r0
 8018fc2:	eba8 0800 	sub.w	r8, r8, r0
 8018fc6:	e7e7      	b.n	8018f98 <__sflush_r+0xd4>
 8018fc8:	20400001 	.word	0x20400001

08018fcc <_fflush_r>:
 8018fcc:	b538      	push	{r3, r4, r5, lr}
 8018fce:	690b      	ldr	r3, [r1, #16]
 8018fd0:	4605      	mov	r5, r0
 8018fd2:	460c      	mov	r4, r1
 8018fd4:	b913      	cbnz	r3, 8018fdc <_fflush_r+0x10>
 8018fd6:	2500      	movs	r5, #0
 8018fd8:	4628      	mov	r0, r5
 8018fda:	bd38      	pop	{r3, r4, r5, pc}
 8018fdc:	b118      	cbz	r0, 8018fe6 <_fflush_r+0x1a>
 8018fde:	6a03      	ldr	r3, [r0, #32]
 8018fe0:	b90b      	cbnz	r3, 8018fe6 <_fflush_r+0x1a>
 8018fe2:	f7fd f8fd 	bl	80161e0 <__sinit>
 8018fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d0f3      	beq.n	8018fd6 <_fflush_r+0xa>
 8018fee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018ff0:	07d0      	lsls	r0, r2, #31
 8018ff2:	d404      	bmi.n	8018ffe <_fflush_r+0x32>
 8018ff4:	0599      	lsls	r1, r3, #22
 8018ff6:	d402      	bmi.n	8018ffe <_fflush_r+0x32>
 8018ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ffa:	f7fd fb4a 	bl	8016692 <__retarget_lock_acquire_recursive>
 8018ffe:	4628      	mov	r0, r5
 8019000:	4621      	mov	r1, r4
 8019002:	f7ff ff5f 	bl	8018ec4 <__sflush_r>
 8019006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019008:	07da      	lsls	r2, r3, #31
 801900a:	4605      	mov	r5, r0
 801900c:	d4e4      	bmi.n	8018fd8 <_fflush_r+0xc>
 801900e:	89a3      	ldrh	r3, [r4, #12]
 8019010:	059b      	lsls	r3, r3, #22
 8019012:	d4e1      	bmi.n	8018fd8 <_fflush_r+0xc>
 8019014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019016:	f7fd fb3d 	bl	8016694 <__retarget_lock_release_recursive>
 801901a:	e7dd      	b.n	8018fd8 <_fflush_r+0xc>

0801901c <fiprintf>:
 801901c:	b40e      	push	{r1, r2, r3}
 801901e:	b503      	push	{r0, r1, lr}
 8019020:	4601      	mov	r1, r0
 8019022:	ab03      	add	r3, sp, #12
 8019024:	4805      	ldr	r0, [pc, #20]	@ (801903c <fiprintf+0x20>)
 8019026:	f853 2b04 	ldr.w	r2, [r3], #4
 801902a:	6800      	ldr	r0, [r0, #0]
 801902c:	9301      	str	r3, [sp, #4]
 801902e:	f7ff fe31 	bl	8018c94 <_vfiprintf_r>
 8019032:	b002      	add	sp, #8
 8019034:	f85d eb04 	ldr.w	lr, [sp], #4
 8019038:	b003      	add	sp, #12
 801903a:	4770      	bx	lr
 801903c:	2400003c 	.word	0x2400003c

08019040 <__swhatbuf_r>:
 8019040:	b570      	push	{r4, r5, r6, lr}
 8019042:	460c      	mov	r4, r1
 8019044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019048:	2900      	cmp	r1, #0
 801904a:	b096      	sub	sp, #88	@ 0x58
 801904c:	4615      	mov	r5, r2
 801904e:	461e      	mov	r6, r3
 8019050:	da0d      	bge.n	801906e <__swhatbuf_r+0x2e>
 8019052:	89a3      	ldrh	r3, [r4, #12]
 8019054:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019058:	f04f 0100 	mov.w	r1, #0
 801905c:	bf14      	ite	ne
 801905e:	2340      	movne	r3, #64	@ 0x40
 8019060:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019064:	2000      	movs	r0, #0
 8019066:	6031      	str	r1, [r6, #0]
 8019068:	602b      	str	r3, [r5, #0]
 801906a:	b016      	add	sp, #88	@ 0x58
 801906c:	bd70      	pop	{r4, r5, r6, pc}
 801906e:	466a      	mov	r2, sp
 8019070:	f000 f848 	bl	8019104 <_fstat_r>
 8019074:	2800      	cmp	r0, #0
 8019076:	dbec      	blt.n	8019052 <__swhatbuf_r+0x12>
 8019078:	9901      	ldr	r1, [sp, #4]
 801907a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801907e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019082:	4259      	negs	r1, r3
 8019084:	4159      	adcs	r1, r3
 8019086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801908a:	e7eb      	b.n	8019064 <__swhatbuf_r+0x24>

0801908c <__smakebuf_r>:
 801908c:	898b      	ldrh	r3, [r1, #12]
 801908e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019090:	079d      	lsls	r5, r3, #30
 8019092:	4606      	mov	r6, r0
 8019094:	460c      	mov	r4, r1
 8019096:	d507      	bpl.n	80190a8 <__smakebuf_r+0x1c>
 8019098:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801909c:	6023      	str	r3, [r4, #0]
 801909e:	6123      	str	r3, [r4, #16]
 80190a0:	2301      	movs	r3, #1
 80190a2:	6163      	str	r3, [r4, #20]
 80190a4:	b003      	add	sp, #12
 80190a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190a8:	ab01      	add	r3, sp, #4
 80190aa:	466a      	mov	r2, sp
 80190ac:	f7ff ffc8 	bl	8019040 <__swhatbuf_r>
 80190b0:	9f00      	ldr	r7, [sp, #0]
 80190b2:	4605      	mov	r5, r0
 80190b4:	4639      	mov	r1, r7
 80190b6:	4630      	mov	r0, r6
 80190b8:	f7fe f97c 	bl	80173b4 <_malloc_r>
 80190bc:	b948      	cbnz	r0, 80190d2 <__smakebuf_r+0x46>
 80190be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190c2:	059a      	lsls	r2, r3, #22
 80190c4:	d4ee      	bmi.n	80190a4 <__smakebuf_r+0x18>
 80190c6:	f023 0303 	bic.w	r3, r3, #3
 80190ca:	f043 0302 	orr.w	r3, r3, #2
 80190ce:	81a3      	strh	r3, [r4, #12]
 80190d0:	e7e2      	b.n	8019098 <__smakebuf_r+0xc>
 80190d2:	89a3      	ldrh	r3, [r4, #12]
 80190d4:	6020      	str	r0, [r4, #0]
 80190d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80190da:	81a3      	strh	r3, [r4, #12]
 80190dc:	9b01      	ldr	r3, [sp, #4]
 80190de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80190e2:	b15b      	cbz	r3, 80190fc <__smakebuf_r+0x70>
 80190e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80190e8:	4630      	mov	r0, r6
 80190ea:	f000 f81d 	bl	8019128 <_isatty_r>
 80190ee:	b128      	cbz	r0, 80190fc <__smakebuf_r+0x70>
 80190f0:	89a3      	ldrh	r3, [r4, #12]
 80190f2:	f023 0303 	bic.w	r3, r3, #3
 80190f6:	f043 0301 	orr.w	r3, r3, #1
 80190fa:	81a3      	strh	r3, [r4, #12]
 80190fc:	89a3      	ldrh	r3, [r4, #12]
 80190fe:	431d      	orrs	r5, r3
 8019100:	81a5      	strh	r5, [r4, #12]
 8019102:	e7cf      	b.n	80190a4 <__smakebuf_r+0x18>

08019104 <_fstat_r>:
 8019104:	b538      	push	{r3, r4, r5, lr}
 8019106:	4d07      	ldr	r5, [pc, #28]	@ (8019124 <_fstat_r+0x20>)
 8019108:	2300      	movs	r3, #0
 801910a:	4604      	mov	r4, r0
 801910c:	4608      	mov	r0, r1
 801910e:	4611      	mov	r1, r2
 8019110:	602b      	str	r3, [r5, #0]
 8019112:	f7e8 fea5 	bl	8001e60 <_fstat>
 8019116:	1c43      	adds	r3, r0, #1
 8019118:	d102      	bne.n	8019120 <_fstat_r+0x1c>
 801911a:	682b      	ldr	r3, [r5, #0]
 801911c:	b103      	cbz	r3, 8019120 <_fstat_r+0x1c>
 801911e:	6023      	str	r3, [r4, #0]
 8019120:	bd38      	pop	{r3, r4, r5, pc}
 8019122:	bf00      	nop
 8019124:	2400851c 	.word	0x2400851c

08019128 <_isatty_r>:
 8019128:	b538      	push	{r3, r4, r5, lr}
 801912a:	4d06      	ldr	r5, [pc, #24]	@ (8019144 <_isatty_r+0x1c>)
 801912c:	2300      	movs	r3, #0
 801912e:	4604      	mov	r4, r0
 8019130:	4608      	mov	r0, r1
 8019132:	602b      	str	r3, [r5, #0]
 8019134:	f7e8 fea4 	bl	8001e80 <_isatty>
 8019138:	1c43      	adds	r3, r0, #1
 801913a:	d102      	bne.n	8019142 <_isatty_r+0x1a>
 801913c:	682b      	ldr	r3, [r5, #0]
 801913e:	b103      	cbz	r3, 8019142 <_isatty_r+0x1a>
 8019140:	6023      	str	r3, [r4, #0]
 8019142:	bd38      	pop	{r3, r4, r5, pc}
 8019144:	2400851c 	.word	0x2400851c

08019148 <_sbrk_r>:
 8019148:	b538      	push	{r3, r4, r5, lr}
 801914a:	4d06      	ldr	r5, [pc, #24]	@ (8019164 <_sbrk_r+0x1c>)
 801914c:	2300      	movs	r3, #0
 801914e:	4604      	mov	r4, r0
 8019150:	4608      	mov	r0, r1
 8019152:	602b      	str	r3, [r5, #0]
 8019154:	f7e8 feac 	bl	8001eb0 <_sbrk>
 8019158:	1c43      	adds	r3, r0, #1
 801915a:	d102      	bne.n	8019162 <_sbrk_r+0x1a>
 801915c:	682b      	ldr	r3, [r5, #0]
 801915e:	b103      	cbz	r3, 8019162 <_sbrk_r+0x1a>
 8019160:	6023      	str	r3, [r4, #0]
 8019162:	bd38      	pop	{r3, r4, r5, pc}
 8019164:	2400851c 	.word	0x2400851c

08019168 <nan>:
 8019168:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019170 <nan+0x8>
 801916c:	4770      	bx	lr
 801916e:	bf00      	nop
 8019170:	00000000 	.word	0x00000000
 8019174:	7ff80000 	.word	0x7ff80000

08019178 <abort>:
 8019178:	b508      	push	{r3, lr}
 801917a:	2006      	movs	r0, #6
 801917c:	f000 fbc4 	bl	8019908 <raise>
 8019180:	2001      	movs	r0, #1
 8019182:	f7e8 fe1d 	bl	8001dc0 <_exit>

08019186 <_calloc_r>:
 8019186:	b570      	push	{r4, r5, r6, lr}
 8019188:	fba1 5402 	umull	r5, r4, r1, r2
 801918c:	b934      	cbnz	r4, 801919c <_calloc_r+0x16>
 801918e:	4629      	mov	r1, r5
 8019190:	f7fe f910 	bl	80173b4 <_malloc_r>
 8019194:	4606      	mov	r6, r0
 8019196:	b928      	cbnz	r0, 80191a4 <_calloc_r+0x1e>
 8019198:	4630      	mov	r0, r6
 801919a:	bd70      	pop	{r4, r5, r6, pc}
 801919c:	220c      	movs	r2, #12
 801919e:	6002      	str	r2, [r0, #0]
 80191a0:	2600      	movs	r6, #0
 80191a2:	e7f9      	b.n	8019198 <_calloc_r+0x12>
 80191a4:	462a      	mov	r2, r5
 80191a6:	4621      	mov	r1, r4
 80191a8:	f7fd f9e4 	bl	8016574 <memset>
 80191ac:	e7f4      	b.n	8019198 <_calloc_r+0x12>

080191ae <rshift>:
 80191ae:	6903      	ldr	r3, [r0, #16]
 80191b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80191b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80191bc:	f100 0414 	add.w	r4, r0, #20
 80191c0:	dd45      	ble.n	801924e <rshift+0xa0>
 80191c2:	f011 011f 	ands.w	r1, r1, #31
 80191c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80191ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80191ce:	d10c      	bne.n	80191ea <rshift+0x3c>
 80191d0:	f100 0710 	add.w	r7, r0, #16
 80191d4:	4629      	mov	r1, r5
 80191d6:	42b1      	cmp	r1, r6
 80191d8:	d334      	bcc.n	8019244 <rshift+0x96>
 80191da:	1a9b      	subs	r3, r3, r2
 80191dc:	009b      	lsls	r3, r3, #2
 80191de:	1eea      	subs	r2, r5, #3
 80191e0:	4296      	cmp	r6, r2
 80191e2:	bf38      	it	cc
 80191e4:	2300      	movcc	r3, #0
 80191e6:	4423      	add	r3, r4
 80191e8:	e015      	b.n	8019216 <rshift+0x68>
 80191ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80191ee:	f1c1 0820 	rsb	r8, r1, #32
 80191f2:	40cf      	lsrs	r7, r1
 80191f4:	f105 0e04 	add.w	lr, r5, #4
 80191f8:	46a1      	mov	r9, r4
 80191fa:	4576      	cmp	r6, lr
 80191fc:	46f4      	mov	ip, lr
 80191fe:	d815      	bhi.n	801922c <rshift+0x7e>
 8019200:	1a9a      	subs	r2, r3, r2
 8019202:	0092      	lsls	r2, r2, #2
 8019204:	3a04      	subs	r2, #4
 8019206:	3501      	adds	r5, #1
 8019208:	42ae      	cmp	r6, r5
 801920a:	bf38      	it	cc
 801920c:	2200      	movcc	r2, #0
 801920e:	18a3      	adds	r3, r4, r2
 8019210:	50a7      	str	r7, [r4, r2]
 8019212:	b107      	cbz	r7, 8019216 <rshift+0x68>
 8019214:	3304      	adds	r3, #4
 8019216:	1b1a      	subs	r2, r3, r4
 8019218:	42a3      	cmp	r3, r4
 801921a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801921e:	bf08      	it	eq
 8019220:	2300      	moveq	r3, #0
 8019222:	6102      	str	r2, [r0, #16]
 8019224:	bf08      	it	eq
 8019226:	6143      	streq	r3, [r0, #20]
 8019228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801922c:	f8dc c000 	ldr.w	ip, [ip]
 8019230:	fa0c fc08 	lsl.w	ip, ip, r8
 8019234:	ea4c 0707 	orr.w	r7, ip, r7
 8019238:	f849 7b04 	str.w	r7, [r9], #4
 801923c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019240:	40cf      	lsrs	r7, r1
 8019242:	e7da      	b.n	80191fa <rshift+0x4c>
 8019244:	f851 cb04 	ldr.w	ip, [r1], #4
 8019248:	f847 cf04 	str.w	ip, [r7, #4]!
 801924c:	e7c3      	b.n	80191d6 <rshift+0x28>
 801924e:	4623      	mov	r3, r4
 8019250:	e7e1      	b.n	8019216 <rshift+0x68>

08019252 <__hexdig_fun>:
 8019252:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8019256:	2b09      	cmp	r3, #9
 8019258:	d802      	bhi.n	8019260 <__hexdig_fun+0xe>
 801925a:	3820      	subs	r0, #32
 801925c:	b2c0      	uxtb	r0, r0
 801925e:	4770      	bx	lr
 8019260:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8019264:	2b05      	cmp	r3, #5
 8019266:	d801      	bhi.n	801926c <__hexdig_fun+0x1a>
 8019268:	3847      	subs	r0, #71	@ 0x47
 801926a:	e7f7      	b.n	801925c <__hexdig_fun+0xa>
 801926c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8019270:	2b05      	cmp	r3, #5
 8019272:	d801      	bhi.n	8019278 <__hexdig_fun+0x26>
 8019274:	3827      	subs	r0, #39	@ 0x27
 8019276:	e7f1      	b.n	801925c <__hexdig_fun+0xa>
 8019278:	2000      	movs	r0, #0
 801927a:	4770      	bx	lr

0801927c <__gethex>:
 801927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019280:	b085      	sub	sp, #20
 8019282:	468a      	mov	sl, r1
 8019284:	9302      	str	r3, [sp, #8]
 8019286:	680b      	ldr	r3, [r1, #0]
 8019288:	9001      	str	r0, [sp, #4]
 801928a:	4690      	mov	r8, r2
 801928c:	1c9c      	adds	r4, r3, #2
 801928e:	46a1      	mov	r9, r4
 8019290:	f814 0b01 	ldrb.w	r0, [r4], #1
 8019294:	2830      	cmp	r0, #48	@ 0x30
 8019296:	d0fa      	beq.n	801928e <__gethex+0x12>
 8019298:	eba9 0303 	sub.w	r3, r9, r3
 801929c:	f1a3 0b02 	sub.w	fp, r3, #2
 80192a0:	f7ff ffd7 	bl	8019252 <__hexdig_fun>
 80192a4:	4605      	mov	r5, r0
 80192a6:	2800      	cmp	r0, #0
 80192a8:	d168      	bne.n	801937c <__gethex+0x100>
 80192aa:	49a0      	ldr	r1, [pc, #640]	@ (801952c <__gethex+0x2b0>)
 80192ac:	2201      	movs	r2, #1
 80192ae:	4648      	mov	r0, r9
 80192b0:	f7fd f968 	bl	8016584 <strncmp>
 80192b4:	4607      	mov	r7, r0
 80192b6:	2800      	cmp	r0, #0
 80192b8:	d167      	bne.n	801938a <__gethex+0x10e>
 80192ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80192be:	4626      	mov	r6, r4
 80192c0:	f7ff ffc7 	bl	8019252 <__hexdig_fun>
 80192c4:	2800      	cmp	r0, #0
 80192c6:	d062      	beq.n	801938e <__gethex+0x112>
 80192c8:	4623      	mov	r3, r4
 80192ca:	7818      	ldrb	r0, [r3, #0]
 80192cc:	2830      	cmp	r0, #48	@ 0x30
 80192ce:	4699      	mov	r9, r3
 80192d0:	f103 0301 	add.w	r3, r3, #1
 80192d4:	d0f9      	beq.n	80192ca <__gethex+0x4e>
 80192d6:	f7ff ffbc 	bl	8019252 <__hexdig_fun>
 80192da:	fab0 f580 	clz	r5, r0
 80192de:	096d      	lsrs	r5, r5, #5
 80192e0:	f04f 0b01 	mov.w	fp, #1
 80192e4:	464a      	mov	r2, r9
 80192e6:	4616      	mov	r6, r2
 80192e8:	3201      	adds	r2, #1
 80192ea:	7830      	ldrb	r0, [r6, #0]
 80192ec:	f7ff ffb1 	bl	8019252 <__hexdig_fun>
 80192f0:	2800      	cmp	r0, #0
 80192f2:	d1f8      	bne.n	80192e6 <__gethex+0x6a>
 80192f4:	498d      	ldr	r1, [pc, #564]	@ (801952c <__gethex+0x2b0>)
 80192f6:	2201      	movs	r2, #1
 80192f8:	4630      	mov	r0, r6
 80192fa:	f7fd f943 	bl	8016584 <strncmp>
 80192fe:	2800      	cmp	r0, #0
 8019300:	d13f      	bne.n	8019382 <__gethex+0x106>
 8019302:	b944      	cbnz	r4, 8019316 <__gethex+0x9a>
 8019304:	1c74      	adds	r4, r6, #1
 8019306:	4622      	mov	r2, r4
 8019308:	4616      	mov	r6, r2
 801930a:	3201      	adds	r2, #1
 801930c:	7830      	ldrb	r0, [r6, #0]
 801930e:	f7ff ffa0 	bl	8019252 <__hexdig_fun>
 8019312:	2800      	cmp	r0, #0
 8019314:	d1f8      	bne.n	8019308 <__gethex+0x8c>
 8019316:	1ba4      	subs	r4, r4, r6
 8019318:	00a7      	lsls	r7, r4, #2
 801931a:	7833      	ldrb	r3, [r6, #0]
 801931c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8019320:	2b50      	cmp	r3, #80	@ 0x50
 8019322:	d13e      	bne.n	80193a2 <__gethex+0x126>
 8019324:	7873      	ldrb	r3, [r6, #1]
 8019326:	2b2b      	cmp	r3, #43	@ 0x2b
 8019328:	d033      	beq.n	8019392 <__gethex+0x116>
 801932a:	2b2d      	cmp	r3, #45	@ 0x2d
 801932c:	d034      	beq.n	8019398 <__gethex+0x11c>
 801932e:	1c71      	adds	r1, r6, #1
 8019330:	2400      	movs	r4, #0
 8019332:	7808      	ldrb	r0, [r1, #0]
 8019334:	f7ff ff8d 	bl	8019252 <__hexdig_fun>
 8019338:	1e43      	subs	r3, r0, #1
 801933a:	b2db      	uxtb	r3, r3
 801933c:	2b18      	cmp	r3, #24
 801933e:	d830      	bhi.n	80193a2 <__gethex+0x126>
 8019340:	f1a0 0210 	sub.w	r2, r0, #16
 8019344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019348:	f7ff ff83 	bl	8019252 <__hexdig_fun>
 801934c:	f100 3cff 	add.w	ip, r0, #4294967295
 8019350:	fa5f fc8c 	uxtb.w	ip, ip
 8019354:	f1bc 0f18 	cmp.w	ip, #24
 8019358:	f04f 030a 	mov.w	r3, #10
 801935c:	d91e      	bls.n	801939c <__gethex+0x120>
 801935e:	b104      	cbz	r4, 8019362 <__gethex+0xe6>
 8019360:	4252      	negs	r2, r2
 8019362:	4417      	add	r7, r2
 8019364:	f8ca 1000 	str.w	r1, [sl]
 8019368:	b1ed      	cbz	r5, 80193a6 <__gethex+0x12a>
 801936a:	f1bb 0f00 	cmp.w	fp, #0
 801936e:	bf0c      	ite	eq
 8019370:	2506      	moveq	r5, #6
 8019372:	2500      	movne	r5, #0
 8019374:	4628      	mov	r0, r5
 8019376:	b005      	add	sp, #20
 8019378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801937c:	2500      	movs	r5, #0
 801937e:	462c      	mov	r4, r5
 8019380:	e7b0      	b.n	80192e4 <__gethex+0x68>
 8019382:	2c00      	cmp	r4, #0
 8019384:	d1c7      	bne.n	8019316 <__gethex+0x9a>
 8019386:	4627      	mov	r7, r4
 8019388:	e7c7      	b.n	801931a <__gethex+0x9e>
 801938a:	464e      	mov	r6, r9
 801938c:	462f      	mov	r7, r5
 801938e:	2501      	movs	r5, #1
 8019390:	e7c3      	b.n	801931a <__gethex+0x9e>
 8019392:	2400      	movs	r4, #0
 8019394:	1cb1      	adds	r1, r6, #2
 8019396:	e7cc      	b.n	8019332 <__gethex+0xb6>
 8019398:	2401      	movs	r4, #1
 801939a:	e7fb      	b.n	8019394 <__gethex+0x118>
 801939c:	fb03 0002 	mla	r0, r3, r2, r0
 80193a0:	e7ce      	b.n	8019340 <__gethex+0xc4>
 80193a2:	4631      	mov	r1, r6
 80193a4:	e7de      	b.n	8019364 <__gethex+0xe8>
 80193a6:	eba6 0309 	sub.w	r3, r6, r9
 80193aa:	3b01      	subs	r3, #1
 80193ac:	4629      	mov	r1, r5
 80193ae:	2b07      	cmp	r3, #7
 80193b0:	dc0a      	bgt.n	80193c8 <__gethex+0x14c>
 80193b2:	9801      	ldr	r0, [sp, #4]
 80193b4:	f7fe f88a 	bl	80174cc <_Balloc>
 80193b8:	4604      	mov	r4, r0
 80193ba:	b940      	cbnz	r0, 80193ce <__gethex+0x152>
 80193bc:	4b5c      	ldr	r3, [pc, #368]	@ (8019530 <__gethex+0x2b4>)
 80193be:	4602      	mov	r2, r0
 80193c0:	21e4      	movs	r1, #228	@ 0xe4
 80193c2:	485c      	ldr	r0, [pc, #368]	@ (8019534 <__gethex+0x2b8>)
 80193c4:	f7fd f97c 	bl	80166c0 <__assert_func>
 80193c8:	3101      	adds	r1, #1
 80193ca:	105b      	asrs	r3, r3, #1
 80193cc:	e7ef      	b.n	80193ae <__gethex+0x132>
 80193ce:	f100 0a14 	add.w	sl, r0, #20
 80193d2:	2300      	movs	r3, #0
 80193d4:	4655      	mov	r5, sl
 80193d6:	469b      	mov	fp, r3
 80193d8:	45b1      	cmp	r9, r6
 80193da:	d337      	bcc.n	801944c <__gethex+0x1d0>
 80193dc:	f845 bb04 	str.w	fp, [r5], #4
 80193e0:	eba5 050a 	sub.w	r5, r5, sl
 80193e4:	10ad      	asrs	r5, r5, #2
 80193e6:	6125      	str	r5, [r4, #16]
 80193e8:	4658      	mov	r0, fp
 80193ea:	f7fe f961 	bl	80176b0 <__hi0bits>
 80193ee:	016d      	lsls	r5, r5, #5
 80193f0:	f8d8 6000 	ldr.w	r6, [r8]
 80193f4:	1a2d      	subs	r5, r5, r0
 80193f6:	42b5      	cmp	r5, r6
 80193f8:	dd54      	ble.n	80194a4 <__gethex+0x228>
 80193fa:	1bad      	subs	r5, r5, r6
 80193fc:	4629      	mov	r1, r5
 80193fe:	4620      	mov	r0, r4
 8019400:	f7fe fcea 	bl	8017dd8 <__any_on>
 8019404:	4681      	mov	r9, r0
 8019406:	b178      	cbz	r0, 8019428 <__gethex+0x1ac>
 8019408:	1e6b      	subs	r3, r5, #1
 801940a:	1159      	asrs	r1, r3, #5
 801940c:	f003 021f 	and.w	r2, r3, #31
 8019410:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019414:	f04f 0901 	mov.w	r9, #1
 8019418:	fa09 f202 	lsl.w	r2, r9, r2
 801941c:	420a      	tst	r2, r1
 801941e:	d003      	beq.n	8019428 <__gethex+0x1ac>
 8019420:	454b      	cmp	r3, r9
 8019422:	dc36      	bgt.n	8019492 <__gethex+0x216>
 8019424:	f04f 0902 	mov.w	r9, #2
 8019428:	4629      	mov	r1, r5
 801942a:	4620      	mov	r0, r4
 801942c:	f7ff febf 	bl	80191ae <rshift>
 8019430:	442f      	add	r7, r5
 8019432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019436:	42bb      	cmp	r3, r7
 8019438:	da42      	bge.n	80194c0 <__gethex+0x244>
 801943a:	9801      	ldr	r0, [sp, #4]
 801943c:	4621      	mov	r1, r4
 801943e:	f7fe f885 	bl	801754c <_Bfree>
 8019442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019444:	2300      	movs	r3, #0
 8019446:	6013      	str	r3, [r2, #0]
 8019448:	25a3      	movs	r5, #163	@ 0xa3
 801944a:	e793      	b.n	8019374 <__gethex+0xf8>
 801944c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8019450:	2a2e      	cmp	r2, #46	@ 0x2e
 8019452:	d012      	beq.n	801947a <__gethex+0x1fe>
 8019454:	2b20      	cmp	r3, #32
 8019456:	d104      	bne.n	8019462 <__gethex+0x1e6>
 8019458:	f845 bb04 	str.w	fp, [r5], #4
 801945c:	f04f 0b00 	mov.w	fp, #0
 8019460:	465b      	mov	r3, fp
 8019462:	7830      	ldrb	r0, [r6, #0]
 8019464:	9303      	str	r3, [sp, #12]
 8019466:	f7ff fef4 	bl	8019252 <__hexdig_fun>
 801946a:	9b03      	ldr	r3, [sp, #12]
 801946c:	f000 000f 	and.w	r0, r0, #15
 8019470:	4098      	lsls	r0, r3
 8019472:	ea4b 0b00 	orr.w	fp, fp, r0
 8019476:	3304      	adds	r3, #4
 8019478:	e7ae      	b.n	80193d8 <__gethex+0x15c>
 801947a:	45b1      	cmp	r9, r6
 801947c:	d8ea      	bhi.n	8019454 <__gethex+0x1d8>
 801947e:	492b      	ldr	r1, [pc, #172]	@ (801952c <__gethex+0x2b0>)
 8019480:	9303      	str	r3, [sp, #12]
 8019482:	2201      	movs	r2, #1
 8019484:	4630      	mov	r0, r6
 8019486:	f7fd f87d 	bl	8016584 <strncmp>
 801948a:	9b03      	ldr	r3, [sp, #12]
 801948c:	2800      	cmp	r0, #0
 801948e:	d1e1      	bne.n	8019454 <__gethex+0x1d8>
 8019490:	e7a2      	b.n	80193d8 <__gethex+0x15c>
 8019492:	1ea9      	subs	r1, r5, #2
 8019494:	4620      	mov	r0, r4
 8019496:	f7fe fc9f 	bl	8017dd8 <__any_on>
 801949a:	2800      	cmp	r0, #0
 801949c:	d0c2      	beq.n	8019424 <__gethex+0x1a8>
 801949e:	f04f 0903 	mov.w	r9, #3
 80194a2:	e7c1      	b.n	8019428 <__gethex+0x1ac>
 80194a4:	da09      	bge.n	80194ba <__gethex+0x23e>
 80194a6:	1b75      	subs	r5, r6, r5
 80194a8:	4621      	mov	r1, r4
 80194aa:	9801      	ldr	r0, [sp, #4]
 80194ac:	462a      	mov	r2, r5
 80194ae:	f7fe fa5d 	bl	801796c <__lshift>
 80194b2:	1b7f      	subs	r7, r7, r5
 80194b4:	4604      	mov	r4, r0
 80194b6:	f100 0a14 	add.w	sl, r0, #20
 80194ba:	f04f 0900 	mov.w	r9, #0
 80194be:	e7b8      	b.n	8019432 <__gethex+0x1b6>
 80194c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80194c4:	42bd      	cmp	r5, r7
 80194c6:	dd6f      	ble.n	80195a8 <__gethex+0x32c>
 80194c8:	1bed      	subs	r5, r5, r7
 80194ca:	42ae      	cmp	r6, r5
 80194cc:	dc34      	bgt.n	8019538 <__gethex+0x2bc>
 80194ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80194d2:	2b02      	cmp	r3, #2
 80194d4:	d022      	beq.n	801951c <__gethex+0x2a0>
 80194d6:	2b03      	cmp	r3, #3
 80194d8:	d024      	beq.n	8019524 <__gethex+0x2a8>
 80194da:	2b01      	cmp	r3, #1
 80194dc:	d115      	bne.n	801950a <__gethex+0x28e>
 80194de:	42ae      	cmp	r6, r5
 80194e0:	d113      	bne.n	801950a <__gethex+0x28e>
 80194e2:	2e01      	cmp	r6, #1
 80194e4:	d10b      	bne.n	80194fe <__gethex+0x282>
 80194e6:	9a02      	ldr	r2, [sp, #8]
 80194e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80194ec:	6013      	str	r3, [r2, #0]
 80194ee:	2301      	movs	r3, #1
 80194f0:	6123      	str	r3, [r4, #16]
 80194f2:	f8ca 3000 	str.w	r3, [sl]
 80194f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80194f8:	2562      	movs	r5, #98	@ 0x62
 80194fa:	601c      	str	r4, [r3, #0]
 80194fc:	e73a      	b.n	8019374 <__gethex+0xf8>
 80194fe:	1e71      	subs	r1, r6, #1
 8019500:	4620      	mov	r0, r4
 8019502:	f7fe fc69 	bl	8017dd8 <__any_on>
 8019506:	2800      	cmp	r0, #0
 8019508:	d1ed      	bne.n	80194e6 <__gethex+0x26a>
 801950a:	9801      	ldr	r0, [sp, #4]
 801950c:	4621      	mov	r1, r4
 801950e:	f7fe f81d 	bl	801754c <_Bfree>
 8019512:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019514:	2300      	movs	r3, #0
 8019516:	6013      	str	r3, [r2, #0]
 8019518:	2550      	movs	r5, #80	@ 0x50
 801951a:	e72b      	b.n	8019374 <__gethex+0xf8>
 801951c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801951e:	2b00      	cmp	r3, #0
 8019520:	d1f3      	bne.n	801950a <__gethex+0x28e>
 8019522:	e7e0      	b.n	80194e6 <__gethex+0x26a>
 8019524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019526:	2b00      	cmp	r3, #0
 8019528:	d1dd      	bne.n	80194e6 <__gethex+0x26a>
 801952a:	e7ee      	b.n	801950a <__gethex+0x28e>
 801952c:	0801c751 	.word	0x0801c751
 8019530:	0801c6e7 	.word	0x0801c6e7
 8019534:	0801c76c 	.word	0x0801c76c
 8019538:	1e6f      	subs	r7, r5, #1
 801953a:	f1b9 0f00 	cmp.w	r9, #0
 801953e:	d130      	bne.n	80195a2 <__gethex+0x326>
 8019540:	b127      	cbz	r7, 801954c <__gethex+0x2d0>
 8019542:	4639      	mov	r1, r7
 8019544:	4620      	mov	r0, r4
 8019546:	f7fe fc47 	bl	8017dd8 <__any_on>
 801954a:	4681      	mov	r9, r0
 801954c:	117a      	asrs	r2, r7, #5
 801954e:	2301      	movs	r3, #1
 8019550:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019554:	f007 071f 	and.w	r7, r7, #31
 8019558:	40bb      	lsls	r3, r7
 801955a:	4213      	tst	r3, r2
 801955c:	4629      	mov	r1, r5
 801955e:	4620      	mov	r0, r4
 8019560:	bf18      	it	ne
 8019562:	f049 0902 	orrne.w	r9, r9, #2
 8019566:	f7ff fe22 	bl	80191ae <rshift>
 801956a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801956e:	1b76      	subs	r6, r6, r5
 8019570:	2502      	movs	r5, #2
 8019572:	f1b9 0f00 	cmp.w	r9, #0
 8019576:	d047      	beq.n	8019608 <__gethex+0x38c>
 8019578:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801957c:	2b02      	cmp	r3, #2
 801957e:	d015      	beq.n	80195ac <__gethex+0x330>
 8019580:	2b03      	cmp	r3, #3
 8019582:	d017      	beq.n	80195b4 <__gethex+0x338>
 8019584:	2b01      	cmp	r3, #1
 8019586:	d109      	bne.n	801959c <__gethex+0x320>
 8019588:	f019 0f02 	tst.w	r9, #2
 801958c:	d006      	beq.n	801959c <__gethex+0x320>
 801958e:	f8da 3000 	ldr.w	r3, [sl]
 8019592:	ea49 0903 	orr.w	r9, r9, r3
 8019596:	f019 0f01 	tst.w	r9, #1
 801959a:	d10e      	bne.n	80195ba <__gethex+0x33e>
 801959c:	f045 0510 	orr.w	r5, r5, #16
 80195a0:	e032      	b.n	8019608 <__gethex+0x38c>
 80195a2:	f04f 0901 	mov.w	r9, #1
 80195a6:	e7d1      	b.n	801954c <__gethex+0x2d0>
 80195a8:	2501      	movs	r5, #1
 80195aa:	e7e2      	b.n	8019572 <__gethex+0x2f6>
 80195ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80195ae:	f1c3 0301 	rsb	r3, r3, #1
 80195b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80195b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d0f0      	beq.n	801959c <__gethex+0x320>
 80195ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80195be:	f104 0314 	add.w	r3, r4, #20
 80195c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80195c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80195ca:	f04f 0c00 	mov.w	ip, #0
 80195ce:	4618      	mov	r0, r3
 80195d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80195d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80195d8:	d01b      	beq.n	8019612 <__gethex+0x396>
 80195da:	3201      	adds	r2, #1
 80195dc:	6002      	str	r2, [r0, #0]
 80195de:	2d02      	cmp	r5, #2
 80195e0:	f104 0314 	add.w	r3, r4, #20
 80195e4:	d13c      	bne.n	8019660 <__gethex+0x3e4>
 80195e6:	f8d8 2000 	ldr.w	r2, [r8]
 80195ea:	3a01      	subs	r2, #1
 80195ec:	42b2      	cmp	r2, r6
 80195ee:	d109      	bne.n	8019604 <__gethex+0x388>
 80195f0:	1171      	asrs	r1, r6, #5
 80195f2:	2201      	movs	r2, #1
 80195f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80195f8:	f006 061f 	and.w	r6, r6, #31
 80195fc:	fa02 f606 	lsl.w	r6, r2, r6
 8019600:	421e      	tst	r6, r3
 8019602:	d13a      	bne.n	801967a <__gethex+0x3fe>
 8019604:	f045 0520 	orr.w	r5, r5, #32
 8019608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801960a:	601c      	str	r4, [r3, #0]
 801960c:	9b02      	ldr	r3, [sp, #8]
 801960e:	601f      	str	r7, [r3, #0]
 8019610:	e6b0      	b.n	8019374 <__gethex+0xf8>
 8019612:	4299      	cmp	r1, r3
 8019614:	f843 cc04 	str.w	ip, [r3, #-4]
 8019618:	d8d9      	bhi.n	80195ce <__gethex+0x352>
 801961a:	68a3      	ldr	r3, [r4, #8]
 801961c:	459b      	cmp	fp, r3
 801961e:	db17      	blt.n	8019650 <__gethex+0x3d4>
 8019620:	6861      	ldr	r1, [r4, #4]
 8019622:	9801      	ldr	r0, [sp, #4]
 8019624:	3101      	adds	r1, #1
 8019626:	f7fd ff51 	bl	80174cc <_Balloc>
 801962a:	4681      	mov	r9, r0
 801962c:	b918      	cbnz	r0, 8019636 <__gethex+0x3ba>
 801962e:	4b1a      	ldr	r3, [pc, #104]	@ (8019698 <__gethex+0x41c>)
 8019630:	4602      	mov	r2, r0
 8019632:	2184      	movs	r1, #132	@ 0x84
 8019634:	e6c5      	b.n	80193c2 <__gethex+0x146>
 8019636:	6922      	ldr	r2, [r4, #16]
 8019638:	3202      	adds	r2, #2
 801963a:	f104 010c 	add.w	r1, r4, #12
 801963e:	0092      	lsls	r2, r2, #2
 8019640:	300c      	adds	r0, #12
 8019642:	f7fd f828 	bl	8016696 <memcpy>
 8019646:	4621      	mov	r1, r4
 8019648:	9801      	ldr	r0, [sp, #4]
 801964a:	f7fd ff7f 	bl	801754c <_Bfree>
 801964e:	464c      	mov	r4, r9
 8019650:	6923      	ldr	r3, [r4, #16]
 8019652:	1c5a      	adds	r2, r3, #1
 8019654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019658:	6122      	str	r2, [r4, #16]
 801965a:	2201      	movs	r2, #1
 801965c:	615a      	str	r2, [r3, #20]
 801965e:	e7be      	b.n	80195de <__gethex+0x362>
 8019660:	6922      	ldr	r2, [r4, #16]
 8019662:	455a      	cmp	r2, fp
 8019664:	dd0b      	ble.n	801967e <__gethex+0x402>
 8019666:	2101      	movs	r1, #1
 8019668:	4620      	mov	r0, r4
 801966a:	f7ff fda0 	bl	80191ae <rshift>
 801966e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019672:	3701      	adds	r7, #1
 8019674:	42bb      	cmp	r3, r7
 8019676:	f6ff aee0 	blt.w	801943a <__gethex+0x1be>
 801967a:	2501      	movs	r5, #1
 801967c:	e7c2      	b.n	8019604 <__gethex+0x388>
 801967e:	f016 061f 	ands.w	r6, r6, #31
 8019682:	d0fa      	beq.n	801967a <__gethex+0x3fe>
 8019684:	4453      	add	r3, sl
 8019686:	f1c6 0620 	rsb	r6, r6, #32
 801968a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801968e:	f7fe f80f 	bl	80176b0 <__hi0bits>
 8019692:	42b0      	cmp	r0, r6
 8019694:	dbe7      	blt.n	8019666 <__gethex+0x3ea>
 8019696:	e7f0      	b.n	801967a <__gethex+0x3fe>
 8019698:	0801c6e7 	.word	0x0801c6e7

0801969c <L_shift>:
 801969c:	f1c2 0208 	rsb	r2, r2, #8
 80196a0:	0092      	lsls	r2, r2, #2
 80196a2:	b570      	push	{r4, r5, r6, lr}
 80196a4:	f1c2 0620 	rsb	r6, r2, #32
 80196a8:	6843      	ldr	r3, [r0, #4]
 80196aa:	6804      	ldr	r4, [r0, #0]
 80196ac:	fa03 f506 	lsl.w	r5, r3, r6
 80196b0:	432c      	orrs	r4, r5
 80196b2:	40d3      	lsrs	r3, r2
 80196b4:	6004      	str	r4, [r0, #0]
 80196b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80196ba:	4288      	cmp	r0, r1
 80196bc:	d3f4      	bcc.n	80196a8 <L_shift+0xc>
 80196be:	bd70      	pop	{r4, r5, r6, pc}

080196c0 <__match>:
 80196c0:	b530      	push	{r4, r5, lr}
 80196c2:	6803      	ldr	r3, [r0, #0]
 80196c4:	3301      	adds	r3, #1
 80196c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80196ca:	b914      	cbnz	r4, 80196d2 <__match+0x12>
 80196cc:	6003      	str	r3, [r0, #0]
 80196ce:	2001      	movs	r0, #1
 80196d0:	bd30      	pop	{r4, r5, pc}
 80196d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80196da:	2d19      	cmp	r5, #25
 80196dc:	bf98      	it	ls
 80196de:	3220      	addls	r2, #32
 80196e0:	42a2      	cmp	r2, r4
 80196e2:	d0f0      	beq.n	80196c6 <__match+0x6>
 80196e4:	2000      	movs	r0, #0
 80196e6:	e7f3      	b.n	80196d0 <__match+0x10>

080196e8 <__hexnan>:
 80196e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196ec:	680b      	ldr	r3, [r1, #0]
 80196ee:	6801      	ldr	r1, [r0, #0]
 80196f0:	115e      	asrs	r6, r3, #5
 80196f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80196f6:	f013 031f 	ands.w	r3, r3, #31
 80196fa:	b087      	sub	sp, #28
 80196fc:	bf18      	it	ne
 80196fe:	3604      	addne	r6, #4
 8019700:	2500      	movs	r5, #0
 8019702:	1f37      	subs	r7, r6, #4
 8019704:	4682      	mov	sl, r0
 8019706:	4690      	mov	r8, r2
 8019708:	9301      	str	r3, [sp, #4]
 801970a:	f846 5c04 	str.w	r5, [r6, #-4]
 801970e:	46b9      	mov	r9, r7
 8019710:	463c      	mov	r4, r7
 8019712:	9502      	str	r5, [sp, #8]
 8019714:	46ab      	mov	fp, r5
 8019716:	784a      	ldrb	r2, [r1, #1]
 8019718:	1c4b      	adds	r3, r1, #1
 801971a:	9303      	str	r3, [sp, #12]
 801971c:	b342      	cbz	r2, 8019770 <__hexnan+0x88>
 801971e:	4610      	mov	r0, r2
 8019720:	9105      	str	r1, [sp, #20]
 8019722:	9204      	str	r2, [sp, #16]
 8019724:	f7ff fd95 	bl	8019252 <__hexdig_fun>
 8019728:	2800      	cmp	r0, #0
 801972a:	d151      	bne.n	80197d0 <__hexnan+0xe8>
 801972c:	9a04      	ldr	r2, [sp, #16]
 801972e:	9905      	ldr	r1, [sp, #20]
 8019730:	2a20      	cmp	r2, #32
 8019732:	d818      	bhi.n	8019766 <__hexnan+0x7e>
 8019734:	9b02      	ldr	r3, [sp, #8]
 8019736:	459b      	cmp	fp, r3
 8019738:	dd13      	ble.n	8019762 <__hexnan+0x7a>
 801973a:	454c      	cmp	r4, r9
 801973c:	d206      	bcs.n	801974c <__hexnan+0x64>
 801973e:	2d07      	cmp	r5, #7
 8019740:	dc04      	bgt.n	801974c <__hexnan+0x64>
 8019742:	462a      	mov	r2, r5
 8019744:	4649      	mov	r1, r9
 8019746:	4620      	mov	r0, r4
 8019748:	f7ff ffa8 	bl	801969c <L_shift>
 801974c:	4544      	cmp	r4, r8
 801974e:	d952      	bls.n	80197f6 <__hexnan+0x10e>
 8019750:	2300      	movs	r3, #0
 8019752:	f1a4 0904 	sub.w	r9, r4, #4
 8019756:	f844 3c04 	str.w	r3, [r4, #-4]
 801975a:	f8cd b008 	str.w	fp, [sp, #8]
 801975e:	464c      	mov	r4, r9
 8019760:	461d      	mov	r5, r3
 8019762:	9903      	ldr	r1, [sp, #12]
 8019764:	e7d7      	b.n	8019716 <__hexnan+0x2e>
 8019766:	2a29      	cmp	r2, #41	@ 0x29
 8019768:	d157      	bne.n	801981a <__hexnan+0x132>
 801976a:	3102      	adds	r1, #2
 801976c:	f8ca 1000 	str.w	r1, [sl]
 8019770:	f1bb 0f00 	cmp.w	fp, #0
 8019774:	d051      	beq.n	801981a <__hexnan+0x132>
 8019776:	454c      	cmp	r4, r9
 8019778:	d206      	bcs.n	8019788 <__hexnan+0xa0>
 801977a:	2d07      	cmp	r5, #7
 801977c:	dc04      	bgt.n	8019788 <__hexnan+0xa0>
 801977e:	462a      	mov	r2, r5
 8019780:	4649      	mov	r1, r9
 8019782:	4620      	mov	r0, r4
 8019784:	f7ff ff8a 	bl	801969c <L_shift>
 8019788:	4544      	cmp	r4, r8
 801978a:	d936      	bls.n	80197fa <__hexnan+0x112>
 801978c:	f1a8 0204 	sub.w	r2, r8, #4
 8019790:	4623      	mov	r3, r4
 8019792:	f853 1b04 	ldr.w	r1, [r3], #4
 8019796:	f842 1f04 	str.w	r1, [r2, #4]!
 801979a:	429f      	cmp	r7, r3
 801979c:	d2f9      	bcs.n	8019792 <__hexnan+0xaa>
 801979e:	1b3b      	subs	r3, r7, r4
 80197a0:	f023 0303 	bic.w	r3, r3, #3
 80197a4:	3304      	adds	r3, #4
 80197a6:	3401      	adds	r4, #1
 80197a8:	3e03      	subs	r6, #3
 80197aa:	42b4      	cmp	r4, r6
 80197ac:	bf88      	it	hi
 80197ae:	2304      	movhi	r3, #4
 80197b0:	4443      	add	r3, r8
 80197b2:	2200      	movs	r2, #0
 80197b4:	f843 2b04 	str.w	r2, [r3], #4
 80197b8:	429f      	cmp	r7, r3
 80197ba:	d2fb      	bcs.n	80197b4 <__hexnan+0xcc>
 80197bc:	683b      	ldr	r3, [r7, #0]
 80197be:	b91b      	cbnz	r3, 80197c8 <__hexnan+0xe0>
 80197c0:	4547      	cmp	r7, r8
 80197c2:	d128      	bne.n	8019816 <__hexnan+0x12e>
 80197c4:	2301      	movs	r3, #1
 80197c6:	603b      	str	r3, [r7, #0]
 80197c8:	2005      	movs	r0, #5
 80197ca:	b007      	add	sp, #28
 80197cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197d0:	3501      	adds	r5, #1
 80197d2:	2d08      	cmp	r5, #8
 80197d4:	f10b 0b01 	add.w	fp, fp, #1
 80197d8:	dd06      	ble.n	80197e8 <__hexnan+0x100>
 80197da:	4544      	cmp	r4, r8
 80197dc:	d9c1      	bls.n	8019762 <__hexnan+0x7a>
 80197de:	2300      	movs	r3, #0
 80197e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80197e4:	2501      	movs	r5, #1
 80197e6:	3c04      	subs	r4, #4
 80197e8:	6822      	ldr	r2, [r4, #0]
 80197ea:	f000 000f 	and.w	r0, r0, #15
 80197ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80197f2:	6020      	str	r0, [r4, #0]
 80197f4:	e7b5      	b.n	8019762 <__hexnan+0x7a>
 80197f6:	2508      	movs	r5, #8
 80197f8:	e7b3      	b.n	8019762 <__hexnan+0x7a>
 80197fa:	9b01      	ldr	r3, [sp, #4]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d0dd      	beq.n	80197bc <__hexnan+0xd4>
 8019800:	f1c3 0320 	rsb	r3, r3, #32
 8019804:	f04f 32ff 	mov.w	r2, #4294967295
 8019808:	40da      	lsrs	r2, r3
 801980a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801980e:	4013      	ands	r3, r2
 8019810:	f846 3c04 	str.w	r3, [r6, #-4]
 8019814:	e7d2      	b.n	80197bc <__hexnan+0xd4>
 8019816:	3f04      	subs	r7, #4
 8019818:	e7d0      	b.n	80197bc <__hexnan+0xd4>
 801981a:	2004      	movs	r0, #4
 801981c:	e7d5      	b.n	80197ca <__hexnan+0xe2>

0801981e <__ascii_mbtowc>:
 801981e:	b082      	sub	sp, #8
 8019820:	b901      	cbnz	r1, 8019824 <__ascii_mbtowc+0x6>
 8019822:	a901      	add	r1, sp, #4
 8019824:	b142      	cbz	r2, 8019838 <__ascii_mbtowc+0x1a>
 8019826:	b14b      	cbz	r3, 801983c <__ascii_mbtowc+0x1e>
 8019828:	7813      	ldrb	r3, [r2, #0]
 801982a:	600b      	str	r3, [r1, #0]
 801982c:	7812      	ldrb	r2, [r2, #0]
 801982e:	1e10      	subs	r0, r2, #0
 8019830:	bf18      	it	ne
 8019832:	2001      	movne	r0, #1
 8019834:	b002      	add	sp, #8
 8019836:	4770      	bx	lr
 8019838:	4610      	mov	r0, r2
 801983a:	e7fb      	b.n	8019834 <__ascii_mbtowc+0x16>
 801983c:	f06f 0001 	mvn.w	r0, #1
 8019840:	e7f8      	b.n	8019834 <__ascii_mbtowc+0x16>

08019842 <_realloc_r>:
 8019842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019846:	4607      	mov	r7, r0
 8019848:	4614      	mov	r4, r2
 801984a:	460d      	mov	r5, r1
 801984c:	b921      	cbnz	r1, 8019858 <_realloc_r+0x16>
 801984e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019852:	4611      	mov	r1, r2
 8019854:	f7fd bdae 	b.w	80173b4 <_malloc_r>
 8019858:	b92a      	cbnz	r2, 8019866 <_realloc_r+0x24>
 801985a:	f7fd fd37 	bl	80172cc <_free_r>
 801985e:	4625      	mov	r5, r4
 8019860:	4628      	mov	r0, r5
 8019862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019866:	f000 f86b 	bl	8019940 <_malloc_usable_size_r>
 801986a:	4284      	cmp	r4, r0
 801986c:	4606      	mov	r6, r0
 801986e:	d802      	bhi.n	8019876 <_realloc_r+0x34>
 8019870:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019874:	d8f4      	bhi.n	8019860 <_realloc_r+0x1e>
 8019876:	4621      	mov	r1, r4
 8019878:	4638      	mov	r0, r7
 801987a:	f7fd fd9b 	bl	80173b4 <_malloc_r>
 801987e:	4680      	mov	r8, r0
 8019880:	b908      	cbnz	r0, 8019886 <_realloc_r+0x44>
 8019882:	4645      	mov	r5, r8
 8019884:	e7ec      	b.n	8019860 <_realloc_r+0x1e>
 8019886:	42b4      	cmp	r4, r6
 8019888:	4622      	mov	r2, r4
 801988a:	4629      	mov	r1, r5
 801988c:	bf28      	it	cs
 801988e:	4632      	movcs	r2, r6
 8019890:	f7fc ff01 	bl	8016696 <memcpy>
 8019894:	4629      	mov	r1, r5
 8019896:	4638      	mov	r0, r7
 8019898:	f7fd fd18 	bl	80172cc <_free_r>
 801989c:	e7f1      	b.n	8019882 <_realloc_r+0x40>

0801989e <__ascii_wctomb>:
 801989e:	4603      	mov	r3, r0
 80198a0:	4608      	mov	r0, r1
 80198a2:	b141      	cbz	r1, 80198b6 <__ascii_wctomb+0x18>
 80198a4:	2aff      	cmp	r2, #255	@ 0xff
 80198a6:	d904      	bls.n	80198b2 <__ascii_wctomb+0x14>
 80198a8:	228a      	movs	r2, #138	@ 0x8a
 80198aa:	601a      	str	r2, [r3, #0]
 80198ac:	f04f 30ff 	mov.w	r0, #4294967295
 80198b0:	4770      	bx	lr
 80198b2:	700a      	strb	r2, [r1, #0]
 80198b4:	2001      	movs	r0, #1
 80198b6:	4770      	bx	lr

080198b8 <_raise_r>:
 80198b8:	291f      	cmp	r1, #31
 80198ba:	b538      	push	{r3, r4, r5, lr}
 80198bc:	4605      	mov	r5, r0
 80198be:	460c      	mov	r4, r1
 80198c0:	d904      	bls.n	80198cc <_raise_r+0x14>
 80198c2:	2316      	movs	r3, #22
 80198c4:	6003      	str	r3, [r0, #0]
 80198c6:	f04f 30ff 	mov.w	r0, #4294967295
 80198ca:	bd38      	pop	{r3, r4, r5, pc}
 80198cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80198ce:	b112      	cbz	r2, 80198d6 <_raise_r+0x1e>
 80198d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80198d4:	b94b      	cbnz	r3, 80198ea <_raise_r+0x32>
 80198d6:	4628      	mov	r0, r5
 80198d8:	f000 f830 	bl	801993c <_getpid_r>
 80198dc:	4622      	mov	r2, r4
 80198de:	4601      	mov	r1, r0
 80198e0:	4628      	mov	r0, r5
 80198e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80198e6:	f000 b817 	b.w	8019918 <_kill_r>
 80198ea:	2b01      	cmp	r3, #1
 80198ec:	d00a      	beq.n	8019904 <_raise_r+0x4c>
 80198ee:	1c59      	adds	r1, r3, #1
 80198f0:	d103      	bne.n	80198fa <_raise_r+0x42>
 80198f2:	2316      	movs	r3, #22
 80198f4:	6003      	str	r3, [r0, #0]
 80198f6:	2001      	movs	r0, #1
 80198f8:	e7e7      	b.n	80198ca <_raise_r+0x12>
 80198fa:	2100      	movs	r1, #0
 80198fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019900:	4620      	mov	r0, r4
 8019902:	4798      	blx	r3
 8019904:	2000      	movs	r0, #0
 8019906:	e7e0      	b.n	80198ca <_raise_r+0x12>

08019908 <raise>:
 8019908:	4b02      	ldr	r3, [pc, #8]	@ (8019914 <raise+0xc>)
 801990a:	4601      	mov	r1, r0
 801990c:	6818      	ldr	r0, [r3, #0]
 801990e:	f7ff bfd3 	b.w	80198b8 <_raise_r>
 8019912:	bf00      	nop
 8019914:	2400003c 	.word	0x2400003c

08019918 <_kill_r>:
 8019918:	b538      	push	{r3, r4, r5, lr}
 801991a:	4d07      	ldr	r5, [pc, #28]	@ (8019938 <_kill_r+0x20>)
 801991c:	2300      	movs	r3, #0
 801991e:	4604      	mov	r4, r0
 8019920:	4608      	mov	r0, r1
 8019922:	4611      	mov	r1, r2
 8019924:	602b      	str	r3, [r5, #0]
 8019926:	f7e8 fa39 	bl	8001d9c <_kill>
 801992a:	1c43      	adds	r3, r0, #1
 801992c:	d102      	bne.n	8019934 <_kill_r+0x1c>
 801992e:	682b      	ldr	r3, [r5, #0]
 8019930:	b103      	cbz	r3, 8019934 <_kill_r+0x1c>
 8019932:	6023      	str	r3, [r4, #0]
 8019934:	bd38      	pop	{r3, r4, r5, pc}
 8019936:	bf00      	nop
 8019938:	2400851c 	.word	0x2400851c

0801993c <_getpid_r>:
 801993c:	f7e8 ba26 	b.w	8001d8c <_getpid>

08019940 <_malloc_usable_size_r>:
 8019940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019944:	1f18      	subs	r0, r3, #4
 8019946:	2b00      	cmp	r3, #0
 8019948:	bfbc      	itt	lt
 801994a:	580b      	ldrlt	r3, [r1, r0]
 801994c:	18c0      	addlt	r0, r0, r3
 801994e:	4770      	bx	lr

08019950 <_init>:
 8019950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019952:	bf00      	nop
 8019954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019956:	bc08      	pop	{r3}
 8019958:	469e      	mov	lr, r3
 801995a:	4770      	bx	lr

0801995c <_fini>:
 801995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801995e:	bf00      	nop
 8019960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019962:	bc08      	pop	{r3}
 8019964:	469e      	mov	lr, r3
 8019966:	4770      	bx	lr
