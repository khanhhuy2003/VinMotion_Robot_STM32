
CANMOTOR3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000193a0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003148  08019670  08019670  0001a670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c7b8  0801c7b8  0001d7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c7c0  0801c7c0  0001d7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801c7c4  0801c7c4  0001d7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000218  24000000  0801c7c8  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  24000218  0801c9e0  0001e218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003a98  24004b9c  08021363  00022b9c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  24008634  08021363  00023634  2**0
                  ALLOC
 10 .lwip_sec     00000400  30000000  30000000  00023000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00022b9b  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036f1f  00000000  00000000  00022bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007574  00000000  00000000  00059ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025a0  00000000  00000000  00061060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001df1  00000000  00000000  00063600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043d2b  00000000  00000000  000653f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003cafb  00000000  00000000  000a911c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00172602  00000000  00000000  000e5c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00258219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b144  00000000  00000000  0025825c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  002633a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004b9c 	.word	0x24004b9c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019658 	.word	0x08019658

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004ba0 	.word	0x24004ba0
 800030c:	08019658 	.word	0x08019658

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9c0 	b.w	8000ad0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	468e      	mov	lr, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	4688      	mov	r8, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4617      	mov	r7, r2
 80007ec:	d962      	bls.n	80008b4 <__udivmoddi4+0xdc>
 80007ee:	fab2 f682 	clz	r6, r2
 80007f2:	b14e      	cbz	r6, 8000808 <__udivmoddi4+0x30>
 80007f4:	f1c6 0320 	rsb	r3, r6, #32
 80007f8:	fa01 f806 	lsl.w	r8, r1, r6
 80007fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000800:	40b7      	lsls	r7, r6
 8000802:	ea43 0808 	orr.w	r8, r3, r8
 8000806:	40b4      	lsls	r4, r6
 8000808:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800080c:	fa1f fc87 	uxth.w	ip, r7
 8000810:	fbb8 f1fe 	udiv	r1, r8, lr
 8000814:	0c23      	lsrs	r3, r4, #16
 8000816:	fb0e 8811 	mls	r8, lr, r1, r8
 800081a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800081e:	fb01 f20c 	mul.w	r2, r1, ip
 8000822:	429a      	cmp	r2, r3
 8000824:	d909      	bls.n	800083a <__udivmoddi4+0x62>
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	f101 30ff 	add.w	r0, r1, #4294967295
 800082c:	f080 80ea 	bcs.w	8000a04 <__udivmoddi4+0x22c>
 8000830:	429a      	cmp	r2, r3
 8000832:	f240 80e7 	bls.w	8000a04 <__udivmoddi4+0x22c>
 8000836:	3902      	subs	r1, #2
 8000838:	443b      	add	r3, r7
 800083a:	1a9a      	subs	r2, r3, r2
 800083c:	b2a3      	uxth	r3, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800084a:	fb00 fc0c 	mul.w	ip, r0, ip
 800084e:	459c      	cmp	ip, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x8e>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f100 32ff 	add.w	r2, r0, #4294967295
 8000858:	f080 80d6 	bcs.w	8000a08 <__udivmoddi4+0x230>
 800085c:	459c      	cmp	ip, r3
 800085e:	f240 80d3 	bls.w	8000a08 <__udivmoddi4+0x230>
 8000862:	443b      	add	r3, r7
 8000864:	3802      	subs	r0, #2
 8000866:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086a:	eba3 030c 	sub.w	r3, r3, ip
 800086e:	2100      	movs	r1, #0
 8000870:	b11d      	cbz	r5, 800087a <__udivmoddi4+0xa2>
 8000872:	40f3      	lsrs	r3, r6
 8000874:	2200      	movs	r2, #0
 8000876:	e9c5 3200 	strd	r3, r2, [r5]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d905      	bls.n	800088e <__udivmoddi4+0xb6>
 8000882:	b10d      	cbz	r5, 8000888 <__udivmoddi4+0xb0>
 8000884:	e9c5 0100 	strd	r0, r1, [r5]
 8000888:	2100      	movs	r1, #0
 800088a:	4608      	mov	r0, r1
 800088c:	e7f5      	b.n	800087a <__udivmoddi4+0xa2>
 800088e:	fab3 f183 	clz	r1, r3
 8000892:	2900      	cmp	r1, #0
 8000894:	d146      	bne.n	8000924 <__udivmoddi4+0x14c>
 8000896:	4573      	cmp	r3, lr
 8000898:	d302      	bcc.n	80008a0 <__udivmoddi4+0xc8>
 800089a:	4282      	cmp	r2, r0
 800089c:	f200 8105 	bhi.w	8000aaa <__udivmoddi4+0x2d2>
 80008a0:	1a84      	subs	r4, r0, r2
 80008a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008a6:	2001      	movs	r0, #1
 80008a8:	4690      	mov	r8, r2
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d0e5      	beq.n	800087a <__udivmoddi4+0xa2>
 80008ae:	e9c5 4800 	strd	r4, r8, [r5]
 80008b2:	e7e2      	b.n	800087a <__udivmoddi4+0xa2>
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	f000 8090 	beq.w	80009da <__udivmoddi4+0x202>
 80008ba:	fab2 f682 	clz	r6, r2
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f040 80a4 	bne.w	8000a0c <__udivmoddi4+0x234>
 80008c4:	1a8a      	subs	r2, r1, r2
 80008c6:	0c03      	lsrs	r3, r0, #16
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	b280      	uxth	r0, r0
 80008ce:	b2bc      	uxth	r4, r7
 80008d0:	2101      	movs	r1, #1
 80008d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008de:	fb04 f20c 	mul.w	r2, r4, ip
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x11e>
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x11c>
 80008ee:	429a      	cmp	r2, r3
 80008f0:	f200 80e0 	bhi.w	8000ab4 <__udivmoddi4+0x2dc>
 80008f4:	46c4      	mov	ip, r8
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000900:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000904:	fb02 f404 	mul.w	r4, r2, r4
 8000908:	429c      	cmp	r4, r3
 800090a:	d907      	bls.n	800091c <__udivmoddi4+0x144>
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x142>
 8000914:	429c      	cmp	r4, r3
 8000916:	f200 80ca 	bhi.w	8000aae <__udivmoddi4+0x2d6>
 800091a:	4602      	mov	r2, r0
 800091c:	1b1b      	subs	r3, r3, r4
 800091e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000922:	e7a5      	b.n	8000870 <__udivmoddi4+0x98>
 8000924:	f1c1 0620 	rsb	r6, r1, #32
 8000928:	408b      	lsls	r3, r1
 800092a:	fa22 f706 	lsr.w	r7, r2, r6
 800092e:	431f      	orrs	r7, r3
 8000930:	fa0e f401 	lsl.w	r4, lr, r1
 8000934:	fa20 f306 	lsr.w	r3, r0, r6
 8000938:	fa2e fe06 	lsr.w	lr, lr, r6
 800093c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000940:	4323      	orrs	r3, r4
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	fa1f fc87 	uxth.w	ip, r7
 800094a:	fbbe f0f9 	udiv	r0, lr, r9
 800094e:	0c1c      	lsrs	r4, r3, #16
 8000950:	fb09 ee10 	mls	lr, r9, r0, lr
 8000954:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000958:	fb00 fe0c 	mul.w	lr, r0, ip
 800095c:	45a6      	cmp	lr, r4
 800095e:	fa02 f201 	lsl.w	r2, r2, r1
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x1a0>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 3aff 	add.w	sl, r0, #4294967295
 800096a:	f080 809c 	bcs.w	8000aa6 <__udivmoddi4+0x2ce>
 800096e:	45a6      	cmp	lr, r4
 8000970:	f240 8099 	bls.w	8000aa6 <__udivmoddi4+0x2ce>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	eba4 040e 	sub.w	r4, r4, lr
 800097c:	fa1f fe83 	uxth.w	lr, r3
 8000980:	fbb4 f3f9 	udiv	r3, r4, r9
 8000984:	fb09 4413 	mls	r4, r9, r3, r4
 8000988:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800098c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000990:	45a4      	cmp	ip, r4
 8000992:	d908      	bls.n	80009a6 <__udivmoddi4+0x1ce>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f103 3eff 	add.w	lr, r3, #4294967295
 800099a:	f080 8082 	bcs.w	8000aa2 <__udivmoddi4+0x2ca>
 800099e:	45a4      	cmp	ip, r4
 80009a0:	d97f      	bls.n	8000aa2 <__udivmoddi4+0x2ca>
 80009a2:	3b02      	subs	r3, #2
 80009a4:	443c      	add	r4, r7
 80009a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009aa:	eba4 040c 	sub.w	r4, r4, ip
 80009ae:	fba0 ec02 	umull	lr, ip, r0, r2
 80009b2:	4564      	cmp	r4, ip
 80009b4:	4673      	mov	r3, lr
 80009b6:	46e1      	mov	r9, ip
 80009b8:	d362      	bcc.n	8000a80 <__udivmoddi4+0x2a8>
 80009ba:	d05f      	beq.n	8000a7c <__udivmoddi4+0x2a4>
 80009bc:	b15d      	cbz	r5, 80009d6 <__udivmoddi4+0x1fe>
 80009be:	ebb8 0203 	subs.w	r2, r8, r3
 80009c2:	eb64 0409 	sbc.w	r4, r4, r9
 80009c6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ca:	fa22 f301 	lsr.w	r3, r2, r1
 80009ce:	431e      	orrs	r6, r3
 80009d0:	40cc      	lsrs	r4, r1
 80009d2:	e9c5 6400 	strd	r6, r4, [r5]
 80009d6:	2100      	movs	r1, #0
 80009d8:	e74f      	b.n	800087a <__udivmoddi4+0xa2>
 80009da:	fbb1 fcf2 	udiv	ip, r1, r2
 80009de:	0c01      	lsrs	r1, r0, #16
 80009e0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009e4:	b280      	uxth	r0, r0
 80009e6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ea:	463b      	mov	r3, r7
 80009ec:	4638      	mov	r0, r7
 80009ee:	463c      	mov	r4, r7
 80009f0:	46b8      	mov	r8, r7
 80009f2:	46be      	mov	lr, r7
 80009f4:	2620      	movs	r6, #32
 80009f6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009fa:	eba2 0208 	sub.w	r2, r2, r8
 80009fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a02:	e766      	b.n	80008d2 <__udivmoddi4+0xfa>
 8000a04:	4601      	mov	r1, r0
 8000a06:	e718      	b.n	800083a <__udivmoddi4+0x62>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	e72c      	b.n	8000866 <__udivmoddi4+0x8e>
 8000a0c:	f1c6 0220 	rsb	r2, r6, #32
 8000a10:	fa2e f302 	lsr.w	r3, lr, r2
 8000a14:	40b7      	lsls	r7, r6
 8000a16:	40b1      	lsls	r1, r6
 8000a18:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a20:	430a      	orrs	r2, r1
 8000a22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a26:	b2bc      	uxth	r4, r7
 8000a28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a32:	fb08 f904 	mul.w	r9, r8, r4
 8000a36:	40b0      	lsls	r0, r6
 8000a38:	4589      	cmp	r9, r1
 8000a3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a3e:	b280      	uxth	r0, r0
 8000a40:	d93e      	bls.n	8000ac0 <__udivmoddi4+0x2e8>
 8000a42:	1879      	adds	r1, r7, r1
 8000a44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a48:	d201      	bcs.n	8000a4e <__udivmoddi4+0x276>
 8000a4a:	4589      	cmp	r9, r1
 8000a4c:	d81f      	bhi.n	8000a8e <__udivmoddi4+0x2b6>
 8000a4e:	eba1 0109 	sub.w	r1, r1, r9
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fb09 f804 	mul.w	r8, r9, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a64:	4542      	cmp	r2, r8
 8000a66:	d229      	bcs.n	8000abc <__udivmoddi4+0x2e4>
 8000a68:	18ba      	adds	r2, r7, r2
 8000a6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a6e:	d2c4      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a70:	4542      	cmp	r2, r8
 8000a72:	d2c2      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a74:	f1a9 0102 	sub.w	r1, r9, #2
 8000a78:	443a      	add	r2, r7
 8000a7a:	e7be      	b.n	80009fa <__udivmoddi4+0x222>
 8000a7c:	45f0      	cmp	r8, lr
 8000a7e:	d29d      	bcs.n	80009bc <__udivmoddi4+0x1e4>
 8000a80:	ebbe 0302 	subs.w	r3, lr, r2
 8000a84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a88:	3801      	subs	r0, #1
 8000a8a:	46e1      	mov	r9, ip
 8000a8c:	e796      	b.n	80009bc <__udivmoddi4+0x1e4>
 8000a8e:	eba7 0909 	sub.w	r9, r7, r9
 8000a92:	4449      	add	r1, r9
 8000a94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9c:	fb09 f804 	mul.w	r8, r9, r4
 8000aa0:	e7db      	b.n	8000a5a <__udivmoddi4+0x282>
 8000aa2:	4673      	mov	r3, lr
 8000aa4:	e77f      	b.n	80009a6 <__udivmoddi4+0x1ce>
 8000aa6:	4650      	mov	r0, sl
 8000aa8:	e766      	b.n	8000978 <__udivmoddi4+0x1a0>
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e6fd      	b.n	80008aa <__udivmoddi4+0xd2>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3a02      	subs	r2, #2
 8000ab2:	e733      	b.n	800091c <__udivmoddi4+0x144>
 8000ab4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ab8:	443b      	add	r3, r7
 8000aba:	e71c      	b.n	80008f6 <__udivmoddi4+0x11e>
 8000abc:	4649      	mov	r1, r9
 8000abe:	e79c      	b.n	80009fa <__udivmoddi4+0x222>
 8000ac0:	eba1 0109 	sub.w	r1, r1, r9
 8000ac4:	46c4      	mov	ip, r8
 8000ac6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aca:	fb09 f804 	mul.w	r8, r9, r4
 8000ace:	e7c4      	b.n	8000a5a <__udivmoddi4+0x282>

08000ad0 <__aeabi_idiv0>:
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan2;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ada:	4b3c      	ldr	r3, [pc, #240]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000adc:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd0 <MX_FDCAN1_Init+0xfc>)
 8000ade:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ae6:	4b39      	ldr	r3, [pc, #228]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000aec:	4b37      	ldr	r3, [pc, #220]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000af2:	4b36      	ldr	r3, [pc, #216]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000af8:	4b34      	ldr	r3, [pc, #208]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000afe:	4b33      	ldr	r3, [pc, #204]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 5;
 8000b04:	4b31      	ldr	r3, [pc, #196]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b06:	2205      	movs	r2, #5
 8000b08:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8000b0a:	4b30      	ldr	r3, [pc, #192]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b0c:	221d      	movs	r2, #29
 8000b0e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 8000b10:	4b2e      	ldr	r3, [pc, #184]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b12:	2214      	movs	r2, #20
 8000b14:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000b16:	4b2d      	ldr	r3, [pc, #180]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b1e:	2205      	movs	r2, #5
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8000b22:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b24:	220e      	movs	r2, #14
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 10;
 8000b28:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b2a:	220a      	movs	r2, #10
 8000b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 200;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b30:	22c8      	movs	r2, #200	@ 0xc8
 8000b32:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b34:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000b3a:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b60:	2204      	movs	r2, #4
 8000b62:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 4;
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b82:	4812      	ldr	r0, [pc, #72]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000b84:	f003 fc7c 	bl	8004480 <HAL_FDCAN_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000b8e:	f000 fed2 	bl	8001936 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_EXTENDED_ID; // Nếu bạn dùng extended ID
 8000b92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b96:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x00000000; // ID không quan trọng
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x00000000; // Mask = 0 -> bỏ qua tất cả bit
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_FDCAN1_Init+0xf8>)
 8000bb6:	f003 fe41 	bl	800483c <HAL_FDCAN_ConfigFilter>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_FDCAN1_Init+0xf0>
      Error_Handler();
 8000bc0:	f000 feb9 	bl	8001936 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	24004bb8 	.word	0x24004bb8
 8000bd0:	4000a000 	.word	0x4000a000

08000bd4 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bda:	4b3c      	ldr	r3, [pc, #240]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000bde:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000be0:	4b3a      	ldr	r3, [pc, #232]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000be6:	4b39      	ldr	r3, [pc, #228]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bec:	4b37      	ldr	r3, [pc, #220]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bf2:	4b36      	ldr	r3, [pc, #216]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bf8:	4b34      	ldr	r3, [pc, #208]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000bfe:	4b33      	ldr	r3, [pc, #204]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 5;
 8000c04:	4b31      	ldr	r3, [pc, #196]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c06:	2205      	movs	r2, #5
 8000c08:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 29;
 8000c0a:	4b30      	ldr	r3, [pc, #192]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c0c:	221d      	movs	r2, #29
 8000c0e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 20;
 8000c10:	4b2e      	ldr	r3, [pc, #184]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c12:	2214      	movs	r2, #20
 8000c14:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 2;
 8000c16:	4b2d      	ldr	r3, [pc, #180]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 5;
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c1e:	2205      	movs	r2, #5
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 14;
 8000c22:	4b2a      	ldr	r3, [pc, #168]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c24:	220e      	movs	r2, #14
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 10;
 8000c28:	4b28      	ldr	r3, [pc, #160]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 100;
 8000c2e:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c30:	2264      	movs	r2, #100	@ 0x64
 8000c32:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c34:	4b25      	ldr	r3, [pc, #148]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000c3a:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c46:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c48:	2204      	movs	r2, #4
 8000c4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 4;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c54:	2204      	movs	r2, #4
 8000c56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c60:	2204      	movs	r2, #4
 8000c62:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c64:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 4;
 8000c70:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c7e:	2204      	movs	r2, #4
 8000c80:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c82:	4812      	ldr	r0, [pc, #72]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000c84:	f003 fbfc 	bl	8004480 <HAL_FDCAN_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000c8e:	f000 fe52 	bl	8001936 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_EXTENDED_ID; // Nếu bạn dùng extended ID
 8000c92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c96:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x00000000; // ID không quan trọng
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x00000000; // Mask = 0 -> bỏ qua tất cả bit
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]

  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_FDCAN2_Init+0xf8>)
 8000cb6:	f003 fdc1 	bl	800483c <HAL_FDCAN_ConfigFilter>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_FDCAN2_Init+0xf0>
      Error_Handler();
 8000cc0:	f000 fe39 	bl	8001936 <Error_Handler>
  }

  /* USER CODE END FDCAN2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	24004c58 	.word	0x24004c58
 8000cd0:	4000a400 	.word	0x4000a400

08000cd4 <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000cda:	4a2f      	ldr	r2, [pc, #188]	@ (8000d98 <MX_FDCAN3_Init+0xc4>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000cde:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 8000cea:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000cf0:	4b28      	ldr	r3, [pc, #160]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000cf6:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 8000cfc:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 5;
 8000d02:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d04:	2205      	movs	r2, #5
 8000d06:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 29;
 8000d08:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d0a:	221d      	movs	r2, #29
 8000d0c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 20;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d10:	2214      	movs	r2, #20
 8000d12:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 2;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 5;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d1c:	2205      	movs	r2, #5
 8000d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 14;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d22:	220e      	movs	r2, #14
 8000d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 10;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d28:	220a      	movs	r2, #10
 8000d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 4;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d40:	2204      	movs	r2, #4
 8000d42:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d46:	2204      	movs	r2, #4
 8000d48:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d52:	2204      	movs	r2, #4
 8000d54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 4;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d70:	2204      	movs	r2, #4
 8000d72:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d74:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <MX_FDCAN3_Init+0xc0>)
 8000d82:	f003 fb7d 	bl	8004480 <HAL_FDCAN_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000d8c:	f000 fdd3 	bl	8001936 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24004cf8 	.word	0x24004cf8
 8000d98:	4000d400 	.word	0x4000d400

08000d9c <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0bc      	sub	sp, #240	@ 0xf0
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db4:	f107 0320 	add.w	r3, r7, #32
 8000db8:	22b8      	movs	r2, #184	@ 0xb8
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f015 fa5d 	bl	801627c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a8f      	ldr	r2, [pc, #572]	@ (8001004 <HAL_FDCAN_MspInit+0x268>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d159      	bne.n	8000e80 <HAL_FDCAN_MspInit+0xe4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dcc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dd8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ddc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	4618      	mov	r0, r3
 8000de6:	f006 f839 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000df0:	f000 fda1 	bl	8001936 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000df4:	4b84      	ldr	r3, [pc, #528]	@ (8001008 <HAL_FDCAN_MspInit+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a83      	ldr	r2, [pc, #524]	@ (8001008 <HAL_FDCAN_MspInit+0x26c>)
 8000dfc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000dfe:	4b82      	ldr	r3, [pc, #520]	@ (8001008 <HAL_FDCAN_MspInit+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10e      	bne.n	8000e24 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e06:	4b81      	ldr	r3, [pc, #516]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000e08:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000e0c:	4a7f      	ldr	r2, [pc, #508]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e12:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000e16:	4b7d      	ldr	r3, [pc, #500]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000e18:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b79      	ldr	r3, [pc, #484]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	4a78      	ldr	r2, [pc, #480]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e34:	4b75      	ldr	r3, [pc, #468]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
 8000e40:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e5c:	2309      	movs	r3, #9
 8000e5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e66:	4619      	mov	r1, r3
 8000e68:	4869      	ldr	r0, [pc, #420]	@ (8001010 <HAL_FDCAN_MspInit+0x274>)
 8000e6a:	f004 fcfb 	bl	8005864 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2013      	movs	r0, #19
 8000e74:	f001 fe7e 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e78:	2013      	movs	r0, #19
 8000e7a:	f001 fe95 	bl	8002ba8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 8000e7e:	e0bc      	b.n	8000ffa <HAL_FDCAN_MspInit+0x25e>
  else if(fdcanHandle->Instance==FDCAN2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a63      	ldr	r2, [pc, #396]	@ (8001014 <HAL_FDCAN_MspInit+0x278>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d159      	bne.n	8000f3e <HAL_FDCAN_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e8a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000e96:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 ffda 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_FDCAN_MspInit+0x116>
      Error_Handler();
 8000eae:	f000 fd42 	bl	8001936 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000eb2:	4b55      	ldr	r3, [pc, #340]	@ (8001008 <HAL_FDCAN_MspInit+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a53      	ldr	r2, [pc, #332]	@ (8001008 <HAL_FDCAN_MspInit+0x26c>)
 8000eba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ebc:	4b52      	ldr	r3, [pc, #328]	@ (8001008 <HAL_FDCAN_MspInit+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10e      	bne.n	8000ee2 <HAL_FDCAN_MspInit+0x146>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ec4:	4b51      	ldr	r3, [pc, #324]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000ec6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000eca:	4a50      	ldr	r2, [pc, #320]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ed0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000ed6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee8:	4a48      	ldr	r2, [pc, #288]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef2:	4b46      	ldr	r3, [pc, #280]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f00:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f1a:	2309      	movs	r3, #9
 8000f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f24:	4619      	mov	r1, r3
 8000f26:	483c      	ldr	r0, [pc, #240]	@ (8001018 <HAL_FDCAN_MspInit+0x27c>)
 8000f28:	f004 fc9c 	bl	8005864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2014      	movs	r0, #20
 8000f32:	f001 fe1f 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000f36:	2014      	movs	r0, #20
 8000f38:	f001 fe36 	bl	8002ba8 <HAL_NVIC_EnableIRQ>
}
 8000f3c:	e05d      	b.n	8000ffa <HAL_FDCAN_MspInit+0x25e>
  else if(fdcanHandle->Instance==FDCAN3)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a36      	ldr	r2, [pc, #216]	@ (800101c <HAL_FDCAN_MspInit+0x280>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d158      	bne.n	8000ffa <HAL_FDCAN_MspInit+0x25e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 ff7b 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_FDCAN_MspInit+0x1d4>
      Error_Handler();
 8000f6c:	f000 fce3 	bl	8001936 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f70:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <HAL_FDCAN_MspInit+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a24      	ldr	r2, [pc, #144]	@ (8001008 <HAL_FDCAN_MspInit+0x26c>)
 8000f78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <HAL_FDCAN_MspInit+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d10e      	bne.n	8000fa0 <HAL_FDCAN_MspInit+0x204>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f82:	4b22      	ldr	r3, [pc, #136]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000f84:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000f88:	4a20      	ldr	r2, [pc, #128]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000f94:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	4a19      	ldr	r2, [pc, #100]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb0:	4b16      	ldr	r3, [pc, #88]	@ (800100c <HAL_FDCAN_MspInit+0x270>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000fbe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_FDCAN3;
 8000fd8:	2305      	movs	r3, #5
 8000fda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480e      	ldr	r0, [pc, #56]	@ (8001020 <HAL_FDCAN_MspInit+0x284>)
 8000fe6:	f004 fc3d 	bl	8005864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	209f      	movs	r0, #159	@ 0x9f
 8000ff0:	f001 fdc0 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8000ff4:	209f      	movs	r0, #159	@ 0x9f
 8000ff6:	f001 fdd7 	bl	8002ba8 <HAL_NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	37f0      	adds	r7, #240	@ 0xf0
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	4000a000 	.word	0x4000a000
 8001008:	24004d98 	.word	0x24004d98
 800100c:	58024400 	.word	0x58024400
 8001010:	58020000 	.word	0x58020000
 8001014:	4000a400 	.word	0x4000a400
 8001018:	58020400 	.word	0x58020400
 800101c:	4000d400 	.word	0x4000d400
 8001020:	58020c00 	.word	0x58020c00

08001024 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	4b30      	ldr	r3, [pc, #192]	@ (80010ec <MX_GPIO_Init+0xc8>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	4a2e      	ldr	r2, [pc, #184]	@ (80010ec <MX_GPIO_Init+0xc8>)
 8001032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001036:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103a:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <MX_GPIO_Init+0xc8>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001048:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <MX_GPIO_Init+0xc8>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104e:	4a27      	ldr	r2, [pc, #156]	@ (80010ec <MX_GPIO_Init+0xc8>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001058:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <MX_GPIO_Init+0xc8>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <MX_GPIO_Init+0xc8>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	4a1f      	ldr	r2, [pc, #124]	@ (80010ec <MX_GPIO_Init+0xc8>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <MX_GPIO_Init+0xc8>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MX_GPIO_Init+0xc8>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <MX_GPIO_Init+0xc8>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <MX_GPIO_Init+0xc8>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a2:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <MX_GPIO_Init+0xc8>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a8:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <MX_GPIO_Init+0xc8>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_GPIO_Init+0xc8>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c0:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <MX_GPIO_Init+0xc8>)
 80010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c6:	4a09      	ldr	r2, [pc, #36]	@ (80010ec <MX_GPIO_Init+0xc8>)
 80010c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <MX_GPIO_Init+0xc8>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

}
 80010de:	bf00      	nop
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	58024400 	.word	0x58024400

080010f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <MX_I2C1_Init+0x78>)
 80010f6:	4a1d      	ldr	r2, [pc, #116]	@ (800116c <MX_I2C1_Init+0x7c>)
 80010f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A20D1F;
 80010fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <MX_I2C1_Init+0x78>)
 80010fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <MX_I2C1_Init+0x80>)
 80010fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_I2C1_Init+0x78>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001106:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <MX_I2C1_Init+0x78>)
 8001108:	2201      	movs	r2, #1
 800110a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110c:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <MX_I2C1_Init+0x78>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <MX_I2C1_Init+0x78>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001118:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <MX_I2C1_Init+0x78>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <MX_I2C1_Init+0x78>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <MX_I2C1_Init+0x78>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800112a:	480f      	ldr	r0, [pc, #60]	@ (8001168 <MX_I2C1_Init+0x78>)
 800112c:	f004 fd42 	bl	8005bb4 <HAL_I2C_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001136:	f000 fbfe 	bl	8001936 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800113a:	2100      	movs	r1, #0
 800113c:	480a      	ldr	r0, [pc, #40]	@ (8001168 <MX_I2C1_Init+0x78>)
 800113e:	f004 fdef 	bl	8005d20 <HAL_I2CEx_ConfigAnalogFilter>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001148:	f000 fbf5 	bl	8001936 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <MX_I2C1_Init+0x78>)
 8001150:	f004 fe31 	bl	8005db6 <HAL_I2CEx_ConfigDigitalFilter>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800115a:	f000 fbec 	bl	8001936 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800115e:	2001      	movs	r0, #1
 8001160:	f004 fe76 	bl	8005e50 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	24004d9c 	.word	0x24004d9c
 800116c:	40005400 	.word	0x40005400
 8001170:	10a20d1f 	.word	0x10a20d1f

08001174 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0b8      	sub	sp, #224	@ 0xe0
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	22b8      	movs	r2, #184	@ 0xb8
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f015 f871 	bl	801627c <memset>
  if(i2cHandle->Instance==I2C1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a2a      	ldr	r2, [pc, #168]	@ (8001248 <HAL_I2C_MspInit+0xd4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d14d      	bne.n	8001240 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011a4:	f04f 0208 	mov.w	r2, #8
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4618      	mov	r0, r3
 80011bc:	f005 fe4e 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011c6:	f000 fbb6 	bl	8001936 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b20      	ldr	r3, [pc, #128]	@ (800124c <HAL_I2C_MspInit+0xd8>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d0:	4a1e      	ldr	r2, [pc, #120]	@ (800124c <HAL_I2C_MspInit+0xd8>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011da:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <HAL_I2C_MspInit+0xd8>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e8:	23c0      	movs	r3, #192	@ 0xc0
 80011ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ee:	2312      	movs	r3, #18
 80011f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001200:	2304      	movs	r3, #4
 8001202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800120a:	4619      	mov	r1, r3
 800120c:	4810      	ldr	r0, [pc, #64]	@ (8001250 <HAL_I2C_MspInit+0xdc>)
 800120e:	f004 fb29 	bl	8005864 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_I2C_MspInit+0xd8>)
 8001214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001218:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <HAL_I2C_MspInit+0xd8>)
 800121a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800121e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_I2C_MspInit+0xd8>)
 8001224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	201f      	movs	r0, #31
 8001236:	f001 fc9d 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800123a:	201f      	movs	r0, #31
 800123c:	f001 fcb4 	bl	8002ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001240:	bf00      	nop
 8001242:	37e0      	adds	r7, #224	@ 0xe0
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40005400 	.word	0x40005400
 800124c:	58024400 	.word	0x58024400
 8001250:	58020400 	.word	0x58020400

08001254 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001258:	f3bf 8f4f 	dsb	sy
}
 800125c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <__NVIC_SystemReset+0x24>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001266:	4904      	ldr	r1, [pc, #16]	@ (8001278 <__NVIC_SystemReset+0x24>)
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__NVIC_SystemReset+0x28>)
 800126a:	4313      	orrs	r3, r2
 800126c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800126e:	f3bf 8f4f 	dsb	sy
}
 8001272:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <__NVIC_SystemReset+0x20>
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	05fa0004 	.word	0x05fa0004

08001280 <LAN8720_ReadPHY>:
/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
extern struct netif gnetif;

HAL_StatusTypeDef LAN8720_ReadPHY(uint8_t phy_addr, uint8_t reg_addr,
		uint16_t *data) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	603a      	str	r2, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	460b      	mov	r3, r1
 800128e:	71bb      	strb	r3, [r7, #6]
	uint32_t reg_value;
	HAL_StatusTypeDef status = HAL_ETH_ReadPHYRegister(&heth, phy_addr,
 8001290:	79f9      	ldrb	r1, [r7, #7]
 8001292:	79ba      	ldrb	r2, [r7, #6]
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <LAN8720_ReadPHY+0x34>)
 800129a:	f002 f888 	bl	80033ae <HAL_ETH_ReadPHYRegister>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
			reg_addr, &reg_value);
	*data = (uint16_t) reg_value;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	801a      	strh	r2, [r3, #0]
	return status;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	24005368 	.word	0x24005368

080012b8 <PHY_CheckStatus>:
HAL_StatusTypeDef LAN8720_WritePHY(uint8_t phy_addr, uint8_t reg_addr,
		uint16_t data) {
	return HAL_ETH_WritePHYRegister(&heth, phy_addr, reg_addr, data);
}
// H m ki?m tra tr?ng th i k?t n?i PHY
void PHY_CheckStatus(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	uint16_t status = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	80fb      	strh	r3, [r7, #6]
	uint16_t control = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	80bb      	strh	r3, [r7, #4]
	uint16_t phy_spec_status = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	807b      	strh	r3, [r7, #2]
	//  ?c thanh ghi Basic Control (0x00)
	LAN8720_ReadPHY(LAN8720_PHY_ADDRESS, 0x00, &control);
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	461a      	mov	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff ffd5 	bl	8001280 <LAN8720_ReadPHY>
	printf("PHY Basic Control Register: 0x%04X\n", control);
 80012d6:	88bb      	ldrh	r3, [r7, #4]
 80012d8:	4619      	mov	r1, r3
 80012da:	481f      	ldr	r0, [pc, #124]	@ (8001358 <PHY_CheckStatus+0xa0>)
 80012dc:	f014 fe3a 	bl	8015f54 <iprintf>

	//  ?c thanh ghi Basic Status (0x01)
	LAN8720_ReadPHY(LAN8720_PHY_ADDRESS, 0x01, &status);
 80012e0:	1dbb      	adds	r3, r7, #6
 80012e2:	461a      	mov	r2, r3
 80012e4:	2101      	movs	r1, #1
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff ffca 	bl	8001280 <LAN8720_ReadPHY>
	printf("PHY Basic Status Register: 0x%04X\n", status);
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	4619      	mov	r1, r3
 80012f0:	481a      	ldr	r0, [pc, #104]	@ (800135c <PHY_CheckStatus+0xa4>)
 80012f2:	f014 fe2f 	bl	8015f54 <iprintf>

	// Ki?m tra tr?ng th i li n k?t
	if (status & 0x0004) { // Bit 2: Link Status
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d026      	beq.n	800134e <PHY_CheckStatus+0x96>

		printf("PHY Link is UP\n");
 8001300:	4817      	ldr	r0, [pc, #92]	@ (8001360 <PHY_CheckStatus+0xa8>)
 8001302:	f014 fe8f 	bl	8016024 <puts>

		// Ki?m tra t?c d? v  ch? d? duplex
		LAN8720_ReadPHY(LAN8720_PHY_ADDRESS, 0x1F, &phy_spec_status);
 8001306:	1cbb      	adds	r3, r7, #2
 8001308:	461a      	mov	r2, r3
 800130a:	211f      	movs	r1, #31
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ffb7 	bl	8001280 <LAN8720_ReadPHY>
		printf("PHY Specific Status: 0x%04X\n", phy_spec_status);
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	4619      	mov	r1, r3
 8001316:	4813      	ldr	r0, [pc, #76]	@ (8001364 <PHY_CheckStatus+0xac>)
 8001318:	f014 fe1c 	bl	8015f54 <iprintf>

		if (phy_spec_status & 0x0400) { // Bit 10: Speed 100Mbps
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <PHY_CheckStatus+0x76>
			printf("Speed: 100Mbps\n");
 8001326:	4810      	ldr	r0, [pc, #64]	@ (8001368 <PHY_CheckStatus+0xb0>)
 8001328:	f014 fe7c 	bl	8016024 <puts>
 800132c:	e002      	b.n	8001334 <PHY_CheckStatus+0x7c>
		} else {
			printf("Speed: 10Mbps\n");
 800132e:	480f      	ldr	r0, [pc, #60]	@ (800136c <PHY_CheckStatus+0xb4>)
 8001330:	f014 fe78 	bl	8016024 <puts>
		}

		if (phy_spec_status & 0x0800) { // Bit 11: Full Duplex
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <PHY_CheckStatus+0x8e>
			printf("Duplex: Full\n");
 800133e:	480c      	ldr	r0, [pc, #48]	@ (8001370 <PHY_CheckStatus+0xb8>)
 8001340:	f014 fe70 	bl	8016024 <puts>
		}
	} else {
		NVIC_SystemReset();
		printf("PHY Link is DOWN\n");
	}
}
 8001344:	e005      	b.n	8001352 <PHY_CheckStatus+0x9a>
			printf("Duplex: Half\n");
 8001346:	480b      	ldr	r0, [pc, #44]	@ (8001374 <PHY_CheckStatus+0xbc>)
 8001348:	f014 fe6c 	bl	8016024 <puts>
}
 800134c:	e001      	b.n	8001352 <PHY_CheckStatus+0x9a>
		NVIC_SystemReset();
 800134e:	f7ff ff81 	bl	8001254 <__NVIC_SystemReset>
}
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	08019670 	.word	0x08019670
 800135c:	08019694 	.word	0x08019694
 8001360:	080196b8 	.word	0x080196b8
 8001364:	080196c8 	.word	0x080196c8
 8001368:	080196e8 	.word	0x080196e8
 800136c:	080196f8 	.word	0x080196f8
 8001370:	08019708 	.word	0x08019708
 8001374:	08019718 	.word	0x08019718

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800137e:	f000 fa77 	bl	8001870 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001382:	4b86      	ldr	r3, [pc, #536]	@ (800159c <main+0x224>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 800138e:	f3bf 8f4f 	dsb	sy
}
 8001392:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001394:	f3bf 8f6f 	isb	sy
}
 8001398:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800139a:	4b80      	ldr	r3, [pc, #512]	@ (800159c <main+0x224>)
 800139c:	2200      	movs	r2, #0
 800139e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013a2:	f3bf 8f4f 	dsb	sy
}
 80013a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013a8:	f3bf 8f6f 	isb	sy
}
 80013ac:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013ae:	4b7b      	ldr	r3, [pc, #492]	@ (800159c <main+0x224>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	4a7a      	ldr	r2, [pc, #488]	@ (800159c <main+0x224>)
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013ba:	f3bf 8f4f 	dsb	sy
}
 80013be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c0:	f3bf 8f6f 	isb	sy
}
 80013c4:	e000      	b.n	80013c8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80013c6:	bf00      	nop
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f001 faac 	bl	8002924 <HAL_Init>
  //HAL_Delay(5000);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f8fc 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d0:	f7ff fe28 	bl	8001024 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80013d4:	f7ff fb7e 	bl	8000ad4 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 80013d8:	f001 f8bc 	bl	8002554 <MX_USART1_UART_Init>
  MX_FDCAN2_Init();
 80013dc:	f7ff fbfa 	bl	8000bd4 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80013e0:	f7ff fe86 	bl	80010f0 <MX_I2C1_Init>
  MX_LWIP_Init();
 80013e4:	f009 f9e6 	bl	800a7b4 <MX_LWIP_Init>
  MX_FDCAN3_Init();
 80013e8:	f7ff fc74 	bl	8000cd4 <MX_FDCAN3_Init>
  MX_TIM1_Init();
 80013ec:	f000 ffcc 	bl	8002388 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 80013f0:	486b      	ldr	r0, [pc, #428]	@ (80015a0 <main+0x228>)
 80013f2:	f003 fa99 	bl	8004928 <HAL_FDCAN_Start>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <main+0x88>
	  return 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e0c9      	b.n	8001594 <main+0x21c>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8001400:	2200      	movs	r2, #0
 8001402:	2101      	movs	r1, #1
 8001404:	4866      	ldr	r0, [pc, #408]	@ (80015a0 <main+0x228>)
 8001406:	f003 fcb1 	bl	8004d6c <HAL_FDCAN_ActivateNotification>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <main+0x9c>
			0) != HAL_OK) {
		/* Notification Error */
		Error_Handler();
 8001410:	f000 fa91 	bl	8001936 <Error_Handler>
	}
  if(HAL_FDCAN_Start(&hfdcan2) != HAL_OK){
 8001414:	4863      	ldr	r0, [pc, #396]	@ (80015a4 <main+0x22c>)
 8001416:	f003 fa87 	bl	8004928 <HAL_FDCAN_Start>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <main+0xac>
	  return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e0b7      	b.n	8001594 <main+0x21c>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE,
 8001424:	2200      	movs	r2, #0
 8001426:	2110      	movs	r1, #16
 8001428:	485e      	ldr	r0, [pc, #376]	@ (80015a4 <main+0x22c>)
 800142a:	f003 fc9f 	bl	8004d6c <HAL_FDCAN_ActivateNotification>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <main+0xc0>
			0) != HAL_OK) {
		/* Notification Error */
		Error_Handler();
 8001434:	f000 fa7f 	bl	8001936 <Error_Handler>
  }
  if(HAL_FDCAN_Start(&hfdcan3) != HAL_OK){
 8001438:	485b      	ldr	r0, [pc, #364]	@ (80015a8 <main+0x230>)
 800143a:	f003 fa75 	bl	8004928 <HAL_FDCAN_Start>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <main+0xd0>
		  return 0;
 8001444:	2300      	movs	r3, #0
 8001446:	e0a5      	b.n	8001594 <main+0x21c>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8001448:	2200      	movs	r2, #0
 800144a:	2101      	movs	r1, #1
 800144c:	4856      	ldr	r0, [pc, #344]	@ (80015a8 <main+0x230>)
 800144e:	f003 fc8d 	bl	8004d6c <HAL_FDCAN_ActivateNotification>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <main+0xe4>
				0) != HAL_OK) {
			/* Notification Error */
			Error_Handler();
 8001458:	f000 fa6d 	bl	8001936 <Error_Handler>
  }
  ///TxHeader.Identifier = 0x09;
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 800145c:	4b53      	ldr	r3, [pc, #332]	@ (80015ac <main+0x234>)
 800145e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001462:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001464:	4b51      	ldr	r3, [pc, #324]	@ (80015ac <main+0x234>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800146a:	4b50      	ldr	r3, [pc, #320]	@ (80015ac <main+0x234>)
 800146c:	2208      	movs	r2, #8
 800146e:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001470:	4b4e      	ldr	r3, [pc, #312]	@ (80015ac <main+0x234>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001476:	4b4d      	ldr	r3, [pc, #308]	@ (80015ac <main+0x234>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800147c:	4b4b      	ldr	r3, [pc, #300]	@ (80015ac <main+0x234>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001482:	4b4a      	ldr	r3, [pc, #296]	@ (80015ac <main+0x234>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8001488:	4b48      	ldr	r3, [pc, #288]	@ (80015ac <main+0x234>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]

  PHY_CheckStatus();
 800148e:	f7ff ff13 	bl	80012b8 <PHY_CheckStatus>
  udpServer_init();
 8001492:	f000 ffef 	bl	8002474 <udpServer_init>
  EnableAllMotor();
 8001496:	f000 fb6d 	bl	8001b74 <EnableAllMotor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 800149a:	4845      	ldr	r0, [pc, #276]	@ (80015b0 <main+0x238>)
 800149c:	f009 fbf6 	bl	800ac8c <ethernetif_input>
	  sys_check_timeouts();
 80014a0:	f010 ff80 	bl	80123a4 <sys_check_timeouts>

	  uint32_t now = HAL_GetTick();
 80014a4:	f001 fa8e 	bl	80029c4 <HAL_GetTick>
 80014a8:	6038      	str	r0, [r7, #0]

	  if(now  - last_time_rcv_udp > 10){
 80014aa:	4b42      	ldr	r3, [pc, #264]	@ (80015b4 <main+0x23c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b0a      	cmp	r3, #10
 80014b4:	d904      	bls.n	80014c0 <main+0x148>
		  udp_timeout_count++;
 80014b6:	4b40      	ldr	r3, [pc, #256]	@ (80015b8 <main+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a3e      	ldr	r2, [pc, #248]	@ (80015b8 <main+0x240>)
 80014be:	6013      	str	r3, [r2, #0]
	  }
	  memcpy(&MotorRcv, &RxUDP, sizeof(MotorReceive));
 80014c0:	4a3e      	ldr	r2, [pc, #248]	@ (80015bc <main+0x244>)
 80014c2:	4b3f      	ldr	r3, [pc, #252]	@ (80015c0 <main+0x248>)
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	23e0      	movs	r3, #224	@ 0xe0
 80014ca:	461a      	mov	r2, r3
 80014cc:	f014 ff67 	bl	801639e <memcpy>

	  for (int i = 0; i < 11; i++) {
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	e05a      	b.n	800158c <main+0x214>
		  MotorReceiveCommand(
			  motor_map_upper_body[i].motor_id,
 80014d6:	493b      	ldr	r1, [pc, #236]	@ (80015c4 <main+0x24c>)
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	8818      	ldrh	r0, [r3, #0]
		  MotorReceiveCommand(
 80014e6:	4935      	ldr	r1, [pc, #212]	@ (80015bc <main+0x244>)
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	4930      	ldr	r1, [pc, #192]	@ (80015bc <main+0x244>)
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	3304      	adds	r3, #4
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	492b      	ldr	r1, [pc, #172]	@ (80015bc <main+0x244>)
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3308      	adds	r3, #8
 800151c:	edd3 6a00 	vldr	s13, [r3]
 8001520:	4926      	ldr	r1, [pc, #152]	@ (80015bc <main+0x244>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	330c      	adds	r3, #12
 8001530:	ed93 6a00 	vldr	s12, [r3]
 8001534:	4921      	ldr	r1, [pc, #132]	@ (80015bc <main+0x244>)
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3310      	adds	r3, #16
 8001544:	edd3 5a00 	vldr	s11, [r3]
			  MotorRcv.motor[i].torque,
			  MotorRcv.motor[i].position,
			  MotorRcv.motor[i].speed,
			  MotorRcv.motor[i].kp,
			  MotorRcv.motor[i].kd,
			  motor_map_upper_body[i].canbus,
 8001548:	491e      	ldr	r1, [pc, #120]	@ (80015c4 <main+0x24c>)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3304      	adds	r3, #4
 8001558:	6819      	ldr	r1, [r3, #0]
			  motor_map_upper_body[i].cfg
 800155a:	4c1a      	ldr	r4, [pc, #104]	@ (80015c4 <main+0x24c>)
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4423      	add	r3, r4
 8001568:	3308      	adds	r3, #8
 800156a:	681b      	ldr	r3, [r3, #0]
		  MotorReceiveCommand(
 800156c:	461a      	mov	r2, r3
 800156e:	eeb0 2a65 	vmov.f32	s4, s11
 8001572:	eef0 1a46 	vmov.f32	s3, s12
 8001576:	eeb0 1a66 	vmov.f32	s2, s13
 800157a:	eef0 0a47 	vmov.f32	s1, s14
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	f000 fb3f 	bl	8001c04 <MotorReceiveCommand>
	  for (int i = 0; i < 11; i++) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3301      	adds	r3, #1
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b0a      	cmp	r3, #10
 8001590:	dda1      	ble.n	80014d6 <main+0x15e>
  {
 8001592:	e782      	b.n	800149a <main+0x122>
		  );
	  }
  }
  /* USER CODE END 3 */
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	e000ed00 	.word	0xe000ed00
 80015a0:	24004bb8 	.word	0x24004bb8
 80015a4:	24004c58 	.word	0x24004c58
 80015a8:	24004cf8 	.word	0x24004cf8
 80015ac:	24004e00 	.word	0x24004e00
 80015b0:	24005314 	.word	0x24005314
 80015b4:	24005058 	.word	0x24005058
 80015b8:	2400505c 	.word	0x2400505c
 80015bc:	24004f78 	.word	0x24004f78
 80015c0:	24004e4c 	.word	0x24004e4c
 80015c4:	0801c154 	.word	0x0801c154

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b09c      	sub	sp, #112	@ 0x70
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d2:	224c      	movs	r2, #76	@ 0x4c
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f014 fe50 	bl	801627c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2220      	movs	r2, #32
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f014 fe4a 	bl	801627c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015e8:	2002      	movs	r0, #2
 80015ea:	f004 fc55 	bl	8005e98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <SystemClock_Config+0xd8>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	4a2a      	ldr	r2, [pc, #168]	@ (80016a0 <SystemClock_Config+0xd8>)
 80015f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015fc:	6193      	str	r3, [r2, #24]
 80015fe:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <SystemClock_Config+0xd8>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800160a:	bf00      	nop
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <SystemClock_Config+0xd8>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001618:	d1f8      	bne.n	800160c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800161a:	2301      	movs	r3, #1
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800161e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001628:	2302      	movs	r3, #2
 800162a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800162c:	2301      	movs	r3, #1
 800162e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8001630:	2344      	movs	r3, #68	@ 0x44
 8001632:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001634:	2301      	movs	r3, #1
 8001636:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 11;
 8001638:	230b      	movs	r3, #11
 800163a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800163c:	2302      	movs	r3, #2
 800163e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001640:	230c      	movs	r3, #12
 8001642:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001644:	2300      	movs	r3, #0
 8001646:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001648:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800164c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001652:	4618      	mov	r0, r3
 8001654:	f004 fc5a 	bl	8005f0c <HAL_RCC_OscConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800165e:	f000 f96a 	bl	8001936 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	233f      	movs	r3, #63	@ 0x3f
 8001664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001666:	2303      	movs	r3, #3
 8001668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800166e:	2308      	movs	r3, #8
 8001670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001672:	2340      	movs	r3, #64	@ 0x40
 8001674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001676:	2340      	movs	r3, #64	@ 0x40
 8001678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800167a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800167e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001680:	2340      	movs	r3, #64	@ 0x40
 8001682:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2103      	movs	r1, #3
 8001688:	4618      	mov	r0, r3
 800168a:	f005 f819 	bl	80066c0 <HAL_RCC_ClockConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001694:	f000 f94f 	bl	8001936 <Error_Handler>
  }
}
 8001698:	bf00      	nop
 800169a:	3770      	adds	r7, #112	@ 0x70
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	58024800 	.word	0x58024800

080016a4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d07c      	beq.n	80017b2 <HAL_FDCAN_RxFifo0Callback+0x10e>
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 80016b8:	e074      	b.n	80017a4 <HAL_FDCAN_RxFifo0Callback+0x100>
            if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80016ba:	4b40      	ldr	r3, [pc, #256]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x118>)
 80016bc:	4a40      	ldr	r2, [pc, #256]	@ (80017c0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 80016be:	2140      	movs	r1, #64	@ 0x40
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f003 f9b7 	bl	8004a34 <HAL_FDCAN_GetRxMessage>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_FDCAN_RxFifo0Callback+0x2c>
                Error_Handler();
 80016cc:	f000 f933 	bl	8001936 <Error_Handler>
            }

            if (hfdcan->Instance == FDCAN1) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a3b      	ldr	r2, [pc, #236]	@ (80017c4 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d12a      	bne.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x8c>
                uint8_t canid = decode_can_id(RxHeader.Identifier);
 80016da:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fbe6 	bl	8001eb0 <decode_can_id>
 80016e4:	4603      	mov	r3, r0
 80016e6:	73fb      	strb	r3, [r7, #15]
                switch(canid){
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	3b0f      	subs	r3, #15
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d81f      	bhi.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x8c>
 80016f0:	a201      	add	r2, pc, #4	@ (adr r2, 80016f8 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	08001709 	.word	0x08001709
 80016fc:	08001713 	.word	0x08001713
 8001700:	0800171d 	.word	0x0800171d
 8001704:	08001727 	.word	0x08001727
                case MOTOR_15:
					MotorResponse(RxData, MOTOR_15);
 8001708:	210f      	movs	r1, #15
 800170a:	482c      	ldr	r0, [pc, #176]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x118>)
 800170c:	f000 fb38 	bl	8001d80 <MotorResponse>
                	break;
 8001710:	e00e      	b.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x8c>
                case MOTOR_16:
                    MotorResponse(RxData, MOTOR_16);
 8001712:	2110      	movs	r1, #16
 8001714:	4829      	ldr	r0, [pc, #164]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x118>)
 8001716:	f000 fb33 	bl	8001d80 <MotorResponse>
                	break;
 800171a:	e009      	b.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x8c>
                case MOTOR_17:
                    MotorResponse(RxData, MOTOR_17);
 800171c:	2111      	movs	r1, #17
 800171e:	4827      	ldr	r0, [pc, #156]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x118>)
 8001720:	f000 fb2e 	bl	8001d80 <MotorResponse>
                	break;
 8001724:	e004      	b.n	8001730 <HAL_FDCAN_RxFifo0Callback+0x8c>
                case MOTOR_18:
                    MotorResponse(RxData, MOTOR_18);
 8001726:	2112      	movs	r1, #18
 8001728:	4824      	ldr	r0, [pc, #144]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x118>)
 800172a:	f000 fb29 	bl	8001d80 <MotorResponse>
                	break;
 800172e:	bf00      	nop

                }

            }
            if (hfdcan->Instance == FDCAN3) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a24      	ldr	r2, [pc, #144]	@ (80017c8 <HAL_FDCAN_RxFifo0Callback+0x124>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d12a      	bne.n	8001790 <HAL_FDCAN_RxFifo0Callback+0xec>
                uint8_t canid = decode_can_id(RxHeader.Identifier);
 800173a:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fbb6 	bl	8001eb0 <decode_can_id>
 8001744:	4603      	mov	r3, r0
 8001746:	73bb      	strb	r3, [r7, #14]
                switch(canid){
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	3b14      	subs	r3, #20
 800174c:	2b03      	cmp	r3, #3
 800174e:	d81f      	bhi.n	8001790 <HAL_FDCAN_RxFifo0Callback+0xec>
 8001750:	a201      	add	r2, pc, #4	@ (adr r2, 8001758 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001756:	bf00      	nop
 8001758:	08001769 	.word	0x08001769
 800175c:	08001773 	.word	0x08001773
 8001760:	0800177d 	.word	0x0800177d
 8001764:	08001787 	.word	0x08001787
                case MOTOR_20:
					MotorResponse(RxData, MOTOR_20);
 8001768:	2114      	movs	r1, #20
 800176a:	4814      	ldr	r0, [pc, #80]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x118>)
 800176c:	f000 fb08 	bl	8001d80 <MotorResponse>
                	break;
 8001770:	e00e      	b.n	8001790 <HAL_FDCAN_RxFifo0Callback+0xec>
                case MOTOR_21:
                    MotorResponse(RxData, MOTOR_21);
 8001772:	2115      	movs	r1, #21
 8001774:	4811      	ldr	r0, [pc, #68]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x118>)
 8001776:	f000 fb03 	bl	8001d80 <MotorResponse>
                	break;
 800177a:	e009      	b.n	8001790 <HAL_FDCAN_RxFifo0Callback+0xec>
                case MOTOR_22:
                    MotorResponse(RxData, MOTOR_22);
 800177c:	2116      	movs	r1, #22
 800177e:	480f      	ldr	r0, [pc, #60]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x118>)
 8001780:	f000 fafe 	bl	8001d80 <MotorResponse>
                	break;
 8001784:	e004      	b.n	8001790 <HAL_FDCAN_RxFifo0Callback+0xec>
                case MOTOR_23:
                    MotorResponse(RxData, MOTOR_23);
 8001786:	2117      	movs	r1, #23
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x118>)
 800178a:	f000 faf9 	bl	8001d80 <MotorResponse>
                	break;
 800178e:	bf00      	nop

                }

            }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8001790:	2200      	movs	r2, #0
 8001792:	2101      	movs	r1, #1
 8001794:	480d      	ldr	r0, [pc, #52]	@ (80017cc <HAL_FDCAN_RxFifo0Callback+0x128>)
 8001796:	f003 fae9 	bl	8004d6c <HAL_FDCAN_ActivateNotification>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_FDCAN_RxFifo0Callback+0x100>
          			0) != HAL_OK) {
          		/* Notification Error */
          		Error_Handler();
 80017a0:	f000 f8c9 	bl	8001936 <Error_Handler>
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 80017a4:	2140      	movs	r1, #64	@ 0x40
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f003 fab0 	bl	8004d0c <HAL_FDCAN_GetRxFifoFillLevel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d183      	bne.n	80016ba <HAL_FDCAN_RxFifo0Callback+0x16>
          	}


        }
    }
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	24004df8 	.word	0x24004df8
 80017c0:	24004e24 	.word	0x24004e24
 80017c4:	4000a000 	.word	0x4000a000
 80017c8:	4000d400 	.word	0x4000d400
 80017cc:	24004bb8 	.word	0x24004bb8

080017d0 <HAL_FDCAN_RxFifo1Callback>:
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET) {
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d039      	beq.n	8001858 <HAL_FDCAN_RxFifo1Callback+0x88>
            if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK) {
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <HAL_FDCAN_RxFifo1Callback+0x90>)
 80017e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001864 <HAL_FDCAN_RxFifo1Callback+0x94>)
 80017e8:	2141      	movs	r1, #65	@ 0x41
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f003 f922 	bl	8004a34 <HAL_FDCAN_GetRxMessage>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_FDCAN_RxFifo1Callback+0x2a>
                Error_Handler();
 80017f6:	f000 f89e 	bl	8001936 <Error_Handler>
            }

            if (hfdcan->Instance == FDCAN2) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <HAL_FDCAN_RxFifo1Callback+0x98>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d129      	bne.n	8001858 <HAL_FDCAN_RxFifo1Callback+0x88>
                uint8_t canid = decode_can_id(RxHeader.Identifier);
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <HAL_FDCAN_RxFifo1Callback+0x94>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fb51 	bl	8001eb0 <decode_can_id>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]
                switch(canid){
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b13      	cmp	r3, #19
 8001816:	d010      	beq.n	800183a <HAL_FDCAN_RxFifo1Callback+0x6a>
 8001818:	2b13      	cmp	r3, #19
 800181a:	dc13      	bgt.n	8001844 <HAL_FDCAN_RxFifo1Callback+0x74>
 800181c:	2b0d      	cmp	r3, #13
 800181e:	d002      	beq.n	8001826 <HAL_FDCAN_RxFifo1Callback+0x56>
 8001820:	2b0e      	cmp	r3, #14
 8001822:	d005      	beq.n	8001830 <HAL_FDCAN_RxFifo1Callback+0x60>
 8001824:	e00e      	b.n	8001844 <HAL_FDCAN_RxFifo1Callback+0x74>
                case MOTOR_13:
					MotorResponse(RxData, MOTOR_13);
 8001826:	210d      	movs	r1, #13
 8001828:	480d      	ldr	r0, [pc, #52]	@ (8001860 <HAL_FDCAN_RxFifo1Callback+0x90>)
 800182a:	f000 faa9 	bl	8001d80 <MotorResponse>
                	break;
 800182e:	e009      	b.n	8001844 <HAL_FDCAN_RxFifo1Callback+0x74>
                case MOTOR_14:
					MotorResponse(RxData, MOTOR_14);
 8001830:	210e      	movs	r1, #14
 8001832:	480b      	ldr	r0, [pc, #44]	@ (8001860 <HAL_FDCAN_RxFifo1Callback+0x90>)
 8001834:	f000 faa4 	bl	8001d80 <MotorResponse>
                	break;
 8001838:	e004      	b.n	8001844 <HAL_FDCAN_RxFifo1Callback+0x74>

			    case MOTOR_19:
					MotorResponse(RxData, MOTOR_19);
 800183a:	2113      	movs	r1, #19
 800183c:	4808      	ldr	r0, [pc, #32]	@ (8001860 <HAL_FDCAN_RxFifo1Callback+0x90>)
 800183e:	f000 fa9f 	bl	8001d80 <MotorResponse>
				     break;
 8001842:	bf00      	nop

            }
            if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE,
 8001844:	2200      	movs	r2, #0
 8001846:	2110      	movs	r1, #16
 8001848:	4808      	ldr	r0, [pc, #32]	@ (800186c <HAL_FDCAN_RxFifo1Callback+0x9c>)
 800184a:	f003 fa8f 	bl	8004d6c <HAL_FDCAN_ActivateNotification>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_FDCAN_RxFifo1Callback+0x88>
          			0) != HAL_OK) {
          		/* Notification Error */
          		Error_Handler();
 8001854:	f000 f86f 	bl	8001936 <Error_Handler>
            }
            }

    }
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24004df8 	.word	0x24004df8
 8001864:	24004e24 	.word	0x24004e24
 8001868:	4000a400 	.word	0x4000a400
 800186c:	24004c58 	.word	0x24004c58

08001870 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001876:	463b      	mov	r3, r7
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001882:	f001 f99f 	bl	8002bc4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001886:	2301      	movs	r3, #1
 8001888:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800188a:	2300      	movs	r3, #0
 800188c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001892:	231f      	movs	r3, #31
 8001894:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001896:	2387      	movs	r3, #135	@ 0x87
 8001898:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800189a:	2300      	movs	r3, #0
 800189c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800189e:	2300      	movs	r3, #0
 80018a0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80018a2:	2301      	movs	r3, #1
 80018a4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018a6:	2301      	movs	r3, #1
 80018a8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018b2:	463b      	mov	r3, r7
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 f9bd 	bl	8002c34 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80018be:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80018c2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 80018c4:	2309      	movs	r3, #9
 80018c6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80018cc:	2303      	movs	r3, #3
 80018ce:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018dc:	463b      	mov	r3, r7
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 f9a8 	bl	8002c34 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80018e4:	2302      	movs	r3, #2
 80018e6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30004000;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <MPU_Config+0xa4>)
 80018ea:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80018ec:	230d      	movs	r3, #13
 80018ee:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018fc:	463b      	mov	r3, r7
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 f998 	bl	8002c34 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001904:	2004      	movs	r0, #4
 8001906:	f001 f975 	bl	8002bf4 <HAL_MPU_Enable>

}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	30004000 	.word	0x30004000

08001918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001928:	d101      	bne.n	800192e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800192a:	f001 f837 	bl	800299c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800193a:	b672      	cpsid	i
}
 800193c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193e:	bf00      	nop
 8001940:	e7fd      	b.n	800193e <Error_Handler+0x8>

08001942 <encode_can_id>:
const int can2_ids_bus[3] = {MOTOR_13, MOTOR_14, MOTOR_19};
const int can1_ids_bus[4] = {MOTOR_15,MOTOR_16,MOTOR_17,MOTOR_18};
const int can1_count = sizeof(can1_ids_bus) / sizeof(can1_ids_bus[0]);
const int can2_count = sizeof(can2_ids_bus) / sizeof(can2_ids_bus[0]);
const int can3_count = sizeof(can3_ids_bus) / sizeof(can3_ids_bus[0]);
uint32_t encode_can_id(CanId id) {
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
	return ((id.reserved & 0x07) << 29) | ((id.mode & 0x1F) << 24)
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	075a      	lsls	r2, r3, #29
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800195a:	b2db      	uxtb	r3, r3
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	f003 53f8 	and.w	r3, r3, #520093696	@ 0x1f000000
 8001962:	431a      	orrs	r2, r3
			| ((id.data & 0xFFFF) << 8) | ((id.targetMotorCanId & 0xFF));
 8001964:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 8001968:	b29b      	uxth	r3, r3
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	4313      	orrs	r3, r2
 800196e:	793a      	ldrb	r2, [r7, #4]
 8001970:	4313      	orrs	r3, r2
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <float_to_uint>:

int float_to_uint(float x, float x_min, float x_max, int bits) {
 800197e:	b480      	push	{r7}
 8001980:	b087      	sub	sp, #28
 8001982:	af00      	add	r7, sp, #0
 8001984:	ed87 0a03 	vstr	s0, [r7, #12]
 8001988:	edc7 0a02 	vstr	s1, [r7, #8]
 800198c:	ed87 1a01 	vstr	s2, [r7, #4]
 8001990:	6038      	str	r0, [r7, #0]
	float span = x_max - x_min;
 8001992:	ed97 7a01 	vldr	s14, [r7, #4]
 8001996:	edd7 7a02 	vldr	s15, [r7, #8]
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	edc7 7a05 	vstr	s15, [r7, #20]
	float offset = x_min;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	613b      	str	r3, [r7, #16]

	if (x > x_max)
 80019a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	dd02      	ble.n	80019be <float_to_uint+0x40>
		x = x_max;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e00a      	b.n	80019d4 <float_to_uint+0x56>
	else if (x < x_min)
 80019be:	ed97 7a03 	vldr	s14, [r7, #12]
 80019c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	d501      	bpl.n	80019d4 <float_to_uint+0x56>
		x = x_min;
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60fb      	str	r3, [r7, #12]
	return (int) ((x - offset) * ((float) ((1 << bits) - 1)) / span);
 80019d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80019d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e0:	2201      	movs	r2, #1
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	3b01      	subs	r3, #1
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80019fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a02:	ee17 3a90 	vmov	r3, s15
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <uint_to_float>:
float uint_to_float(uint16_t x, float x_min, float x_max, int bits) {
 8001a12:	b480      	push	{r7}
 8001a14:	b087      	sub	sp, #28
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a1e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
 8001a24:	81fb      	strh	r3, [r7, #14]
	float span = x_max - x_min;
 8001a26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a32:	edc7 7a05 	vstr	s15, [r7, #20]
	return x_min + (x * span) / ((1 << bits) - 1);
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a44:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a48:	2201      	movs	r2, #1
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a62:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001a66:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <CAN_Transmit_1>:
void CAN_Transmit_1() {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
//	if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData)
 8001a78:	4a03      	ldr	r2, [pc, #12]	@ (8001a88 <CAN_Transmit_1+0x14>)
 8001a7a:	4904      	ldr	r1, [pc, #16]	@ (8001a8c <CAN_Transmit_1+0x18>)
 8001a7c:	4804      	ldr	r0, [pc, #16]	@ (8001a90 <CAN_Transmit_1+0x1c>)
 8001a7e:	f002 ff7e 	bl	800497e <HAL_FDCAN_AddMessageToTxFifoQ>
				!= HAL_OK) {
			//Error_Handler();
		}
//	}
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	24004df0 	.word	0x24004df0
 8001a8c:	24004e00 	.word	0x24004e00
 8001a90:	24004bb8 	.word	0x24004bb8

08001a94 <CAN_Transmit_2>:
void CAN_Transmit_2() {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) > 0) {
 8001a98:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <CAN_Transmit_2+0x20>)
 8001a9a:	f003 f955 	bl	8004d48 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <CAN_Transmit_2+0x1a>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, TxData)
 8001aa4:	4a04      	ldr	r2, [pc, #16]	@ (8001ab8 <CAN_Transmit_2+0x24>)
 8001aa6:	4905      	ldr	r1, [pc, #20]	@ (8001abc <CAN_Transmit_2+0x28>)
 8001aa8:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <CAN_Transmit_2+0x20>)
 8001aaa:	f002 ff68 	bl	800497e <HAL_FDCAN_AddMessageToTxFifoQ>
				!= HAL_OK) {
			//Error_Handler();
		}
	}
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	24004c58 	.word	0x24004c58
 8001ab8:	24004df0 	.word	0x24004df0
 8001abc:	24004e00 	.word	0x24004e00

08001ac0 <CAN_Transmit_3>:
void CAN_Transmit_3() {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan3) > 0) {
 8001ac4:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <CAN_Transmit_3+0x20>)
 8001ac6:	f003 f93f 	bl	8004d48 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <CAN_Transmit_3+0x1a>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader, TxData)
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <CAN_Transmit_3+0x24>)
 8001ad2:	4905      	ldr	r1, [pc, #20]	@ (8001ae8 <CAN_Transmit_3+0x28>)
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <CAN_Transmit_3+0x20>)
 8001ad6:	f002 ff52 	bl	800497e <HAL_FDCAN_AddMessageToTxFifoQ>
				!= HAL_OK) {
			//Error_Handler();
		}
	}
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	24004cf8 	.word	0x24004cf8
 8001ae4:	24004df0 	.word	0x24004df0
 8001ae8:	24004e00 	.word	0x24004e00

08001aec <EnableMotorX>:

//////////////////
void EnableMotorX(uint16_t motor_can_id, uint8_t bus){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	460a      	mov	r2, r1
 8001af6:	80fb      	strh	r3, [r7, #6]
 8001af8:	4613      	mov	r3, r2
 8001afa:	717b      	strb	r3, [r7, #5]
	CanId canid;
	canid.data = 0x00;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f36f 2317 	bfc	r3, #8, #16
 8001b02:	60fb      	str	r3, [r7, #12]
	canid.mode = MOTOR_ENABLE_MODE;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2203      	movs	r2, #3
 8001b08:	f362 0304 	bfi	r3, r2, #0, #5
 8001b0c:	73fb      	strb	r3, [r7, #15]
	canid.targetMotorCanId = motor_can_id;
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	733b      	strb	r3, [r7, #12]
	canid.reserved = 0x00;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8001b1a:	73fb      	strb	r3, [r7, #15]

	for(int i = 0; i < 8; i++){
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e007      	b.n	8001b32 <EnableMotorX+0x46>
		TxData[i] = 0;
 8001b22:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <EnableMotorX+0x80>)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	4413      	add	r3, r2
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b07      	cmp	r3, #7
 8001b36:	ddf4      	ble.n	8001b22 <EnableMotorX+0x36>
	}
	uint32_t fullcanid = encode_can_id(canid);
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f7ff ff02 	bl	8001942 <encode_can_id>
 8001b3e:	6138      	str	r0, [r7, #16]
	TxHeader.Identifier = fullcanid;
 8001b40:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <EnableMotorX+0x84>)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	6013      	str	r3, [r2, #0]

	if(bus == CANBUS_1){
 8001b46:	797b      	ldrb	r3, [r7, #5]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <EnableMotorX+0x64>
		CAN_Transmit_1();
 8001b4c:	f7ff ff92 	bl	8001a74 <CAN_Transmit_1>

	}
	if(bus == CANBUS_2){
 8001b50:	797b      	ldrb	r3, [r7, #5]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d101      	bne.n	8001b5a <EnableMotorX+0x6e>
		CAN_Transmit_2();
 8001b56:	f7ff ff9d 	bl	8001a94 <CAN_Transmit_2>

	}
	if(bus == CANBUS_3){
 8001b5a:	797b      	ldrb	r3, [r7, #5]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d101      	bne.n	8001b64 <EnableMotorX+0x78>
		CAN_Transmit_3();
 8001b60:	f7ff ffae 	bl	8001ac0 <CAN_Transmit_3>
	}

}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	24004df0 	.word	0x24004df0
 8001b70:	24004e00 	.word	0x24004e00

08001b74 <EnableAllMotor>:
/*
 * For unit test
 */
void EnableAllMotor(){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
    for (int i = 0; i < can1_count; i++) {
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e00b      	b.n	8001b98 <EnableAllMotor+0x24>
    	EnableMotorX(can1_ids_bus[i], CANBUS_1);
 8001b80:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf8 <EnableAllMotor+0x84>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ffad 	bl	8001aec <EnableMotorX>
    for (int i = 0; i < can1_count; i++) {
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	2204      	movs	r2, #4
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	dbef      	blt.n	8001b80 <EnableAllMotor+0xc>
    }
    for (int i = 0; i < can2_count; i++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	e00b      	b.n	8001bbe <EnableAllMotor+0x4a>
    	EnableMotorX(can2_ids_bus[i], CANBUS_2);
 8001ba6:	4a15      	ldr	r2, [pc, #84]	@ (8001bfc <EnableAllMotor+0x88>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff9a 	bl	8001aec <EnableMotorX>
    for (int i = 0; i < can2_count; i++) {
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	dbef      	blt.n	8001ba6 <EnableAllMotor+0x32>
    }
    for (int i = 0; i < can3_count; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	e00b      	b.n	8001be4 <EnableAllMotor+0x70>
    	EnableMotorX(can3_ids_bus[i], CANBUS_3);
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c00 <EnableAllMotor+0x8c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2103      	movs	r1, #3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff87 	bl	8001aec <EnableMotorX>
    for (int i = 0; i < can3_count; i++) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3301      	adds	r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	2204      	movs	r2, #4
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4293      	cmp	r3, r2
 8001bea:	dbef      	blt.n	8001bcc <EnableAllMotor+0x58>
    }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	0801c1f4 	.word	0x0801c1f4
 8001bfc:	0801c1e8 	.word	0x0801c1e8
 8001c00:	0801c1d8 	.word	0x0801c1d8

08001c04 <MotorReceiveCommand>:
//		CAN_Transmit_3();
//	}
//
//}
void MotorReceiveCommand(uint16_t motor_id, float torque, float position, float speed,
		float kp, float kd, int canbus, const MotorConfig *cfg){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	@ 0x30
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c10:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c14:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c18:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c1c:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c20:	6079      	str	r1, [r7, #4]
 8001c22:	603a      	str	r2, [r7, #0]
 8001c24:	83fb      	strh	r3, [r7, #30]
	CanId canid;
	canid.mode = 1;
 8001c26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f362 0304 	bfi	r3, r2, #0, #5
 8001c30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	canid.data = float_to_uint(torque, cfg->T_MIN, cfg->T_MAX, 16);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c40:	2010      	movs	r0, #16
 8001c42:	eeb0 1a47 	vmov.f32	s2, s14
 8001c46:	eef0 0a67 	vmov.f32	s1, s15
 8001c4a:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c4e:	f7ff fe96 	bl	800197e <float_to_uint>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f8a7 3021 	strh.w	r3, [r7, #33]	@ 0x21
	canid.reserved = 0;
 8001c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c5e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8001c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	canid.targetMotorCanId = motor_id;
 8001c66:	8bfb      	ldrh	r3, [r7, #30]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f887 3020 	strb.w	r3, [r7, #32]

    uint16_t p  = float_to_uint(position, P_MIN, P_MAX, 16);
 8001c6e:	2010      	movs	r0, #16
 8001c70:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 8001d70 <MotorReceiveCommand+0x16c>
 8001c74:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8001d74 <MotorReceiveCommand+0x170>
 8001c78:	ed97 0a05 	vldr	s0, [r7, #20]
 8001c7c:	f7ff fe7f 	bl	800197e <float_to_uint>
 8001c80:	4603      	mov	r3, r0
 8001c82:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t v  = float_to_uint(speed, cfg->V_MIN, cfg->V_MAX, 16);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c90:	2010      	movs	r0, #16
 8001c92:	eeb0 1a47 	vmov.f32	s2, s14
 8001c96:	eef0 0a67 	vmov.f32	s1, s15
 8001c9a:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c9e:	f7ff fe6e 	bl	800197e <float_to_uint>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t Kp = float_to_uint(kp, cfg->KP_MIN, cfg->KP_MAX, 16);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cb2:	2010      	movs	r0, #16
 8001cb4:	eeb0 1a47 	vmov.f32	s2, s14
 8001cb8:	eef0 0a67 	vmov.f32	s1, s15
 8001cbc:	ed97 0a03 	vldr	s0, [r7, #12]
 8001cc0:	f7ff fe5d 	bl	800197e <float_to_uint>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t Kd = float_to_uint(kd, cfg->KD_MIN, cfg->KD_MAX, 16);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	ed93 7a07 	vldr	s14, [r3, #28]
 8001cd4:	2010      	movs	r0, #16
 8001cd6:	eeb0 1a47 	vmov.f32	s2, s14
 8001cda:	eef0 0a67 	vmov.f32	s1, s15
 8001cde:	ed97 0a02 	vldr	s0, [r7, #8]
 8001ce2:	f7ff fe4c 	bl	800197e <float_to_uint>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	853b      	strh	r3, [r7, #40]	@ 0x28
    TxData[0] = (p >> 8) & 0xFF;
 8001cea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <MotorReceiveCommand+0x174>)
 8001cf4:	701a      	strb	r2, [r3, #0]
    TxData[1] = p & 0xFF;
 8001cf6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <MotorReceiveCommand+0x174>)
 8001cfc:	705a      	strb	r2, [r3, #1]
    TxData[2] = (v >> 8) & 0xFF;
 8001cfe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <MotorReceiveCommand+0x174>)
 8001d08:	709a      	strb	r2, [r3, #2]
    TxData[3] = v & 0xFF;
 8001d0a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <MotorReceiveCommand+0x174>)
 8001d10:	70da      	strb	r2, [r3, #3]
    TxData[4] = (Kp >> 8) & 0xFF;
 8001d12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <MotorReceiveCommand+0x174>)
 8001d1c:	711a      	strb	r2, [r3, #4]
    TxData[5] = Kp & 0xFF;
 8001d1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <MotorReceiveCommand+0x174>)
 8001d24:	715a      	strb	r2, [r3, #5]
    TxData[6] = (Kd >> 8) & 0xFF;
 8001d26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <MotorReceiveCommand+0x174>)
 8001d30:	719a      	strb	r2, [r3, #6]
    TxData[7] = Kd & 0xFF;
 8001d32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <MotorReceiveCommand+0x174>)
 8001d38:	71da      	strb	r2, [r3, #7]
	uint32_t fullcanid = encode_can_id(canid);
 8001d3a:	6a38      	ldr	r0, [r7, #32]
 8001d3c:	f7ff fe01 	bl	8001942 <encode_can_id>
 8001d40:	6278      	str	r0, [r7, #36]	@ 0x24
	TxHeader.Identifier = fullcanid;
 8001d42:	4a0e      	ldr	r2, [pc, #56]	@ (8001d7c <MotorReceiveCommand+0x178>)
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	6013      	str	r3, [r2, #0]

	if(canbus == CANBUS_1){
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <MotorReceiveCommand+0x14e>
		CAN_Transmit_1();
 8001d4e:	f7ff fe91 	bl	8001a74 <CAN_Transmit_1>

	}
	if(canbus == CANBUS_2){
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d101      	bne.n	8001d5c <MotorReceiveCommand+0x158>
		CAN_Transmit_2();
 8001d58:	f7ff fe9c 	bl	8001a94 <CAN_Transmit_2>

	}
	if(canbus == CANBUS_3){
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d101      	bne.n	8001d66 <MotorReceiveCommand+0x162>
		CAN_Transmit_3();
 8001d62:	f7ff fead 	bl	8001ac0 <CAN_Transmit_3>
	}

}
 8001d66:	bf00      	nop
 8001d68:	3730      	adds	r7, #48	@ 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	41491eb8 	.word	0x41491eb8
 8001d74:	c1491eb8 	.word	0xc1491eb8
 8001d78:	24004df0 	.word	0x24004df0
 8001d7c:	24004e00 	.word	0x24004e00

08001d80 <MotorResponse>:

	CAN_Transmit_1();

}

void MotorResponse(uint8_t RxData[8], int motor_can_id){
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	uint16_t currentAngle = (RxData[0] << 8) | RxData[1];
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	81fb      	strh	r3, [r7, #14]
	uint16_t currentSpeed = (RxData[2] << 8) | RxData[3];
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3302      	adds	r3, #2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3303      	adds	r3, #3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	81bb      	strh	r3, [r7, #12]
	uint16_t currentTorque = (RxData[4] << 8) | RxData[5];
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3305      	adds	r3, #5
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	817b      	strh	r3, [r7, #10]
	uint16_t currentTemperature = (RxData[6] << 8) | RxData[7];
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3306      	adds	r3, #6
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	b21a      	sxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3307      	adds	r3, #7
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	813b      	strh	r3, [r7, #8]

	AngleCurrent[motor_can_id - 1] = uint_to_float(currentAngle, P_MIN, P_MAX, 16);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	1e5c      	subs	r4, r3, #1
 8001df4:	89fb      	ldrh	r3, [r7, #14]
 8001df6:	2110      	movs	r1, #16
 8001df8:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001e90 <MotorResponse+0x110>
 8001dfc:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001e94 <MotorResponse+0x114>
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fe06 	bl	8001a12 <uint_to_float>
 8001e06:	eef0 7a40 	vmov.f32	s15, s0
 8001e0a:	4a23      	ldr	r2, [pc, #140]	@ (8001e98 <MotorResponse+0x118>)
 8001e0c:	00a3      	lsls	r3, r4, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	edc3 7a00 	vstr	s15, [r3]
	SpeedCurrent[motor_can_id - 1] = uint_to_float(currentSpeed, V_MIN_03, V_MAX_03, 16);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	1e5c      	subs	r4, r3, #1
 8001e18:	89bb      	ldrh	r3, [r7, #12]
 8001e1a:	2110      	movs	r1, #16
 8001e1c:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001e20:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fdf4 	bl	8001a12 <uint_to_float>
 8001e2a:	eef0 7a40 	vmov.f32	s15, s0
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <MotorResponse+0x11c>)
 8001e30:	00a3      	lsls	r3, r4, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	edc3 7a00 	vstr	s15, [r3]
	TorqueCurrent[motor_can_id - 1] = uint_to_float(currentTorque, T_MIN_03, T_MAX_03, 16);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	1e5c      	subs	r4, r3, #1
 8001e3c:	897b      	ldrh	r3, [r7, #10]
 8001e3e:	2110      	movs	r1, #16
 8001e40:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8001ea0 <MotorResponse+0x120>
 8001e44:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001ea4 <MotorResponse+0x124>
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fde2 	bl	8001a12 <uint_to_float>
 8001e4e:	eef0 7a40 	vmov.f32	s15, s0
 8001e52:	4a15      	ldr	r2, [pc, #84]	@ (8001ea8 <MotorResponse+0x128>)
 8001e54:	00a3      	lsls	r3, r4, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	edc3 7a00 	vstr	s15, [r3]
	TempCurrent[motor_can_id - 1] = (currentTemperature) * 0.1;
 8001e5c:	893b      	ldrh	r3, [r7, #8]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e66:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001e88 <MotorResponse+0x108>
 8001e6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e76:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <MotorResponse+0x12c>)
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	edc3 7a00 	vstr	s15, [r3]

}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	9999999a 	.word	0x9999999a
 8001e8c:	3fb99999 	.word	0x3fb99999
 8001e90:	41491eb8 	.word	0x41491eb8
 8001e94:	c1491eb8 	.word	0xc1491eb8
 8001e98:	24005060 	.word	0x24005060
 8001e9c:	240050bc 	.word	0x240050bc
 8001ea0:	42700000 	.word	0x42700000
 8001ea4:	c2700000 	.word	0xc2700000
 8001ea8:	24005118 	.word	0x24005118
 8001eac:	24005174 	.word	0x24005174

08001eb0 <decode_can_id>:
uint8_t decode_can_id(uint32_t can_id) {
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	uint8_t type_of_mode = (can_id >> 24) & 0x1F;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	0e1b      	lsrs	r3, r3, #24
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	73fb      	strb	r3, [r7, #15]
	uint8_t current_motor_id = (can_id >> 8) & 0xFF;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	73bb      	strb	r3, [r7, #14]

	return current_motor_id;
 8001eca:	7bbb      	ldrb	r3, [r7, #14]


}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <HAL_MspInit+0x30>)
 8001ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ee4:	4a08      	ldr	r2, [pc, #32]	@ (8001f08 <HAL_MspInit+0x30>)
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_MspInit+0x30>)
 8001ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	58024400 	.word	0x58024400

08001f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b090      	sub	sp, #64	@ 0x40
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	d827      	bhi.n	8001f6a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	201c      	movs	r0, #28
 8001f20:	f000 fe28 	bl	8002b74 <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f24:	201c      	movs	r0, #28
 8001f26:	f000 fe3f 	bl	8002ba8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001f2a:	4a29      	ldr	r2, [pc, #164]	@ (8001fd0 <HAL_InitTick+0xc4>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001f30:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_InitTick+0xc8>)
 8001f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f36:	4a27      	ldr	r2, [pc, #156]	@ (8001fd4 <HAL_InitTick+0xc8>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f40:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <HAL_InitTick+0xc8>)
 8001f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f4e:	f107 0210 	add.w	r2, r7, #16
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f004 ff3d 	bl	8006dd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f60:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <HAL_InitTick+0x6a>
 8001f68:	e001      	b.n	8001f6e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e02c      	b.n	8001fc8 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f6e:	f004 ff07 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 8001f72:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001f74:	e004      	b.n	8001f80 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f76:	f004 ff03 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f82:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <HAL_InitTick+0xcc>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9b      	lsrs	r3, r3, #18
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001f8e:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <HAL_InitTick+0xd0>)
 8001f90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f94:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_InitTick+0xd0>)
 8001f98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f9c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fdc <HAL_InitTick+0xd0>)
 8001fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fa2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <HAL_InitTick+0xd0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <HAL_InitTick+0xd0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001fb0:	480a      	ldr	r0, [pc, #40]	@ (8001fdc <HAL_InitTick+0xd0>)
 8001fb2:	f006 fd15 	bl	80089e0 <HAL_TIM_Base_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001fbc:	4807      	ldr	r0, [pc, #28]	@ (8001fdc <HAL_InitTick+0xd0>)
 8001fbe:	f006 fd67 	bl	8008a90 <HAL_TIM_Base_Start_IT>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	e000      	b.n	8001fc8 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3740      	adds	r7, #64	@ 0x40
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	24000028 	.word	0x24000028
 8001fd4:	58024400 	.word	0x58024400
 8001fd8:	431bde83 	.word	0x431bde83
 8001fdc:	240051d0 	.word	0x240051d0

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  //NVIC_SystemReset();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <HardFault_Handler+0x4>

08001ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <MemManage_Handler+0x4>

08001ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	 //NVIC_SystemReset();
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <UsageFault_Handler+0x4>

08002008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <FDCAN1_IT0_IRQHandler+0x10>)
 8002046:	f002 ff0b 	bl	8004e60 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	24004bb8 	.word	0x24004bb8

08002054 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <FDCAN2_IT0_IRQHandler+0x10>)
 800205a:	f002 ff01 	bl	8004e60 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	24004c58 	.word	0x24004c58

08002068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <TIM2_IRQHandler+0x10>)
 800206e:	f006 fd95 	bl	8008b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	240051d0 	.word	0x240051d0

0800207c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <I2C1_EV_IRQHandler+0x10>)
 8002082:	f003 fe33 	bl	8005cec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	24004d9c 	.word	0x24004d9c

08002090 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <FDCAN3_IT0_IRQHandler+0x10>)
 8002096:	f002 fee3 	bl	8004e60 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	24004cf8 	.word	0x24004cf8

080020a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_kill>:

int _kill(int pid, int sig)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020be:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <_kill+0x20>)
 80020c0:	2216      	movs	r2, #22
 80020c2:	601a      	str	r2, [r3, #0]
  return -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	24008624 	.word	0x24008624

080020d8 <_exit>:

void _exit (int status)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ffe5 	bl	80020b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ea:	bf00      	nop
 80020ec:	e7fd      	b.n	80020ea <_exit+0x12>

080020ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e00a      	b.n	8002116 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002100:	f3af 8000 	nop.w
 8002104:	4601      	mov	r1, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	60ba      	str	r2, [r7, #8]
 800210c:	b2ca      	uxtb	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3301      	adds	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	dbf0      	blt.n	8002100 <_read+0x12>
  }

  return len;
 800211e:	687b      	ldr	r3, [r7, #4]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	e009      	b.n	800214e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	60ba      	str	r2, [r7, #8]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	dbf1      	blt.n	800213a <_write+0x12>
  }
  return len;
 8002156:	687b      	ldr	r3, [r7, #4]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_close>:

int _close(int file)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002188:	605a      	str	r2, [r3, #4]
  return 0;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_isatty>:

int _isatty(int file)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021a0:	2301      	movs	r3, #1
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d0:	4a14      	ldr	r2, [pc, #80]	@ (8002224 <_sbrk+0x5c>)
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <_sbrk+0x60>)
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021dc:	4b13      	ldr	r3, [pc, #76]	@ (800222c <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <_sbrk+0x64>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <_sbrk+0x68>)
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d205      	bcs.n	8002204 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80021f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <_sbrk+0x6c>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e009      	b.n	8002218 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220a:	4b08      	ldr	r3, [pc, #32]	@ (800222c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4a06      	ldr	r2, [pc, #24]	@ (800222c <_sbrk+0x64>)
 8002214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	24050000 	.word	0x24050000
 8002228:	00000400 	.word	0x00000400
 800222c:	2400521c 	.word	0x2400521c
 8002230:	24008638 	.word	0x24008638
 8002234:	24008624 	.word	0x24008624

08002238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800223c:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <SystemInit+0x100>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	4a3d      	ldr	r2, [pc, #244]	@ (8002338 <SystemInit+0x100>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800224c:	4b3b      	ldr	r3, [pc, #236]	@ (800233c <SystemInit+0x104>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	2b06      	cmp	r3, #6
 8002256:	d807      	bhi.n	8002268 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002258:	4b38      	ldr	r3, [pc, #224]	@ (800233c <SystemInit+0x104>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 030f 	bic.w	r3, r3, #15
 8002260:	4a36      	ldr	r2, [pc, #216]	@ (800233c <SystemInit+0x104>)
 8002262:	f043 0307 	orr.w	r3, r3, #7
 8002266:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002268:	4b35      	ldr	r3, [pc, #212]	@ (8002340 <SystemInit+0x108>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a34      	ldr	r2, [pc, #208]	@ (8002340 <SystemInit+0x108>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002274:	4b32      	ldr	r3, [pc, #200]	@ (8002340 <SystemInit+0x108>)
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800227a:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <SystemInit+0x108>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4930      	ldr	r1, [pc, #192]	@ (8002340 <SystemInit+0x108>)
 8002280:	4b30      	ldr	r3, [pc, #192]	@ (8002344 <SystemInit+0x10c>)
 8002282:	4013      	ands	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002286:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <SystemInit+0x104>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002292:	4b2a      	ldr	r3, [pc, #168]	@ (800233c <SystemInit+0x104>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 030f 	bic.w	r3, r3, #15
 800229a:	4a28      	ldr	r2, [pc, #160]	@ (800233c <SystemInit+0x104>)
 800229c:	f043 0307 	orr.w	r3, r3, #7
 80022a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80022a2:	4b27      	ldr	r3, [pc, #156]	@ (8002340 <SystemInit+0x108>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <SystemInit+0x108>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80022ae:	4b24      	ldr	r3, [pc, #144]	@ (8002340 <SystemInit+0x108>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <SystemInit+0x108>)
 80022b6:	4a24      	ldr	r2, [pc, #144]	@ (8002348 <SystemInit+0x110>)
 80022b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80022ba:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <SystemInit+0x108>)
 80022bc:	4a23      	ldr	r2, [pc, #140]	@ (800234c <SystemInit+0x114>)
 80022be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <SystemInit+0x108>)
 80022c2:	4a23      	ldr	r2, [pc, #140]	@ (8002350 <SystemInit+0x118>)
 80022c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <SystemInit+0x108>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <SystemInit+0x108>)
 80022ce:	4a20      	ldr	r2, [pc, #128]	@ (8002350 <SystemInit+0x118>)
 80022d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <SystemInit+0x108>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022d8:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <SystemInit+0x108>)
 80022da:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <SystemInit+0x118>)
 80022dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022de:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <SystemInit+0x108>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022e4:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <SystemInit+0x108>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a15      	ldr	r2, [pc, #84]	@ (8002340 <SystemInit+0x108>)
 80022ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022f0:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <SystemInit+0x108>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <SystemInit+0x108>)
 80022f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d113      	bne.n	800232c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002304:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <SystemInit+0x108>)
 8002306:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800230a:	4a0d      	ldr	r2, [pc, #52]	@ (8002340 <SystemInit+0x108>)
 800230c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002310:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <SystemInit+0x11c>)
 8002316:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800231a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <SystemInit+0x108>)
 800231e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002322:	4a07      	ldr	r2, [pc, #28]	@ (8002340 <SystemInit+0x108>)
 8002324:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002328:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed00 	.word	0xe000ed00
 800233c:	52002000 	.word	0x52002000
 8002340:	58024400 	.word	0x58024400
 8002344:	eaf6ed7f 	.word	0xeaf6ed7f
 8002348:	02020200 	.word	0x02020200
 800234c:	01ff0000 	.word	0x01ff0000
 8002350:	01010280 	.word	0x01010280
 8002354:	52004000 	.word	0x52004000

08002358 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800235c:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <ExitRun0Mode+0x2c>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a08      	ldr	r2, [pc, #32]	@ (8002384 <ExitRun0Mode+0x2c>)
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002368:	bf00      	nop
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <ExitRun0Mode+0x2c>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f9      	beq.n	800236a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	58024800 	.word	0x58024800

08002388 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023a6:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <MX_TIM1_Init+0xa0>)
 80023a8:	4a20      	ldr	r2, [pc, #128]	@ (800242c <MX_TIM1_Init+0xa4>)
 80023aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <MX_TIM1_Init+0xa0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <MX_TIM1_Init+0xa0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <MX_TIM1_Init+0xa0>)
 80023ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c0:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <MX_TIM1_Init+0xa0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <MX_TIM1_Init+0xa0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <MX_TIM1_Init+0xa0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023d2:	4815      	ldr	r0, [pc, #84]	@ (8002428 <MX_TIM1_Init+0xa0>)
 80023d4:	f006 fb04 	bl	80089e0 <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80023de:	f7ff faaa 	bl	8001936 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	4619      	mov	r1, r3
 80023ee:	480e      	ldr	r0, [pc, #56]	@ (8002428 <MX_TIM1_Init+0xa0>)
 80023f0:	f006 fcdc 	bl	8008dac <HAL_TIM_ConfigClockSource>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80023fa:	f7ff fa9c 	bl	8001936 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	4619      	mov	r1, r3
 800240e:	4806      	ldr	r0, [pc, #24]	@ (8002428 <MX_TIM1_Init+0xa0>)
 8002410:	f006 ff36 	bl	8009280 <HAL_TIMEx_MasterConfigSynchronization>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800241a:	f7ff fa8c 	bl	8001936 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	24005220 	.word	0x24005220
 800242c:	40010000 	.word	0x40010000

08002430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0b      	ldr	r2, [pc, #44]	@ (800246c <HAL_TIM_Base_MspInit+0x3c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002442:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_TIM_Base_MspInit+0x40>)
 8002444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002448:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <HAL_TIM_Base_MspInit+0x40>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <HAL_TIM_Base_MspInit+0x40>)
 8002454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40010000 	.word	0x40010000
 8002470:	58024400 	.word	0x58024400

08002474 <udpServer_init>:
 3. Wait until datagram packet arrives from client.
 4. Process the datagram packet and send a reply to client.
 5. Go back to Step 3.
 */

void udpServer_init(void) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
	// UDP Control Block structure
	//struct udp_pcb *upcb;
	err_t err;

	/* 1. Create a new UDP control block  */
	udpServerPcb = udp_new();
 800247a:	f010 fa81 	bl	8012980 <udp_new>
 800247e:	4603      	mov	r3, r0
 8002480:	4a16      	ldr	r2, [pc, #88]	@ (80024dc <udpServer_init+0x68>)
 8002482:	6013      	str	r3, [r2, #0]

	/* 2. Bind the upcb to the local port */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 10);
 8002484:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <udpServer_init+0x6c>)
 8002486:	60bb      	str	r3, [r7, #8]
	err = udp_bind(udpServerPcb, &myIPADDR, 8888);  // 8888 is the server UDP port
 8002488:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <udpServer_init+0x68>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f107 0108 	add.w	r1, r7, #8
 8002490:	f242 22b8 	movw	r2, #8888	@ 0x22b8
 8002494:	4618      	mov	r0, r3
 8002496:	f010 f989 	bl	80127ac <udp_bind>
 800249a:	4603      	mov	r3, r0
 800249c:	73fb      	strb	r3, [r7, #15]

	ip_addr_t ClientIPADDR;
	IP_ADDR4(&ClientIPADDR, 192, 168, 1, 20);
 800249e:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <udpServer_init+0x70>)
 80024a0:	607b      	str	r3, [r7, #4]
	ip_addr_set(&udpClientAddr, &ClientIPADDR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a10      	ldr	r2, [pc, #64]	@ (80024e8 <udpServer_init+0x74>)
 80024a6:	6013      	str	r3, [r2, #0]
	udpClientPort = 12346;
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <udpServer_init+0x78>)
 80024aa:	f243 023a 	movw	r2, #12346	@ 0x303a
 80024ae:	801a      	strh	r2, [r3, #0]

	/* 3. Set a receive callback for the upcb */
	if (err == ERR_OK) {
 80024b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <udpServer_init+0x54>
		udp_recv(udpServerPcb, udp_receive_callback, NULL);
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <udpServer_init+0x68>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	490c      	ldr	r1, [pc, #48]	@ (80024f0 <udpServer_init+0x7c>)
 80024c0:	4618      	mov	r0, r3
 80024c2:	f010 f9fb 	bl	80128bc <udp_recv>
	} else {
		udp_remove(udpServerPcb);
	}
}
 80024c6:	e004      	b.n	80024d2 <udpServer_init+0x5e>
		udp_remove(udpServerPcb);
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <udpServer_init+0x68>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f010 fa15 	bl	80128fc <udp_remove>
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2400526c 	.word	0x2400526c
 80024e0:	0a01a8c0 	.word	0x0a01a8c0
 80024e4:	1401a8c0 	.word	0x1401a8c0
 80024e8:	24005270 	.word	0x24005270
 80024ec:	24005274 	.word	0x24005274
 80024f0:	080024f5 	.word	0x080024f5

080024f4 <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]

	if (p != NULL) {
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01a      	beq.n	800253e <udp_receive_callback+0x4a>
		last_time_rcv_udp = HAL_GetTick();
 8002508:	f000 fa5c 	bl	80029c4 <HAL_GetTick>
 800250c:	4603      	mov	r3, r0
 800250e:	4a0e      	ldr	r2, [pc, #56]	@ (8002548 <udp_receive_callback+0x54>)
 8002510:	6013      	str	r3, [r2, #0]
		udp_count++;
 8002512:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <udp_receive_callback+0x58>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	3301      	adds	r3, #1
 8002518:	4a0c      	ldr	r2, [pc, #48]	@ (800254c <udp_receive_callback+0x58>)
 800251a:	6013      	str	r3, [r2, #0]
		memcpy(RxUDP, p->payload, p->len);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	895b      	ldrh	r3, [r3, #10]
 8002524:	461a      	mov	r2, r3
 8002526:	480a      	ldr	r0, [pc, #40]	@ (8002550 <udp_receive_callback+0x5c>)
 8002528:	f013 ff39 	bl	801639e <memcpy>
		RxUDP[p->len] = '\0';
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	895b      	ldrh	r3, [r3, #10]
 8002530:	461a      	mov	r2, r3
 8002532:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <udp_receive_callback+0x5c>)
 8002534:	2100      	movs	r1, #0
 8002536:	5499      	strb	r1, [r3, r2]
		pbuf_free(p);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f00a fa45 	bl	800c9c8 <pbuf_free>
//
//        pbuf_free(p);

	}

}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	24005058 	.word	0x24005058
 800254c:	24005278 	.word	0x24005278
 8002550:	24004e4c 	.word	0x24004e4c

08002554 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002558:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 800255a:	4a23      	ldr	r2, [pc, #140]	@ (80025e8 <MX_USART1_UART_Init+0x94>)
 800255c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800255e:	4b21      	ldr	r3, [pc, #132]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 8002560:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002566:	4b1f      	ldr	r3, [pc, #124]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800256c:	4b1d      	ldr	r3, [pc, #116]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002572:	4b1c      	ldr	r3, [pc, #112]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002578:	4b1a      	ldr	r3, [pc, #104]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 800257a:	220c      	movs	r2, #12
 800257c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257e:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002584:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800258a:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002590:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 8002592:	2200      	movs	r2, #0
 8002594:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002596:	4b13      	ldr	r3, [pc, #76]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800259c:	4811      	ldr	r0, [pc, #68]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 800259e:	f006 ff29 	bl	80093f4 <HAL_UART_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80025a8:	f7ff f9c5 	bl	8001936 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ac:	2100      	movs	r1, #0
 80025ae:	480d      	ldr	r0, [pc, #52]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 80025b0:	f008 f835 	bl	800a61e <HAL_UARTEx_SetTxFifoThreshold>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80025ba:	f7ff f9bc 	bl	8001936 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025be:	2100      	movs	r1, #0
 80025c0:	4808      	ldr	r0, [pc, #32]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 80025c2:	f008 f86a 	bl	800a69a <HAL_UARTEx_SetRxFifoThreshold>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80025cc:	f7ff f9b3 	bl	8001936 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025d0:	4804      	ldr	r0, [pc, #16]	@ (80025e4 <MX_USART1_UART_Init+0x90>)
 80025d2:	f007 ffeb 	bl	800a5ac <HAL_UARTEx_DisableFifoMode>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80025dc:	f7ff f9ab 	bl	8001936 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2400527c 	.word	0x2400527c
 80025e8:	40011000 	.word	0x40011000

080025ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b0b8      	sub	sp, #224	@ 0xe0
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	22b8      	movs	r2, #184	@ 0xb8
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f013 fe35 	bl	801627c <memset>
  if(uartHandle->Instance==USART1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a27      	ldr	r2, [pc, #156]	@ (80026b4 <HAL_UART_MspInit+0xc8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d146      	bne.n	80026aa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800261c:	f04f 0201 	mov.w	r2, #1
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800262e:	f107 0310 	add.w	r3, r7, #16
 8002632:	4618      	mov	r0, r3
 8002634:	f004 fc12 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800263e:	f7ff f97a 	bl	8001936 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_UART_MspInit+0xcc>)
 8002644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002648:	4a1b      	ldr	r2, [pc, #108]	@ (80026b8 <HAL_UART_MspInit+0xcc>)
 800264a:	f043 0310 	orr.w	r3, r3, #16
 800264e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002652:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_UART_MspInit+0xcc>)
 8002654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002660:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_UART_MspInit+0xcc>)
 8002662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002666:	4a14      	ldr	r2, [pc, #80]	@ (80026b8 <HAL_UART_MspInit+0xcc>)
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <HAL_UART_MspInit+0xcc>)
 8002672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800267e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002682:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002698:	2304      	movs	r3, #4
 800269a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	@ (80026bc <HAL_UART_MspInit+0xd0>)
 80026a6:	f003 f8dd 	bl	8005864 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026aa:	bf00      	nop
 80026ac:	37e0      	adds	r7, #224	@ 0xe0
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40011000 	.word	0x40011000
 80026b8:	58024400 	.word	0x58024400
 80026bc:	58020400 	.word	0x58020400

080026c0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 80026c0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80026fc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */

  bl  ExitRun0Mode
 80026c4:	f7ff fe48 	bl	8002358 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c8:	f7ff fdb6 	bl	8002238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026cc:	480c      	ldr	r0, [pc, #48]	@ (8002700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ce:	490d      	ldr	r1, [pc, #52]	@ (8002704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d4:	e002      	b.n	80026dc <LoopCopyDataInit>

080026d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026da:	3304      	adds	r3, #4

080026dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e0:	d3f9      	bcc.n	80026d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e2:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e8:	e001      	b.n	80026ee <LoopFillZerobss>

080026ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ec:	3204      	adds	r2, #4

080026ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f0:	d3fb      	bcc.n	80026ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026f2:	f013 fe2d 	bl	8016350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7fe fe3f 	bl	8001378 <main>
  bx  lr
 80026fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002700:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002704:	24000218 	.word	0x24000218
  ldr r2, =_sidata
 8002708:	0801c7c8 	.word	0x0801c7c8
  ldr r2, =_sbss
 800270c:	24004b9c 	.word	0x24004b9c
  ldr r4, =_ebss
 8002710:	24008634 	.word	0x24008634

08002714 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <ADC3_IRQHandler>

08002716 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <LAN8742_RegisterBusIO+0x28>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <LAN8742_RegisterBusIO+0x28>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <LAN8742_RegisterBusIO+0x28>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	e014      	b.n	800276e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d139      	bne.n	800280a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e01c      	b.n	80027ea <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f107 020c 	add.w	r2, r7, #12
 80027b8:	2112      	movs	r1, #18
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	4798      	blx	r3
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	da03      	bge.n	80027cc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80027c4:	f06f 0304 	mvn.w	r3, #4
 80027c8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80027ca:	e00b      	b.n	80027e4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d105      	bne.n	80027e4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
         break;
 80027e2:	e005      	b.n	80027f0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3301      	adds	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b1f      	cmp	r3, #31
 80027ee:	d9df      	bls.n	80027b0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b1f      	cmp	r3, #31
 80027f6:	d902      	bls.n	80027fe <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80027f8:	f06f 0302 	mvn.w	r3, #2
 80027fc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800280a:	693b      	ldr	r3, [r7, #16]
 }
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6810      	ldr	r0, [r2, #0]
 8002828:	f107 020c 	add.w	r2, r7, #12
 800282c:	2101      	movs	r1, #1
 800282e:	4798      	blx	r3
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	da02      	bge.n	800283c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002836:	f06f 0304 	mvn.w	r3, #4
 800283a:	e06e      	b.n	800291a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6810      	ldr	r0, [r2, #0]
 8002844:	f107 020c 	add.w	r2, r7, #12
 8002848:	2101      	movs	r1, #1
 800284a:	4798      	blx	r3
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	da02      	bge.n	8002858 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002852:	f06f 0304 	mvn.w	r3, #4
 8002856:	e060      	b.n	800291a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002862:	2301      	movs	r3, #1
 8002864:	e059      	b.n	800291a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6810      	ldr	r0, [r2, #0]
 800286e:	f107 020c 	add.w	r2, r7, #12
 8002872:	2100      	movs	r1, #0
 8002874:	4798      	blx	r3
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	da02      	bge.n	8002882 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800287c:	f06f 0304 	mvn.w	r3, #4
 8002880:	e04b      	b.n	800291a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d11b      	bne.n	80028c4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <LAN8742_GetLinkState+0x90>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80028a0:	2302      	movs	r3, #2
 80028a2:	e03a      	b.n	800291a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e033      	b.n	800291a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80028bc:	2304      	movs	r3, #4
 80028be:	e02c      	b.n	800291a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80028c0:	2305      	movs	r3, #5
 80028c2:	e02a      	b.n	800291a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6810      	ldr	r0, [r2, #0]
 80028cc:	f107 020c 	add.w	r2, r7, #12
 80028d0:	211f      	movs	r1, #31
 80028d2:	4798      	blx	r3
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da02      	bge.n	80028e0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80028da:	f06f 0304 	mvn.w	r3, #4
 80028de:	e01c      	b.n	800291a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80028ea:	2306      	movs	r3, #6
 80028ec:	e015      	b.n	800291a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 031c 	and.w	r3, r3, #28
 80028f4:	2b18      	cmp	r3, #24
 80028f6:	d101      	bne.n	80028fc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80028f8:	2302      	movs	r3, #2
 80028fa:	e00e      	b.n	800291a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 031c 	and.w	r3, r3, #28
 8002902:	2b08      	cmp	r3, #8
 8002904:	d101      	bne.n	800290a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002906:	2303      	movs	r3, #3
 8002908:	e007      	b.n	800291a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 031c 	and.w	r3, r3, #28
 8002910:	2b14      	cmp	r3, #20
 8002912:	d101      	bne.n	8002918 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002914:	2304      	movs	r3, #4
 8002916:	e000      	b.n	800291a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002918:	2305      	movs	r3, #5
    }
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292a:	2003      	movs	r0, #3
 800292c:	f000 f917 	bl	8002b5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002930:	f004 f87c 	bl	8006a2c <HAL_RCC_GetSysClockFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <HAL_Init+0x68>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	4913      	ldr	r1, [pc, #76]	@ (8002990 <HAL_Init+0x6c>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800294e:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <HAL_Init+0x68>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	4a0e      	ldr	r2, [pc, #56]	@ (8002990 <HAL_Init+0x6c>)
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <HAL_Init+0x70>)
 8002966:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002968:	4a0b      	ldr	r2, [pc, #44]	@ (8002998 <HAL_Init+0x74>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800296e:	200f      	movs	r0, #15
 8002970:	f7ff facc 	bl	8001f0c <HAL_InitTick>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e002      	b.n	8002984 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800297e:	f7ff faab 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	58024400 	.word	0x58024400
 8002990:	0801c204 	.word	0x0801c204
 8002994:	24000024 	.word	0x24000024
 8002998:	24000020 	.word	0x24000020

0800299c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029a0:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_IncTick+0x20>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_IncTick+0x24>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	4a04      	ldr	r2, [pc, #16]	@ (80029c0 <HAL_IncTick+0x24>)
 80029ae:	6013      	str	r3, [r2, #0]
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	2400002c 	.word	0x2400002c
 80029c0:	24005310 	.word	0x24005310

080029c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return uwTick;
 80029c8:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <HAL_GetTick+0x14>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	24005310 	.word	0x24005310

080029dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80029e4:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80029ec:	4904      	ldr	r1, [pc, #16]	@ (8002a00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	58000400 	.word	0x58000400

08002a04 <__NVIC_SetPriorityGrouping>:
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <__NVIC_SetPriorityGrouping+0x40>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a20:	4013      	ands	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a32:	4a04      	ldr	r2, [pc, #16]	@ (8002a44 <__NVIC_SetPriorityGrouping+0x40>)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	60d3      	str	r3, [r2, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00
 8002a48:	05fa0000 	.word	0x05fa0000

08002a4c <__NVIC_GetPriorityGrouping>:
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a50:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <__NVIC_GetPriorityGrouping+0x18>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 0307 	and.w	r3, r3, #7
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_EnableIRQ>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0b      	blt.n	8002a92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4907      	ldr	r1, [pc, #28]	@ (8002aa0 <__NVIC_EnableIRQ+0x38>)
 8002a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000e100 	.word	0xe000e100

08002aa4 <__NVIC_SetPriority>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	db0a      	blt.n	8002ace <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	490c      	ldr	r1, [pc, #48]	@ (8002af0 <__NVIC_SetPriority+0x4c>)
 8002abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002acc:	e00a      	b.n	8002ae4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4908      	ldr	r1, [pc, #32]	@ (8002af4 <__NVIC_SetPriority+0x50>)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	3b04      	subs	r3, #4
 8002adc:	0112      	lsls	r2, r2, #4
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	761a      	strb	r2, [r3, #24]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000e100 	.word	0xe000e100
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <NVIC_EncodePriority>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f1c3 0307 	rsb	r3, r3, #7
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	bf28      	it	cs
 8002b16:	2304      	movcs	r3, #4
 8002b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d902      	bls.n	8002b28 <NVIC_EncodePriority+0x30>
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3b03      	subs	r3, #3
 8002b26:	e000      	b.n	8002b2a <NVIC_EncodePriority+0x32>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b40:	f04f 31ff 	mov.w	r1, #4294967295
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	43d9      	mvns	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	4313      	orrs	r3, r2
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3724      	adds	r7, #36	@ 0x24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ff4c 	bl	8002a04 <__NVIC_SetPriorityGrouping>
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b82:	f7ff ff63 	bl	8002a4c <__NVIC_GetPriorityGrouping>
 8002b86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	6978      	ldr	r0, [r7, #20]
 8002b8e:	f7ff ffb3 	bl	8002af8 <NVIC_EncodePriority>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff82 	bl	8002aa4 <__NVIC_SetPriority>
}
 8002ba0:	bf00      	nop
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ff56 	bl	8002a68 <__NVIC_EnableIRQ>
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002bc8:	f3bf 8f5f 	dmb	sy
}
 8002bcc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002bce:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <HAL_MPU_Disable+0x28>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	4a06      	ldr	r2, [pc, #24]	@ (8002bec <HAL_MPU_Disable+0x28>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002bda:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_MPU_Disable+0x2c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000ed00 	.word	0xe000ed00
 8002bf0:	e000ed90 	.word	0xe000ed90

08002bf4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8002c2c <HAL_MPU_Enable+0x38>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_MPU_Enable+0x3c>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	4a09      	ldr	r2, [pc, #36]	@ (8002c30 <HAL_MPU_Enable+0x3c>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c12:	f3bf 8f4f 	dsb	sy
}
 8002c16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c18:	f3bf 8f6f 	isb	sy
}
 8002c1c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000ed90 	.word	0xe000ed90
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	785a      	ldrb	r2, [r3, #1]
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c42:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c44:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c50:	4a17      	ldr	r2, [pc, #92]	@ (8002cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7b1b      	ldrb	r3, [r3, #12]
 8002c5c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7adb      	ldrb	r3, [r3, #11]
 8002c62:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7a9b      	ldrb	r3, [r3, #10]
 8002c6a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7b5b      	ldrb	r3, [r3, #13]
 8002c72:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7b9b      	ldrb	r3, [r3, #14]
 8002c7a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7bdb      	ldrb	r3, [r3, #15]
 8002c82:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7a5b      	ldrb	r3, [r3, #9]
 8002c8a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7a1b      	ldrb	r3, [r3, #8]
 8002c92:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c94:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c9c:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c9e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ca0:	6113      	str	r3, [r2, #16]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000ed90 	.word	0xe000ed90

08002cb4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0e3      	b.n	8002e8e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f008 f847 	bl	800ad6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cde:	4b6e      	ldr	r3, [pc, #440]	@ (8002e98 <HAL_ETH_Init+0x1e4>)
 8002ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ce4:	4a6c      	ldr	r2, [pc, #432]	@ (8002e98 <HAL_ETH_Init+0x1e4>)
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002cee:	4b6a      	ldr	r3, [pc, #424]	@ (8002e98 <HAL_ETH_Init+0x1e4>)
 8002cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7a1b      	ldrb	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7ff fe69 	bl	80029dc <HAL_SYSCFG_ETHInterfaceSelect>
 8002d0a:	e003      	b.n	8002d14 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002d0c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002d10:	f7ff fe64 	bl	80029dc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002d14:	4b61      	ldr	r3, [pc, #388]	@ (8002e9c <HAL_ETH_Init+0x1e8>)
 8002d16:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d30:	f7ff fe48 	bl	80029c4 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002d36:	e011      	b.n	8002d5c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d38:	f7ff fe44 	bl	80029c4 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d46:	d909      	bls.n	8002d5c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	22e0      	movs	r2, #224	@ 0xe0
 8002d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e098      	b.n	8002e8e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e4      	bne.n	8002d38 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fdb4 	bl	80038dc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002d74:	f003 ffd4 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4a49      	ldr	r2, [pc, #292]	@ (8002ea0 <HAL_ETH_Init+0x1ec>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	0c9a      	lsrs	r2, r3, #18
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3a01      	subs	r2, #1
 8002d88:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 ff97 	bl	8003cc0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d9e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002daa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dae:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	22e0      	movs	r2, #224	@ 0xe0
 8002dca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e05d      	b.n	8002e8e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dda:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002dde:	4b31      	ldr	r3, [pc, #196]	@ (8002ea4 <HAL_ETH_Init+0x1f0>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6952      	ldr	r2, [r2, #20]
 8002de6:	0051      	lsls	r1, r2, #1
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002df2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 ffff 	bl	8003dfa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f001 f845 	bl	8003e8c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	3305      	adds	r3, #5
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	021a      	lsls	r2, r3, #8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	3303      	adds	r3, #3
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	061a      	lsls	r2, r3, #24
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	3302      	adds	r3, #2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002e40:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002e4e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002e50:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_ETH_Init+0x1f4>)
 8002e62:	430b      	orrs	r3, r1
 8002e64:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <HAL_ETH_Init+0x1f8>)
 8002e76:	430b      	orrs	r3, r1
 8002e78:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2210      	movs	r2, #16
 8002e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	58000400 	.word	0x58000400
 8002ea0:	431bde83 	.word	0x431bde83
 8002ea4:	ffff8001 	.word	0xffff8001
 8002ea8:	0c020060 	.word	0x0c020060
 8002eac:	0c20c000 	.word	0x0c20c000

08002eb0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	d153      	bne.n	8002f6a <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f9f3 	bl	80032bc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0202 	orr.w	r2, r2, #2
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f12:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f22:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f3e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f4a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8002f56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f5a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2240      	movs	r2, #64	@ 0x40
 8002f62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f82:	2b40      	cmp	r3, #64	@ 0x40
 8002f84:	d13f      	bne.n	8003006 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f96:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fa6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fc2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0202 	bic.w	r2, r2, #2
 8002ff8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302c:	f043 0201 	orr.w	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e07f      	b.n	800313a <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003040:	2b40      	cmp	r3, #64	@ 0x40
 8003042:	d179      	bne.n	8003138 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003044:	2200      	movs	r2, #0
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 ff7d 	bl	8003f48 <ETH_Prepare_Tx_Descriptors>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e068      	b.n	800313a <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8003068:	f3bf 8f4f 	dsb	sy
}
 800306c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3206      	adds	r2, #6
 8003076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	629a      	str	r2, [r3, #40]	@ 0x28
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	2b03      	cmp	r3, #3
 800308c:	d904      	bls.n	8003098 <HAL_ETH_Transmit+0x84>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003092:	1f1a      	subs	r2, r3, #4
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3106      	adds	r1, #6
 80030a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80030a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030ac:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 80030b0:	f7ff fc88 	bl	80029c4 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80030b6:	e039      	b.n	800312c <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80030c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d2:	f043 0208 	orr.w	r2, r3, #8
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e023      	b.n	800313a <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d018      	beq.n	800312c <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030fa:	f7ff fc63 	bl	80029c4 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <HAL_ETH_Transmit+0xfc>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10d      	bne.n	800312c <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	f043 0204 	orr.w	r2, r3, #4
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003126:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e006      	b.n	800313a <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	dbc1      	blt.n	80030b8 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b088      	sub	sp, #32
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003160:	f043 0201 	orr.w	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0a2      	b.n	80032b4 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003174:	2b40      	cmp	r3, #64	@ 0x40
 8003176:	d001      	beq.n	800317c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e09b      	b.n	80032b4 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	3212      	adds	r2, #18
 8003188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003192:	f1c3 0304 	rsb	r3, r3, #4
 8003196:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003198:	e064      	b.n	8003264 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <HAL_ETH_ReadData+0x88>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d03a      	beq.n	8003240 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f007 ff7c 	bl	800b11c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	3301      	adds	r3, #1
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d902      	bls.n	8003252 <HAL_ETH_ReadData+0x110>
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	3b04      	subs	r3, #4
 8003250:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	3212      	adds	r2, #18
 8003258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8003268:	2b00      	cmp	r3, #0
 800326a:	db06      	blt.n	800327a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d202      	bcs.n	800327a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d08f      	beq.n	800319a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	441a      	add	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f814 	bl	80032bc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d108      	bne.n	80032b2 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e000      	b.n	80032b4 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80032c8:	2301      	movs	r3, #1
 80032ca:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	3212      	adds	r2, #18
 80032d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032dc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032e2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80032e4:	e038      	b.n	8003358 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d112      	bne.n	8003314 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	4618      	mov	r0, r3
 80032f4:	f007 fee2 	bl	800b0bc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	74fb      	strb	r3, [r7, #19]
 8003302:	e007      	b.n	8003314 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	461a      	mov	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	461a      	mov	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01e      	beq.n	8003358 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e003      	b.n	8003334 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8003332:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	3301      	adds	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d902      	bls.n	8003346 <ETH_UpdateDescriptor+0x8a>
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3b04      	subs	r3, #4
 8003344:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	3212      	adds	r2, #18
 800334c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003350:	617b      	str	r3, [r7, #20]
      desccount--;
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	3b01      	subs	r3, #1
 8003356:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <ETH_UpdateDescriptor+0xa8>
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1c0      	bne.n	80032e6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	429a      	cmp	r2, r3
 800336c:	d01b      	beq.n	80033a6 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3303      	adds	r3, #3
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003378:	f3bf 8f5f 	dmb	sy
}
 800337c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6919      	ldr	r1, [r3, #16]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	18ca      	adds	r2, r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003396:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80033a6:	bf00      	nop
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e03e      	b.n	800344e <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033d8:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	055b      	lsls	r3, r3, #21
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f043 030c 	orr.w	r3, r3, #12
 80033fc:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8003410:	f7ff fad8 	bl	80029c4 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003416:	e009      	b.n	800342c <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003418:	f7ff fad4 	bl	80029c4 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003426:	d901      	bls.n	800342c <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e010      	b.n	800344e <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1ed      	bne.n	8003418 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003444:	b29b      	uxth	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e03c      	b.n	80034f4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003482:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	055b      	lsls	r3, r3, #21
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f023 030c 	bic.w	r3, r3, #12
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <HAL_ETH_WritePHYRegister+0xa4>)
 80034ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80034be:	4a0f      	ldr	r2, [pc, #60]	@ (80034fc <HAL_ETH_WritePHYRegister+0xa4>)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80034c6:	f7ff fa7d 	bl	80029c4 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80034cc:	e009      	b.n	80034e2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80034ce:	f7ff fa79 	bl	80029c4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034dc:	d901      	bls.n	80034e2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e008      	b.n	80034f4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1ed      	bne.n	80034ce <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40028000 	.word	0x40028000

08003500 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e1c3      	b.n	800389c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8003572:	2b00      	cmp	r3, #0
 8003574:	bf14      	ite	ne
 8003576:	2301      	movne	r3, #1
 8003578:	2300      	moveq	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80035a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf14      	ite	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	2300      	moveq	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800365e:	2b00      	cmp	r3, #0
 8003660:	bf14      	ite	ne
 8003662:	2301      	movne	r3, #1
 8003664:	2300      	moveq	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003678:	2b00      	cmp	r3, #0
 800367a:	bf14      	ite	ne
 800367c:	2301      	movne	r3, #1
 800367e:	2300      	moveq	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800368e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003692:	2b00      	cmp	r3, #0
 8003694:	bf14      	ite	ne
 8003696:	2301      	movne	r3, #1
 8003698:	2300      	moveq	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf14      	ite	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2300      	moveq	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	0e5b      	lsrs	r3, r3, #25
 800375e:	f003 021f 	and.w	r2, r3, #31
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	bf14      	ite	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	2300      	moveq	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf0c      	ite	eq
 80037ba:	2301      	moveq	r3, #1
 80037bc:	2300      	movne	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	b29a      	uxth	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003828:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003838:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e00b      	b.n	80038d4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d105      	bne.n	80038d2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80038c6:	6839      	ldr	r1, [r7, #0]
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f857 	bl	800397c <ETH_SetMACConfig>

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80038f6:	f003 fa13 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 80038fa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003968 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d804      	bhi.n	800390e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e022      	b.n	8003954 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4a16      	ldr	r2, [pc, #88]	@ (800396c <HAL_ETH_SetMDIOClockRange+0x90>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d204      	bcs.n	8003920 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e019      	b.n	8003954 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d915      	bls.n	8003954 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4a12      	ldr	r2, [pc, #72]	@ (8003974 <HAL_ETH_SetMDIOClockRange+0x98>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d804      	bhi.n	800393a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e00c      	b.n	8003954 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4a0e      	ldr	r2, [pc, #56]	@ (8003978 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d804      	bhi.n	800394c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e003      	b.n	8003954 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003952:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	02160ebf 	.word	0x02160ebf
 800396c:	03938700 	.word	0x03938700
 8003970:	05f5e0ff 	.word	0x05f5e0ff
 8003974:	08f0d17f 	.word	0x08f0d17f
 8003978:	0ee6b27f 	.word	0x0ee6b27f

0800397c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800398e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	791b      	ldrb	r3, [r3, #4]
 8003994:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003996:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	7b1b      	ldrb	r3, [r3, #12]
 800399c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800399e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	7b5b      	ldrb	r3, [r3, #13]
 80039a4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80039a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	7b9b      	ldrb	r3, [r3, #14]
 80039ac:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80039ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	7bdb      	ldrb	r3, [r3, #15]
 80039b4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80039b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	7c12      	ldrb	r2, [r2, #16]
 80039bc:	2a00      	cmp	r2, #0
 80039be:	d102      	bne.n	80039c6 <ETH_SetMACConfig+0x4a>
 80039c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80039c4:	e000      	b.n	80039c8 <ETH_SetMACConfig+0x4c>
 80039c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80039c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	7c52      	ldrb	r2, [r2, #17]
 80039ce:	2a00      	cmp	r2, #0
 80039d0:	d102      	bne.n	80039d8 <ETH_SetMACConfig+0x5c>
 80039d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039d6:	e000      	b.n	80039da <ETH_SetMACConfig+0x5e>
 80039d8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80039da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	7c9b      	ldrb	r3, [r3, #18]
 80039e0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80039e2:	431a      	orrs	r2, r3
               macconf->Speed |
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80039e8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80039ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	7f1b      	ldrb	r3, [r3, #28]
 80039f4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80039f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	7f5b      	ldrb	r3, [r3, #29]
 80039fc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80039fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	7f92      	ldrb	r2, [r2, #30]
 8003a04:	2a00      	cmp	r2, #0
 8003a06:	d102      	bne.n	8003a0e <ETH_SetMACConfig+0x92>
 8003a08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a0c:	e000      	b.n	8003a10 <ETH_SetMACConfig+0x94>
 8003a0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003a10:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	7fdb      	ldrb	r3, [r3, #31]
 8003a16:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003a18:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003a20:	2a00      	cmp	r2, #0
 8003a22:	d102      	bne.n	8003a2a <ETH_SetMACConfig+0xae>
 8003a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a28:	e000      	b.n	8003a2c <ETH_SetMACConfig+0xb0>
 8003a2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003a2c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003a32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a3a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003a3c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b56      	ldr	r3, [pc, #344]	@ (8003ba8 <ETH_SetMACConfig+0x22c>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a66:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003a68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a70:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003a72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003a7a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003a7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003a84:	2a00      	cmp	r2, #0
 8003a86:	d102      	bne.n	8003a8e <ETH_SetMACConfig+0x112>
 8003a88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a8c:	e000      	b.n	8003a90 <ETH_SetMACConfig+0x114>
 8003a8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003a90:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	4b42      	ldr	r3, [pc, #264]	@ (8003bac <ETH_SetMACConfig+0x230>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	68f9      	ldr	r1, [r7, #12]
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8003bb0 <ETH_SetMACConfig+0x234>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ad8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003ade:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003ae6:	2a00      	cmp	r2, #0
 8003ae8:	d101      	bne.n	8003aee <ETH_SetMACConfig+0x172>
 8003aea:	2280      	movs	r2, #128	@ 0x80
 8003aec:	e000      	b.n	8003af0 <ETH_SetMACConfig+0x174>
 8003aee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003af0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b02:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003b06:	4013      	ands	r3, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	68f9      	ldr	r1, [r7, #12]
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003b18:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003b20:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2e:	f023 0103 	bic.w	r1, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003b46:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003b62:	2a00      	cmp	r2, #0
 8003b64:	d101      	bne.n	8003b6a <ETH_SetMACConfig+0x1ee>
 8003b66:	2240      	movs	r2, #64	@ 0x40
 8003b68:	e000      	b.n	8003b6c <ETH_SetMACConfig+0x1f0>
 8003b6a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003b6c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003b74:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003b76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003b7e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003b8c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	00048083 	.word	0x00048083
 8003bac:	c0f88000 	.word	0xc0f88000
 8003bb0:	fffffef0 	.word	0xfffffef0

08003bb4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b38      	ldr	r3, [pc, #224]	@ (8003cac <ETH_SetDMAConfig+0xf8>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	6811      	ldr	r1, [r2, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bda:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	791b      	ldrb	r3, [r3, #4]
 8003be0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003be6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	7b1b      	ldrb	r3, [r3, #12]
 8003bec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb0 <ETH_SetDMAConfig+0xfc>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	430b      	orrs	r3, r1
 8003c08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c0c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	7b5b      	ldrb	r3, [r3, #13]
 8003c12:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c24:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003c28:	4b22      	ldr	r3, [pc, #136]	@ (8003cb4 <ETH_SetDMAConfig+0x100>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	430b      	orrs	r3, r1
 8003c34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c38:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	7d1b      	ldrb	r3, [r3, #20]
 8003c44:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c46:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	7f5b      	ldrb	r3, [r3, #29]
 8003c4c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003c5e:	4b16      	ldr	r3, [pc, #88]	@ (8003cb8 <ETH_SetDMAConfig+0x104>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c6e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	7f1b      	ldrb	r3, [r3, #28]
 8003c76:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c88:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <ETH_SetDMAConfig+0x108>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	68f9      	ldr	r1, [r7, #12]
 8003c96:	430b      	orrs	r3, r1
 8003c98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c9c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	ffff87fd 	.word	0xffff87fd
 8003cb0:	ffff2ffe 	.word	0xffff2ffe
 8003cb4:	fffec000 	.word	0xfffec000
 8003cb8:	ffc0efef 	.word	0xffc0efef
 8003cbc:	7fc0ffff 	.word	0x7fc0ffff

08003cc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b0a4      	sub	sp, #144	@ 0x90
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d00:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003d18:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003d1c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003d24:	2300      	movs	r3, #0
 8003d26:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003d42:	2300      	movs	r3, #0
 8003d44:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003d58:	2320      	movs	r3, #32
 8003d5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003d6a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003d70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d74:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003da4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fde6 	bl	800397c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003db4:	2301      	movs	r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003dca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003dce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003dd4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003dd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003de0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003de4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003de6:	f107 0308 	add.w	r3, r7, #8
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fee1 	bl	8003bb4 <ETH_SetDMAConfig>
}
 8003df2:	bf00      	nop
 8003df4:	3790      	adds	r7, #144	@ 0x90
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e01d      	b.n	8003e44 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68d9      	ldr	r1, [r3, #12]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	440b      	add	r3, r1
 8003e18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2200      	movs	r2, #0
 8003e24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	3206      	adds	r2, #6
 8003e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3301      	adds	r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d9de      	bls.n	8003e08 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e7c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e023      	b.n	8003ee2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6919      	ldr	r1, [r3, #16]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	440b      	add	r3, r1
 8003eaa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	3212      	adds	r2, #18
 8003ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d9d8      	bls.n	8003e9a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2303      	movs	r3, #3
 8003f12:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f22:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f36:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b091      	sub	sp, #68	@ 0x44
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3318      	adds	r3, #24
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f72:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f8a:	d007      	beq.n	8003f9c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f90:	3304      	adds	r3, #4
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e266      	b.n	800446e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d044      	beq.n	8004036 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	4b75      	ldr	r3, [pc, #468]	@ (8004188 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003fd8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d027      	beq.n	8004036 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	431a      	orrs	r2, r3
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004024:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004034:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00e      	beq.n	8004060 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	4b51      	ldr	r3, [pc, #324]	@ (800418c <ETH_Prepare_Tx_Descriptors+0x244>)
 8004048:	4013      	ands	r3, r2
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	6992      	ldr	r2, [r2, #24]
 800404e:	431a      	orrs	r2, r3
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	d036      	beq.n	80040e6 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004082:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004084:	f3bf 8f5f 	dmb	sy
}
 8004088:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004098:	3301      	adds	r3, #1
 800409a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800409c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d902      	bls.n	80040a8 <ETH_Prepare_Tx_Descriptors+0x160>
 80040a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a4:	3b04      	subs	r3, #4
 80040a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b0:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80040b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b4:	3301      	adds	r3, #1
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040c4:	d10f      	bne.n	80040e6 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	6a3a      	ldr	r2, [r7, #32]
 80040ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80040d0:	f3bf 8f5f 	dmb	sy
}
 80040d4:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80040d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80040e2:	2302      	movs	r3, #2
 80040e4:	e1c3      	b.n	800446e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80040e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e8:	3301      	adds	r3, #1
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80040ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80040f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	4b24      	ldr	r3, [pc, #144]	@ (800418c <ETH_Prepare_Tx_Descriptors+0x244>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004100:	6852      	ldr	r2, [r2, #4]
 8004102:	431a      	orrs	r2, r3
 8004104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004106:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8004108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d012      	beq.n	8004136 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8004110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	4b1a      	ldr	r3, [pc, #104]	@ (8004190 <ETH_Prepare_Tx_Descriptors+0x248>)
 8004126:	4013      	ands	r3, r2
 8004128:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800412a:	6852      	ldr	r2, [r2, #4]
 800412c:	0412      	lsls	r2, r2, #16
 800412e:	431a      	orrs	r2, r3
 8004130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	e008      	b.n	8004148 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	2200      	movs	r2, #0
 800413a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	4b13      	ldr	r3, [pc, #76]	@ (8004190 <ETH_Prepare_Tx_Descriptors+0x248>)
 8004142:	4013      	ands	r3, r2
 8004144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004146:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d021      	beq.n	8004198 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	04db      	lsls	r3, r3, #19
 8004162:	431a      	orrs	r2, r3
 8004164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004166:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800416e:	4013      	ands	r3, r2
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	69d2      	ldr	r2, [r2, #28]
 8004174:	431a      	orrs	r2, r3
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	e02e      	b.n	80041e6 <ETH_Prepare_Tx_Descriptors+0x29e>
 8004188:	ffff0000 	.word	0xffff0000
 800418c:	ffffc000 	.word	0xffffc000
 8004190:	c000ffff 	.word	0xc000ffff
 8004194:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	4b7b      	ldr	r3, [pc, #492]	@ (800438c <ETH_Prepare_Tx_Descriptors+0x444>)
 800419e:	4013      	ands	r3, r2
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	6852      	ldr	r2, [r2, #4]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80041b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c6:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80041d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e4:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	431a      	orrs	r2, r3
 8004200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004202:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800421c:	f3bf 8f5f 	dmb	sy
}
 8004220:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 80da 	beq.w	80043f0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800423c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	431a      	orrs	r2, r3
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800424e:	e0cf      	b.n	80043f0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800425c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800425e:	3301      	adds	r3, #1
 8004260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004264:	2b03      	cmp	r3, #3
 8004266:	d902      	bls.n	800426e <ETH_Prepare_Tx_Descriptors+0x326>
 8004268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426a:	3b04      	subs	r3, #4
 800426c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004276:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800428c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004290:	d007      	beq.n	80042a2 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004296:	3304      	adds	r3, #4
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d029      	beq.n	80042f6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042b4:	e019      	b.n	80042ea <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80042b6:	f3bf 8f5f 	dmb	sy
}
 80042ba:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80042bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80042c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ca:	3301      	adds	r3, #1
 80042cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d902      	bls.n	80042da <ETH_Prepare_Tx_Descriptors+0x392>
 80042d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d6:	3b04      	subs	r3, #4
 80042d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80042e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e6:	3301      	adds	r3, #1
 80042e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d3e1      	bcc.n	80042b6 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80042f2:	2302      	movs	r3, #2
 80042f4:	e0bb      	b.n	800446e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80042f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f8:	3301      	adds	r3, #1
 80042fa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	4b1f      	ldr	r3, [pc, #124]	@ (8004390 <ETH_Prepare_Tx_Descriptors+0x448>)
 8004312:	4013      	ands	r3, r2
 8004314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004316:	6852      	ldr	r2, [r2, #4]
 8004318:	431a      	orrs	r2, r3
 800431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d012      	beq.n	800434c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800432c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	4b16      	ldr	r3, [pc, #88]	@ (8004394 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800433c:	4013      	ands	r3, r2
 800433e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004340:	6852      	ldr	r2, [r2, #4]
 8004342:	0412      	lsls	r2, r2, #16
 8004344:	431a      	orrs	r2, r3
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	e008      	b.n	800435e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800434c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434e:	2200      	movs	r2, #0
 8004350:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	4b0f      	ldr	r3, [pc, #60]	@ (8004394 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004358:	4013      	ands	r3, r2
 800435a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	d018      	beq.n	800439c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <ETH_Prepare_Tx_Descriptors+0x450>)
 8004370:	4013      	ands	r3, r2
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	69d2      	ldr	r2, [r2, #28]
 8004376:	431a      	orrs	r2, r3
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	60da      	str	r2, [r3, #12]
 8004388:	e020      	b.n	80043cc <ETH_Prepare_Tx_Descriptors+0x484>
 800438a:	bf00      	nop
 800438c:	ffff8000 	.word	0xffff8000
 8004390:	ffffc000 	.word	0xffffc000
 8004394:	c000ffff 	.word	0xc000ffff
 8004398:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800439c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	4b36      	ldr	r3, [pc, #216]	@ (800447c <ETH_Prepare_Tx_Descriptors+0x534>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	6852      	ldr	r2, [r2, #4]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	3301      	adds	r3, #1
 80043d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80043d2:	f3bf 8f5f 	dmb	sy
}
 80043d6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80043d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f47f af2b 	bne.w	8004250 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d006      	beq.n	800440e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	e005      	b.n	800441a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800442a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800442c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800442e:	3304      	adds	r3, #4
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800443a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443c:	f3ef 8310 	mrs	r3, PRIMASK
 8004440:	61bb      	str	r3, [r7, #24]
  return(result);
 8004442:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	2301      	movs	r3, #1
 8004448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f383 8810 	msr	PRIMASK, r3
}
 8004450:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	4413      	add	r3, r2
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f383 8810 	msr	PRIMASK, r3
}
 800446a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3744      	adds	r7, #68	@ 0x44
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	ffff8000 	.word	0xffff8000

08004480 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b098      	sub	sp, #96	@ 0x60
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004488:	4a84      	ldr	r2, [pc, #528]	@ (800469c <HAL_FDCAN_Init+0x21c>)
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4611      	mov	r1, r2
 8004490:	224c      	movs	r2, #76	@ 0x4c
 8004492:	4618      	mov	r0, r3
 8004494:	f011 ff83 	bl	801639e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e1c6      	b.n	8004830 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a7e      	ldr	r2, [pc, #504]	@ (80046a0 <HAL_FDCAN_Init+0x220>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d106      	bne.n	80044ba <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80044b4:	461a      	mov	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fc fc64 	bl	8000d9c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0210 	bic.w	r2, r2, #16
 80044e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e4:	f7fe fa6e 	bl	80029c4 <HAL_GetTick>
 80044e8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044ea:	e014      	b.n	8004516 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044ec:	f7fe fa6a 	bl	80029c4 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b0a      	cmp	r3, #10
 80044f8:	d90d      	bls.n	8004516 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004500:	f043 0201 	orr.w	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2203      	movs	r2, #3
 800450e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e18c      	b.n	8004830 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b08      	cmp	r3, #8
 8004522:	d0e3      	beq.n	80044ec <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004534:	f7fe fa46 	bl	80029c4 <HAL_GetTick>
 8004538:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800453a:	e014      	b.n	8004566 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800453c:	f7fe fa42 	bl	80029c4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b0a      	cmp	r3, #10
 8004548:	d90d      	bls.n	8004566 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004550:	f043 0201 	orr.w	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2203      	movs	r2, #3
 800455e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e164      	b.n	8004830 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0e3      	beq.n	800453c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0202 	orr.w	r2, r2, #2
 8004582:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7c1b      	ldrb	r3, [r3, #16]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d108      	bne.n	800459e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800459a:	619a      	str	r2, [r3, #24]
 800459c:	e007      	b.n	80045ae <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	7c5b      	ldrb	r3, [r3, #17]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d108      	bne.n	80045c8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045c4:	619a      	str	r2, [r3, #24]
 80045c6:	e007      	b.n	80045d8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	7c9b      	ldrb	r3, [r3, #18]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d108      	bne.n	80045f2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045ee:	619a      	str	r2, [r3, #24]
 80045f0:	e007      	b.n	8004602 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004600:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004626:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0210 	bic.w	r2, r2, #16
 8004636:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d108      	bne.n	8004652 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0204 	orr.w	r2, r2, #4
 800464e:	619a      	str	r2, [r3, #24]
 8004650:	e030      	b.n	80046b4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d02c      	beq.n	80046b4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d020      	beq.n	80046a4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699a      	ldr	r2, [r3, #24]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004670:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0210 	orr.w	r2, r2, #16
 8004680:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d114      	bne.n	80046b4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0220 	orr.w	r2, r2, #32
 8004698:	619a      	str	r2, [r3, #24]
 800469a:	e00b      	b.n	80046b4 <HAL_FDCAN_Init+0x234>
 800469c:	08019728 	.word	0x08019728
 80046a0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0220 	orr.w	r2, r2, #32
 80046b2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046c4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046cc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046dc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046de:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046e8:	d115      	bne.n	8004716 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ee:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	3b01      	subs	r3, #1
 80046f6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046f8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	3b01      	subs	r3, #1
 8004700:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004702:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	3b01      	subs	r3, #1
 800470c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004712:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004714:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473c:	4413      	add	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d011      	beq.n	8004766 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800474a:	f023 0107 	bic.w	r1, r3, #7
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	3360      	adds	r3, #96	@ 0x60
 8004756:	443b      	add	r3, r7
 8004758:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d011      	beq.n	8004792 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004776:	f023 0107 	bic.w	r1, r3, #7
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	3360      	adds	r3, #96	@ 0x60
 8004782:	443b      	add	r3, r7
 8004784:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004796:	2b00      	cmp	r3, #0
 8004798:	d012      	beq.n	80047c0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047a2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	3360      	adds	r3, #96	@ 0x60
 80047ae:	443b      	add	r3, r7
 80047b0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80047b4:	011a      	lsls	r2, r3, #4
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d012      	beq.n	80047ee <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047d0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	3360      	adds	r3, #96	@ 0x60
 80047dc:	443b      	add	r3, r7
 80047de:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80047e2:	021a      	lsls	r2, r3, #8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a11      	ldr	r2, [pc, #68]	@ (8004838 <HAL_FDCAN_Init+0x3b8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d107      	bne.n	8004808 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f022 0203 	bic.w	r2, r2, #3
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fe1b 	bl	800545c <FDCAN_CalcultateRamBlockAddresses>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800482c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004830:	4618      	mov	r0, r3
 8004832:	3760      	adds	r7, #96	@ 0x60
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	4000a000 	.word	0x4000a000

0800483c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800484c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d002      	beq.n	800485a <HAL_FDCAN_ConfigFilter+0x1e>
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d157      	bne.n	800490a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d12b      	bne.n	80048ba <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b07      	cmp	r3, #7
 8004868:	d10d      	bne.n	8004886 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004876:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800487c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800487e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e00e      	b.n	80048a4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004892:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800489a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	e025      	b.n	8004906 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	075a      	lsls	r2, r3, #29
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b07      	cmp	r3, #7
 80048ce:	d103      	bne.n	80048d8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	e006      	b.n	80048e6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	079a      	lsls	r2, r3, #30
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	3304      	adds	r3, #4
 80048fe:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e008      	b.n	800491c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004910:	f043 0202 	orr.w	r2, r3, #2
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
  }
}
 800491c:	4618      	mov	r0, r3
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d111      	bne.n	8004960 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e008      	b.n	8004972 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004966:	f043 0204 	orr.w	r2, r3, #4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
  }
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b086      	sub	sp, #24
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d141      	bne.n	8004a1a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800499e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e038      	b.n	8004a2c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80049c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e026      	b.n	8004a2c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80049e6:	0c1b      	lsrs	r3, r3, #16
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 feb7 	bl	8005768 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2101      	movs	r1, #1
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	fa01 f202 	lsl.w	r2, r1, r2
 8004a06:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e008      	b.n	8004a2c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a20:	f043 0208 	orr.w	r2, r3, #8
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b08b      	sub	sp, #44	@ 0x2c
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004a4c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004a4e:	7efb      	ldrb	r3, [r7, #27]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	f040 8149 	bne.w	8004ce8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b40      	cmp	r3, #64	@ 0x40
 8004a5a:	d14c      	bne.n	8004af6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e13c      	b.n	8004cfa <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d109      	bne.n	8004aa4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e12a      	b.n	8004cfa <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004aac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ab4:	d10a      	bne.n	8004acc <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004abe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ac6:	d101      	bne.n	8004acc <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae8:	69f9      	ldr	r1, [r7, #28]
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af4:	e068      	b.n	8004bc8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b41      	cmp	r3, #65	@ 0x41
 8004afa:	d14c      	bne.n	8004b96 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b04:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d109      	bne.n	8004b20 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0ec      	b.n	8004cfa <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0da      	b.n	8004cfa <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b54:	d10a      	bne.n	8004b6c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b66:	d101      	bne.n	8004b6c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b88:	69f9      	ldr	r1, [r7, #28]
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b94:	e018      	b.n	8004bc8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d309      	bcc.n	8004bb4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ba6:	f043 0220 	orr.w	r2, r3, #32
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0a2      	b.n	8004cfa <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d107      	bne.n	8004bec <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	0c9b      	lsrs	r3, r3, #18
 8004be2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e005      	b.n	8004bf8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	3304      	adds	r3, #4
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	0e1b      	lsrs	r3, r3, #24
 8004c4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	0fda      	lsrs	r2, r3, #31
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	3304      	adds	r3, #4
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c66:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	e00a      	b.n	8004c84 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	441a      	add	r2, r3
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	440b      	add	r3, r1
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	3301      	adds	r3, #1
 8004c82:	623b      	str	r3, [r7, #32]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a1f      	ldr	r2, [pc, #124]	@ (8004d08 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004c8a:	5cd3      	ldrb	r3, [r2, r3]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d3ec      	bcc.n	8004c6e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b40      	cmp	r3, #64	@ 0x40
 8004c98:	d105      	bne.n	8004ca6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004ca4:	e01e      	b.n	8004ce4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b41      	cmp	r3, #65	@ 0x41
 8004caa:	d105      	bne.n	8004cb8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004cb6:	e015      	b.n	8004ce4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b1f      	cmp	r3, #31
 8004cbc:	d808      	bhi.n	8004cd0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004cce:	e009      	b.n	8004ce4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 021f 	and.w	r2, r3, #31
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2101      	movs	r1, #1
 8004cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e008      	b.n	8004cfa <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cee:	f043 0208 	orr.w	r2, r3, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
  }
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	372c      	adds	r7, #44	@ 0x2c
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	0801c214 	.word	0x0801c214

08004d0c <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b40      	cmp	r3, #64	@ 0x40
 8004d1a:	d107      	bne.n	8004d2c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e006      	b.n	8004d3a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004d7e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d002      	beq.n	8004d8c <HAL_FDCAN_ActivateNotification+0x20>
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d155      	bne.n	8004e38 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d108      	bne.n	8004dac <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004daa:	e014      	b.n	8004dd6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d108      	bne.n	8004dce <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0202 	orr.w	r2, r2, #2
 8004dca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004dcc:	e003      	b.n	8004dd6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e58 <HAL_FDCAN_ActivateNotification+0xec>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	430b      	orrs	r3, r1
 8004e24:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e26:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	0f9b      	lsrs	r3, r3, #30
 8004e2e:	490b      	ldr	r1, [pc, #44]	@ (8004e5c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	e008      	b.n	8004e4a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e3e:	f043 0202 	orr.w	r2, r3, #2
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	3fcfffff 	.word	0x3fcfffff
 8004e5c:	4000a800 	.word	0x4000a800

08004e60 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b096      	sub	sp, #88	@ 0x58
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004e68:	4b9a      	ldr	r3, [pc, #616]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	079b      	lsls	r3, r3, #30
 8004e6e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004e70:	4b98      	ldr	r3, [pc, #608]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	079b      	lsls	r3, r3, #30
 8004e76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e78:	4013      	ands	r3, r2
 8004e7a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e82:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004e86:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e90:	4013      	ands	r3, r2
 8004e92:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eca:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004ece:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ed8:	4013      	ands	r3, r2
 8004eda:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004ee6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d010      	beq.n	8004f32 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f24:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f26:	4b6b      	ldr	r3, [pc, #428]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fa49 	bl	80053c4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f34:	0a9b      	lsrs	r3, r3, #10
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01d      	beq.n	8004f7a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	0a9b      	lsrs	r3, r3, #10
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d017      	beq.n	8004f7a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004f52:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f5e:	4013      	ands	r3, r2
 8004f60:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f6c:	4b59      	ldr	r3, [pc, #356]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004f72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f9fc 	bl	8005372 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00d      	beq.n	8004f9c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f86:	4b54      	ldr	r3, [pc, #336]	@ (80050d8 <HAL_FDCAN_IRQHandler+0x278>)
 8004f88:	400b      	ands	r3, r1
 8004f8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f8c:	4a51      	ldr	r2, [pc, #324]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 8004f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f90:	0f9b      	lsrs	r3, r3, #30
 8004f92:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004f94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f9c0 	bl	800531c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80050d8 <HAL_FDCAN_IRQHandler+0x278>)
 8004faa:	400b      	ands	r3, r1
 8004fac:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fae:	4a49      	ldr	r2, [pc, #292]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 8004fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fb2:	0f9b      	lsrs	r3, r3, #30
 8004fb4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004fb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f9ba 	bl	8005332 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00d      	beq.n	8004fe0 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004fca:	4b43      	ldr	r3, [pc, #268]	@ (80050d8 <HAL_FDCAN_IRQHandler+0x278>)
 8004fcc:	400b      	ands	r3, r1
 8004fce:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fd0:	4a40      	ldr	r2, [pc, #256]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 8004fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd4:	0f9b      	lsrs	r3, r3, #30
 8004fd6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004fd8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fc fb62 	bl	80016a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00d      	beq.n	8005002 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004fec:	4b3a      	ldr	r3, [pc, #232]	@ (80050d8 <HAL_FDCAN_IRQHandler+0x278>)
 8004fee:	400b      	ands	r3, r1
 8004ff0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ff2:	4a38      	ldr	r2, [pc, #224]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 8004ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ff6:	0f9b      	lsrs	r3, r3, #30
 8004ff8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004ffa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7fc fbe7 	bl	80017d0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005004:	0adb      	lsrs	r3, r3, #11
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d010      	beq.n	8005030 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005010:	0adb      	lsrs	r3, r3, #11
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005022:	651a      	str	r2, [r3, #80]	@ 0x50
 8005024:	4b2b      	ldr	r3, [pc, #172]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 8005026:	2200      	movs	r2, #0
 8005028:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f98c 	bl	8005348 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005032:	0a5b      	lsrs	r3, r3, #9
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01d      	beq.n	8005078 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800503c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503e:	0a5b      	lsrs	r3, r3, #9
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d017      	beq.n	8005078 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005050:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800505a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800505c:	4013      	ands	r3, r2
 800505e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005068:	651a      	str	r2, [r3, #80]	@ 0x50
 800506a:	4b1a      	ldr	r3, [pc, #104]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 800506c:	2200      	movs	r2, #0
 800506e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005070:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f972 	bl	800535c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507a:	0cdb      	lsrs	r3, r3, #19
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005086:	0cdb      	lsrs	r3, r3, #19
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005098:	651a      	str	r2, [r3, #80]	@ 0x50
 800509a:	4b0e      	ldr	r3, [pc, #56]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 800509c:	2200      	movs	r2, #0
 800509e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f971 	bl	8005388 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80050a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d016      	beq.n	80050e0 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80050b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d010      	beq.n	80050e0 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80050c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80050c8:	4b02      	ldr	r3, [pc, #8]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x274>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	e004      	b.n	80050dc <HAL_FDCAN_IRQHandler+0x27c>
 80050d2:	bf00      	nop
 80050d4:	4000a800 	.word	0x4000a800
 80050d8:	3fcfffff 	.word	0x3fcfffff
 80050dc:	f000 f95e 	bl	800539c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80050e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e2:	0c9b      	lsrs	r3, r3, #18
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80050ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ee:	0c9b      	lsrs	r3, r3, #18
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005100:	651a      	str	r2, [r3, #80]	@ 0x50
 8005102:	4b83      	ldr	r3, [pc, #524]	@ (8005310 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005104:	2200      	movs	r2, #0
 8005106:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f951 	bl	80053b0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800510e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005110:	0c5b      	lsrs	r3, r3, #17
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d015      	beq.n	8005146 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511c:	0c5b      	lsrs	r3, r3, #17
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00f      	beq.n	8005146 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800512e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005130:	4b77      	ldr	r3, [pc, #476]	@ (8005310 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005132:	2200      	movs	r2, #0
 8005134:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800513c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00d      	beq.n	8005168 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005152:	4b70      	ldr	r3, [pc, #448]	@ (8005314 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005154:	400b      	ands	r3, r1
 8005156:	6513      	str	r3, [r2, #80]	@ 0x50
 8005158:	4a6d      	ldr	r2, [pc, #436]	@ (8005310 <HAL_FDCAN_IRQHandler+0x4b0>)
 800515a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800515c:	0f9b      	lsrs	r3, r3, #30
 800515e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005160:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f942 	bl	80053ec <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800516a:	2b00      	cmp	r3, #0
 800516c:	d011      	beq.n	8005192 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005174:	4b67      	ldr	r3, [pc, #412]	@ (8005314 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005176:	400b      	ands	r3, r1
 8005178:	6513      	str	r3, [r2, #80]	@ 0x50
 800517a:	4a65      	ldr	r2, [pc, #404]	@ (8005310 <HAL_FDCAN_IRQHandler+0x4b0>)
 800517c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517e:	0f9b      	lsrs	r3, r3, #30
 8005180:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a60      	ldr	r2, [pc, #384]	@ (8005318 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	f040 80ac 	bne.w	80052f6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80a4 	beq.w	80052f6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051c2:	4013      	ands	r3, r2
 80051c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051da:	4013      	ands	r3, r2
 80051dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f2:	4013      	ands	r3, r2
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005200:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005208:	6a3a      	ldr	r2, [r7, #32]
 800520a:	4013      	ands	r3, r2
 800520c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005218:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	4013      	ands	r3, r2
 8005224:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005242:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005244:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8db 	bl	8005402 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005258:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800525a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f8db 	bl	8005418 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	099b      	lsrs	r3, r3, #6
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01a      	beq.n	80052a4 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	099b      	lsrs	r3, r3, #6
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d014      	beq.n	80052a4 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	b29b      	uxth	r3, r3
 8005284:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005290:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2240      	movs	r2, #64	@ 0x40
 8005298:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	6939      	ldr	r1, [r7, #16]
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f8c5 	bl	800542e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80052b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f8c6 	bl	8005446 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00b      	beq.n	80052d8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	6a3a      	ldr	r2, [r7, #32]
 80052c6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f869 	bl	80053d8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005306:	bf00      	nop
 8005308:	3758      	adds	r7, #88	@ 0x58
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	4000a800 	.word	0x4000a800
 8005314:	3fcfffff 	.word	0x3fcfffff
 8005318:	4000a000 	.word	0x4000a000

0800531c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005468:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005472:	4ba7      	ldr	r3, [pc, #668]	@ (8005710 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005474:	4013      	ands	r3, r2
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	0091      	lsls	r1, r2, #2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	430b      	orrs	r3, r1
 8005480:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800548c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	041a      	lsls	r2, r3, #16
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	4413      	add	r3, r2
 80054a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80054b2:	4b97      	ldr	r3, [pc, #604]	@ (8005710 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	0091      	lsls	r1, r2, #2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	430b      	orrs	r3, r1
 80054c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054cc:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d4:	041a      	lsls	r2, r3, #16
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4413      	add	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80054f4:	4b86      	ldr	r3, [pc, #536]	@ (8005710 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	0091      	lsls	r1, r2, #2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	430b      	orrs	r3, r1
 8005502:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800550e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	041a      	lsls	r2, r3, #16
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800552a:	fb02 f303 	mul.w	r3, r2, r3
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	4413      	add	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800553c:	4b74      	ldr	r3, [pc, #464]	@ (8005710 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800553e:	4013      	ands	r3, r2
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	0091      	lsls	r1, r2, #2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	430b      	orrs	r3, r1
 800554a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005556:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800555e:	041a      	lsls	r2, r3, #16
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4413      	add	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005584:	4b62      	ldr	r3, [pc, #392]	@ (8005710 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005586:	4013      	ands	r3, r2
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	0091      	lsls	r1, r2, #2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	430b      	orrs	r3, r1
 8005592:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4413      	add	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80055b0:	4b57      	ldr	r3, [pc, #348]	@ (8005710 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	0091      	lsls	r1, r2, #2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	430b      	orrs	r3, r1
 80055be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055ca:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d2:	041a      	lsls	r2, r3, #16
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	4413      	add	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80055f2:	4b47      	ldr	r3, [pc, #284]	@ (8005710 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	0091      	lsls	r1, r2, #2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	430b      	orrs	r3, r1
 8005600:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800560c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005614:	041a      	lsls	r2, r3, #16
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005628:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005630:	061a      	lsls	r2, r3, #24
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005640:	4b34      	ldr	r3, [pc, #208]	@ (8005714 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005642:	4413      	add	r3, r2
 8005644:	009a      	lsls	r2, r3, #2
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	441a      	add	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800567c:	441a      	add	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005694:	441a      	add	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80056ac:	441a      	add	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	441a      	add	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80056d6:	fb01 f303 	mul.w	r3, r1, r3
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	441a      	add	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80056f2:	fb01 f303 	mul.w	r3, r1, r3
 80056f6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80056f8:	441a      	add	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005706:	4a04      	ldr	r2, [pc, #16]	@ (8005718 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d915      	bls.n	8005738 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800570c:	e006      	b.n	800571c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800570e:	bf00      	nop
 8005710:	ffff0003 	.word	0xffff0003
 8005714:	10002b00 	.word	0x10002b00
 8005718:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005722:	f043 0220 	orr.w	r2, r3, #32
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2203      	movs	r2, #3
 8005730:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e010      	b.n	800575a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e005      	b.n	800574c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3304      	adds	r3, #4
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	429a      	cmp	r2, r3
 8005756:	d3f3      	bcc.n	8005740 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop

08005768 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005768:	b480      	push	{r7}
 800576a:	b089      	sub	sp, #36	@ 0x24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005786:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800578e:	4313      	orrs	r3, r2
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	e00a      	b.n	80057aa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800579c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80057a2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80057a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057a8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80057b4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80057ba:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80057c0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	fb01 f303 	mul.w	r3, r1, r3
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	3304      	adds	r3, #4
 80057ec:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	3304      	adds	r3, #4
 80057f8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	e020      	b.n	8005842 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	3303      	adds	r3, #3
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4413      	add	r3, r2
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	3302      	adds	r3, #2
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	440b      	add	r3, r1
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005818:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	3301      	adds	r3, #1
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	440b      	add	r3, r1
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005826:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	440a      	add	r2, r1
 800582e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005830:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	3304      	adds	r3, #4
 800583a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	3304      	adds	r3, #4
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	4a06      	ldr	r2, [pc, #24]	@ (8005860 <FDCAN_CopyMessageToRAM+0xf8>)
 8005848:	5cd3      	ldrb	r3, [r2, r3]
 800584a:	461a      	mov	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4293      	cmp	r3, r2
 8005850:	d3d6      	bcc.n	8005800 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005852:	bf00      	nop
 8005854:	bf00      	nop
 8005856:	3724      	adds	r7, #36	@ 0x24
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	0801c214 	.word	0x0801c214

08005864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	@ 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005872:	4b86      	ldr	r3, [pc, #536]	@ (8005a8c <HAL_GPIO_Init+0x228>)
 8005874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005876:	e18c      	b.n	8005b92 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	2101      	movs	r1, #1
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	4013      	ands	r3, r2
 8005886:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 817e 	beq.w	8005b8c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d005      	beq.n	80058a8 <HAL_GPIO_Init+0x44>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d130      	bne.n	800590a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	2203      	movs	r2, #3
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058de:	2201      	movs	r2, #1
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4013      	ands	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	f003 0201 	and.w	r2, r3, #1
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4313      	orrs	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b03      	cmp	r3, #3
 8005914:	d017      	beq.n	8005946 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	2203      	movs	r2, #3
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4313      	orrs	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d123      	bne.n	800599a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	08da      	lsrs	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3208      	adds	r2, #8
 800595a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800595e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	220f      	movs	r2, #15
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4013      	ands	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	08da      	lsrs	r2, r3, #3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3208      	adds	r2, #8
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	2203      	movs	r2, #3
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43db      	mvns	r3, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4013      	ands	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 0203 	and.w	r2, r3, #3
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80d8 	beq.w	8005b8c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005a90 <HAL_GPIO_Init+0x22c>)
 80059de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005a90 <HAL_GPIO_Init+0x22c>)
 80059e4:	f043 0302 	orr.w	r3, r3, #2
 80059e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80059ec:	4b28      	ldr	r3, [pc, #160]	@ (8005a90 <HAL_GPIO_Init+0x22c>)
 80059ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059fa:	4a26      	ldr	r2, [pc, #152]	@ (8005a94 <HAL_GPIO_Init+0x230>)
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	3302      	adds	r3, #2
 8005a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	220f      	movs	r2, #15
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a1d      	ldr	r2, [pc, #116]	@ (8005a98 <HAL_GPIO_Init+0x234>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d04a      	beq.n	8005abc <HAL_GPIO_Init+0x258>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1c      	ldr	r2, [pc, #112]	@ (8005a9c <HAL_GPIO_Init+0x238>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d02b      	beq.n	8005a86 <HAL_GPIO_Init+0x222>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa0 <HAL_GPIO_Init+0x23c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d025      	beq.n	8005a82 <HAL_GPIO_Init+0x21e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa4 <HAL_GPIO_Init+0x240>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01f      	beq.n	8005a7e <HAL_GPIO_Init+0x21a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a19      	ldr	r2, [pc, #100]	@ (8005aa8 <HAL_GPIO_Init+0x244>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d019      	beq.n	8005a7a <HAL_GPIO_Init+0x216>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a18      	ldr	r2, [pc, #96]	@ (8005aac <HAL_GPIO_Init+0x248>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_GPIO_Init+0x212>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a17      	ldr	r2, [pc, #92]	@ (8005ab0 <HAL_GPIO_Init+0x24c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00d      	beq.n	8005a72 <HAL_GPIO_Init+0x20e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a16      	ldr	r2, [pc, #88]	@ (8005ab4 <HAL_GPIO_Init+0x250>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d007      	beq.n	8005a6e <HAL_GPIO_Init+0x20a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a15      	ldr	r2, [pc, #84]	@ (8005ab8 <HAL_GPIO_Init+0x254>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d101      	bne.n	8005a6a <HAL_GPIO_Init+0x206>
 8005a66:	2309      	movs	r3, #9
 8005a68:	e029      	b.n	8005abe <HAL_GPIO_Init+0x25a>
 8005a6a:	230a      	movs	r3, #10
 8005a6c:	e027      	b.n	8005abe <HAL_GPIO_Init+0x25a>
 8005a6e:	2307      	movs	r3, #7
 8005a70:	e025      	b.n	8005abe <HAL_GPIO_Init+0x25a>
 8005a72:	2306      	movs	r3, #6
 8005a74:	e023      	b.n	8005abe <HAL_GPIO_Init+0x25a>
 8005a76:	2305      	movs	r3, #5
 8005a78:	e021      	b.n	8005abe <HAL_GPIO_Init+0x25a>
 8005a7a:	2304      	movs	r3, #4
 8005a7c:	e01f      	b.n	8005abe <HAL_GPIO_Init+0x25a>
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e01d      	b.n	8005abe <HAL_GPIO_Init+0x25a>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e01b      	b.n	8005abe <HAL_GPIO_Init+0x25a>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e019      	b.n	8005abe <HAL_GPIO_Init+0x25a>
 8005a8a:	bf00      	nop
 8005a8c:	58000080 	.word	0x58000080
 8005a90:	58024400 	.word	0x58024400
 8005a94:	58000400 	.word	0x58000400
 8005a98:	58020000 	.word	0x58020000
 8005a9c:	58020400 	.word	0x58020400
 8005aa0:	58020800 	.word	0x58020800
 8005aa4:	58020c00 	.word	0x58020c00
 8005aa8:	58021000 	.word	0x58021000
 8005aac:	58021400 	.word	0x58021400
 8005ab0:	58021800 	.word	0x58021800
 8005ab4:	58021c00 	.word	0x58021c00
 8005ab8:	58022400 	.word	0x58022400
 8005abc:	2300      	movs	r3, #0
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	f002 0203 	and.w	r2, r2, #3
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	4093      	lsls	r3, r2
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ace:	4938      	ldr	r1, [pc, #224]	@ (8005bb0 <HAL_GPIO_Init+0x34c>)
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	089b      	lsrs	r3, r3, #2
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4013      	ands	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	43db      	mvns	r3, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4013      	ands	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f47f ae6b 	bne.w	8005878 <HAL_GPIO_Init+0x14>
  }
}
 8005ba2:	bf00      	nop
 8005ba4:	bf00      	nop
 8005ba6:	3724      	adds	r7, #36	@ 0x24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	58000400 	.word	0x58000400

08005bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e08b      	b.n	8005cde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fb faca 	bl	8001174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2224      	movs	r2, #36	@ 0x24
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d107      	bne.n	8005c2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	e006      	b.n	8005c3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005c3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d108      	bne.n	8005c56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c52:	605a      	str	r2, [r3, #4]
 8005c54:	e007      	b.n	8005c66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6859      	ldr	r1, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce8 <HAL_I2C_Init+0x134>)
 8005c72:	430b      	orrs	r3, r1
 8005c74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69d9      	ldr	r1, [r3, #28]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1a      	ldr	r2, [r3, #32]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	02008000 	.word	0x02008000

08005cec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
  }
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d138      	bne.n	8005da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e032      	b.n	8005daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2224      	movs	r2, #36	@ 0x24
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6819      	ldr	r1, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e000      	b.n	8005daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d139      	bne.n	8005e40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e033      	b.n	8005e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2224      	movs	r2, #36	@ 0x24
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e000      	b.n	8005e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e40:	2302      	movs	r3, #2
  }
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e58:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e90 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005e60:	f043 0302 	orr.w	r3, r3, #2
 8005e64:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005e68:	4b09      	ldr	r3, [pc, #36]	@ (8005e90 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8005e76:	4b07      	ldr	r3, [pc, #28]	@ (8005e94 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	4906      	ldr	r1, [pc, #24]	@ (8005e94 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	604b      	str	r3, [r1, #4]
}
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	58024400 	.word	0x58024400
 8005e94:	58000400 	.word	0x58000400

08005e98 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ea0:	4b19      	ldr	r3, [pc, #100]	@ (8005f08 <HAL_PWREx_ConfigSupply+0x70>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d00a      	beq.n	8005ec2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005eac:	4b16      	ldr	r3, [pc, #88]	@ (8005f08 <HAL_PWREx_ConfigSupply+0x70>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d001      	beq.n	8005ebe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e01f      	b.n	8005efe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e01d      	b.n	8005efe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ec2:	4b11      	ldr	r3, [pc, #68]	@ (8005f08 <HAL_PWREx_ConfigSupply+0x70>)
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f023 0207 	bic.w	r2, r3, #7
 8005eca:	490f      	ldr	r1, [pc, #60]	@ (8005f08 <HAL_PWREx_ConfigSupply+0x70>)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ed2:	f7fc fd77 	bl	80029c4 <HAL_GetTick>
 8005ed6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ed8:	e009      	b.n	8005eee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005eda:	f7fc fd73 	bl	80029c4 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ee8:	d901      	bls.n	8005eee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e007      	b.n	8005efe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005eee:	4b06      	ldr	r3, [pc, #24]	@ (8005f08 <HAL_PWREx_ConfigSupply+0x70>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005efa:	d1ee      	bne.n	8005eda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	58024800 	.word	0x58024800

08005f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08c      	sub	sp, #48	@ 0x30
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e3c8      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 8087 	beq.w	800603a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f2c:	4b88      	ldr	r3, [pc, #544]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f36:	4b86      	ldr	r3, [pc, #536]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d007      	beq.n	8005f52 <HAL_RCC_OscConfig+0x46>
 8005f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f44:	2b18      	cmp	r3, #24
 8005f46:	d110      	bne.n	8005f6a <HAL_RCC_OscConfig+0x5e>
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d10b      	bne.n	8005f6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f52:	4b7f      	ldr	r3, [pc, #508]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d06c      	beq.n	8006038 <HAL_RCC_OscConfig+0x12c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d168      	bne.n	8006038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e3a2      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f72:	d106      	bne.n	8005f82 <HAL_RCC_OscConfig+0x76>
 8005f74:	4b76      	ldr	r3, [pc, #472]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a75      	ldr	r2, [pc, #468]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	e02e      	b.n	8005fe0 <HAL_RCC_OscConfig+0xd4>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10c      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x98>
 8005f8a:	4b71      	ldr	r3, [pc, #452]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a70      	ldr	r2, [pc, #448]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	4b6e      	ldr	r3, [pc, #440]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a6d      	ldr	r2, [pc, #436]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	e01d      	b.n	8005fe0 <HAL_RCC_OscConfig+0xd4>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fac:	d10c      	bne.n	8005fc8 <HAL_RCC_OscConfig+0xbc>
 8005fae:	4b68      	ldr	r3, [pc, #416]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a67      	ldr	r2, [pc, #412]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	4b65      	ldr	r3, [pc, #404]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a64      	ldr	r2, [pc, #400]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	e00b      	b.n	8005fe0 <HAL_RCC_OscConfig+0xd4>
 8005fc8:	4b61      	ldr	r3, [pc, #388]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a60      	ldr	r2, [pc, #384]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8005fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d013      	beq.n	8006010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7fc fcec 	bl	80029c4 <HAL_GetTick>
 8005fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ff0:	f7fc fce8 	bl	80029c4 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	@ 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e356      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006002:	4b53      	ldr	r3, [pc, #332]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0xe4>
 800600e:	e014      	b.n	800603a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fc fcd8 	bl	80029c4 <HAL_GetTick>
 8006014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006018:	f7fc fcd4 	bl	80029c4 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b64      	cmp	r3, #100	@ 0x64
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e342      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800602a:	4b49      	ldr	r3, [pc, #292]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f0      	bne.n	8006018 <HAL_RCC_OscConfig+0x10c>
 8006036:	e000      	b.n	800603a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 808c 	beq.w	8006160 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006048:	4b41      	ldr	r3, [pc, #260]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006050:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006052:	4b3f      	ldr	r3, [pc, #252]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_RCC_OscConfig+0x162>
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	2b18      	cmp	r3, #24
 8006062:	d137      	bne.n	80060d4 <HAL_RCC_OscConfig+0x1c8>
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f003 0303 	and.w	r3, r3, #3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d132      	bne.n	80060d4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800606e:	4b38      	ldr	r3, [pc, #224]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <HAL_RCC_OscConfig+0x17a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e314      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006086:	4b32      	ldr	r3, [pc, #200]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f023 0219 	bic.w	r2, r3, #25
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	492f      	ldr	r1, [pc, #188]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8006094:	4313      	orrs	r3, r2
 8006096:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006098:	f7fc fc94 	bl	80029c4 <HAL_GetTick>
 800609c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a0:	f7fc fc90 	bl	80029c4 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e2fe      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060b2:	4b27      	ldr	r3, [pc, #156]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0f0      	beq.n	80060a0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060be:	4b24      	ldr	r3, [pc, #144]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	061b      	lsls	r3, r3, #24
 80060cc:	4920      	ldr	r1, [pc, #128]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060d2:	e045      	b.n	8006160 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d026      	beq.n	800612a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 0219 	bic.w	r2, r3, #25
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4919      	ldr	r1, [pc, #100]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ee:	f7fc fc69 	bl	80029c4 <HAL_GetTick>
 80060f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f6:	f7fc fc65 	bl	80029c4 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e2d3      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006108:	4b11      	ldr	r3, [pc, #68]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0f0      	beq.n	80060f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006114:	4b0e      	ldr	r3, [pc, #56]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	061b      	lsls	r3, r3, #24
 8006122:	490b      	ldr	r1, [pc, #44]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8006124:	4313      	orrs	r3, r2
 8006126:	604b      	str	r3, [r1, #4]
 8006128:	e01a      	b.n	8006160 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800612a:	4b09      	ldr	r3, [pc, #36]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a08      	ldr	r2, [pc, #32]	@ (8006150 <HAL_RCC_OscConfig+0x244>)
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006136:	f7fc fc45 	bl	80029c4 <HAL_GetTick>
 800613a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800613c:	e00a      	b.n	8006154 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800613e:	f7fc fc41 	bl	80029c4 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d903      	bls.n	8006154 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e2af      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
 8006150:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006154:	4b96      	ldr	r3, [pc, #600]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1ee      	bne.n	800613e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	d06a      	beq.n	8006242 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800616c:	4b90      	ldr	r3, [pc, #576]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006174:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006176:	4b8e      	ldr	r3, [pc, #568]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b08      	cmp	r3, #8
 8006180:	d007      	beq.n	8006192 <HAL_RCC_OscConfig+0x286>
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	2b18      	cmp	r3, #24
 8006186:	d11b      	bne.n	80061c0 <HAL_RCC_OscConfig+0x2b4>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b01      	cmp	r3, #1
 8006190:	d116      	bne.n	80061c0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006192:	4b87      	ldr	r3, [pc, #540]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <HAL_RCC_OscConfig+0x29e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	2b80      	cmp	r3, #128	@ 0x80
 80061a4:	d001      	beq.n	80061aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e282      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061aa:	4b81      	ldr	r3, [pc, #516]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	061b      	lsls	r3, r3, #24
 80061b8:	497d      	ldr	r1, [pc, #500]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061be:	e040      	b.n	8006242 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d023      	beq.n	8006210 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061c8:	4b79      	ldr	r3, [pc, #484]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a78      	ldr	r2, [pc, #480]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80061ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d4:	f7fc fbf6 	bl	80029c4 <HAL_GetTick>
 80061d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061dc:	f7fc fbf2 	bl	80029c4 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e260      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061ee:	4b70      	ldr	r3, [pc, #448]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f0      	beq.n	80061dc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061fa:	4b6d      	ldr	r3, [pc, #436]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	061b      	lsls	r3, r3, #24
 8006208:	4969      	ldr	r1, [pc, #420]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 800620a:	4313      	orrs	r3, r2
 800620c:	60cb      	str	r3, [r1, #12]
 800620e:	e018      	b.n	8006242 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006210:	4b67      	ldr	r3, [pc, #412]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a66      	ldr	r2, [pc, #408]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800621a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621c:	f7fc fbd2 	bl	80029c4 <HAL_GetTick>
 8006220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006224:	f7fc fbce 	bl	80029c4 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e23c      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006236:	4b5e      	ldr	r3, [pc, #376]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	2b00      	cmp	r3, #0
 800624c:	d036      	beq.n	80062bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d019      	beq.n	800628a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006256:	4b56      	ldr	r3, [pc, #344]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800625a:	4a55      	ldr	r2, [pc, #340]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 800625c:	f043 0301 	orr.w	r3, r3, #1
 8006260:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006262:	f7fc fbaf 	bl	80029c4 <HAL_GetTick>
 8006266:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800626a:	f7fc fbab 	bl	80029c4 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e219      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800627c:	4b4c      	ldr	r3, [pc, #304]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 800627e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f0      	beq.n	800626a <HAL_RCC_OscConfig+0x35e>
 8006288:	e018      	b.n	80062bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800628a:	4b49      	ldr	r3, [pc, #292]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 800628c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800628e:	4a48      	ldr	r2, [pc, #288]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006296:	f7fc fb95 	bl	80029c4 <HAL_GetTick>
 800629a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800629e:	f7fc fb91 	bl	80029c4 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e1ff      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062b0:	4b3f      	ldr	r3, [pc, #252]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80062b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f0      	bne.n	800629e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d036      	beq.n	8006336 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d019      	beq.n	8006304 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062d0:	4b37      	ldr	r3, [pc, #220]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a36      	ldr	r2, [pc, #216]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80062d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062dc:	f7fc fb72 	bl	80029c4 <HAL_GetTick>
 80062e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062e4:	f7fc fb6e 	bl	80029c4 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e1dc      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062f6:	4b2e      	ldr	r3, [pc, #184]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f0      	beq.n	80062e4 <HAL_RCC_OscConfig+0x3d8>
 8006302:	e018      	b.n	8006336 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006304:	4b2a      	ldr	r3, [pc, #168]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a29      	ldr	r2, [pc, #164]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 800630a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800630e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006310:	f7fc fb58 	bl	80029c4 <HAL_GetTick>
 8006314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006318:	f7fc fb54 	bl	80029c4 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e1c2      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800632a:	4b21      	ldr	r3, [pc, #132]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8086 	beq.w	8006450 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006344:	4b1b      	ldr	r3, [pc, #108]	@ (80063b4 <HAL_RCC_OscConfig+0x4a8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1a      	ldr	r2, [pc, #104]	@ (80063b4 <HAL_RCC_OscConfig+0x4a8>)
 800634a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800634e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006350:	f7fc fb38 	bl	80029c4 <HAL_GetTick>
 8006354:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006358:	f7fc fb34 	bl	80029c4 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	@ 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e1a2      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800636a:	4b12      	ldr	r3, [pc, #72]	@ (80063b4 <HAL_RCC_OscConfig+0x4a8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d106      	bne.n	800638c <HAL_RCC_OscConfig+0x480>
 800637e:	4b0c      	ldr	r3, [pc, #48]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006382:	4a0b      	ldr	r2, [pc, #44]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	6713      	str	r3, [r2, #112]	@ 0x70
 800638a:	e032      	b.n	80063f2 <HAL_RCC_OscConfig+0x4e6>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d111      	bne.n	80063b8 <HAL_RCC_OscConfig+0x4ac>
 8006394:	4b06      	ldr	r3, [pc, #24]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 8006396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006398:	4a05      	ldr	r2, [pc, #20]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	6713      	str	r3, [r2, #112]	@ 0x70
 80063a0:	4b03      	ldr	r3, [pc, #12]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80063a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a4:	4a02      	ldr	r2, [pc, #8]	@ (80063b0 <HAL_RCC_OscConfig+0x4a4>)
 80063a6:	f023 0304 	bic.w	r3, r3, #4
 80063aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ac:	e021      	b.n	80063f2 <HAL_RCC_OscConfig+0x4e6>
 80063ae:	bf00      	nop
 80063b0:	58024400 	.word	0x58024400
 80063b4:	58024800 	.word	0x58024800
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b05      	cmp	r3, #5
 80063be:	d10c      	bne.n	80063da <HAL_RCC_OscConfig+0x4ce>
 80063c0:	4b83      	ldr	r3, [pc, #524]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80063c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c4:	4a82      	ldr	r2, [pc, #520]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80063c6:	f043 0304 	orr.w	r3, r3, #4
 80063ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80063cc:	4b80      	ldr	r3, [pc, #512]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80063ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d0:	4a7f      	ldr	r2, [pc, #508]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80063d2:	f043 0301 	orr.w	r3, r3, #1
 80063d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063d8:	e00b      	b.n	80063f2 <HAL_RCC_OscConfig+0x4e6>
 80063da:	4b7d      	ldr	r3, [pc, #500]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063de:	4a7c      	ldr	r2, [pc, #496]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e6:	4b7a      	ldr	r3, [pc, #488]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80063e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ea:	4a79      	ldr	r2, [pc, #484]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80063ec:	f023 0304 	bic.w	r3, r3, #4
 80063f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d015      	beq.n	8006426 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fa:	f7fc fae3 	bl	80029c4 <HAL_GetTick>
 80063fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006400:	e00a      	b.n	8006418 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006402:	f7fc fadf 	bl	80029c4 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006410:	4293      	cmp	r3, r2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e14b      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006418:	4b6d      	ldr	r3, [pc, #436]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 800641a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0ee      	beq.n	8006402 <HAL_RCC_OscConfig+0x4f6>
 8006424:	e014      	b.n	8006450 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006426:	f7fc facd 	bl	80029c4 <HAL_GetTick>
 800642a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800642c:	e00a      	b.n	8006444 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800642e:	f7fc fac9 	bl	80029c4 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643c:	4293      	cmp	r3, r2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e135      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006444:	4b62      	ldr	r3, [pc, #392]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1ee      	bne.n	800642e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 812a 	beq.w	80066ae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800645a:	4b5d      	ldr	r3, [pc, #372]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006462:	2b18      	cmp	r3, #24
 8006464:	f000 80ba 	beq.w	80065dc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	2b02      	cmp	r3, #2
 800646e:	f040 8095 	bne.w	800659c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006472:	4b57      	ldr	r3, [pc, #348]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a56      	ldr	r2, [pc, #344]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006478:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800647c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647e:	f7fc faa1 	bl	80029c4 <HAL_GetTick>
 8006482:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006486:	f7fc fa9d 	bl	80029c4 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e10b      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006498:	4b4d      	ldr	r3, [pc, #308]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f0      	bne.n	8006486 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064a4:	4b4a      	ldr	r3, [pc, #296]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80064a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064a8:	4b4a      	ldr	r3, [pc, #296]	@ (80065d4 <HAL_RCC_OscConfig+0x6c8>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064b4:	0112      	lsls	r2, r2, #4
 80064b6:	430a      	orrs	r2, r1
 80064b8:	4945      	ldr	r1, [pc, #276]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c2:	3b01      	subs	r3, #1
 80064c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064cc:	3b01      	subs	r3, #1
 80064ce:	025b      	lsls	r3, r3, #9
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d8:	3b01      	subs	r3, #1
 80064da:	041b      	lsls	r3, r3, #16
 80064dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e6:	3b01      	subs	r3, #1
 80064e8:	061b      	lsls	r3, r3, #24
 80064ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80064ee:	4938      	ldr	r1, [pc, #224]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80064f4:	4b36      	ldr	r3, [pc, #216]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	4a35      	ldr	r2, [pc, #212]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006500:	4b33      	ldr	r3, [pc, #204]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006502:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006504:	4b34      	ldr	r3, [pc, #208]	@ (80065d8 <HAL_RCC_OscConfig+0x6cc>)
 8006506:	4013      	ands	r3, r2
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800650c:	00d2      	lsls	r2, r2, #3
 800650e:	4930      	ldr	r1, [pc, #192]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006510:	4313      	orrs	r3, r2
 8006512:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006514:	4b2e      	ldr	r3, [pc, #184]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006518:	f023 020c 	bic.w	r2, r3, #12
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006520:	492b      	ldr	r1, [pc, #172]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006522:	4313      	orrs	r3, r2
 8006524:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006526:	4b2a      	ldr	r3, [pc, #168]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652a:	f023 0202 	bic.w	r2, r3, #2
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006532:	4927      	ldr	r1, [pc, #156]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006534:	4313      	orrs	r3, r2
 8006536:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006538:	4b25      	ldr	r3, [pc, #148]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	4a24      	ldr	r2, [pc, #144]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 800653e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006544:	4b22      	ldr	r3, [pc, #136]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006548:	4a21      	ldr	r2, [pc, #132]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 800654a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800654e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006550:	4b1f      	ldr	r3, [pc, #124]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006554:	4a1e      	ldr	r2, [pc, #120]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006556:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800655a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800655c:	4b1c      	ldr	r3, [pc, #112]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 800655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006560:	4a1b      	ldr	r2, [pc, #108]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006568:	4b19      	ldr	r3, [pc, #100]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a18      	ldr	r2, [pc, #96]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 800656e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fc fa26 	bl	80029c4 <HAL_GetTick>
 8006578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800657c:	f7fc fa22 	bl	80029c4 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e090      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800658e:	4b10      	ldr	r3, [pc, #64]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f0      	beq.n	800657c <HAL_RCC_OscConfig+0x670>
 800659a:	e088      	b.n	80066ae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800659c:	4b0c      	ldr	r3, [pc, #48]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a0b      	ldr	r2, [pc, #44]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80065a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a8:	f7fc fa0c 	bl	80029c4 <HAL_GetTick>
 80065ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b0:	f7fc fa08 	bl	80029c4 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e076      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065c2:	4b03      	ldr	r3, [pc, #12]	@ (80065d0 <HAL_RCC_OscConfig+0x6c4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f0      	bne.n	80065b0 <HAL_RCC_OscConfig+0x6a4>
 80065ce:	e06e      	b.n	80066ae <HAL_RCC_OscConfig+0x7a2>
 80065d0:	58024400 	.word	0x58024400
 80065d4:	fffffc0c 	.word	0xfffffc0c
 80065d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065dc:	4b36      	ldr	r3, [pc, #216]	@ (80066b8 <HAL_RCC_OscConfig+0x7ac>)
 80065de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065e2:	4b35      	ldr	r3, [pc, #212]	@ (80066b8 <HAL_RCC_OscConfig+0x7ac>)
 80065e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d031      	beq.n	8006654 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f003 0203 	and.w	r2, r3, #3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d12a      	bne.n	8006654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	091b      	lsrs	r3, r3, #4
 8006602:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800660a:	429a      	cmp	r2, r3
 800660c:	d122      	bne.n	8006654 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006618:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800661a:	429a      	cmp	r2, r3
 800661c:	d11a      	bne.n	8006654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	0a5b      	lsrs	r3, r3, #9
 8006622:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800662a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800662c:	429a      	cmp	r2, r3
 800662e:	d111      	bne.n	8006654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	0c1b      	lsrs	r3, r3, #16
 8006634:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800663e:	429a      	cmp	r2, r3
 8006640:	d108      	bne.n	8006654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	0e1b      	lsrs	r3, r3, #24
 8006646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006650:	429a      	cmp	r2, r3
 8006652:	d001      	beq.n	8006658 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e02b      	b.n	80066b0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006658:	4b17      	ldr	r3, [pc, #92]	@ (80066b8 <HAL_RCC_OscConfig+0x7ac>)
 800665a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665c:	08db      	lsrs	r3, r3, #3
 800665e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006662:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	429a      	cmp	r2, r3
 800666c:	d01f      	beq.n	80066ae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800666e:	4b12      	ldr	r3, [pc, #72]	@ (80066b8 <HAL_RCC_OscConfig+0x7ac>)
 8006670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006672:	4a11      	ldr	r2, [pc, #68]	@ (80066b8 <HAL_RCC_OscConfig+0x7ac>)
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800667a:	f7fc f9a3 	bl	80029c4 <HAL_GetTick>
 800667e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006680:	bf00      	nop
 8006682:	f7fc f99f 	bl	80029c4 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	4293      	cmp	r3, r2
 800668c:	d0f9      	beq.n	8006682 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800668e:	4b0a      	ldr	r3, [pc, #40]	@ (80066b8 <HAL_RCC_OscConfig+0x7ac>)
 8006690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006692:	4b0a      	ldr	r3, [pc, #40]	@ (80066bc <HAL_RCC_OscConfig+0x7b0>)
 8006694:	4013      	ands	r3, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800669a:	00d2      	lsls	r2, r2, #3
 800669c:	4906      	ldr	r1, [pc, #24]	@ (80066b8 <HAL_RCC_OscConfig+0x7ac>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066a2:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <HAL_RCC_OscConfig+0x7ac>)
 80066a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a6:	4a04      	ldr	r2, [pc, #16]	@ (80066b8 <HAL_RCC_OscConfig+0x7ac>)
 80066a8:	f043 0301 	orr.w	r3, r3, #1
 80066ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3730      	adds	r7, #48	@ 0x30
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	58024400 	.word	0x58024400
 80066bc:	ffff0007 	.word	0xffff0007

080066c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e19c      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066d4:	4b8a      	ldr	r3, [pc, #552]	@ (8006900 <HAL_RCC_ClockConfig+0x240>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d910      	bls.n	8006704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e2:	4b87      	ldr	r3, [pc, #540]	@ (8006900 <HAL_RCC_ClockConfig+0x240>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f023 020f 	bic.w	r2, r3, #15
 80066ea:	4985      	ldr	r1, [pc, #532]	@ (8006900 <HAL_RCC_ClockConfig+0x240>)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f2:	4b83      	ldr	r3, [pc, #524]	@ (8006900 <HAL_RCC_ClockConfig+0x240>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e184      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d010      	beq.n	8006732 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	4b7b      	ldr	r3, [pc, #492]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800671c:	429a      	cmp	r2, r3
 800671e:	d908      	bls.n	8006732 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006720:	4b78      	ldr	r3, [pc, #480]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	4975      	ldr	r1, [pc, #468]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 800672e:	4313      	orrs	r3, r2
 8006730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d010      	beq.n	8006760 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695a      	ldr	r2, [r3, #20]
 8006742:	4b70      	ldr	r3, [pc, #448]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800674a:	429a      	cmp	r2, r3
 800674c:	d908      	bls.n	8006760 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800674e:	4b6d      	ldr	r3, [pc, #436]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	496a      	ldr	r1, [pc, #424]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 800675c:	4313      	orrs	r3, r2
 800675e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b00      	cmp	r3, #0
 800676a:	d010      	beq.n	800678e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699a      	ldr	r2, [r3, #24]
 8006770:	4b64      	ldr	r3, [pc, #400]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006778:	429a      	cmp	r2, r3
 800677a:	d908      	bls.n	800678e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800677c:	4b61      	ldr	r3, [pc, #388]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	495e      	ldr	r1, [pc, #376]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 800678a:	4313      	orrs	r3, r2
 800678c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d010      	beq.n	80067bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69da      	ldr	r2, [r3, #28]
 800679e:	4b59      	ldr	r3, [pc, #356]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d908      	bls.n	80067bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067aa:	4b56      	ldr	r3, [pc, #344]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	4953      	ldr	r1, [pc, #332]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d010      	beq.n	80067ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	4b4d      	ldr	r3, [pc, #308]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d908      	bls.n	80067ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d8:	4b4a      	ldr	r3, [pc, #296]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	f023 020f 	bic.w	r2, r3, #15
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	4947      	ldr	r1, [pc, #284]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d055      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067f6:	4b43      	ldr	r3, [pc, #268]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	4940      	ldr	r1, [pc, #256]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006804:	4313      	orrs	r3, r2
 8006806:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d107      	bne.n	8006820 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006810:	4b3c      	ldr	r3, [pc, #240]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d121      	bne.n	8006860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0f6      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b03      	cmp	r3, #3
 8006826:	d107      	bne.n	8006838 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006828:	4b36      	ldr	r3, [pc, #216]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d115      	bne.n	8006860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e0ea      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d107      	bne.n	8006850 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006840:	4b30      	ldr	r3, [pc, #192]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d109      	bne.n	8006860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0de      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006850:	4b2c      	ldr	r3, [pc, #176]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0d6      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006860:	4b28      	ldr	r3, [pc, #160]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f023 0207 	bic.w	r2, r3, #7
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	4925      	ldr	r1, [pc, #148]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 800686e:	4313      	orrs	r3, r2
 8006870:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006872:	f7fc f8a7 	bl	80029c4 <HAL_GetTick>
 8006876:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006878:	e00a      	b.n	8006890 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800687a:	f7fc f8a3 	bl	80029c4 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006888:	4293      	cmp	r3, r2
 800688a:	d901      	bls.n	8006890 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e0be      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006890:	4b1c      	ldr	r3, [pc, #112]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	429a      	cmp	r2, r3
 80068a0:	d1eb      	bne.n	800687a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	4b14      	ldr	r3, [pc, #80]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d208      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068be:	4b11      	ldr	r3, [pc, #68]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f023 020f 	bic.w	r2, r3, #15
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	490e      	ldr	r1, [pc, #56]	@ (8006904 <HAL_RCC_ClockConfig+0x244>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <HAL_RCC_ClockConfig+0x240>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d214      	bcs.n	8006908 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068de:	4b08      	ldr	r3, [pc, #32]	@ (8006900 <HAL_RCC_ClockConfig+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f023 020f 	bic.w	r2, r3, #15
 80068e6:	4906      	ldr	r1, [pc, #24]	@ (8006900 <HAL_RCC_ClockConfig+0x240>)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ee:	4b04      	ldr	r3, [pc, #16]	@ (8006900 <HAL_RCC_ClockConfig+0x240>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e086      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
 8006900:	52002000 	.word	0x52002000
 8006904:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d010      	beq.n	8006936 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	4b3f      	ldr	r3, [pc, #252]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006920:	429a      	cmp	r2, r3
 8006922:	d208      	bcs.n	8006936 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006924:	4b3c      	ldr	r3, [pc, #240]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	4939      	ldr	r1, [pc, #228]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006932:	4313      	orrs	r3, r2
 8006934:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d010      	beq.n	8006964 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695a      	ldr	r2, [r3, #20]
 8006946:	4b34      	ldr	r3, [pc, #208]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800694e:	429a      	cmp	r2, r3
 8006950:	d208      	bcs.n	8006964 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006952:	4b31      	ldr	r3, [pc, #196]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	492e      	ldr	r1, [pc, #184]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006960:	4313      	orrs	r3, r2
 8006962:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	d010      	beq.n	8006992 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699a      	ldr	r2, [r3, #24]
 8006974:	4b28      	ldr	r3, [pc, #160]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800697c:	429a      	cmp	r2, r3
 800697e:	d208      	bcs.n	8006992 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006980:	4b25      	ldr	r3, [pc, #148]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	4922      	ldr	r1, [pc, #136]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 800698e:	4313      	orrs	r3, r2
 8006990:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d010      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69da      	ldr	r2, [r3, #28]
 80069a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d208      	bcs.n	80069c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	4917      	ldr	r1, [pc, #92]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069c0:	f000 f834 	bl	8006a2c <HAL_RCC_GetSysClockFreq>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4b14      	ldr	r3, [pc, #80]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	0a1b      	lsrs	r3, r3, #8
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	4912      	ldr	r1, [pc, #72]	@ (8006a1c <HAL_RCC_ClockConfig+0x35c>)
 80069d2:	5ccb      	ldrb	r3, [r1, r3]
 80069d4:	f003 031f 	and.w	r3, r3, #31
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
 80069dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069de:	4b0e      	ldr	r3, [pc, #56]	@ (8006a18 <HAL_RCC_ClockConfig+0x358>)
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	4a0d      	ldr	r2, [pc, #52]	@ (8006a1c <HAL_RCC_ClockConfig+0x35c>)
 80069e8:	5cd3      	ldrb	r3, [r2, r3]
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006a20 <HAL_RCC_ClockConfig+0x360>)
 80069f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006a24 <HAL_RCC_ClockConfig+0x364>)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80069fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006a28 <HAL_RCC_ClockConfig+0x368>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fb fa82 	bl	8001f0c <HAL_InitTick>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	0801c204 	.word	0x0801c204
 8006a20:	24000024 	.word	0x24000024
 8006a24:	24000020 	.word	0x24000020
 8006a28:	24000028 	.word	0x24000028

08006a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	@ 0x24
 8006a30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a32:	4bb3      	ldr	r3, [pc, #716]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a3a:	2b18      	cmp	r3, #24
 8006a3c:	f200 8155 	bhi.w	8006cea <HAL_RCC_GetSysClockFreq+0x2be>
 8006a40:	a201      	add	r2, pc, #4	@ (adr r2, 8006a48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006aad 	.word	0x08006aad
 8006a4c:	08006ceb 	.word	0x08006ceb
 8006a50:	08006ceb 	.word	0x08006ceb
 8006a54:	08006ceb 	.word	0x08006ceb
 8006a58:	08006ceb 	.word	0x08006ceb
 8006a5c:	08006ceb 	.word	0x08006ceb
 8006a60:	08006ceb 	.word	0x08006ceb
 8006a64:	08006ceb 	.word	0x08006ceb
 8006a68:	08006ad3 	.word	0x08006ad3
 8006a6c:	08006ceb 	.word	0x08006ceb
 8006a70:	08006ceb 	.word	0x08006ceb
 8006a74:	08006ceb 	.word	0x08006ceb
 8006a78:	08006ceb 	.word	0x08006ceb
 8006a7c:	08006ceb 	.word	0x08006ceb
 8006a80:	08006ceb 	.word	0x08006ceb
 8006a84:	08006ceb 	.word	0x08006ceb
 8006a88:	08006ad9 	.word	0x08006ad9
 8006a8c:	08006ceb 	.word	0x08006ceb
 8006a90:	08006ceb 	.word	0x08006ceb
 8006a94:	08006ceb 	.word	0x08006ceb
 8006a98:	08006ceb 	.word	0x08006ceb
 8006a9c:	08006ceb 	.word	0x08006ceb
 8006aa0:	08006ceb 	.word	0x08006ceb
 8006aa4:	08006ceb 	.word	0x08006ceb
 8006aa8:	08006adf 	.word	0x08006adf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aac:	4b94      	ldr	r3, [pc, #592]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d009      	beq.n	8006acc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ab8:	4b91      	ldr	r3, [pc, #580]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	4a90      	ldr	r2, [pc, #576]	@ (8006d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006aca:	e111      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006acc:	4b8d      	ldr	r3, [pc, #564]	@ (8006d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ace:	61bb      	str	r3, [r7, #24]
      break;
 8006ad0:	e10e      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ad4:	61bb      	str	r3, [r7, #24]
      break;
 8006ad6:	e10b      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ad8:	4b8c      	ldr	r3, [pc, #560]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ada:	61bb      	str	r3, [r7, #24]
      break;
 8006adc:	e108      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ade:	4b88      	ldr	r3, [pc, #544]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ae8:	4b85      	ldr	r3, [pc, #532]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006af2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006af4:	4b82      	ldr	r3, [pc, #520]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006afe:	4b80      	ldr	r3, [pc, #512]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b02:	08db      	lsrs	r3, r3, #3
 8006b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80e1 	beq.w	8006ce4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	f000 8083 	beq.w	8006c30 <HAL_RCC_GetSysClockFreq+0x204>
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	f200 80a1 	bhi.w	8006c74 <HAL_RCC_GetSysClockFreq+0x248>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <HAL_RCC_GetSysClockFreq+0x114>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d056      	beq.n	8006bec <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b3e:	e099      	b.n	8006c74 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b40:	4b6f      	ldr	r3, [pc, #444]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d02d      	beq.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	08db      	lsrs	r3, r3, #3
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	4a6b      	ldr	r2, [pc, #428]	@ (8006d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	ee07 3a90 	vmov	s15, r3
 8006b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b76:	4b62      	ldr	r3, [pc, #392]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b8a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006ba6:	e087      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006d14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bba:	4b51      	ldr	r3, [pc, #324]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bea:	e065      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfe:	4b40      	ldr	r3, [pc, #256]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c2e:	e043      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006d1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	4b2f      	ldr	r3, [pc, #188]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c72:	e021      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b1e      	ldr	r3, [pc, #120]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006cb8:	4b11      	ldr	r3, [pc, #68]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbc:	0a5b      	lsrs	r3, r3, #9
 8006cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	ee07 3a90 	vmov	s15, r3
 8006ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cdc:	ee17 3a90 	vmov	r3, s15
 8006ce0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006ce2:	e005      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61bb      	str	r3, [r7, #24]
      break;
 8006ce8:	e002      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006cea:	4b07      	ldr	r3, [pc, #28]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006cec:	61bb      	str	r3, [r7, #24]
      break;
 8006cee:	bf00      	nop
  }

  return sysclockfreq;
 8006cf0:	69bb      	ldr	r3, [r7, #24]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3724      	adds	r7, #36	@ 0x24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	58024400 	.word	0x58024400
 8006d04:	03d09000 	.word	0x03d09000
 8006d08:	003d0900 	.word	0x003d0900
 8006d0c:	007a1200 	.word	0x007a1200
 8006d10:	46000000 	.word	0x46000000
 8006d14:	4c742400 	.word	0x4c742400
 8006d18:	4a742400 	.word	0x4a742400
 8006d1c:	4af42400 	.word	0x4af42400

08006d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d26:	f7ff fe81 	bl	8006a2c <HAL_RCC_GetSysClockFreq>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	0a1b      	lsrs	r3, r3, #8
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	490f      	ldr	r1, [pc, #60]	@ (8006d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d38:	5ccb      	ldrb	r3, [r1, r3]
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d44:	4b0a      	ldr	r3, [pc, #40]	@ (8006d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	4a09      	ldr	r2, [pc, #36]	@ (8006d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d4e:	5cd3      	ldrb	r3, [r2, r3]
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5a:	4a07      	ldr	r2, [pc, #28]	@ (8006d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d5e:	4a07      	ldr	r2, [pc, #28]	@ (8006d7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d64:	4b04      	ldr	r3, [pc, #16]	@ (8006d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	58024400 	.word	0x58024400
 8006d74:	0801c204 	.word	0x0801c204
 8006d78:	24000024 	.word	0x24000024
 8006d7c:	24000020 	.word	0x24000020

08006d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d84:	f7ff ffcc 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	4b06      	ldr	r3, [pc, #24]	@ (8006da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	091b      	lsrs	r3, r3, #4
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	4904      	ldr	r1, [pc, #16]	@ (8006da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d96:	5ccb      	ldrb	r3, [r1, r3]
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	58024400 	.word	0x58024400
 8006da8:	0801c204 	.word	0x0801c204

08006dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006db0:	f7ff ffb6 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 8006db4:	4602      	mov	r2, r0
 8006db6:	4b06      	ldr	r3, [pc, #24]	@ (8006dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	0a1b      	lsrs	r3, r3, #8
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	4904      	ldr	r1, [pc, #16]	@ (8006dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dc2:	5ccb      	ldrb	r3, [r1, r3]
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	0801c204 	.word	0x0801c204

08006dd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	223f      	movs	r2, #63	@ 0x3f
 8006de6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006de8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0207 	and.w	r2, r3, #7
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006df4:	4b17      	ldr	r3, [pc, #92]	@ (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006e00:	4b14      	ldr	r3, [pc, #80]	@ (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f003 020f 	and.w	r2, r3, #15
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006e0c:	4b11      	ldr	r3, [pc, #68]	@ (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006e18:	4b0e      	ldr	r3, [pc, #56]	@ (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006e24:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006e30:	4b08      	ldr	r3, [pc, #32]	@ (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e3c:	4b06      	ldr	r3, [pc, #24]	@ (8006e58 <HAL_RCC_GetClockConfig+0x80>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 020f 	and.w	r2, r3, #15
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	601a      	str	r2, [r3, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	58024400 	.word	0x58024400
 8006e58:	52002000 	.word	0x52002000

08006e5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e60:	b0c6      	sub	sp, #280	@ 0x118
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e80:	2500      	movs	r5, #0
 8006e82:	ea54 0305 	orrs.w	r3, r4, r5
 8006e86:	d049      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e92:	d02f      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e98:	d828      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e9e:	d01a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ea0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ea4:	d822      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006eaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eae:	d007      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006eb0:	e01c      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb2:	4bab      	ldr	r3, [pc, #684]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb6:	4aaa      	ldr	r2, [pc, #680]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ebe:	e01a      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	2102      	movs	r1, #2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f001 fc25 	bl	8008718 <RCCEx_PLL2_Config>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ed4:	e00f      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eda:	3328      	adds	r3, #40	@ 0x28
 8006edc:	2102      	movs	r1, #2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f001 fccc 	bl	800887c <RCCEx_PLL3_Config>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006eea:	e004      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ef2:	e000      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006efe:	4b98      	ldr	r3, [pc, #608]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f0c:	4a94      	ldr	r2, [pc, #592]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f0e:	430b      	orrs	r3, r1
 8006f10:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f12:	e003      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f28:	f04f 0900 	mov.w	r9, #0
 8006f2c:	ea58 0309 	orrs.w	r3, r8, r9
 8006f30:	d047      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d82a      	bhi.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006f59 	.word	0x08006f59
 8006f48:	08006f67 	.word	0x08006f67
 8006f4c:	08006f7d 	.word	0x08006f7d
 8006f50:	08006f9b 	.word	0x08006f9b
 8006f54:	08006f9b 	.word	0x08006f9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f58:	4b81      	ldr	r3, [pc, #516]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5c:	4a80      	ldr	r2, [pc, #512]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f64:	e01a      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 fbd2 	bl	8008718 <RCCEx_PLL2_Config>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f7a:	e00f      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f80:	3328      	adds	r3, #40	@ 0x28
 8006f82:	2100      	movs	r1, #0
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 fc79 	bl	800887c <RCCEx_PLL3_Config>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f90:	e004      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f98:	e000      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fa4:	4b6e      	ldr	r3, [pc, #440]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fa8:	f023 0107 	bic.w	r1, r3, #7
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb2:	4a6b      	ldr	r2, [pc, #428]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fb8:	e003      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006fce:	f04f 0b00 	mov.w	fp, #0
 8006fd2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fd6:	d05b      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fe0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006fe4:	d03b      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006fe6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006fea:	d834      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006fec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ff0:	d037      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006ff2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ff6:	d82e      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ff8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ffc:	d033      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006ffe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007002:	d828      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007008:	d01a      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800700a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800700e:	d822      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007014:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007018:	d007      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800701a:	e01c      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701c:	4b50      	ldr	r3, [pc, #320]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800701e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007020:	4a4f      	ldr	r2, [pc, #316]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007028:	e01e      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702e:	3308      	adds	r3, #8
 8007030:	2100      	movs	r1, #0
 8007032:	4618      	mov	r0, r3
 8007034:	f001 fb70 	bl	8008718 <RCCEx_PLL2_Config>
 8007038:	4603      	mov	r3, r0
 800703a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800703e:	e013      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007044:	3328      	adds	r3, #40	@ 0x28
 8007046:	2100      	movs	r1, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f001 fc17 	bl	800887c <RCCEx_PLL3_Config>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007054:	e008      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800705c:	e004      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800705e:	bf00      	nop
 8007060:	e002      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007062:	bf00      	nop
 8007064:	e000      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10b      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007070:	4b3b      	ldr	r3, [pc, #236]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007074:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007080:	4a37      	ldr	r2, [pc, #220]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007082:	430b      	orrs	r3, r1
 8007084:	6593      	str	r3, [r2, #88]	@ 0x58
 8007086:	e003      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800708c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800709c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070a0:	2300      	movs	r3, #0
 80070a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80070aa:	460b      	mov	r3, r1
 80070ac:	4313      	orrs	r3, r2
 80070ae:	d05d      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070b8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80070bc:	d03b      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80070be:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80070c2:	d834      	bhi.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070c8:	d037      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80070ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070ce:	d82e      	bhi.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070d4:	d033      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80070d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070da:	d828      	bhi.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070e0:	d01a      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80070e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070e6:	d822      	bhi.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80070ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070f0:	d007      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80070f2:	e01c      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f8:	4a19      	ldr	r2, [pc, #100]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007100:	e01e      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007106:	3308      	adds	r3, #8
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f001 fb04 	bl	8008718 <RCCEx_PLL2_Config>
 8007110:	4603      	mov	r3, r0
 8007112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007116:	e013      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711c:	3328      	adds	r3, #40	@ 0x28
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f001 fbab 	bl	800887c <RCCEx_PLL3_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800712c:	e008      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007134:	e004      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007136:	bf00      	nop
 8007138:	e002      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800713e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007140:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10d      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007148:	4b05      	ldr	r3, [pc, #20]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800714a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007154:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007158:	4a01      	ldr	r2, [pc, #4]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800715a:	430b      	orrs	r3, r1
 800715c:	6593      	str	r3, [r2, #88]	@ 0x58
 800715e:	e005      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007168:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007178:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800717c:	2300      	movs	r3, #0
 800717e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007182:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007186:	460b      	mov	r3, r1
 8007188:	4313      	orrs	r3, r2
 800718a:	d03a      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007192:	2b30      	cmp	r3, #48	@ 0x30
 8007194:	d01f      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007196:	2b30      	cmp	r3, #48	@ 0x30
 8007198:	d819      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800719a:	2b20      	cmp	r3, #32
 800719c:	d00c      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d815      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d019      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80071a6:	2b10      	cmp	r3, #16
 80071a8:	d111      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071aa:	4baa      	ldr	r3, [pc, #680]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	4aa9      	ldr	r2, [pc, #676]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071b6:	e011      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071bc:	3308      	adds	r3, #8
 80071be:	2102      	movs	r1, #2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 faa9 	bl	8008718 <RCCEx_PLL2_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071cc:	e006      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071d4:	e002      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80071d6:	bf00      	nop
 80071d8:	e000      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80071da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80071e4:	4b9b      	ldr	r3, [pc, #620]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80071ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f2:	4a98      	ldr	r2, [pc, #608]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071f4:	430b      	orrs	r3, r1
 80071f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071f8:	e003      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800720e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007212:	2300      	movs	r3, #0
 8007214:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007218:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800721c:	460b      	mov	r3, r1
 800721e:	4313      	orrs	r3, r2
 8007220:	d051      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007228:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800722c:	d035      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800722e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007232:	d82e      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007234:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007238:	d031      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800723a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800723e:	d828      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007244:	d01a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800724a:	d822      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007254:	d007      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007256:	e01c      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007258:	4b7e      	ldr	r3, [pc, #504]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	4a7d      	ldr	r2, [pc, #500]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800725e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007264:	e01c      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726a:	3308      	adds	r3, #8
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f001 fa52 	bl	8008718 <RCCEx_PLL2_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800727a:	e011      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007280:	3328      	adds	r3, #40	@ 0x28
 8007282:	2100      	movs	r1, #0
 8007284:	4618      	mov	r0, r3
 8007286:	f001 faf9 	bl	800887c <RCCEx_PLL3_Config>
 800728a:	4603      	mov	r3, r0
 800728c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007290:	e006      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007298:	e002      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800729e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072a8:	4b6a      	ldr	r3, [pc, #424]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072b6:	4a67      	ldr	r2, [pc, #412]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072b8:	430b      	orrs	r3, r1
 80072ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80072bc:	e003      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072d6:	2300      	movs	r3, #0
 80072d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4313      	orrs	r3, r2
 80072e4:	d053      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072f0:	d033      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80072f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072f6:	d82c      	bhi.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80072f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072fc:	d02f      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80072fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007302:	d826      	bhi.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007304:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007308:	d02b      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800730a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800730e:	d820      	bhi.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007310:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007314:	d012      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800731a:	d81a      	bhi.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d022      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007324:	d115      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732a:	3308      	adds	r3, #8
 800732c:	2101      	movs	r1, #1
 800732e:	4618      	mov	r0, r3
 8007330:	f001 f9f2 	bl	8008718 <RCCEx_PLL2_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800733a:	e015      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007340:	3328      	adds	r3, #40	@ 0x28
 8007342:	2101      	movs	r1, #1
 8007344:	4618      	mov	r0, r3
 8007346:	f001 fa99 	bl	800887c <RCCEx_PLL3_Config>
 800734a:	4603      	mov	r3, r0
 800734c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007350:	e00a      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007358:	e006      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800735a:	bf00      	nop
 800735c:	e004      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800735e:	bf00      	nop
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007362:	bf00      	nop
 8007364:	e000      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007370:	4b38      	ldr	r3, [pc, #224]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007374:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800737e:	4a35      	ldr	r2, [pc, #212]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007380:	430b      	orrs	r3, r1
 8007382:	6513      	str	r3, [r2, #80]	@ 0x50
 8007384:	e003      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007386:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800738a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800738e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800739a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800739e:	2300      	movs	r3, #0
 80073a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d058      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80073b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073ba:	d033      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80073bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073c0:	d82c      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c6:	d02f      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80073c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073cc:	d826      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073d2:	d02b      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80073d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073d8:	d820      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073de:	d012      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80073e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073e4:	d81a      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d022      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ee:	d115      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f4:	3308      	adds	r3, #8
 80073f6:	2101      	movs	r1, #1
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 f98d 	bl	8008718 <RCCEx_PLL2_Config>
 80073fe:	4603      	mov	r3, r0
 8007400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007404:	e015      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	3328      	adds	r3, #40	@ 0x28
 800740c:	2101      	movs	r1, #1
 800740e:	4618      	mov	r0, r3
 8007410:	f001 fa34 	bl	800887c <RCCEx_PLL3_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800741a:	e00a      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007422:	e006      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007424:	bf00      	nop
 8007426:	e004      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10e      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800743a:	4b06      	ldr	r3, [pc, #24]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800743c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007446:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800744a:	4a02      	ldr	r2, [pc, #8]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800744c:	430b      	orrs	r3, r1
 800744e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007450:	e006      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007452:	bf00      	nop
 8007454:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800745c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800746c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007470:	2300      	movs	r3, #0
 8007472:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007476:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800747a:	460b      	mov	r3, r1
 800747c:	4313      	orrs	r3, r2
 800747e:	d037      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800748a:	d00e      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800748c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007490:	d816      	bhi.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d018      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800749a:	d111      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800749c:	4bc4      	ldr	r3, [pc, #784]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800749e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a0:	4ac3      	ldr	r2, [pc, #780]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074a8:	e00f      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ae:	3308      	adds	r3, #8
 80074b0:	2101      	movs	r1, #1
 80074b2:	4618      	mov	r0, r3
 80074b4:	f001 f930 	bl	8008718 <RCCEx_PLL2_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074be:	e004      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074c6:	e000      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80074c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074d2:	4bb7      	ldr	r3, [pc, #732]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80074da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074e0:	4ab3      	ldr	r2, [pc, #716]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074e2:	430b      	orrs	r3, r1
 80074e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80074e6:	e003      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80074fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007500:	2300      	movs	r3, #0
 8007502:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007506:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800750a:	460b      	mov	r3, r1
 800750c:	4313      	orrs	r3, r2
 800750e:	d039      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007516:	2b03      	cmp	r3, #3
 8007518:	d81c      	bhi.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800751a:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	0800755d 	.word	0x0800755d
 8007524:	08007531 	.word	0x08007531
 8007528:	0800753f 	.word	0x0800753f
 800752c:	0800755d 	.word	0x0800755d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007530:	4b9f      	ldr	r3, [pc, #636]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007534:	4a9e      	ldr	r2, [pc, #632]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800753a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800753c:	e00f      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800753e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007542:	3308      	adds	r3, #8
 8007544:	2102      	movs	r1, #2
 8007546:	4618      	mov	r0, r3
 8007548:	f001 f8e6 	bl	8008718 <RCCEx_PLL2_Config>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007552:	e004      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800755a:	e000      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800755c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800755e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007566:	4b92      	ldr	r3, [pc, #584]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800756a:	f023 0103 	bic.w	r1, r3, #3
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007574:	4a8e      	ldr	r2, [pc, #568]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007576:	430b      	orrs	r3, r1
 8007578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800757a:	e003      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007580:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007594:	2300      	movs	r3, #0
 8007596:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800759a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800759e:	460b      	mov	r3, r1
 80075a0:	4313      	orrs	r3, r2
 80075a2:	f000 8099 	beq.w	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075a6:	4b83      	ldr	r3, [pc, #524]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a82      	ldr	r2, [pc, #520]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075b2:	f7fb fa07 	bl	80029c4 <HAL_GetTick>
 80075b6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ba:	e00b      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075bc:	f7fb fa02 	bl	80029c4 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b64      	cmp	r3, #100	@ 0x64
 80075ca:	d903      	bls.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075d2:	e005      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075d4:	4b77      	ldr	r3, [pc, #476]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0ed      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80075e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d173      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075e8:	4b71      	ldr	r3, [pc, #452]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075f4:	4053      	eors	r3, r2
 80075f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d015      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075fe:	4b6c      	ldr	r3, [pc, #432]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007606:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800760a:	4b69      	ldr	r3, [pc, #420]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760e:	4a68      	ldr	r2, [pc, #416]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007614:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007616:	4b66      	ldr	r3, [pc, #408]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800761a:	4a65      	ldr	r2, [pc, #404]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800761c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007620:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007622:	4a63      	ldr	r2, [pc, #396]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007628:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007636:	d118      	bne.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007638:	f7fb f9c4 	bl	80029c4 <HAL_GetTick>
 800763c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007640:	e00d      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007642:	f7fb f9bf 	bl	80029c4 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800764c:	1ad2      	subs	r2, r2, r3
 800764e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007652:	429a      	cmp	r2, r3
 8007654:	d903      	bls.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800765c:	e005      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800765e:	4b54      	ldr	r3, [pc, #336]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0eb      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800766a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800766e:	2b00      	cmp	r3, #0
 8007670:	d129      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800767a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800767e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007682:	d10e      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007684:	4b4a      	ldr	r3, [pc, #296]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007690:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007694:	091a      	lsrs	r2, r3, #4
 8007696:	4b48      	ldr	r3, [pc, #288]	@ (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007698:	4013      	ands	r3, r2
 800769a:	4a45      	ldr	r2, [pc, #276]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800769c:	430b      	orrs	r3, r1
 800769e:	6113      	str	r3, [r2, #16]
 80076a0:	e005      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80076a2:	4b43      	ldr	r3, [pc, #268]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	4a42      	ldr	r2, [pc, #264]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076ac:	6113      	str	r3, [r2, #16]
 80076ae:	4b40      	ldr	r3, [pc, #256]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076be:	4a3c      	ldr	r2, [pc, #240]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076c0:	430b      	orrs	r3, r1
 80076c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80076c4:	e008      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80076ce:	e003      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f002 0301 	and.w	r3, r2, #1
 80076e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076e8:	2300      	movs	r3, #0
 80076ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80076f2:	460b      	mov	r3, r1
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f000 808f 	beq.w	8007818 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007700:	2b28      	cmp	r3, #40	@ 0x28
 8007702:	d871      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007704:	a201      	add	r2, pc, #4	@ (adr r2, 800770c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	080077f1 	.word	0x080077f1
 8007710:	080077e9 	.word	0x080077e9
 8007714:	080077e9 	.word	0x080077e9
 8007718:	080077e9 	.word	0x080077e9
 800771c:	080077e9 	.word	0x080077e9
 8007720:	080077e9 	.word	0x080077e9
 8007724:	080077e9 	.word	0x080077e9
 8007728:	080077e9 	.word	0x080077e9
 800772c:	080077bd 	.word	0x080077bd
 8007730:	080077e9 	.word	0x080077e9
 8007734:	080077e9 	.word	0x080077e9
 8007738:	080077e9 	.word	0x080077e9
 800773c:	080077e9 	.word	0x080077e9
 8007740:	080077e9 	.word	0x080077e9
 8007744:	080077e9 	.word	0x080077e9
 8007748:	080077e9 	.word	0x080077e9
 800774c:	080077d3 	.word	0x080077d3
 8007750:	080077e9 	.word	0x080077e9
 8007754:	080077e9 	.word	0x080077e9
 8007758:	080077e9 	.word	0x080077e9
 800775c:	080077e9 	.word	0x080077e9
 8007760:	080077e9 	.word	0x080077e9
 8007764:	080077e9 	.word	0x080077e9
 8007768:	080077e9 	.word	0x080077e9
 800776c:	080077f1 	.word	0x080077f1
 8007770:	080077e9 	.word	0x080077e9
 8007774:	080077e9 	.word	0x080077e9
 8007778:	080077e9 	.word	0x080077e9
 800777c:	080077e9 	.word	0x080077e9
 8007780:	080077e9 	.word	0x080077e9
 8007784:	080077e9 	.word	0x080077e9
 8007788:	080077e9 	.word	0x080077e9
 800778c:	080077f1 	.word	0x080077f1
 8007790:	080077e9 	.word	0x080077e9
 8007794:	080077e9 	.word	0x080077e9
 8007798:	080077e9 	.word	0x080077e9
 800779c:	080077e9 	.word	0x080077e9
 80077a0:	080077e9 	.word	0x080077e9
 80077a4:	080077e9 	.word	0x080077e9
 80077a8:	080077e9 	.word	0x080077e9
 80077ac:	080077f1 	.word	0x080077f1
 80077b0:	58024400 	.word	0x58024400
 80077b4:	58024800 	.word	0x58024800
 80077b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c0:	3308      	adds	r3, #8
 80077c2:	2101      	movs	r1, #1
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 ffa7 	bl	8008718 <RCCEx_PLL2_Config>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077d0:	e00f      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d6:	3328      	adds	r3, #40	@ 0x28
 80077d8:	2101      	movs	r1, #1
 80077da:	4618      	mov	r0, r3
 80077dc:	f001 f84e 	bl	800887c <RCCEx_PLL3_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077e6:	e004      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077ee:	e000      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80077f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80077fa:	4bbf      	ldr	r3, [pc, #764]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80077fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007806:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007808:	4abb      	ldr	r2, [pc, #748]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800780a:	430b      	orrs	r3, r1
 800780c:	6553      	str	r3, [r2, #84]	@ 0x54
 800780e:	e003      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007814:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f002 0302 	and.w	r3, r2, #2
 8007824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007828:	2300      	movs	r3, #0
 800782a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800782e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007832:	460b      	mov	r3, r1
 8007834:	4313      	orrs	r3, r2
 8007836:	d041      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800783e:	2b05      	cmp	r3, #5
 8007840:	d824      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007842:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	08007895 	.word	0x08007895
 800784c:	08007861 	.word	0x08007861
 8007850:	08007877 	.word	0x08007877
 8007854:	08007895 	.word	0x08007895
 8007858:	08007895 	.word	0x08007895
 800785c:	08007895 	.word	0x08007895
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007864:	3308      	adds	r3, #8
 8007866:	2101      	movs	r1, #1
 8007868:	4618      	mov	r0, r3
 800786a:	f000 ff55 	bl	8008718 <RCCEx_PLL2_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007874:	e00f      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787a:	3328      	adds	r3, #40	@ 0x28
 800787c:	2101      	movs	r1, #1
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fffc 	bl	800887c <RCCEx_PLL3_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800788a:	e004      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007892:	e000      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007896:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10a      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800789e:	4b96      	ldr	r3, [pc, #600]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a2:	f023 0107 	bic.w	r1, r3, #7
 80078a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ac:	4a92      	ldr	r2, [pc, #584]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078ae:	430b      	orrs	r3, r1
 80078b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80078b2:	e003      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f002 0304 	and.w	r3, r2, #4
 80078c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078cc:	2300      	movs	r3, #0
 80078ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80078d6:	460b      	mov	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	d044      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e4:	2b05      	cmp	r3, #5
 80078e6:	d825      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80078e8:	a201      	add	r2, pc, #4	@ (adr r2, 80078f0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	0800793d 	.word	0x0800793d
 80078f4:	08007909 	.word	0x08007909
 80078f8:	0800791f 	.word	0x0800791f
 80078fc:	0800793d 	.word	0x0800793d
 8007900:	0800793d 	.word	0x0800793d
 8007904:	0800793d 	.word	0x0800793d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790c:	3308      	adds	r3, #8
 800790e:	2101      	movs	r1, #1
 8007910:	4618      	mov	r0, r3
 8007912:	f000 ff01 	bl	8008718 <RCCEx_PLL2_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800791c:	e00f      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007922:	3328      	adds	r3, #40	@ 0x28
 8007924:	2101      	movs	r1, #1
 8007926:	4618      	mov	r0, r3
 8007928:	f000 ffa8 	bl	800887c <RCCEx_PLL3_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007932:	e004      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800793a:	e000      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800793c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10b      	bne.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007946:	4b6c      	ldr	r3, [pc, #432]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794a:	f023 0107 	bic.w	r1, r3, #7
 800794e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007956:	4a68      	ldr	r2, [pc, #416]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007958:	430b      	orrs	r3, r1
 800795a:	6593      	str	r3, [r2, #88]	@ 0x58
 800795c:	e003      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007962:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f002 0320 	and.w	r3, r2, #32
 8007972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007976:	2300      	movs	r3, #0
 8007978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800797c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007980:	460b      	mov	r3, r1
 8007982:	4313      	orrs	r3, r2
 8007984:	d055      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800798e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007992:	d033      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007998:	d82c      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800799a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800799e:	d02f      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80079a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a4:	d826      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079aa:	d02b      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80079ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079b0:	d820      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b6:	d012      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80079b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079bc:	d81a      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d022      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80079c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079c6:	d115      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079cc:	3308      	adds	r3, #8
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fea1 	bl	8008718 <RCCEx_PLL2_Config>
 80079d6:	4603      	mov	r3, r0
 80079d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079dc:	e015      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e2:	3328      	adds	r3, #40	@ 0x28
 80079e4:	2102      	movs	r1, #2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 ff48 	bl	800887c <RCCEx_PLL3_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079f2:	e00a      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079fa:	e006      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80079fc:	bf00      	nop
 80079fe:	e004      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a00:	bf00      	nop
 8007a02:	e002      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a04:	bf00      	nop
 8007a06:	e000      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a12:	4b39      	ldr	r3, [pc, #228]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a16:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a22:	4a35      	ldr	r2, [pc, #212]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a28:	e003      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a42:	2300      	movs	r3, #0
 8007a44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a48:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	d058      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a5a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a5e:	d033      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007a60:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a64:	d82c      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a6a:	d02f      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a70:	d826      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a76:	d02b      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007a78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a7c:	d820      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a82:	d012      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a88:	d81a      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d022      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a92:	d115      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a98:	3308      	adds	r3, #8
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fe3b 	bl	8008718 <RCCEx_PLL2_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007aa8:	e015      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aae:	3328      	adds	r3, #40	@ 0x28
 8007ab0:	2102      	movs	r1, #2
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 fee2 	bl	800887c <RCCEx_PLL3_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007abe:	e00a      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ac6:	e006      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ac8:	bf00      	nop
 8007aca:	e004      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007acc:	bf00      	nop
 8007ace:	e002      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ad0:	bf00      	nop
 8007ad2:	e000      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10e      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ade:	4b06      	ldr	r3, [pc, #24]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007aee:	4a02      	ldr	r2, [pc, #8]	@ (8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007af0:	430b      	orrs	r3, r1
 8007af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007af4:	e006      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007af6:	bf00      	nop
 8007af8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b14:	2300      	movs	r3, #0
 8007b16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	d055      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b2c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b30:	d033      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007b32:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b36:	d82c      	bhi.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b3c:	d02f      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b42:	d826      	bhi.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b44:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b48:	d02b      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007b4a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b4e:	d820      	bhi.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b54:	d012      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007b56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b5a:	d81a      	bhi.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d022      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b64:	d115      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fdd2 	bl	8008718 <RCCEx_PLL2_Config>
 8007b74:	4603      	mov	r3, r0
 8007b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b7a:	e015      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b80:	3328      	adds	r3, #40	@ 0x28
 8007b82:	2102      	movs	r1, #2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 fe79 	bl	800887c <RCCEx_PLL3_Config>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b90:	e00a      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b98:	e006      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007b9a:	bf00      	nop
 8007b9c:	e004      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007b9e:	bf00      	nop
 8007ba0:	e002      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007ba2:	bf00      	nop
 8007ba4:	e000      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10b      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bb0:	4ba0      	ldr	r3, [pc, #640]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bc0:	4a9c      	ldr	r2, [pc, #624]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bc2:	430b      	orrs	r3, r1
 8007bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bc6:	e003      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f002 0308 	and.w	r3, r2, #8
 8007bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007be6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007bea:	460b      	mov	r3, r1
 8007bec:	4313      	orrs	r3, r2
 8007bee:	d01e      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfc:	d10c      	bne.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c02:	3328      	adds	r3, #40	@ 0x28
 8007c04:	2102      	movs	r1, #2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fe38 	bl	800887c <RCCEx_PLL3_Config>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007c18:	4b86      	ldr	r3, [pc, #536]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c28:	4a82      	ldr	r2, [pc, #520]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c2a:	430b      	orrs	r3, r1
 8007c2c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f002 0310 	and.w	r3, r2, #16
 8007c3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c44:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	d01e      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c5a:	d10c      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c60:	3328      	adds	r3, #40	@ 0x28
 8007c62:	2102      	movs	r1, #2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fe09 	bl	800887c <RCCEx_PLL3_Config>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c76:	4b6f      	ldr	r3, [pc, #444]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c86:	4a6b      	ldr	r2, [pc, #428]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007c98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c9e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	d03e      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cb4:	d022      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007cb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cba:	d81b      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc4:	d00b      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007cc6:	e015      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ccc:	3308      	adds	r3, #8
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 fd21 	bl	8008718 <RCCEx_PLL2_Config>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007cdc:	e00f      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce2:	3328      	adds	r3, #40	@ 0x28
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fdc8 	bl	800887c <RCCEx_PLL3_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007cf2:	e004      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cfa:	e000      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10b      	bne.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d06:	4b4b      	ldr	r3, [pc, #300]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d16:	4a47      	ldr	r2, [pc, #284]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d1c:	e003      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d32:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d34:	2300      	movs	r3, #0
 8007d36:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	d03b      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d4e:	d01f      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007d50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d54:	d818      	bhi.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d5a:	d003      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007d5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d60:	d007      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007d62:	e011      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d64:	4b33      	ldr	r3, [pc, #204]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d68:	4a32      	ldr	r2, [pc, #200]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d70:	e00f      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d76:	3328      	adds	r3, #40	@ 0x28
 8007d78:	2101      	movs	r1, #1
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fd7e 	bl	800887c <RCCEx_PLL3_Config>
 8007d80:	4603      	mov	r3, r0
 8007d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d86:	e004      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d8e:	e000      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10b      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d9a:	4b26      	ldr	r3, [pc, #152]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007daa:	4a22      	ldr	r2, [pc, #136]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dac:	430b      	orrs	r3, r1
 8007dae:	6553      	str	r3, [r2, #84]	@ 0x54
 8007db0:	e003      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007db6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007dc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dc8:	2300      	movs	r3, #0
 8007dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dcc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	d034      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007de4:	d007      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007de6:	e011      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de8:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dec:	4a11      	ldr	r2, [pc, #68]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007df4:	e00e      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	2102      	movs	r1, #2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fc8a 	bl	8008718 <RCCEx_PLL2_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e0a:	e003      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10d      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e1c:	4b05      	ldr	r3, [pc, #20]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e2a:	4a02      	ldr	r2, [pc, #8]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e30:	e006      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007e32:	bf00      	nop
 8007e34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e4e:	2300      	movs	r3, #0
 8007e50:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e52:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007e56:	460b      	mov	r3, r1
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	d00c      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e60:	3328      	adds	r3, #40	@ 0x28
 8007e62:	2102      	movs	r1, #2
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fd09 	bl	800887c <RCCEx_PLL3_Config>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007e82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e84:	2300      	movs	r3, #0
 8007e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e88:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	d036      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e9c:	d018      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ea2:	d811      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea8:	d014      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007eaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eae:	d80b      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d011      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eb8:	d106      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eba:	4bb7      	ldr	r3, [pc, #732]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebe:	4ab6      	ldr	r2, [pc, #728]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ec6:	e008      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ece:	e004      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ed0:	bf00      	nop
 8007ed2:	e002      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ed4:	bf00      	nop
 8007ed6:	e000      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ee2:	4bad      	ldr	r3, [pc, #692]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ef0:	4aa9      	ldr	r2, [pc, #676]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ef2:	430b      	orrs	r3, r1
 8007ef4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ef6:	e003      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f0e:	2300      	movs	r3, #0
 8007f10:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f16:	460b      	mov	r3, r1
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	d009      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f1c:	4b9e      	ldr	r3, [pc, #632]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f2a:	4a9b      	ldr	r2, [pc, #620]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f3e:	2300      	movs	r3, #0
 8007f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007f46:	460b      	mov	r3, r1
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	d009      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f4c:	4b92      	ldr	r3, [pc, #584]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f50:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f5a:	4a8f      	ldr	r2, [pc, #572]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f6e:	2300      	movs	r3, #0
 8007f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007f76:	460b      	mov	r3, r1
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	d00e      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f7c:	4b86      	ldr	r3, [pc, #536]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	4a85      	ldr	r2, [pc, #532]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f86:	6113      	str	r3, [r2, #16]
 8007f88:	4b83      	ldr	r3, [pc, #524]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f8a:	6919      	ldr	r1, [r3, #16]
 8007f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f94:	4a80      	ldr	r2, [pc, #512]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f96:	430b      	orrs	r3, r1
 8007f98:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fa8:	2300      	movs	r3, #0
 8007faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	d009      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007fb6:	4b78      	ldr	r3, [pc, #480]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc4:	4a74      	ldr	r2, [pc, #464]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007fd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fd8:	2300      	movs	r3, #0
 8007fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fdc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	d00a      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff6:	4a68      	ldr	r2, [pc, #416]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	2100      	movs	r1, #0
 8008006:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800800e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008012:	460b      	mov	r3, r1
 8008014:	4313      	orrs	r3, r2
 8008016:	d011      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801c:	3308      	adds	r3, #8
 800801e:	2100      	movs	r1, #0
 8008020:	4618      	mov	r0, r3
 8008022:	f000 fb79 	bl	8008718 <RCCEx_PLL2_Config>
 8008026:	4603      	mov	r3, r0
 8008028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800802c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008038:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800803c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	2100      	movs	r1, #0
 8008046:	6239      	str	r1, [r7, #32]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	627b      	str	r3, [r7, #36]	@ 0x24
 800804e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008052:	460b      	mov	r3, r1
 8008054:	4313      	orrs	r3, r2
 8008056:	d011      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805c:	3308      	adds	r3, #8
 800805e:	2101      	movs	r1, #1
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fb59 	bl	8008718 <RCCEx_PLL2_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800806c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800807c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	2100      	movs	r1, #0
 8008086:	61b9      	str	r1, [r7, #24]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	61fb      	str	r3, [r7, #28]
 800808e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008092:	460b      	mov	r3, r1
 8008094:	4313      	orrs	r3, r2
 8008096:	d011      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809c:	3308      	adds	r3, #8
 800809e:	2102      	movs	r1, #2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fb39 	bl	8008718 <RCCEx_PLL2_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80080ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80080bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	2100      	movs	r1, #0
 80080c6:	6139      	str	r1, [r7, #16]
 80080c8:	f003 0308 	and.w	r3, r3, #8
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80080d2:	460b      	mov	r3, r1
 80080d4:	4313      	orrs	r3, r2
 80080d6:	d011      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080dc:	3328      	adds	r3, #40	@ 0x28
 80080de:	2100      	movs	r1, #0
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 fbcb 	bl	800887c <RCCEx_PLL3_Config>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80080ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80080fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	2100      	movs	r1, #0
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	f003 0310 	and.w	r3, r3, #16
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008112:	460b      	mov	r3, r1
 8008114:	4313      	orrs	r3, r2
 8008116:	d011      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811c:	3328      	adds	r3, #40	@ 0x28
 800811e:	2101      	movs	r1, #1
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fbab 	bl	800887c <RCCEx_PLL3_Config>
 8008126:	4603      	mov	r3, r0
 8008128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800812c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008130:	2b00      	cmp	r3, #0
 8008132:	d003      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008138:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800813c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	2100      	movs	r1, #0
 8008146:	6039      	str	r1, [r7, #0]
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	607b      	str	r3, [r7, #4]
 800814e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008152:	460b      	mov	r3, r1
 8008154:	4313      	orrs	r3, r2
 8008156:	d011      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815c:	3328      	adds	r3, #40	@ 0x28
 800815e:	2102      	movs	r1, #2
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fb8b 	bl	800887c <RCCEx_PLL3_Config>
 8008166:	4603      	mov	r3, r0
 8008168:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800816c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800817c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	e000      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
}
 800818a:	4618      	mov	r0, r3
 800818c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008190:	46bd      	mov	sp, r7
 8008192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008196:	bf00      	nop
 8008198:	58024400 	.word	0x58024400

0800819c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081a0:	f7fe fdbe 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 80081a4:	4602      	mov	r2, r0
 80081a6:	4b06      	ldr	r3, [pc, #24]	@ (80081c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	091b      	lsrs	r3, r3, #4
 80081ac:	f003 0307 	and.w	r3, r3, #7
 80081b0:	4904      	ldr	r1, [pc, #16]	@ (80081c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80081b2:	5ccb      	ldrb	r3, [r1, r3]
 80081b4:	f003 031f 	and.w	r3, r3, #31
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081bc:	4618      	mov	r0, r3
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	58024400 	.word	0x58024400
 80081c4:	0801c204 	.word	0x0801c204

080081c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b089      	sub	sp, #36	@ 0x24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081d0:	4ba1      	ldr	r3, [pc, #644]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80081da:	4b9f      	ldr	r3, [pc, #636]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081de:	0b1b      	lsrs	r3, r3, #12
 80081e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081e6:	4b9c      	ldr	r3, [pc, #624]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ea:	091b      	lsrs	r3, r3, #4
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80081f2:	4b99      	ldr	r3, [pc, #612]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f6:	08db      	lsrs	r3, r3, #3
 80081f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 8111 	beq.w	8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b02      	cmp	r3, #2
 800821a:	f000 8083 	beq.w	8008324 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	2b02      	cmp	r3, #2
 8008222:	f200 80a1 	bhi.w	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d056      	beq.n	80082e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008232:	e099      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008234:	4b88      	ldr	r3, [pc, #544]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0320 	and.w	r3, r3, #32
 800823c:	2b00      	cmp	r3, #0
 800823e:	d02d      	beq.n	800829c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008240:	4b85      	ldr	r3, [pc, #532]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	08db      	lsrs	r3, r3, #3
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	4a84      	ldr	r2, [pc, #528]	@ (800845c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800824c:	fa22 f303 	lsr.w	r3, r2, r3
 8008250:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800826a:	4b7b      	ldr	r3, [pc, #492]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827a:	ed97 6a03 	vldr	s12, [r7, #12]
 800827e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800828a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800828e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008296:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800829a:	e087      	b.n	80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80082aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ae:	4b6a      	ldr	r3, [pc, #424]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082be:	ed97 6a03 	vldr	s12, [r7, #12]
 80082c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082de:	e065      	b.n	80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f2:	4b59      	ldr	r3, [pc, #356]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008302:	ed97 6a03 	vldr	s12, [r7, #12]
 8008306:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800830a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008322:	e043      	b.n	80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008336:	4b48      	ldr	r3, [pc, #288]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008346:	ed97 6a03 	vldr	s12, [r7, #12]
 800834a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800834e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800835a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008366:	e021      	b.n	80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008372:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837a:	4b37      	ldr	r3, [pc, #220]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800837c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838a:	ed97 6a03 	vldr	s12, [r7, #12]
 800838e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800839e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80083ac:	4b2a      	ldr	r3, [pc, #168]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b0:	0a5b      	lsrs	r3, r3, #9
 80083b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083d2:	ee17 2a90 	vmov	r2, s15
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80083da:	4b1f      	ldr	r3, [pc, #124]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083de:	0c1b      	lsrs	r3, r3, #16
 80083e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e4:	ee07 3a90 	vmov	s15, r3
 80083e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008400:	ee17 2a90 	vmov	r2, s15
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008408:	4b13      	ldr	r3, [pc, #76]	@ (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800840a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840c:	0e1b      	lsrs	r3, r3, #24
 800840e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800841e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008422:	edd7 6a07 	vldr	s13, [r7, #28]
 8008426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800842a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800842e:	ee17 2a90 	vmov	r2, s15
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008436:	e008      	b.n	800844a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	609a      	str	r2, [r3, #8]
}
 800844a:	bf00      	nop
 800844c:	3724      	adds	r7, #36	@ 0x24
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	58024400 	.word	0x58024400
 800845c:	03d09000 	.word	0x03d09000
 8008460:	46000000 	.word	0x46000000
 8008464:	4c742400 	.word	0x4c742400
 8008468:	4a742400 	.word	0x4a742400
 800846c:	4af42400 	.word	0x4af42400

08008470 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008470:	b480      	push	{r7}
 8008472:	b089      	sub	sp, #36	@ 0x24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008478:	4ba1      	ldr	r3, [pc, #644]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800847a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008482:	4b9f      	ldr	r3, [pc, #636]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008486:	0d1b      	lsrs	r3, r3, #20
 8008488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800848c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800848e:	4b9c      	ldr	r3, [pc, #624]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008492:	0a1b      	lsrs	r3, r3, #8
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800849a:	4b99      	ldr	r3, [pc, #612]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800849c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800849e:	08db      	lsrs	r3, r3, #3
 80084a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	fb02 f303 	mul.w	r3, r2, r3
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 8111 	beq.w	80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	f000 8083 	beq.w	80085cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	f200 80a1 	bhi.w	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d003      	beq.n	80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d056      	beq.n	8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084da:	e099      	b.n	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084dc:	4b88      	ldr	r3, [pc, #544]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d02d      	beq.n	8008544 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084e8:	4b85      	ldr	r3, [pc, #532]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	08db      	lsrs	r3, r3, #3
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	4a84      	ldr	r2, [pc, #528]	@ (8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084f4:	fa22 f303 	lsr.w	r3, r2, r3
 80084f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008512:	4b7b      	ldr	r3, [pc, #492]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008522:	ed97 6a03 	vldr	s12, [r7, #12]
 8008526:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800852a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008542:	e087      	b.n	8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800870c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008556:	4b6a      	ldr	r3, [pc, #424]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008566:	ed97 6a03 	vldr	s12, [r7, #12]
 800856a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800856e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008586:	e065      	b.n	8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859a:	4b59      	ldr	r3, [pc, #356]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800859c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ca:	e043      	b.n	8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085de:	4b48      	ldr	r3, [pc, #288]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800860e:	e021      	b.n	8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800861e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008622:	4b37      	ldr	r3, [pc, #220]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008632:	ed97 6a03 	vldr	s12, [r7, #12]
 8008636:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800863a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800864a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008652:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008654:	4b2a      	ldr	r3, [pc, #168]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008658:	0a5b      	lsrs	r3, r3, #9
 800865a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008666:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800866a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800866e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800867a:	ee17 2a90 	vmov	r2, s15
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008682:	4b1f      	ldr	r3, [pc, #124]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008686:	0c1b      	lsrs	r3, r3, #16
 8008688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800868c:	ee07 3a90 	vmov	s15, r3
 8008690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008694:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800869c:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a8:	ee17 2a90 	vmov	r2, s15
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80086b0:	4b13      	ldr	r3, [pc, #76]	@ (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b4:	0e1b      	lsrs	r3, r3, #24
 80086b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ba:	ee07 3a90 	vmov	s15, r3
 80086be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086d6:	ee17 2a90 	vmov	r2, s15
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086de:	e008      	b.n	80086f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	609a      	str	r2, [r3, #8]
}
 80086f2:	bf00      	nop
 80086f4:	3724      	adds	r7, #36	@ 0x24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	58024400 	.word	0x58024400
 8008704:	03d09000 	.word	0x03d09000
 8008708:	46000000 	.word	0x46000000
 800870c:	4c742400 	.word	0x4c742400
 8008710:	4a742400 	.word	0x4a742400
 8008714:	4af42400 	.word	0x4af42400

08008718 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008726:	4b53      	ldr	r3, [pc, #332]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 8008728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	2b03      	cmp	r3, #3
 8008730:	d101      	bne.n	8008736 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e099      	b.n	800886a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008736:	4b4f      	ldr	r3, [pc, #316]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a4e      	ldr	r2, [pc, #312]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 800873c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008742:	f7fa f93f 	bl	80029c4 <HAL_GetTick>
 8008746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008748:	e008      	b.n	800875c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800874a:	f7fa f93b 	bl	80029c4 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d901      	bls.n	800875c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e086      	b.n	800886a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800875c:	4b45      	ldr	r3, [pc, #276]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1f0      	bne.n	800874a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008768:	4b42      	ldr	r3, [pc, #264]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 800876a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	031b      	lsls	r3, r3, #12
 8008776:	493f      	ldr	r1, [pc, #252]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 8008778:	4313      	orrs	r3, r2
 800877a:	628b      	str	r3, [r1, #40]	@ 0x28
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	3b01      	subs	r3, #1
 8008782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	3b01      	subs	r3, #1
 800878c:	025b      	lsls	r3, r3, #9
 800878e:	b29b      	uxth	r3, r3
 8008790:	431a      	orrs	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	3b01      	subs	r3, #1
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800879e:	431a      	orrs	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	061b      	lsls	r3, r3, #24
 80087a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087ac:	4931      	ldr	r1, [pc, #196]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087b2:	4b30      	ldr	r3, [pc, #192]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	492d      	ldr	r1, [pc, #180]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c8:	f023 0220 	bic.w	r2, r3, #32
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	4928      	ldr	r1, [pc, #160]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087d6:	4b27      	ldr	r3, [pc, #156]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087da:	4a26      	ldr	r2, [pc, #152]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087dc:	f023 0310 	bic.w	r3, r3, #16
 80087e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087e2:	4b24      	ldr	r3, [pc, #144]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087e6:	4b24      	ldr	r3, [pc, #144]	@ (8008878 <RCCEx_PLL2_Config+0x160>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	69d2      	ldr	r2, [r2, #28]
 80087ee:	00d2      	lsls	r2, r2, #3
 80087f0:	4920      	ldr	r1, [pc, #128]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087f6:	4b1f      	ldr	r3, [pc, #124]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 80087fc:	f043 0310 	orr.w	r3, r3, #16
 8008800:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d106      	bne.n	8008816 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008808:	4b1a      	ldr	r3, [pc, #104]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 800880a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880c:	4a19      	ldr	r2, [pc, #100]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 800880e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008812:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008814:	e00f      	b.n	8008836 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d106      	bne.n	800882a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800881c:	4b15      	ldr	r3, [pc, #84]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 800881e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008820:	4a14      	ldr	r2, [pc, #80]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 8008822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008826:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008828:	e005      	b.n	8008836 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800882a:	4b12      	ldr	r3, [pc, #72]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 800882c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882e:	4a11      	ldr	r2, [pc, #68]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 8008830:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008834:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008836:	4b0f      	ldr	r3, [pc, #60]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a0e      	ldr	r2, [pc, #56]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 800883c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008842:	f7fa f8bf 	bl	80029c4 <HAL_GetTick>
 8008846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008848:	e008      	b.n	800885c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800884a:	f7fa f8bb 	bl	80029c4 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d901      	bls.n	800885c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e006      	b.n	800886a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800885c:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <RCCEx_PLL2_Config+0x15c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0f0      	beq.n	800884a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	58024400 	.word	0x58024400
 8008878:	ffff0007 	.word	0xffff0007

0800887c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800888a:	4b53      	ldr	r3, [pc, #332]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 800888c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	2b03      	cmp	r3, #3
 8008894:	d101      	bne.n	800889a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e099      	b.n	80089ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800889a:	4b4f      	ldr	r3, [pc, #316]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a4e      	ldr	r2, [pc, #312]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 80088a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088a6:	f7fa f88d 	bl	80029c4 <HAL_GetTick>
 80088aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088ac:	e008      	b.n	80088c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088ae:	f7fa f889 	bl	80029c4 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d901      	bls.n	80088c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e086      	b.n	80089ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088c0:	4b45      	ldr	r3, [pc, #276]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1f0      	bne.n	80088ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088cc:	4b42      	ldr	r3, [pc, #264]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 80088ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	051b      	lsls	r3, r3, #20
 80088da:	493f      	ldr	r1, [pc, #252]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	628b      	str	r3, [r1, #40]	@ 0x28
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	025b      	lsls	r3, r3, #9
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	431a      	orrs	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	041b      	lsls	r3, r3, #16
 80088fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008902:	431a      	orrs	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	3b01      	subs	r3, #1
 800890a:	061b      	lsls	r3, r3, #24
 800890c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008910:	4931      	ldr	r1, [pc, #196]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008912:	4313      	orrs	r3, r2
 8008914:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008916:	4b30      	ldr	r3, [pc, #192]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	492d      	ldr	r1, [pc, #180]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008924:	4313      	orrs	r3, r2
 8008926:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008928:	4b2b      	ldr	r3, [pc, #172]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 800892a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	4928      	ldr	r1, [pc, #160]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008936:	4313      	orrs	r3, r2
 8008938:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800893a:	4b27      	ldr	r3, [pc, #156]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 800893c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893e:	4a26      	ldr	r2, [pc, #152]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008944:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008946:	4b24      	ldr	r3, [pc, #144]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800894a:	4b24      	ldr	r3, [pc, #144]	@ (80089dc <RCCEx_PLL3_Config+0x160>)
 800894c:	4013      	ands	r3, r2
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	69d2      	ldr	r2, [r2, #28]
 8008952:	00d2      	lsls	r2, r2, #3
 8008954:	4920      	ldr	r1, [pc, #128]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008956:	4313      	orrs	r3, r2
 8008958:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800895a:	4b1f      	ldr	r3, [pc, #124]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 800895c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895e:	4a1e      	ldr	r2, [pc, #120]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008964:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800896c:	4b1a      	ldr	r3, [pc, #104]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 800896e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008970:	4a19      	ldr	r2, [pc, #100]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008972:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008976:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008978:	e00f      	b.n	800899a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d106      	bne.n	800898e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008980:	4b15      	ldr	r3, [pc, #84]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008984:	4a14      	ldr	r2, [pc, #80]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008986:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800898a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800898c:	e005      	b.n	800899a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800898e:	4b12      	ldr	r3, [pc, #72]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008992:	4a11      	ldr	r2, [pc, #68]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 8008994:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008998:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800899a:	4b0f      	ldr	r3, [pc, #60]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a0e      	ldr	r2, [pc, #56]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 80089a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a6:	f7fa f80d 	bl	80029c4 <HAL_GetTick>
 80089aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089ac:	e008      	b.n	80089c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089ae:	f7fa f809 	bl	80029c4 <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d901      	bls.n	80089c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e006      	b.n	80089ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089c0:	4b05      	ldr	r3, [pc, #20]	@ (80089d8 <RCCEx_PLL3_Config+0x15c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d0f0      	beq.n	80089ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	58024400 	.word	0x58024400
 80089dc:	ffff0007 	.word	0xffff0007

080089e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e049      	b.n	8008a86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7f9 fd12 	bl	8002430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f000 fae4 	bl	8008fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d001      	beq.n	8008aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e05e      	b.n	8008b66 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8008b74 <HAL_TIM_Base_Start_IT+0xe4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d02c      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x94>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad2:	d027      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x94>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a27      	ldr	r2, [pc, #156]	@ (8008b78 <HAL_TIM_Base_Start_IT+0xe8>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d022      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x94>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a26      	ldr	r2, [pc, #152]	@ (8008b7c <HAL_TIM_Base_Start_IT+0xec>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d01d      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x94>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a24      	ldr	r2, [pc, #144]	@ (8008b80 <HAL_TIM_Base_Start_IT+0xf0>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d018      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x94>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a23      	ldr	r2, [pc, #140]	@ (8008b84 <HAL_TIM_Base_Start_IT+0xf4>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d013      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x94>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a21      	ldr	r2, [pc, #132]	@ (8008b88 <HAL_TIM_Base_Start_IT+0xf8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d00e      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x94>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a20      	ldr	r2, [pc, #128]	@ (8008b8c <HAL_TIM_Base_Start_IT+0xfc>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d009      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x94>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a1e      	ldr	r2, [pc, #120]	@ (8008b90 <HAL_TIM_Base_Start_IT+0x100>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d004      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0x94>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8008b94 <HAL_TIM_Base_Start_IT+0x104>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d115      	bne.n	8008b50 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8008b98 <HAL_TIM_Base_Start_IT+0x108>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b06      	cmp	r3, #6
 8008b34:	d015      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0xd2>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b3c:	d011      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f042 0201 	orr.w	r2, r2, #1
 8008b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4e:	e008      	b.n	8008b62 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0201 	orr.w	r2, r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	e000      	b.n	8008b64 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	40010000 	.word	0x40010000
 8008b78:	40000400 	.word	0x40000400
 8008b7c:	40000800 	.word	0x40000800
 8008b80:	40000c00 	.word	0x40000c00
 8008b84:	40010400 	.word	0x40010400
 8008b88:	40001800 	.word	0x40001800
 8008b8c:	40014000 	.word	0x40014000
 8008b90:	4000e000 	.word	0x4000e000
 8008b94:	4000e400 	.word	0x4000e400
 8008b98:	00010007 	.word	0x00010007

08008b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d020      	beq.n	8008c00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01b      	beq.n	8008c00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f06f 0202 	mvn.w	r2, #2
 8008bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f9e2 	bl	8008fb0 <HAL_TIM_IC_CaptureCallback>
 8008bec:	e005      	b.n	8008bfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f9d4 	bl	8008f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f9e5 	bl	8008fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 0304 	and.w	r3, r3, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d020      	beq.n	8008c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d01b      	beq.n	8008c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f06f 0204 	mvn.w	r2, #4
 8008c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2202      	movs	r2, #2
 8008c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f9bc 	bl	8008fb0 <HAL_TIM_IC_CaptureCallback>
 8008c38:	e005      	b.n	8008c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f9ae 	bl	8008f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f9bf 	bl	8008fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d020      	beq.n	8008c98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01b      	beq.n	8008c98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f06f 0208 	mvn.w	r2, #8
 8008c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f996 	bl	8008fb0 <HAL_TIM_IC_CaptureCallback>
 8008c84:	e005      	b.n	8008c92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f988 	bl	8008f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f999 	bl	8008fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f003 0310 	and.w	r3, r3, #16
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d020      	beq.n	8008ce4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f003 0310 	and.w	r3, r3, #16
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d01b      	beq.n	8008ce4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f06f 0210 	mvn.w	r2, #16
 8008cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2208      	movs	r2, #8
 8008cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f970 	bl	8008fb0 <HAL_TIM_IC_CaptureCallback>
 8008cd0:	e005      	b.n	8008cde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f962 	bl	8008f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f973 	bl	8008fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00c      	beq.n	8008d08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d007      	beq.n	8008d08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f06f 0201 	mvn.w	r2, #1
 8008d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7f8 fe08 	bl	8001918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00c      	beq.n	8008d36 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d007      	beq.n	8008d36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fb4b 	bl	80093cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00c      	beq.n	8008d5a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d007      	beq.n	8008d5a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fb43 	bl	80093e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00c      	beq.n	8008d7e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d007      	beq.n	8008d7e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f92d 	bl	8008fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00c      	beq.n	8008da2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f003 0320 	and.w	r3, r3, #32
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f06f 0220 	mvn.w	r2, #32
 8008d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fb0b 	bl	80093b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008da2:	bf00      	nop
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1c>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e0dc      	b.n	8008f82 <HAL_TIM_ConfigClockSource+0x1d6>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	4b6a      	ldr	r3, [pc, #424]	@ (8008f8c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008de4:	4013      	ands	r3, r2
 8008de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a64      	ldr	r2, [pc, #400]	@ (8008f90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	f000 80a9 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e04:	4a62      	ldr	r2, [pc, #392]	@ (8008f90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	f200 80ae 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e0c:	4a61      	ldr	r2, [pc, #388]	@ (8008f94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	f000 80a1 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e14:	4a5f      	ldr	r2, [pc, #380]	@ (8008f94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	f200 80a6 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e1c:	4a5e      	ldr	r2, [pc, #376]	@ (8008f98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	f000 8099 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e24:	4a5c      	ldr	r2, [pc, #368]	@ (8008f98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	f200 809e 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008e30:	f000 8091 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008e38:	f200 8096 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e40:	f000 8089 	beq.w	8008f56 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e48:	f200 808e 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e50:	d03e      	beq.n	8008ed0 <HAL_TIM_ConfigClockSource+0x124>
 8008e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e56:	f200 8087 	bhi.w	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e5e:	f000 8086 	beq.w	8008f6e <HAL_TIM_ConfigClockSource+0x1c2>
 8008e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e66:	d87f      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e68:	2b70      	cmp	r3, #112	@ 0x70
 8008e6a:	d01a      	beq.n	8008ea2 <HAL_TIM_ConfigClockSource+0xf6>
 8008e6c:	2b70      	cmp	r3, #112	@ 0x70
 8008e6e:	d87b      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e70:	2b60      	cmp	r3, #96	@ 0x60
 8008e72:	d050      	beq.n	8008f16 <HAL_TIM_ConfigClockSource+0x16a>
 8008e74:	2b60      	cmp	r3, #96	@ 0x60
 8008e76:	d877      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e78:	2b50      	cmp	r3, #80	@ 0x50
 8008e7a:	d03c      	beq.n	8008ef6 <HAL_TIM_ConfigClockSource+0x14a>
 8008e7c:	2b50      	cmp	r3, #80	@ 0x50
 8008e7e:	d873      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e80:	2b40      	cmp	r3, #64	@ 0x40
 8008e82:	d058      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x18a>
 8008e84:	2b40      	cmp	r3, #64	@ 0x40
 8008e86:	d86f      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e88:	2b30      	cmp	r3, #48	@ 0x30
 8008e8a:	d064      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e8c:	2b30      	cmp	r3, #48	@ 0x30
 8008e8e:	d86b      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	d060      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e94:	2b20      	cmp	r3, #32
 8008e96:	d867      	bhi.n	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d05c      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e9c:	2b10      	cmp	r3, #16
 8008e9e:	d05a      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ea0:	e062      	b.n	8008f68 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008eb2:	f000 f9c5 	bl	8009240 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	609a      	str	r2, [r3, #8]
      break;
 8008ece:	e04f      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ee0:	f000 f9ae 	bl	8009240 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ef2:	609a      	str	r2, [r3, #8]
      break;
 8008ef4:	e03c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f02:	461a      	mov	r2, r3
 8008f04:	f000 f91e 	bl	8009144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2150      	movs	r1, #80	@ 0x50
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f978 	bl	8009204 <TIM_ITRx_SetConfig>
      break;
 8008f14:	e02c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f22:	461a      	mov	r2, r3
 8008f24:	f000 f93d 	bl	80091a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2160      	movs	r1, #96	@ 0x60
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f968 	bl	8009204 <TIM_ITRx_SetConfig>
      break;
 8008f34:	e01c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f42:	461a      	mov	r2, r3
 8008f44:	f000 f8fe 	bl	8009144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2140      	movs	r1, #64	@ 0x40
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f958 	bl	8009204 <TIM_ITRx_SetConfig>
      break;
 8008f54:	e00c      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4610      	mov	r0, r2
 8008f62:	f000 f94f 	bl	8009204 <TIM_ITRx_SetConfig>
      break;
 8008f66:	e003      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f6c:	e000      	b.n	8008f70 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	ffceff88 	.word	0xffceff88
 8008f90:	00100040 	.word	0x00100040
 8008f94:	00100030 	.word	0x00100030
 8008f98:	00100020 	.word	0x00100020

08008f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a47      	ldr	r2, [pc, #284]	@ (800911c <TIM_Base_SetConfig+0x130>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d013      	beq.n	800902c <TIM_Base_SetConfig+0x40>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800900a:	d00f      	beq.n	800902c <TIM_Base_SetConfig+0x40>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a44      	ldr	r2, [pc, #272]	@ (8009120 <TIM_Base_SetConfig+0x134>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d00b      	beq.n	800902c <TIM_Base_SetConfig+0x40>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a43      	ldr	r2, [pc, #268]	@ (8009124 <TIM_Base_SetConfig+0x138>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d007      	beq.n	800902c <TIM_Base_SetConfig+0x40>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a42      	ldr	r2, [pc, #264]	@ (8009128 <TIM_Base_SetConfig+0x13c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d003      	beq.n	800902c <TIM_Base_SetConfig+0x40>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a41      	ldr	r2, [pc, #260]	@ (800912c <TIM_Base_SetConfig+0x140>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d108      	bne.n	800903e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a36      	ldr	r2, [pc, #216]	@ (800911c <TIM_Base_SetConfig+0x130>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d027      	beq.n	8009096 <TIM_Base_SetConfig+0xaa>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800904c:	d023      	beq.n	8009096 <TIM_Base_SetConfig+0xaa>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a33      	ldr	r2, [pc, #204]	@ (8009120 <TIM_Base_SetConfig+0x134>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d01f      	beq.n	8009096 <TIM_Base_SetConfig+0xaa>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a32      	ldr	r2, [pc, #200]	@ (8009124 <TIM_Base_SetConfig+0x138>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d01b      	beq.n	8009096 <TIM_Base_SetConfig+0xaa>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a31      	ldr	r2, [pc, #196]	@ (8009128 <TIM_Base_SetConfig+0x13c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d017      	beq.n	8009096 <TIM_Base_SetConfig+0xaa>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a30      	ldr	r2, [pc, #192]	@ (800912c <TIM_Base_SetConfig+0x140>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d013      	beq.n	8009096 <TIM_Base_SetConfig+0xaa>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a2f      	ldr	r2, [pc, #188]	@ (8009130 <TIM_Base_SetConfig+0x144>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00f      	beq.n	8009096 <TIM_Base_SetConfig+0xaa>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a2e      	ldr	r2, [pc, #184]	@ (8009134 <TIM_Base_SetConfig+0x148>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d00b      	beq.n	8009096 <TIM_Base_SetConfig+0xaa>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a2d      	ldr	r2, [pc, #180]	@ (8009138 <TIM_Base_SetConfig+0x14c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d007      	beq.n	8009096 <TIM_Base_SetConfig+0xaa>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a2c      	ldr	r2, [pc, #176]	@ (800913c <TIM_Base_SetConfig+0x150>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d003      	beq.n	8009096 <TIM_Base_SetConfig+0xaa>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a2b      	ldr	r2, [pc, #172]	@ (8009140 <TIM_Base_SetConfig+0x154>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d108      	bne.n	80090a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800909c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	689a      	ldr	r2, [r3, #8]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a14      	ldr	r2, [pc, #80]	@ (800911c <TIM_Base_SetConfig+0x130>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d00f      	beq.n	80090ee <TIM_Base_SetConfig+0x102>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a16      	ldr	r2, [pc, #88]	@ (800912c <TIM_Base_SetConfig+0x140>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d00b      	beq.n	80090ee <TIM_Base_SetConfig+0x102>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a15      	ldr	r2, [pc, #84]	@ (8009130 <TIM_Base_SetConfig+0x144>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d007      	beq.n	80090ee <TIM_Base_SetConfig+0x102>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a14      	ldr	r2, [pc, #80]	@ (8009134 <TIM_Base_SetConfig+0x148>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d003      	beq.n	80090ee <TIM_Base_SetConfig+0x102>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a13      	ldr	r2, [pc, #76]	@ (8009138 <TIM_Base_SetConfig+0x14c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d103      	bne.n	80090f6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	691a      	ldr	r2, [r3, #16]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f043 0204 	orr.w	r2, r3, #4
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	601a      	str	r2, [r3, #0]
}
 800910e:	bf00      	nop
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	40010000 	.word	0x40010000
 8009120:	40000400 	.word	0x40000400
 8009124:	40000800 	.word	0x40000800
 8009128:	40000c00 	.word	0x40000c00
 800912c:	40010400 	.word	0x40010400
 8009130:	40014000 	.word	0x40014000
 8009134:	40014400 	.word	0x40014400
 8009138:	40014800 	.word	0x40014800
 800913c:	4000e000 	.word	0x4000e000
 8009140:	4000e400 	.word	0x4000e400

08009144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	f023 0201 	bic.w	r2, r3, #1
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800916e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f023 030a 	bic.w	r3, r3, #10
 8009180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	4313      	orrs	r3, r2
 8009188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	621a      	str	r2, [r3, #32]
}
 8009196:	bf00      	nop
 8009198:	371c      	adds	r7, #28
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b087      	sub	sp, #28
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	f023 0210 	bic.w	r2, r3, #16
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	031b      	lsls	r3, r3, #12
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80091de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	011b      	lsls	r3, r3, #4
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	621a      	str	r2, [r3, #32]
}
 80091f6:	bf00      	nop
 80091f8:	371c      	adds	r7, #28
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
	...

08009204 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4b09      	ldr	r3, [pc, #36]	@ (800923c <TIM_ITRx_SetConfig+0x38>)
 8009218:	4013      	ands	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4313      	orrs	r3, r2
 8009222:	f043 0307 	orr.w	r3, r3, #7
 8009226:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	609a      	str	r2, [r3, #8]
}
 800922e:	bf00      	nop
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	ffcfff8f 	.word	0xffcfff8f

08009240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009240:	b480      	push	{r7}
 8009242:	b087      	sub	sp, #28
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800925a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	021a      	lsls	r2, r3, #8
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	431a      	orrs	r2, r3
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4313      	orrs	r3, r2
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	4313      	orrs	r3, r2
 800926c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	609a      	str	r2, [r3, #8]
}
 8009274:	bf00      	nop
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009290:	2b01      	cmp	r3, #1
 8009292:	d101      	bne.n	8009298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009294:	2302      	movs	r3, #2
 8009296:	e077      	b.n	8009388 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a35      	ldr	r2, [pc, #212]	@ (8009394 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d004      	beq.n	80092cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a34      	ldr	r2, [pc, #208]	@ (8009398 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d108      	bne.n	80092de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80092d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a25      	ldr	r2, [pc, #148]	@ (8009394 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d02c      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800930a:	d027      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a22      	ldr	r2, [pc, #136]	@ (800939c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d022      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a21      	ldr	r2, [pc, #132]	@ (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d01d      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a1f      	ldr	r2, [pc, #124]	@ (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d018      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a1a      	ldr	r2, [pc, #104]	@ (8009398 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d013      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a1b      	ldr	r2, [pc, #108]	@ (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00e      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a1a      	ldr	r2, [pc, #104]	@ (80093ac <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d009      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a18      	ldr	r2, [pc, #96]	@ (80093b0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d004      	beq.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a17      	ldr	r2, [pc, #92]	@ (80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d10c      	bne.n	8009376 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	4313      	orrs	r3, r2
 800936c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	40010000 	.word	0x40010000
 8009398:	40010400 	.word	0x40010400
 800939c:	40000400 	.word	0x40000400
 80093a0:	40000800 	.word	0x40000800
 80093a4:	40000c00 	.word	0x40000c00
 80093a8:	40001800 	.word	0x40001800
 80093ac:	40014000 	.word	0x40014000
 80093b0:	4000e000 	.word	0x4000e000
 80093b4:	4000e400 	.word	0x4000e400

080093b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e042      	b.n	800948c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800940c:	2b00      	cmp	r3, #0
 800940e:	d106      	bne.n	800941e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7f9 f8e7 	bl	80025ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2224      	movs	r2, #36	@ 0x24
 8009422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 0201 	bic.w	r2, r2, #1
 8009434:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fe94 	bl	800a16c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f825 	bl	8009494 <UART_SetConfig>
 800944a:	4603      	mov	r3, r0
 800944c:	2b01      	cmp	r3, #1
 800944e:	d101      	bne.n	8009454 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e01b      	b.n	800948c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f042 0201 	orr.w	r2, r2, #1
 8009482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 ff13 	bl	800a2b0 <UART_CheckIdleState>
 800948a:	4603      	mov	r3, r0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009498:	b092      	sub	sp, #72	@ 0x48
 800949a:	af00      	add	r7, sp, #0
 800949c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	689a      	ldr	r2, [r3, #8]
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	431a      	orrs	r2, r3
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	431a      	orrs	r2, r3
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4bbe      	ldr	r3, [pc, #760]	@ (80097bc <UART_SetConfig+0x328>)
 80094c4:	4013      	ands	r3, r2
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	6812      	ldr	r2, [r2, #0]
 80094ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80094cc:	430b      	orrs	r3, r1
 80094ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	68da      	ldr	r2, [r3, #12]
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4ab3      	ldr	r2, [pc, #716]	@ (80097c0 <UART_SetConfig+0x32c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d004      	beq.n	8009500 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094fc:	4313      	orrs	r3, r2
 80094fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	4baf      	ldr	r3, [pc, #700]	@ (80097c4 <UART_SetConfig+0x330>)
 8009508:	4013      	ands	r3, r2
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	6812      	ldr	r2, [r2, #0]
 800950e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009510:	430b      	orrs	r3, r1
 8009512:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951a:	f023 010f 	bic.w	r1, r3, #15
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4aa6      	ldr	r2, [pc, #664]	@ (80097c8 <UART_SetConfig+0x334>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d177      	bne.n	8009624 <UART_SetConfig+0x190>
 8009534:	4ba5      	ldr	r3, [pc, #660]	@ (80097cc <UART_SetConfig+0x338>)
 8009536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009538:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800953c:	2b28      	cmp	r3, #40	@ 0x28
 800953e:	d86d      	bhi.n	800961c <UART_SetConfig+0x188>
 8009540:	a201      	add	r2, pc, #4	@ (adr r2, 8009548 <UART_SetConfig+0xb4>)
 8009542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009546:	bf00      	nop
 8009548:	080095ed 	.word	0x080095ed
 800954c:	0800961d 	.word	0x0800961d
 8009550:	0800961d 	.word	0x0800961d
 8009554:	0800961d 	.word	0x0800961d
 8009558:	0800961d 	.word	0x0800961d
 800955c:	0800961d 	.word	0x0800961d
 8009560:	0800961d 	.word	0x0800961d
 8009564:	0800961d 	.word	0x0800961d
 8009568:	080095f5 	.word	0x080095f5
 800956c:	0800961d 	.word	0x0800961d
 8009570:	0800961d 	.word	0x0800961d
 8009574:	0800961d 	.word	0x0800961d
 8009578:	0800961d 	.word	0x0800961d
 800957c:	0800961d 	.word	0x0800961d
 8009580:	0800961d 	.word	0x0800961d
 8009584:	0800961d 	.word	0x0800961d
 8009588:	080095fd 	.word	0x080095fd
 800958c:	0800961d 	.word	0x0800961d
 8009590:	0800961d 	.word	0x0800961d
 8009594:	0800961d 	.word	0x0800961d
 8009598:	0800961d 	.word	0x0800961d
 800959c:	0800961d 	.word	0x0800961d
 80095a0:	0800961d 	.word	0x0800961d
 80095a4:	0800961d 	.word	0x0800961d
 80095a8:	08009605 	.word	0x08009605
 80095ac:	0800961d 	.word	0x0800961d
 80095b0:	0800961d 	.word	0x0800961d
 80095b4:	0800961d 	.word	0x0800961d
 80095b8:	0800961d 	.word	0x0800961d
 80095bc:	0800961d 	.word	0x0800961d
 80095c0:	0800961d 	.word	0x0800961d
 80095c4:	0800961d 	.word	0x0800961d
 80095c8:	0800960d 	.word	0x0800960d
 80095cc:	0800961d 	.word	0x0800961d
 80095d0:	0800961d 	.word	0x0800961d
 80095d4:	0800961d 	.word	0x0800961d
 80095d8:	0800961d 	.word	0x0800961d
 80095dc:	0800961d 	.word	0x0800961d
 80095e0:	0800961d 	.word	0x0800961d
 80095e4:	0800961d 	.word	0x0800961d
 80095e8:	08009615 	.word	0x08009615
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e326      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80095f4:	2304      	movs	r3, #4
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e322      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80095fc:	2308      	movs	r3, #8
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e31e      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009604:	2310      	movs	r3, #16
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e31a      	b.n	8009c42 <UART_SetConfig+0x7ae>
 800960c:	2320      	movs	r3, #32
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e316      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009614:	2340      	movs	r3, #64	@ 0x40
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e312      	b.n	8009c42 <UART_SetConfig+0x7ae>
 800961c:	2380      	movs	r3, #128	@ 0x80
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e30e      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a69      	ldr	r2, [pc, #420]	@ (80097d0 <UART_SetConfig+0x33c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d130      	bne.n	8009690 <UART_SetConfig+0x1fc>
 800962e:	4b67      	ldr	r3, [pc, #412]	@ (80097cc <UART_SetConfig+0x338>)
 8009630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009632:	f003 0307 	and.w	r3, r3, #7
 8009636:	2b05      	cmp	r3, #5
 8009638:	d826      	bhi.n	8009688 <UART_SetConfig+0x1f4>
 800963a:	a201      	add	r2, pc, #4	@ (adr r2, 8009640 <UART_SetConfig+0x1ac>)
 800963c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009640:	08009659 	.word	0x08009659
 8009644:	08009661 	.word	0x08009661
 8009648:	08009669 	.word	0x08009669
 800964c:	08009671 	.word	0x08009671
 8009650:	08009679 	.word	0x08009679
 8009654:	08009681 	.word	0x08009681
 8009658:	2300      	movs	r3, #0
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e2f0      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009660:	2304      	movs	r3, #4
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e2ec      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009668:	2308      	movs	r3, #8
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e2e8      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009670:	2310      	movs	r3, #16
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009676:	e2e4      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009678:	2320      	movs	r3, #32
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967e:	e2e0      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009680:	2340      	movs	r3, #64	@ 0x40
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009686:	e2dc      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009688:	2380      	movs	r3, #128	@ 0x80
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968e:	e2d8      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a4f      	ldr	r2, [pc, #316]	@ (80097d4 <UART_SetConfig+0x340>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d130      	bne.n	80096fc <UART_SetConfig+0x268>
 800969a:	4b4c      	ldr	r3, [pc, #304]	@ (80097cc <UART_SetConfig+0x338>)
 800969c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	d826      	bhi.n	80096f4 <UART_SetConfig+0x260>
 80096a6:	a201      	add	r2, pc, #4	@ (adr r2, 80096ac <UART_SetConfig+0x218>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	080096c5 	.word	0x080096c5
 80096b0:	080096cd 	.word	0x080096cd
 80096b4:	080096d5 	.word	0x080096d5
 80096b8:	080096dd 	.word	0x080096dd
 80096bc:	080096e5 	.word	0x080096e5
 80096c0:	080096ed 	.word	0x080096ed
 80096c4:	2300      	movs	r3, #0
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e2ba      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80096cc:	2304      	movs	r3, #4
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e2b6      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80096d4:	2308      	movs	r3, #8
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e2b2      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80096dc:	2310      	movs	r3, #16
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e2ae      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80096e4:	2320      	movs	r3, #32
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e2aa      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80096ec:	2340      	movs	r3, #64	@ 0x40
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e2a6      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80096f4:	2380      	movs	r3, #128	@ 0x80
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fa:	e2a2      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a35      	ldr	r2, [pc, #212]	@ (80097d8 <UART_SetConfig+0x344>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d130      	bne.n	8009768 <UART_SetConfig+0x2d4>
 8009706:	4b31      	ldr	r3, [pc, #196]	@ (80097cc <UART_SetConfig+0x338>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	2b05      	cmp	r3, #5
 8009710:	d826      	bhi.n	8009760 <UART_SetConfig+0x2cc>
 8009712:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <UART_SetConfig+0x284>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	08009731 	.word	0x08009731
 800971c:	08009739 	.word	0x08009739
 8009720:	08009741 	.word	0x08009741
 8009724:	08009749 	.word	0x08009749
 8009728:	08009751 	.word	0x08009751
 800972c:	08009759 	.word	0x08009759
 8009730:	2300      	movs	r3, #0
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e284      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009738:	2304      	movs	r3, #4
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e280      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009740:	2308      	movs	r3, #8
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e27c      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009748:	2310      	movs	r3, #16
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e278      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009750:	2320      	movs	r3, #32
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e274      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009758:	2340      	movs	r3, #64	@ 0x40
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e270      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009760:	2380      	movs	r3, #128	@ 0x80
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e26c      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a1b      	ldr	r2, [pc, #108]	@ (80097dc <UART_SetConfig+0x348>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d142      	bne.n	80097f8 <UART_SetConfig+0x364>
 8009772:	4b16      	ldr	r3, [pc, #88]	@ (80097cc <UART_SetConfig+0x338>)
 8009774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b05      	cmp	r3, #5
 800977c:	d838      	bhi.n	80097f0 <UART_SetConfig+0x35c>
 800977e:	a201      	add	r2, pc, #4	@ (adr r2, 8009784 <UART_SetConfig+0x2f0>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	0800979d 	.word	0x0800979d
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097ad 	.word	0x080097ad
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097e1 	.word	0x080097e1
 8009798:	080097e9 	.word	0x080097e9
 800979c:	2300      	movs	r3, #0
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e24e      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e24a      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e246      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e242      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80097bc:	cfff69f3 	.word	0xcfff69f3
 80097c0:	58000c00 	.word	0x58000c00
 80097c4:	11fff4ff 	.word	0x11fff4ff
 80097c8:	40011000 	.word	0x40011000
 80097cc:	58024400 	.word	0x58024400
 80097d0:	40004400 	.word	0x40004400
 80097d4:	40004800 	.word	0x40004800
 80097d8:	40004c00 	.word	0x40004c00
 80097dc:	40005000 	.word	0x40005000
 80097e0:	2320      	movs	r3, #32
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e22c      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80097e8:	2340      	movs	r3, #64	@ 0x40
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e228      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80097f0:	2380      	movs	r3, #128	@ 0x80
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e224      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4ab1      	ldr	r2, [pc, #708]	@ (8009ac4 <UART_SetConfig+0x630>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d176      	bne.n	80098f0 <UART_SetConfig+0x45c>
 8009802:	4bb1      	ldr	r3, [pc, #708]	@ (8009ac8 <UART_SetConfig+0x634>)
 8009804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009806:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800980a:	2b28      	cmp	r3, #40	@ 0x28
 800980c:	d86c      	bhi.n	80098e8 <UART_SetConfig+0x454>
 800980e:	a201      	add	r2, pc, #4	@ (adr r2, 8009814 <UART_SetConfig+0x380>)
 8009810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009814:	080098b9 	.word	0x080098b9
 8009818:	080098e9 	.word	0x080098e9
 800981c:	080098e9 	.word	0x080098e9
 8009820:	080098e9 	.word	0x080098e9
 8009824:	080098e9 	.word	0x080098e9
 8009828:	080098e9 	.word	0x080098e9
 800982c:	080098e9 	.word	0x080098e9
 8009830:	080098e9 	.word	0x080098e9
 8009834:	080098c1 	.word	0x080098c1
 8009838:	080098e9 	.word	0x080098e9
 800983c:	080098e9 	.word	0x080098e9
 8009840:	080098e9 	.word	0x080098e9
 8009844:	080098e9 	.word	0x080098e9
 8009848:	080098e9 	.word	0x080098e9
 800984c:	080098e9 	.word	0x080098e9
 8009850:	080098e9 	.word	0x080098e9
 8009854:	080098c9 	.word	0x080098c9
 8009858:	080098e9 	.word	0x080098e9
 800985c:	080098e9 	.word	0x080098e9
 8009860:	080098e9 	.word	0x080098e9
 8009864:	080098e9 	.word	0x080098e9
 8009868:	080098e9 	.word	0x080098e9
 800986c:	080098e9 	.word	0x080098e9
 8009870:	080098e9 	.word	0x080098e9
 8009874:	080098d1 	.word	0x080098d1
 8009878:	080098e9 	.word	0x080098e9
 800987c:	080098e9 	.word	0x080098e9
 8009880:	080098e9 	.word	0x080098e9
 8009884:	080098e9 	.word	0x080098e9
 8009888:	080098e9 	.word	0x080098e9
 800988c:	080098e9 	.word	0x080098e9
 8009890:	080098e9 	.word	0x080098e9
 8009894:	080098d9 	.word	0x080098d9
 8009898:	080098e9 	.word	0x080098e9
 800989c:	080098e9 	.word	0x080098e9
 80098a0:	080098e9 	.word	0x080098e9
 80098a4:	080098e9 	.word	0x080098e9
 80098a8:	080098e9 	.word	0x080098e9
 80098ac:	080098e9 	.word	0x080098e9
 80098b0:	080098e9 	.word	0x080098e9
 80098b4:	080098e1 	.word	0x080098e1
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098be:	e1c0      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80098c0:	2304      	movs	r3, #4
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c6:	e1bc      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80098c8:	2308      	movs	r3, #8
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ce:	e1b8      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80098d0:	2310      	movs	r3, #16
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d6:	e1b4      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80098d8:	2320      	movs	r3, #32
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098de:	e1b0      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80098e0:	2340      	movs	r3, #64	@ 0x40
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e6:	e1ac      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80098e8:	2380      	movs	r3, #128	@ 0x80
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ee:	e1a8      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a75      	ldr	r2, [pc, #468]	@ (8009acc <UART_SetConfig+0x638>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d130      	bne.n	800995c <UART_SetConfig+0x4c8>
 80098fa:	4b73      	ldr	r3, [pc, #460]	@ (8009ac8 <UART_SetConfig+0x634>)
 80098fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098fe:	f003 0307 	and.w	r3, r3, #7
 8009902:	2b05      	cmp	r3, #5
 8009904:	d826      	bhi.n	8009954 <UART_SetConfig+0x4c0>
 8009906:	a201      	add	r2, pc, #4	@ (adr r2, 800990c <UART_SetConfig+0x478>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	08009925 	.word	0x08009925
 8009910:	0800992d 	.word	0x0800992d
 8009914:	08009935 	.word	0x08009935
 8009918:	0800993d 	.word	0x0800993d
 800991c:	08009945 	.word	0x08009945
 8009920:	0800994d 	.word	0x0800994d
 8009924:	2300      	movs	r3, #0
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992a:	e18a      	b.n	8009c42 <UART_SetConfig+0x7ae>
 800992c:	2304      	movs	r3, #4
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009932:	e186      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009934:	2308      	movs	r3, #8
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993a:	e182      	b.n	8009c42 <UART_SetConfig+0x7ae>
 800993c:	2310      	movs	r3, #16
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e17e      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009944:	2320      	movs	r3, #32
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e17a      	b.n	8009c42 <UART_SetConfig+0x7ae>
 800994c:	2340      	movs	r3, #64	@ 0x40
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e176      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009954:	2380      	movs	r3, #128	@ 0x80
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995a:	e172      	b.n	8009c42 <UART_SetConfig+0x7ae>
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a5b      	ldr	r2, [pc, #364]	@ (8009ad0 <UART_SetConfig+0x63c>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d130      	bne.n	80099c8 <UART_SetConfig+0x534>
 8009966:	4b58      	ldr	r3, [pc, #352]	@ (8009ac8 <UART_SetConfig+0x634>)
 8009968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800996a:	f003 0307 	and.w	r3, r3, #7
 800996e:	2b05      	cmp	r3, #5
 8009970:	d826      	bhi.n	80099c0 <UART_SetConfig+0x52c>
 8009972:	a201      	add	r2, pc, #4	@ (adr r2, 8009978 <UART_SetConfig+0x4e4>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	08009991 	.word	0x08009991
 800997c:	08009999 	.word	0x08009999
 8009980:	080099a1 	.word	0x080099a1
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099b1 	.word	0x080099b1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	2300      	movs	r3, #0
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009996:	e154      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009998:	2304      	movs	r3, #4
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999e:	e150      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80099a0:	2308      	movs	r3, #8
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a6:	e14c      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80099a8:	2310      	movs	r3, #16
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ae:	e148      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80099b0:	2320      	movs	r3, #32
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b6:	e144      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80099b8:	2340      	movs	r3, #64	@ 0x40
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099be:	e140      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80099c0:	2380      	movs	r3, #128	@ 0x80
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099c6:	e13c      	b.n	8009c42 <UART_SetConfig+0x7ae>
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a41      	ldr	r2, [pc, #260]	@ (8009ad4 <UART_SetConfig+0x640>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	f040 8082 	bne.w	8009ad8 <UART_SetConfig+0x644>
 80099d4:	4b3c      	ldr	r3, [pc, #240]	@ (8009ac8 <UART_SetConfig+0x634>)
 80099d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099dc:	2b28      	cmp	r3, #40	@ 0x28
 80099de:	d86d      	bhi.n	8009abc <UART_SetConfig+0x628>
 80099e0:	a201      	add	r2, pc, #4	@ (adr r2, 80099e8 <UART_SetConfig+0x554>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009a8d 	.word	0x08009a8d
 80099ec:	08009abd 	.word	0x08009abd
 80099f0:	08009abd 	.word	0x08009abd
 80099f4:	08009abd 	.word	0x08009abd
 80099f8:	08009abd 	.word	0x08009abd
 80099fc:	08009abd 	.word	0x08009abd
 8009a00:	08009abd 	.word	0x08009abd
 8009a04:	08009abd 	.word	0x08009abd
 8009a08:	08009a95 	.word	0x08009a95
 8009a0c:	08009abd 	.word	0x08009abd
 8009a10:	08009abd 	.word	0x08009abd
 8009a14:	08009abd 	.word	0x08009abd
 8009a18:	08009abd 	.word	0x08009abd
 8009a1c:	08009abd 	.word	0x08009abd
 8009a20:	08009abd 	.word	0x08009abd
 8009a24:	08009abd 	.word	0x08009abd
 8009a28:	08009a9d 	.word	0x08009a9d
 8009a2c:	08009abd 	.word	0x08009abd
 8009a30:	08009abd 	.word	0x08009abd
 8009a34:	08009abd 	.word	0x08009abd
 8009a38:	08009abd 	.word	0x08009abd
 8009a3c:	08009abd 	.word	0x08009abd
 8009a40:	08009abd 	.word	0x08009abd
 8009a44:	08009abd 	.word	0x08009abd
 8009a48:	08009aa5 	.word	0x08009aa5
 8009a4c:	08009abd 	.word	0x08009abd
 8009a50:	08009abd 	.word	0x08009abd
 8009a54:	08009abd 	.word	0x08009abd
 8009a58:	08009abd 	.word	0x08009abd
 8009a5c:	08009abd 	.word	0x08009abd
 8009a60:	08009abd 	.word	0x08009abd
 8009a64:	08009abd 	.word	0x08009abd
 8009a68:	08009aad 	.word	0x08009aad
 8009a6c:	08009abd 	.word	0x08009abd
 8009a70:	08009abd 	.word	0x08009abd
 8009a74:	08009abd 	.word	0x08009abd
 8009a78:	08009abd 	.word	0x08009abd
 8009a7c:	08009abd 	.word	0x08009abd
 8009a80:	08009abd 	.word	0x08009abd
 8009a84:	08009abd 	.word	0x08009abd
 8009a88:	08009ab5 	.word	0x08009ab5
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a92:	e0d6      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009a94:	2304      	movs	r3, #4
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9a:	e0d2      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009a9c:	2308      	movs	r3, #8
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa2:	e0ce      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009aa4:	2310      	movs	r3, #16
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aaa:	e0ca      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009aac:	2320      	movs	r3, #32
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab2:	e0c6      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009ab4:	2340      	movs	r3, #64	@ 0x40
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aba:	e0c2      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009abc:	2380      	movs	r3, #128	@ 0x80
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac2:	e0be      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009ac4:	40011400 	.word	0x40011400
 8009ac8:	58024400 	.word	0x58024400
 8009acc:	40007800 	.word	0x40007800
 8009ad0:	40007c00 	.word	0x40007c00
 8009ad4:	40011800 	.word	0x40011800
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4aad      	ldr	r2, [pc, #692]	@ (8009d94 <UART_SetConfig+0x900>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d176      	bne.n	8009bd0 <UART_SetConfig+0x73c>
 8009ae2:	4bad      	ldr	r3, [pc, #692]	@ (8009d98 <UART_SetConfig+0x904>)
 8009ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009aea:	2b28      	cmp	r3, #40	@ 0x28
 8009aec:	d86c      	bhi.n	8009bc8 <UART_SetConfig+0x734>
 8009aee:	a201      	add	r2, pc, #4	@ (adr r2, 8009af4 <UART_SetConfig+0x660>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b99 	.word	0x08009b99
 8009af8:	08009bc9 	.word	0x08009bc9
 8009afc:	08009bc9 	.word	0x08009bc9
 8009b00:	08009bc9 	.word	0x08009bc9
 8009b04:	08009bc9 	.word	0x08009bc9
 8009b08:	08009bc9 	.word	0x08009bc9
 8009b0c:	08009bc9 	.word	0x08009bc9
 8009b10:	08009bc9 	.word	0x08009bc9
 8009b14:	08009ba1 	.word	0x08009ba1
 8009b18:	08009bc9 	.word	0x08009bc9
 8009b1c:	08009bc9 	.word	0x08009bc9
 8009b20:	08009bc9 	.word	0x08009bc9
 8009b24:	08009bc9 	.word	0x08009bc9
 8009b28:	08009bc9 	.word	0x08009bc9
 8009b2c:	08009bc9 	.word	0x08009bc9
 8009b30:	08009bc9 	.word	0x08009bc9
 8009b34:	08009ba9 	.word	0x08009ba9
 8009b38:	08009bc9 	.word	0x08009bc9
 8009b3c:	08009bc9 	.word	0x08009bc9
 8009b40:	08009bc9 	.word	0x08009bc9
 8009b44:	08009bc9 	.word	0x08009bc9
 8009b48:	08009bc9 	.word	0x08009bc9
 8009b4c:	08009bc9 	.word	0x08009bc9
 8009b50:	08009bc9 	.word	0x08009bc9
 8009b54:	08009bb1 	.word	0x08009bb1
 8009b58:	08009bc9 	.word	0x08009bc9
 8009b5c:	08009bc9 	.word	0x08009bc9
 8009b60:	08009bc9 	.word	0x08009bc9
 8009b64:	08009bc9 	.word	0x08009bc9
 8009b68:	08009bc9 	.word	0x08009bc9
 8009b6c:	08009bc9 	.word	0x08009bc9
 8009b70:	08009bc9 	.word	0x08009bc9
 8009b74:	08009bb9 	.word	0x08009bb9
 8009b78:	08009bc9 	.word	0x08009bc9
 8009b7c:	08009bc9 	.word	0x08009bc9
 8009b80:	08009bc9 	.word	0x08009bc9
 8009b84:	08009bc9 	.word	0x08009bc9
 8009b88:	08009bc9 	.word	0x08009bc9
 8009b8c:	08009bc9 	.word	0x08009bc9
 8009b90:	08009bc9 	.word	0x08009bc9
 8009b94:	08009bc1 	.word	0x08009bc1
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e050      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009ba0:	2304      	movs	r3, #4
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba6:	e04c      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009ba8:	2308      	movs	r3, #8
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bae:	e048      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009bb0:	2310      	movs	r3, #16
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb6:	e044      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009bb8:	2320      	movs	r3, #32
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bbe:	e040      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009bc0:	2340      	movs	r3, #64	@ 0x40
 8009bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc6:	e03c      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009bc8:	2380      	movs	r3, #128	@ 0x80
 8009bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bce:	e038      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a71      	ldr	r2, [pc, #452]	@ (8009d9c <UART_SetConfig+0x908>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d130      	bne.n	8009c3c <UART_SetConfig+0x7a8>
 8009bda:	4b6f      	ldr	r3, [pc, #444]	@ (8009d98 <UART_SetConfig+0x904>)
 8009bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	2b05      	cmp	r3, #5
 8009be4:	d826      	bhi.n	8009c34 <UART_SetConfig+0x7a0>
 8009be6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bec <UART_SetConfig+0x758>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c05 	.word	0x08009c05
 8009bf0:	08009c0d 	.word	0x08009c0d
 8009bf4:	08009c15 	.word	0x08009c15
 8009bf8:	08009c1d 	.word	0x08009c1d
 8009bfc:	08009c25 	.word	0x08009c25
 8009c00:	08009c2d 	.word	0x08009c2d
 8009c04:	2302      	movs	r3, #2
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0a:	e01a      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009c0c:	2304      	movs	r3, #4
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c12:	e016      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009c14:	2308      	movs	r3, #8
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1a:	e012      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009c1c:	2310      	movs	r3, #16
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c22:	e00e      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009c24:	2320      	movs	r3, #32
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2a:	e00a      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009c2c:	2340      	movs	r3, #64	@ 0x40
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c32:	e006      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009c34:	2380      	movs	r3, #128	@ 0x80
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	e002      	b.n	8009c42 <UART_SetConfig+0x7ae>
 8009c3c:	2380      	movs	r3, #128	@ 0x80
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a55      	ldr	r2, [pc, #340]	@ (8009d9c <UART_SetConfig+0x908>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	f040 80f8 	bne.w	8009e3e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c52:	2b20      	cmp	r3, #32
 8009c54:	dc46      	bgt.n	8009ce4 <UART_SetConfig+0x850>
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	db75      	blt.n	8009d46 <UART_SetConfig+0x8b2>
 8009c5a:	3b02      	subs	r3, #2
 8009c5c:	2b1e      	cmp	r3, #30
 8009c5e:	d872      	bhi.n	8009d46 <UART_SetConfig+0x8b2>
 8009c60:	a201      	add	r2, pc, #4	@ (adr r2, 8009c68 <UART_SetConfig+0x7d4>)
 8009c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c66:	bf00      	nop
 8009c68:	08009ceb 	.word	0x08009ceb
 8009c6c:	08009d47 	.word	0x08009d47
 8009c70:	08009cf3 	.word	0x08009cf3
 8009c74:	08009d47 	.word	0x08009d47
 8009c78:	08009d47 	.word	0x08009d47
 8009c7c:	08009d47 	.word	0x08009d47
 8009c80:	08009d03 	.word	0x08009d03
 8009c84:	08009d47 	.word	0x08009d47
 8009c88:	08009d47 	.word	0x08009d47
 8009c8c:	08009d47 	.word	0x08009d47
 8009c90:	08009d47 	.word	0x08009d47
 8009c94:	08009d47 	.word	0x08009d47
 8009c98:	08009d47 	.word	0x08009d47
 8009c9c:	08009d47 	.word	0x08009d47
 8009ca0:	08009d13 	.word	0x08009d13
 8009ca4:	08009d47 	.word	0x08009d47
 8009ca8:	08009d47 	.word	0x08009d47
 8009cac:	08009d47 	.word	0x08009d47
 8009cb0:	08009d47 	.word	0x08009d47
 8009cb4:	08009d47 	.word	0x08009d47
 8009cb8:	08009d47 	.word	0x08009d47
 8009cbc:	08009d47 	.word	0x08009d47
 8009cc0:	08009d47 	.word	0x08009d47
 8009cc4:	08009d47 	.word	0x08009d47
 8009cc8:	08009d47 	.word	0x08009d47
 8009ccc:	08009d47 	.word	0x08009d47
 8009cd0:	08009d47 	.word	0x08009d47
 8009cd4:	08009d47 	.word	0x08009d47
 8009cd8:	08009d47 	.word	0x08009d47
 8009cdc:	08009d47 	.word	0x08009d47
 8009ce0:	08009d39 	.word	0x08009d39
 8009ce4:	2b40      	cmp	r3, #64	@ 0x40
 8009ce6:	d02a      	beq.n	8009d3e <UART_SetConfig+0x8aa>
 8009ce8:	e02d      	b.n	8009d46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cea:	f7fe fa57 	bl	800819c <HAL_RCCEx_GetD3PCLK1Freq>
 8009cee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cf0:	e02f      	b.n	8009d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fa66 	bl	80081c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d00:	e027      	b.n	8009d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d02:	f107 0318 	add.w	r3, r7, #24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe fbb2 	bl	8008470 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d10:	e01f      	b.n	8009d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d12:	4b21      	ldr	r3, [pc, #132]	@ (8009d98 <UART_SetConfig+0x904>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0320 	and.w	r3, r3, #32
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8009d98 <UART_SetConfig+0x904>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	08db      	lsrs	r3, r3, #3
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	4a1d      	ldr	r2, [pc, #116]	@ (8009da0 <UART_SetConfig+0x90c>)
 8009d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d30:	e00f      	b.n	8009d52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009d32:	4b1b      	ldr	r3, [pc, #108]	@ (8009da0 <UART_SetConfig+0x90c>)
 8009d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d36:	e00c      	b.n	8009d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d38:	4b1a      	ldr	r3, [pc, #104]	@ (8009da4 <UART_SetConfig+0x910>)
 8009d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d3c:	e009      	b.n	8009d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d44:	e005      	b.n	8009d52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 81ee 	beq.w	800a136 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5e:	4a12      	ldr	r2, [pc, #72]	@ (8009da8 <UART_SetConfig+0x914>)
 8009d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d64:	461a      	mov	r2, r3
 8009d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d6c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	4613      	mov	r3, r2
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	4413      	add	r3, r2
 8009d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d305      	bcc.n	8009d8a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d910      	bls.n	8009dac <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d90:	e1d1      	b.n	800a136 <UART_SetConfig+0xca2>
 8009d92:	bf00      	nop
 8009d94:	40011c00 	.word	0x40011c00
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	58000c00 	.word	0x58000c00
 8009da0:	03d09000 	.word	0x03d09000
 8009da4:	003d0900 	.word	0x003d0900
 8009da8:	0801c224 	.word	0x0801c224
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dae:	2200      	movs	r2, #0
 8009db0:	60bb      	str	r3, [r7, #8]
 8009db2:	60fa      	str	r2, [r7, #12]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db8:	4ac0      	ldr	r2, [pc, #768]	@ (800a0bc <UART_SetConfig+0xc28>)
 8009dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	603b      	str	r3, [r7, #0]
 8009dc4:	607a      	str	r2, [r7, #4]
 8009dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009dce:	f7f6 fcb3 	bl	8000738 <__aeabi_uldivmod>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	4619      	mov	r1, r3
 8009dda:	f04f 0200 	mov.w	r2, #0
 8009dde:	f04f 0300 	mov.w	r3, #0
 8009de2:	020b      	lsls	r3, r1, #8
 8009de4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009de8:	0202      	lsls	r2, r0, #8
 8009dea:	6979      	ldr	r1, [r7, #20]
 8009dec:	6849      	ldr	r1, [r1, #4]
 8009dee:	0849      	lsrs	r1, r1, #1
 8009df0:	2000      	movs	r0, #0
 8009df2:	460c      	mov	r4, r1
 8009df4:	4605      	mov	r5, r0
 8009df6:	eb12 0804 	adds.w	r8, r2, r4
 8009dfa:	eb43 0905 	adc.w	r9, r3, r5
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	469a      	mov	sl, r3
 8009e06:	4693      	mov	fp, r2
 8009e08:	4652      	mov	r2, sl
 8009e0a:	465b      	mov	r3, fp
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	4649      	mov	r1, r9
 8009e10:	f7f6 fc92 	bl	8000738 <__aeabi_uldivmod>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4613      	mov	r3, r2
 8009e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e22:	d308      	bcc.n	8009e36 <UART_SetConfig+0x9a2>
 8009e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e2a:	d204      	bcs.n	8009e36 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e32:	60da      	str	r2, [r3, #12]
 8009e34:	e17f      	b.n	800a136 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e3c:	e17b      	b.n	800a136 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e46:	f040 80bd 	bne.w	8009fc4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009e4a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	dc48      	bgt.n	8009ee4 <UART_SetConfig+0xa50>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	db7b      	blt.n	8009f4e <UART_SetConfig+0xaba>
 8009e56:	2b20      	cmp	r3, #32
 8009e58:	d879      	bhi.n	8009f4e <UART_SetConfig+0xaba>
 8009e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e60 <UART_SetConfig+0x9cc>)
 8009e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e60:	08009eeb 	.word	0x08009eeb
 8009e64:	08009ef3 	.word	0x08009ef3
 8009e68:	08009f4f 	.word	0x08009f4f
 8009e6c:	08009f4f 	.word	0x08009f4f
 8009e70:	08009efb 	.word	0x08009efb
 8009e74:	08009f4f 	.word	0x08009f4f
 8009e78:	08009f4f 	.word	0x08009f4f
 8009e7c:	08009f4f 	.word	0x08009f4f
 8009e80:	08009f0b 	.word	0x08009f0b
 8009e84:	08009f4f 	.word	0x08009f4f
 8009e88:	08009f4f 	.word	0x08009f4f
 8009e8c:	08009f4f 	.word	0x08009f4f
 8009e90:	08009f4f 	.word	0x08009f4f
 8009e94:	08009f4f 	.word	0x08009f4f
 8009e98:	08009f4f 	.word	0x08009f4f
 8009e9c:	08009f4f 	.word	0x08009f4f
 8009ea0:	08009f1b 	.word	0x08009f1b
 8009ea4:	08009f4f 	.word	0x08009f4f
 8009ea8:	08009f4f 	.word	0x08009f4f
 8009eac:	08009f4f 	.word	0x08009f4f
 8009eb0:	08009f4f 	.word	0x08009f4f
 8009eb4:	08009f4f 	.word	0x08009f4f
 8009eb8:	08009f4f 	.word	0x08009f4f
 8009ebc:	08009f4f 	.word	0x08009f4f
 8009ec0:	08009f4f 	.word	0x08009f4f
 8009ec4:	08009f4f 	.word	0x08009f4f
 8009ec8:	08009f4f 	.word	0x08009f4f
 8009ecc:	08009f4f 	.word	0x08009f4f
 8009ed0:	08009f4f 	.word	0x08009f4f
 8009ed4:	08009f4f 	.word	0x08009f4f
 8009ed8:	08009f4f 	.word	0x08009f4f
 8009edc:	08009f4f 	.word	0x08009f4f
 8009ee0:	08009f41 	.word	0x08009f41
 8009ee4:	2b40      	cmp	r3, #64	@ 0x40
 8009ee6:	d02e      	beq.n	8009f46 <UART_SetConfig+0xab2>
 8009ee8:	e031      	b.n	8009f4e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eea:	f7fc ff49 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 8009eee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ef0:	e033      	b.n	8009f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ef2:	f7fc ff5b 	bl	8006dac <HAL_RCC_GetPCLK2Freq>
 8009ef6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ef8:	e02f      	b.n	8009f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe f962 	bl	80081c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f08:	e027      	b.n	8009f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f0a:	f107 0318 	add.w	r3, r7, #24
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fe faae 	bl	8008470 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f18:	e01f      	b.n	8009f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f1a:	4b69      	ldr	r3, [pc, #420]	@ (800a0c0 <UART_SetConfig+0xc2c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d009      	beq.n	8009f3a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f26:	4b66      	ldr	r3, [pc, #408]	@ (800a0c0 <UART_SetConfig+0xc2c>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	08db      	lsrs	r3, r3, #3
 8009f2c:	f003 0303 	and.w	r3, r3, #3
 8009f30:	4a64      	ldr	r2, [pc, #400]	@ (800a0c4 <UART_SetConfig+0xc30>)
 8009f32:	fa22 f303 	lsr.w	r3, r2, r3
 8009f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f38:	e00f      	b.n	8009f5a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009f3a:	4b62      	ldr	r3, [pc, #392]	@ (800a0c4 <UART_SetConfig+0xc30>)
 8009f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f3e:	e00c      	b.n	8009f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f40:	4b61      	ldr	r3, [pc, #388]	@ (800a0c8 <UART_SetConfig+0xc34>)
 8009f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f44:	e009      	b.n	8009f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4c:	e005      	b.n	8009f5a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 80ea 	beq.w	800a136 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f66:	4a55      	ldr	r2, [pc, #340]	@ (800a0bc <UART_SetConfig+0xc28>)
 8009f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f74:	005a      	lsls	r2, r3, #1
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	085b      	lsrs	r3, r3, #1
 8009f7c:	441a      	add	r2, r3
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8a:	2b0f      	cmp	r3, #15
 8009f8c:	d916      	bls.n	8009fbc <UART_SetConfig+0xb28>
 8009f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f94:	d212      	bcs.n	8009fbc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	f023 030f 	bic.w	r3, r3, #15
 8009f9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa2:	085b      	lsrs	r3, r3, #1
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009fb8:	60da      	str	r2, [r3, #12]
 8009fba:	e0bc      	b.n	800a136 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009fc2:	e0b8      	b.n	800a136 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009fc8:	2b20      	cmp	r3, #32
 8009fca:	dc4b      	bgt.n	800a064 <UART_SetConfig+0xbd0>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f2c0 8087 	blt.w	800a0e0 <UART_SetConfig+0xc4c>
 8009fd2:	2b20      	cmp	r3, #32
 8009fd4:	f200 8084 	bhi.w	800a0e0 <UART_SetConfig+0xc4c>
 8009fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8009fe0 <UART_SetConfig+0xb4c>)
 8009fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fde:	bf00      	nop
 8009fe0:	0800a06b 	.word	0x0800a06b
 8009fe4:	0800a073 	.word	0x0800a073
 8009fe8:	0800a0e1 	.word	0x0800a0e1
 8009fec:	0800a0e1 	.word	0x0800a0e1
 8009ff0:	0800a07b 	.word	0x0800a07b
 8009ff4:	0800a0e1 	.word	0x0800a0e1
 8009ff8:	0800a0e1 	.word	0x0800a0e1
 8009ffc:	0800a0e1 	.word	0x0800a0e1
 800a000:	0800a08b 	.word	0x0800a08b
 800a004:	0800a0e1 	.word	0x0800a0e1
 800a008:	0800a0e1 	.word	0x0800a0e1
 800a00c:	0800a0e1 	.word	0x0800a0e1
 800a010:	0800a0e1 	.word	0x0800a0e1
 800a014:	0800a0e1 	.word	0x0800a0e1
 800a018:	0800a0e1 	.word	0x0800a0e1
 800a01c:	0800a0e1 	.word	0x0800a0e1
 800a020:	0800a09b 	.word	0x0800a09b
 800a024:	0800a0e1 	.word	0x0800a0e1
 800a028:	0800a0e1 	.word	0x0800a0e1
 800a02c:	0800a0e1 	.word	0x0800a0e1
 800a030:	0800a0e1 	.word	0x0800a0e1
 800a034:	0800a0e1 	.word	0x0800a0e1
 800a038:	0800a0e1 	.word	0x0800a0e1
 800a03c:	0800a0e1 	.word	0x0800a0e1
 800a040:	0800a0e1 	.word	0x0800a0e1
 800a044:	0800a0e1 	.word	0x0800a0e1
 800a048:	0800a0e1 	.word	0x0800a0e1
 800a04c:	0800a0e1 	.word	0x0800a0e1
 800a050:	0800a0e1 	.word	0x0800a0e1
 800a054:	0800a0e1 	.word	0x0800a0e1
 800a058:	0800a0e1 	.word	0x0800a0e1
 800a05c:	0800a0e1 	.word	0x0800a0e1
 800a060:	0800a0d3 	.word	0x0800a0d3
 800a064:	2b40      	cmp	r3, #64	@ 0x40
 800a066:	d037      	beq.n	800a0d8 <UART_SetConfig+0xc44>
 800a068:	e03a      	b.n	800a0e0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a06a:	f7fc fe89 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 800a06e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a070:	e03c      	b.n	800a0ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a072:	f7fc fe9b 	bl	8006dac <HAL_RCC_GetPCLK2Freq>
 800a076:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a078:	e038      	b.n	800a0ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a07a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe f8a2 	bl	80081c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a088:	e030      	b.n	800a0ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a08a:	f107 0318 	add.w	r3, r7, #24
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe f9ee 	bl	8008470 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a098:	e028      	b.n	800a0ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a09a:	4b09      	ldr	r3, [pc, #36]	@ (800a0c0 <UART_SetConfig+0xc2c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0320 	and.w	r3, r3, #32
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d012      	beq.n	800a0cc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0a6:	4b06      	ldr	r3, [pc, #24]	@ (800a0c0 <UART_SetConfig+0xc2c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	08db      	lsrs	r3, r3, #3
 800a0ac:	f003 0303 	and.w	r3, r3, #3
 800a0b0:	4a04      	ldr	r2, [pc, #16]	@ (800a0c4 <UART_SetConfig+0xc30>)
 800a0b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0b8:	e018      	b.n	800a0ec <UART_SetConfig+0xc58>
 800a0ba:	bf00      	nop
 800a0bc:	0801c224 	.word	0x0801c224
 800a0c0:	58024400 	.word	0x58024400
 800a0c4:	03d09000 	.word	0x03d09000
 800a0c8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a0cc:	4b24      	ldr	r3, [pc, #144]	@ (800a160 <UART_SetConfig+0xccc>)
 800a0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d0:	e00c      	b.n	800a0ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0d2:	4b24      	ldr	r3, [pc, #144]	@ (800a164 <UART_SetConfig+0xcd0>)
 800a0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d6:	e009      	b.n	800a0ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0de:	e005      	b.n	800a0ec <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a0ea:	bf00      	nop
    }

    if (pclk != 0U)
 800a0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d021      	beq.n	800a136 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f6:	4a1c      	ldr	r2, [pc, #112]	@ (800a168 <UART_SetConfig+0xcd4>)
 800a0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a100:	fbb3 f2f2 	udiv	r2, r3, r2
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	085b      	lsrs	r3, r3, #1
 800a10a:	441a      	add	r2, r3
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	fbb2 f3f3 	udiv	r3, r2, r3
 800a114:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a118:	2b0f      	cmp	r3, #15
 800a11a:	d909      	bls.n	800a130 <UART_SetConfig+0xc9c>
 800a11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a122:	d205      	bcs.n	800a130 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a126:	b29a      	uxth	r2, r3
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	60da      	str	r2, [r3, #12]
 800a12e:	e002      	b.n	800a136 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2201      	movs	r2, #1
 800a13a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2201      	movs	r2, #1
 800a142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	2200      	movs	r2, #0
 800a14a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	2200      	movs	r2, #0
 800a150:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a152:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a156:	4618      	mov	r0, r3
 800a158:	3748      	adds	r7, #72	@ 0x48
 800a15a:	46bd      	mov	sp, r7
 800a15c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a160:	03d09000 	.word	0x03d09000
 800a164:	003d0900 	.word	0x003d0900
 800a168:	0801c224 	.word	0x0801c224

0800a16c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a178:	f003 0308 	and.w	r3, r3, #8
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00a      	beq.n	800a196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00a      	beq.n	800a1b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1bc:	f003 0302 	and.w	r3, r3, #2
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00a      	beq.n	800a1da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1de:	f003 0304 	and.w	r3, r3, #4
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00a      	beq.n	800a1fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	430a      	orrs	r2, r1
 800a1fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a200:	f003 0310 	and.w	r3, r3, #16
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00a      	beq.n	800a21e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	430a      	orrs	r2, r1
 800a21c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a222:	f003 0320 	and.w	r3, r3, #32
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00a      	beq.n	800a240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	430a      	orrs	r2, r1
 800a23e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01a      	beq.n	800a282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	430a      	orrs	r2, r1
 800a260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a26a:	d10a      	bne.n	800a282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00a      	beq.n	800a2a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	605a      	str	r2, [r3, #4]
  }
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b098      	sub	sp, #96	@ 0x60
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2c0:	f7f8 fb80 	bl	80029c4 <HAL_GetTick>
 800a2c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 0308 	and.w	r3, r3, #8
 800a2d0:	2b08      	cmp	r3, #8
 800a2d2:	d12f      	bne.n	800a334 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f88e 	bl	800a404 <UART_WaitOnFlagUntilTimeout>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d022      	beq.n	800a334 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f6:	e853 3f00 	ldrex	r3, [r3]
 800a2fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a302:	653b      	str	r3, [r7, #80]	@ 0x50
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	461a      	mov	r2, r3
 800a30a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a30c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a30e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e6      	bne.n	800a2ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2220      	movs	r2, #32
 800a324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e063      	b.n	800a3fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 0304 	and.w	r3, r3, #4
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d149      	bne.n	800a3d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a342:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a34a:	2200      	movs	r2, #0
 800a34c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f857 	bl	800a404 <UART_WaitOnFlagUntilTimeout>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d03c      	beq.n	800a3d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a364:	e853 3f00 	ldrex	r3, [r3]
 800a368:	623b      	str	r3, [r7, #32]
   return(result);
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a370:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a37a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a37c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a382:	e841 2300 	strex	r3, r2, [r1]
 800a386:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e6      	bne.n	800a35c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3308      	adds	r3, #8
 800a394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f023 0301 	bic.w	r3, r3, #1
 800a3a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3308      	adds	r3, #8
 800a3ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ae:	61fa      	str	r2, [r7, #28]
 800a3b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	69b9      	ldr	r1, [r7, #24]
 800a3b4:	69fa      	ldr	r2, [r7, #28]
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	617b      	str	r3, [r7, #20]
   return(result);
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e5      	bne.n	800a38e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2220      	movs	r2, #32
 800a3c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e012      	b.n	800a3fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2220      	movs	r2, #32
 800a3da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3758      	adds	r7, #88	@ 0x58
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	603b      	str	r3, [r7, #0]
 800a410:	4613      	mov	r3, r2
 800a412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a414:	e04f      	b.n	800a4b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41c:	d04b      	beq.n	800a4b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a41e:	f7f8 fad1 	bl	80029c4 <HAL_GetTick>
 800a422:	4602      	mov	r2, r0
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d302      	bcc.n	800a434 <UART_WaitOnFlagUntilTimeout+0x30>
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e04e      	b.n	800a4d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0304 	and.w	r3, r3, #4
 800a442:	2b00      	cmp	r3, #0
 800a444:	d037      	beq.n	800a4b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b80      	cmp	r3, #128	@ 0x80
 800a44a:	d034      	beq.n	800a4b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2b40      	cmp	r3, #64	@ 0x40
 800a450:	d031      	beq.n	800a4b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	f003 0308 	and.w	r3, r3, #8
 800a45c:	2b08      	cmp	r3, #8
 800a45e:	d110      	bne.n	800a482 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2208      	movs	r2, #8
 800a466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f000 f839 	bl	800a4e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2208      	movs	r2, #8
 800a472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e029      	b.n	800a4d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	69db      	ldr	r3, [r3, #28]
 800a488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a48c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a490:	d111      	bne.n	800a4b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a49a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 f81f 	bl	800a4e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e00f      	b.n	800a4d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	69da      	ldr	r2, [r3, #28]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	4013      	ands	r3, r2
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	bf0c      	ite	eq
 800a4c6:	2301      	moveq	r3, #1
 800a4c8:	2300      	movne	r3, #0
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	79fb      	ldrb	r3, [r7, #7]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d0a0      	beq.n	800a416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b095      	sub	sp, #84	@ 0x54
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a506:	643b      	str	r3, [r7, #64]	@ 0x40
 800a508:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a50c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e6      	bne.n	800a4e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3308      	adds	r3, #8
 800a520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	e853 3f00 	ldrex	r3, [r3]
 800a528:	61fb      	str	r3, [r7, #28]
   return(result);
 800a52a:	69fa      	ldr	r2, [r7, #28]
 800a52c:	4b1e      	ldr	r3, [pc, #120]	@ (800a5a8 <UART_EndRxTransfer+0xc8>)
 800a52e:	4013      	ands	r3, r2
 800a530:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	3308      	adds	r3, #8
 800a538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a53a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a53c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a542:	e841 2300 	strex	r3, r2, [r1]
 800a546:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1e5      	bne.n	800a51a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a552:	2b01      	cmp	r3, #1
 800a554:	d118      	bne.n	800a588 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	e853 3f00 	ldrex	r3, [r3]
 800a562:	60bb      	str	r3, [r7, #8]
   return(result);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	f023 0310 	bic.w	r3, r3, #16
 800a56a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	461a      	mov	r2, r3
 800a572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a574:	61bb      	str	r3, [r7, #24]
 800a576:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a578:	6979      	ldr	r1, [r7, #20]
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	e841 2300 	strex	r3, r2, [r1]
 800a580:	613b      	str	r3, [r7, #16]
   return(result);
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1e6      	bne.n	800a556 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a59c:	bf00      	nop
 800a59e:	3754      	adds	r7, #84	@ 0x54
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	effffffe 	.word	0xeffffffe

0800a5ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d101      	bne.n	800a5c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a5be:	2302      	movs	r3, #2
 800a5c0:	e027      	b.n	800a612 <HAL_UARTEx_DisableFifoMode+0x66>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2224      	movs	r2, #36	@ 0x24
 800a5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f022 0201 	bic.w	r2, r2, #1
 800a5e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a5f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2220      	movs	r2, #32
 800a604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3714      	adds	r7, #20
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b084      	sub	sp, #16
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d101      	bne.n	800a636 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a632:	2302      	movs	r3, #2
 800a634:	e02d      	b.n	800a692 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2224      	movs	r2, #36	@ 0x24
 800a642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0201 	bic.w	r2, r2, #1
 800a65c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	430a      	orrs	r2, r1
 800a670:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f850 	bl	800a718 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2220      	movs	r2, #32
 800a684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b084      	sub	sp, #16
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d101      	bne.n	800a6b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	e02d      	b.n	800a70e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2224      	movs	r2, #36	@ 0x24
 800a6be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f022 0201 	bic.w	r2, r2, #1
 800a6d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f812 	bl	800a718 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2220      	movs	r2, #32
 800a700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a724:	2b00      	cmp	r3, #0
 800a726:	d108      	bne.n	800a73a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a738:	e031      	b.n	800a79e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a73a:	2310      	movs	r3, #16
 800a73c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a73e:	2310      	movs	r3, #16
 800a740:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	0e5b      	lsrs	r3, r3, #25
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	f003 0307 	and.w	r3, r3, #7
 800a750:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	0f5b      	lsrs	r3, r3, #29
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	f003 0307 	and.w	r3, r3, #7
 800a760:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a762:	7bbb      	ldrb	r3, [r7, #14]
 800a764:	7b3a      	ldrb	r2, [r7, #12]
 800a766:	4911      	ldr	r1, [pc, #68]	@ (800a7ac <UARTEx_SetNbDataToProcess+0x94>)
 800a768:	5c8a      	ldrb	r2, [r1, r2]
 800a76a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a76e:	7b3a      	ldrb	r2, [r7, #12]
 800a770:	490f      	ldr	r1, [pc, #60]	@ (800a7b0 <UARTEx_SetNbDataToProcess+0x98>)
 800a772:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a774:	fb93 f3f2 	sdiv	r3, r3, r2
 800a778:	b29a      	uxth	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	7b7a      	ldrb	r2, [r7, #13]
 800a784:	4909      	ldr	r1, [pc, #36]	@ (800a7ac <UARTEx_SetNbDataToProcess+0x94>)
 800a786:	5c8a      	ldrb	r2, [r1, r2]
 800a788:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a78c:	7b7a      	ldrb	r2, [r7, #13]
 800a78e:	4908      	ldr	r1, [pc, #32]	@ (800a7b0 <UARTEx_SetNbDataToProcess+0x98>)
 800a790:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a792:	fb93 f3f2 	sdiv	r3, r3, r2
 800a796:	b29a      	uxth	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a79e:	bf00      	nop
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	0801c23c 	.word	0x0801c23c
 800a7b0:	0801c244 	.word	0x0801c244

0800a7b4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a7ba:	4b87      	ldr	r3, [pc, #540]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a7bc:	22c0      	movs	r2, #192	@ 0xc0
 800a7be:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a7c0:	4b85      	ldr	r3, [pc, #532]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a7c2:	22a8      	movs	r2, #168	@ 0xa8
 800a7c4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a7c6:	4b84      	ldr	r3, [pc, #528]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800a7cc:	4b82      	ldr	r3, [pc, #520]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a7ce:	220a      	movs	r2, #10
 800a7d0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a7d2:	4b82      	ldr	r3, [pc, #520]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a7d4:	22ff      	movs	r2, #255	@ 0xff
 800a7d6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a7d8:	4b80      	ldr	r3, [pc, #512]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a7da:	22ff      	movs	r2, #255	@ 0xff
 800a7dc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a7de:	4b7f      	ldr	r3, [pc, #508]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a7e0:	22ff      	movs	r2, #255	@ 0xff
 800a7e2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a7e4:	4b7d      	ldr	r3, [pc, #500]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a7ea:	4b7d      	ldr	r3, [pc, #500]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a7ec:	22c0      	movs	r2, #192	@ 0xc0
 800a7ee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a7f0:	4b7b      	ldr	r3, [pc, #492]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a7f2:	22a8      	movs	r2, #168	@ 0xa8
 800a7f4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800a7f6:	4b7a      	ldr	r3, [pc, #488]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a7f8:	2264      	movs	r2, #100	@ 0x64
 800a7fa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 800a7fc:	4b78      	ldr	r3, [pc, #480]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a7fe:	2264      	movs	r2, #100	@ 0x64
 800a800:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800a802:	f000 fdb6 	bl	800b372 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a806:	4b74      	ldr	r3, [pc, #464]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	061a      	lsls	r2, r3, #24
 800a80c:	4b72      	ldr	r3, [pc, #456]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	041b      	lsls	r3, r3, #16
 800a812:	431a      	orrs	r2, r3
 800a814:	4b70      	ldr	r3, [pc, #448]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a816:	789b      	ldrb	r3, [r3, #2]
 800a818:	021b      	lsls	r3, r3, #8
 800a81a:	4313      	orrs	r3, r2
 800a81c:	4a6e      	ldr	r2, [pc, #440]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a81e:	78d2      	ldrb	r2, [r2, #3]
 800a820:	4313      	orrs	r3, r2
 800a822:	061a      	lsls	r2, r3, #24
 800a824:	4b6c      	ldr	r3, [pc, #432]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	0619      	lsls	r1, r3, #24
 800a82a:	4b6b      	ldr	r3, [pc, #428]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a82c:	785b      	ldrb	r3, [r3, #1]
 800a82e:	041b      	lsls	r3, r3, #16
 800a830:	4319      	orrs	r1, r3
 800a832:	4b69      	ldr	r3, [pc, #420]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a834:	789b      	ldrb	r3, [r3, #2]
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	430b      	orrs	r3, r1
 800a83a:	4967      	ldr	r1, [pc, #412]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a83c:	78c9      	ldrb	r1, [r1, #3]
 800a83e:	430b      	orrs	r3, r1
 800a840:	021b      	lsls	r3, r3, #8
 800a842:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a846:	431a      	orrs	r2, r3
 800a848:	4b63      	ldr	r3, [pc, #396]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	0619      	lsls	r1, r3, #24
 800a84e:	4b62      	ldr	r3, [pc, #392]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a850:	785b      	ldrb	r3, [r3, #1]
 800a852:	041b      	lsls	r3, r3, #16
 800a854:	4319      	orrs	r1, r3
 800a856:	4b60      	ldr	r3, [pc, #384]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a858:	789b      	ldrb	r3, [r3, #2]
 800a85a:	021b      	lsls	r3, r3, #8
 800a85c:	430b      	orrs	r3, r1
 800a85e:	495e      	ldr	r1, [pc, #376]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a860:	78c9      	ldrb	r1, [r1, #3]
 800a862:	430b      	orrs	r3, r1
 800a864:	0a1b      	lsrs	r3, r3, #8
 800a866:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a86a:	431a      	orrs	r2, r3
 800a86c:	4b5a      	ldr	r3, [pc, #360]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	0619      	lsls	r1, r3, #24
 800a872:	4b59      	ldr	r3, [pc, #356]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a874:	785b      	ldrb	r3, [r3, #1]
 800a876:	041b      	lsls	r3, r3, #16
 800a878:	4319      	orrs	r1, r3
 800a87a:	4b57      	ldr	r3, [pc, #348]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a87c:	789b      	ldrb	r3, [r3, #2]
 800a87e:	021b      	lsls	r3, r3, #8
 800a880:	430b      	orrs	r3, r1
 800a882:	4955      	ldr	r1, [pc, #340]	@ (800a9d8 <MX_LWIP_Init+0x224>)
 800a884:	78c9      	ldrb	r1, [r1, #3]
 800a886:	430b      	orrs	r3, r1
 800a888:	0e1b      	lsrs	r3, r3, #24
 800a88a:	4313      	orrs	r3, r2
 800a88c:	4a55      	ldr	r2, [pc, #340]	@ (800a9e4 <MX_LWIP_Init+0x230>)
 800a88e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a890:	4b52      	ldr	r3, [pc, #328]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	061a      	lsls	r2, r3, #24
 800a896:	4b51      	ldr	r3, [pc, #324]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a898:	785b      	ldrb	r3, [r3, #1]
 800a89a:	041b      	lsls	r3, r3, #16
 800a89c:	431a      	orrs	r2, r3
 800a89e:	4b4f      	ldr	r3, [pc, #316]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8a0:	789b      	ldrb	r3, [r3, #2]
 800a8a2:	021b      	lsls	r3, r3, #8
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	4a4d      	ldr	r2, [pc, #308]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8a8:	78d2      	ldrb	r2, [r2, #3]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	061a      	lsls	r2, r3, #24
 800a8ae:	4b4b      	ldr	r3, [pc, #300]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	0619      	lsls	r1, r3, #24
 800a8b4:	4b49      	ldr	r3, [pc, #292]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8b6:	785b      	ldrb	r3, [r3, #1]
 800a8b8:	041b      	lsls	r3, r3, #16
 800a8ba:	4319      	orrs	r1, r3
 800a8bc:	4b47      	ldr	r3, [pc, #284]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8be:	789b      	ldrb	r3, [r3, #2]
 800a8c0:	021b      	lsls	r3, r3, #8
 800a8c2:	430b      	orrs	r3, r1
 800a8c4:	4945      	ldr	r1, [pc, #276]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8c6:	78c9      	ldrb	r1, [r1, #3]
 800a8c8:	430b      	orrs	r3, r1
 800a8ca:	021b      	lsls	r3, r3, #8
 800a8cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a8d0:	431a      	orrs	r2, r3
 800a8d2:	4b42      	ldr	r3, [pc, #264]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	0619      	lsls	r1, r3, #24
 800a8d8:	4b40      	ldr	r3, [pc, #256]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8da:	785b      	ldrb	r3, [r3, #1]
 800a8dc:	041b      	lsls	r3, r3, #16
 800a8de:	4319      	orrs	r1, r3
 800a8e0:	4b3e      	ldr	r3, [pc, #248]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8e2:	789b      	ldrb	r3, [r3, #2]
 800a8e4:	021b      	lsls	r3, r3, #8
 800a8e6:	430b      	orrs	r3, r1
 800a8e8:	493c      	ldr	r1, [pc, #240]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8ea:	78c9      	ldrb	r1, [r1, #3]
 800a8ec:	430b      	orrs	r3, r1
 800a8ee:	0a1b      	lsrs	r3, r3, #8
 800a8f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a8f4:	431a      	orrs	r2, r3
 800a8f6:	4b39      	ldr	r3, [pc, #228]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	0619      	lsls	r1, r3, #24
 800a8fc:	4b37      	ldr	r3, [pc, #220]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a8fe:	785b      	ldrb	r3, [r3, #1]
 800a900:	041b      	lsls	r3, r3, #16
 800a902:	4319      	orrs	r1, r3
 800a904:	4b35      	ldr	r3, [pc, #212]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a906:	789b      	ldrb	r3, [r3, #2]
 800a908:	021b      	lsls	r3, r3, #8
 800a90a:	430b      	orrs	r3, r1
 800a90c:	4933      	ldr	r1, [pc, #204]	@ (800a9dc <MX_LWIP_Init+0x228>)
 800a90e:	78c9      	ldrb	r1, [r1, #3]
 800a910:	430b      	orrs	r3, r1
 800a912:	0e1b      	lsrs	r3, r3, #24
 800a914:	4313      	orrs	r3, r2
 800a916:	4a34      	ldr	r2, [pc, #208]	@ (800a9e8 <MX_LWIP_Init+0x234>)
 800a918:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a91a:	4b31      	ldr	r3, [pc, #196]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	061a      	lsls	r2, r3, #24
 800a920:	4b2f      	ldr	r3, [pc, #188]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a922:	785b      	ldrb	r3, [r3, #1]
 800a924:	041b      	lsls	r3, r3, #16
 800a926:	431a      	orrs	r2, r3
 800a928:	4b2d      	ldr	r3, [pc, #180]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a92a:	789b      	ldrb	r3, [r3, #2]
 800a92c:	021b      	lsls	r3, r3, #8
 800a92e:	4313      	orrs	r3, r2
 800a930:	4a2b      	ldr	r2, [pc, #172]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a932:	78d2      	ldrb	r2, [r2, #3]
 800a934:	4313      	orrs	r3, r2
 800a936:	061a      	lsls	r2, r3, #24
 800a938:	4b29      	ldr	r3, [pc, #164]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	0619      	lsls	r1, r3, #24
 800a93e:	4b28      	ldr	r3, [pc, #160]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a940:	785b      	ldrb	r3, [r3, #1]
 800a942:	041b      	lsls	r3, r3, #16
 800a944:	4319      	orrs	r1, r3
 800a946:	4b26      	ldr	r3, [pc, #152]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a948:	789b      	ldrb	r3, [r3, #2]
 800a94a:	021b      	lsls	r3, r3, #8
 800a94c:	430b      	orrs	r3, r1
 800a94e:	4924      	ldr	r1, [pc, #144]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a950:	78c9      	ldrb	r1, [r1, #3]
 800a952:	430b      	orrs	r3, r1
 800a954:	021b      	lsls	r3, r3, #8
 800a956:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a95a:	431a      	orrs	r2, r3
 800a95c:	4b20      	ldr	r3, [pc, #128]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	0619      	lsls	r1, r3, #24
 800a962:	4b1f      	ldr	r3, [pc, #124]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	041b      	lsls	r3, r3, #16
 800a968:	4319      	orrs	r1, r3
 800a96a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a96c:	789b      	ldrb	r3, [r3, #2]
 800a96e:	021b      	lsls	r3, r3, #8
 800a970:	430b      	orrs	r3, r1
 800a972:	491b      	ldr	r1, [pc, #108]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a974:	78c9      	ldrb	r1, [r1, #3]
 800a976:	430b      	orrs	r3, r1
 800a978:	0a1b      	lsrs	r3, r3, #8
 800a97a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a97e:	431a      	orrs	r2, r3
 800a980:	4b17      	ldr	r3, [pc, #92]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	0619      	lsls	r1, r3, #24
 800a986:	4b16      	ldr	r3, [pc, #88]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	041b      	lsls	r3, r3, #16
 800a98c:	4319      	orrs	r1, r3
 800a98e:	4b14      	ldr	r3, [pc, #80]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a990:	789b      	ldrb	r3, [r3, #2]
 800a992:	021b      	lsls	r3, r3, #8
 800a994:	430b      	orrs	r3, r1
 800a996:	4912      	ldr	r1, [pc, #72]	@ (800a9e0 <MX_LWIP_Init+0x22c>)
 800a998:	78c9      	ldrb	r1, [r1, #3]
 800a99a:	430b      	orrs	r3, r1
 800a99c:	0e1b      	lsrs	r3, r3, #24
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	4a12      	ldr	r2, [pc, #72]	@ (800a9ec <MX_LWIP_Init+0x238>)
 800a9a2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a9a4:	4b12      	ldr	r3, [pc, #72]	@ (800a9f0 <MX_LWIP_Init+0x23c>)
 800a9a6:	9302      	str	r3, [sp, #8]
 800a9a8:	4b12      	ldr	r3, [pc, #72]	@ (800a9f4 <MX_LWIP_Init+0x240>)
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a9ec <MX_LWIP_Init+0x238>)
 800a9b2:	4a0d      	ldr	r2, [pc, #52]	@ (800a9e8 <MX_LWIP_Init+0x234>)
 800a9b4:	490b      	ldr	r1, [pc, #44]	@ (800a9e4 <MX_LWIP_Init+0x230>)
 800a9b6:	4810      	ldr	r0, [pc, #64]	@ (800a9f8 <MX_LWIP_Init+0x244>)
 800a9b8:	f001 f9c2 	bl	800bd40 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a9bc:	480e      	ldr	r0, [pc, #56]	@ (800a9f8 <MX_LWIP_Init+0x244>)
 800a9be:	f001 fb71 	bl	800c0a4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800a9c2:	480d      	ldr	r0, [pc, #52]	@ (800a9f8 <MX_LWIP_Init+0x244>)
 800a9c4:	f001 fb7e 	bl	800c0c4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a9c8:	490c      	ldr	r1, [pc, #48]	@ (800a9fc <MX_LWIP_Init+0x248>)
 800a9ca:	480b      	ldr	r0, [pc, #44]	@ (800a9f8 <MX_LWIP_Init+0x244>)
 800a9cc:	f001 fc7c 	bl	800c2c8 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a9d0:	bf00      	nop
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	24005354 	.word	0x24005354
 800a9dc:	24005358 	.word	0x24005358
 800a9e0:	2400535c 	.word	0x2400535c
 800a9e4:	24005348 	.word	0x24005348
 800a9e8:	2400534c 	.word	0x2400534c
 800a9ec:	24005350 	.word	0x24005350
 800a9f0:	08014e3d 	.word	0x08014e3d
 800a9f4:	0800accd 	.word	0x0800accd
 800a9f8:	24005314 	.word	0x24005314
 800a9fc:	0800aa01 	.word	0x0800aa01

0800aa00 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800aa20:	4b44      	ldr	r3, [pc, #272]	@ (800ab34 <low_level_init+0x120>)
 800aa22:	4a45      	ldr	r2, [pc, #276]	@ (800ab38 <low_level_init+0x124>)
 800aa24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800aa26:	2300      	movs	r3, #0
 800aa28:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800aa2a:	2380      	movs	r3, #128	@ 0x80
 800aa2c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800aa2e:	23e1      	movs	r3, #225	@ 0xe1
 800aa30:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800aa32:	2300      	movs	r3, #0
 800aa34:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800aa36:	2300      	movs	r3, #0
 800aa38:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800aa3e:	4a3d      	ldr	r2, [pc, #244]	@ (800ab34 <low_level_init+0x120>)
 800aa40:	f107 0308 	add.w	r3, r7, #8
 800aa44:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800aa46:	4b3b      	ldr	r3, [pc, #236]	@ (800ab34 <low_level_init+0x120>)
 800aa48:	2201      	movs	r2, #1
 800aa4a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800aa4c:	4b39      	ldr	r3, [pc, #228]	@ (800ab34 <low_level_init+0x120>)
 800aa4e:	4a3b      	ldr	r2, [pc, #236]	@ (800ab3c <low_level_init+0x128>)
 800aa50:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800aa52:	4b38      	ldr	r3, [pc, #224]	@ (800ab34 <low_level_init+0x120>)
 800aa54:	4a3a      	ldr	r2, [pc, #232]	@ (800ab40 <low_level_init+0x12c>)
 800aa56:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800aa58:	4b36      	ldr	r3, [pc, #216]	@ (800ab34 <low_level_init+0x120>)
 800aa5a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800aa5e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800aa60:	4834      	ldr	r0, [pc, #208]	@ (800ab34 <low_level_init+0x120>)
 800aa62:	f7f8 f927 	bl	8002cb4 <HAL_ETH_Init>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800aa6a:	2238      	movs	r2, #56	@ 0x38
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4835      	ldr	r0, [pc, #212]	@ (800ab44 <low_level_init+0x130>)
 800aa70:	f00b fc04 	bl	801627c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800aa74:	4b33      	ldr	r3, [pc, #204]	@ (800ab44 <low_level_init+0x130>)
 800aa76:	2221      	movs	r2, #33	@ 0x21
 800aa78:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800aa7a:	4b32      	ldr	r3, [pc, #200]	@ (800ab44 <low_level_init+0x130>)
 800aa7c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800aa80:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800aa82:	4b30      	ldr	r3, [pc, #192]	@ (800ab44 <low_level_init+0x130>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800aa88:	482f      	ldr	r0, [pc, #188]	@ (800ab48 <low_level_init+0x134>)
 800aa8a:	f001 f821 	bl	800bad0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2206      	movs	r2, #6
 800aa92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aa96:	4b27      	ldr	r3, [pc, #156]	@ (800ab34 <low_level_init+0x120>)
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	781a      	ldrb	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800aaa2:	4b24      	ldr	r3, [pc, #144]	@ (800ab34 <low_level_init+0x120>)
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	785a      	ldrb	r2, [r3, #1]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800aaae:	4b21      	ldr	r3, [pc, #132]	@ (800ab34 <low_level_init+0x120>)
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	789a      	ldrb	r2, [r3, #2]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800aaba:	4b1e      	ldr	r3, [pc, #120]	@ (800ab34 <low_level_init+0x120>)
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	78da      	ldrb	r2, [r3, #3]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800aac6:	4b1b      	ldr	r3, [pc, #108]	@ (800ab34 <low_level_init+0x120>)
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	791a      	ldrb	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800aad2:	4b18      	ldr	r3, [pc, #96]	@ (800ab34 <low_level_init+0x120>)
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	795a      	ldrb	r2, [r3, #5]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800aae4:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aaec:	f043 030a 	orr.w	r3, r3, #10
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800aaf8:	4914      	ldr	r1, [pc, #80]	@ (800ab4c <low_level_init+0x138>)
 800aafa:	4815      	ldr	r0, [pc, #84]	@ (800ab50 <low_level_init+0x13c>)
 800aafc:	f7f7 fe0b 	bl	8002716 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800ab00:	4813      	ldr	r0, [pc, #76]	@ (800ab50 <low_level_init+0x13c>)
 800ab02:	f7f7 fe3a 	bl	800277a <LAN8742_Init>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d006      	beq.n	800ab1a <low_level_init+0x106>
  {
    netif_set_link_down(netif);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 fbab 	bl	800c268 <netif_set_link_down>
    netif_set_down(netif);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 fb42 	bl	800c19c <netif_set_down>
 800ab18:	e008      	b.n	800ab2c <low_level_init+0x118>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800ab1a:	7bfb      	ldrb	r3, [r7, #15]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d103      	bne.n	800ab28 <low_level_init+0x114>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fa3f 	bl	800afa4 <ethernet_link_check_state>
 800ab26:	e001      	b.n	800ab2c <low_level_init+0x118>
  }
  else
  {
    Error_Handler();
 800ab28:	f7f6 ff05 	bl	8001936 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	24005368 	.word	0x24005368
 800ab38:	40028000 	.word	0x40028000
 800ab3c:	30000200 	.word	0x30000200
 800ab40:	30000000 	.word	0x30000000
 800ab44:	24005418 	.word	0x24005418
 800ab48:	0801c24c 	.word	0x0801c24c
 800ab4c:	24000030 	.word	0x24000030
 800ab50:	24005450 	.word	0x24005450

0800ab54 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b092      	sub	sp, #72	@ 0x48
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800ab62:	2300      	movs	r3, #0
 800ab64:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800ab6c:	f107 030c 	add.w	r3, r7, #12
 800ab70:	2230      	movs	r2, #48	@ 0x30
 800ab72:	2100      	movs	r1, #0
 800ab74:	4618      	mov	r0, r3
 800ab76:	f00b fb81 	bl	801627c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ab7a:	f107 030c 	add.w	r3, r7, #12
 800ab7e:	2230      	movs	r2, #48	@ 0x30
 800ab80:	2100      	movs	r1, #0
 800ab82:	4618      	mov	r0, r3
 800ab84:	f00b fb7a 	bl	801627c <memset>

  for(q = p; q != NULL; q = q->next)
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab8c:	e045      	b.n	800ac1a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ab8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d902      	bls.n	800ab9a <low_level_output+0x46>
      return ERR_IF;
 800ab94:	f06f 030b 	mvn.w	r3, #11
 800ab98:	e055      	b.n	800ac46 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800ab9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab9c:	6859      	ldr	r1, [r3, #4]
 800ab9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aba0:	4613      	mov	r3, r2
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	3348      	adds	r3, #72	@ 0x48
 800abaa:	443b      	add	r3, r7
 800abac:	3b3c      	subs	r3, #60	@ 0x3c
 800abae:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800abb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abb2:	895b      	ldrh	r3, [r3, #10]
 800abb4:	4619      	mov	r1, r3
 800abb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abb8:	4613      	mov	r3, r2
 800abba:	005b      	lsls	r3, r3, #1
 800abbc:	4413      	add	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	3348      	adds	r3, #72	@ 0x48
 800abc2:	443b      	add	r3, r7
 800abc4:	3b38      	subs	r3, #56	@ 0x38
 800abc6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800abc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d011      	beq.n	800abf2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800abce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abd0:	1e5a      	subs	r2, r3, #1
 800abd2:	f107 000c 	add.w	r0, r7, #12
 800abd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abd8:	460b      	mov	r3, r1
 800abda:	005b      	lsls	r3, r3, #1
 800abdc:	440b      	add	r3, r1
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	18c1      	adds	r1, r0, r3
 800abe2:	4613      	mov	r3, r2
 800abe4:	005b      	lsls	r3, r3, #1
 800abe6:	4413      	add	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	3348      	adds	r3, #72	@ 0x48
 800abec:	443b      	add	r3, r7
 800abee:	3b34      	subs	r3, #52	@ 0x34
 800abf0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800abf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d109      	bne.n	800ac0e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800abfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abfc:	4613      	mov	r3, r2
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	4413      	add	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	3348      	adds	r3, #72	@ 0x48
 800ac06:	443b      	add	r3, r7
 800ac08:	3b34      	subs	r3, #52	@ 0x34
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ac0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac10:	3301      	adds	r3, #1
 800ac12:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800ac14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1b6      	bne.n	800ab8e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	891b      	ldrh	r3, [r3, #8]
 800ac24:	461a      	mov	r2, r3
 800ac26:	4b0a      	ldr	r3, [pc, #40]	@ (800ac50 <low_level_output+0xfc>)
 800ac28:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ac2a:	4a09      	ldr	r2, [pc, #36]	@ (800ac50 <low_level_output+0xfc>)
 800ac2c:	f107 030c 	add.w	r3, r7, #12
 800ac30:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ac32:	4a07      	ldr	r2, [pc, #28]	@ (800ac50 <low_level_output+0xfc>)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800ac38:	2214      	movs	r2, #20
 800ac3a:	4905      	ldr	r1, [pc, #20]	@ (800ac50 <low_level_output+0xfc>)
 800ac3c:	4805      	ldr	r0, [pc, #20]	@ (800ac54 <low_level_output+0x100>)
 800ac3e:	f7f8 f9e9 	bl	8003014 <HAL_ETH_Transmit>

  return errval;
 800ac42:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3748      	adds	r7, #72	@ 0x48
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	24005418 	.word	0x24005418
 800ac54:	24005368 	.word	0x24005368

0800ac58 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800ac64:	4b07      	ldr	r3, [pc, #28]	@ (800ac84 <low_level_input+0x2c>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d105      	bne.n	800ac78 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800ac6c:	f107 030c 	add.w	r3, r7, #12
 800ac70:	4619      	mov	r1, r3
 800ac72:	4805      	ldr	r0, [pc, #20]	@ (800ac88 <low_level_input+0x30>)
 800ac74:	f7f8 fa65 	bl	8003142 <HAL_ETH_ReadData>
  }

  return p;
 800ac78:	68fb      	ldr	r3, [r7, #12]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	24005364 	.word	0x24005364
 800ac88:	24005368 	.word	0x24005368

0800ac8c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ac94:	2300      	movs	r3, #0
 800ac96:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7ff ffdd 	bl	800ac58 <low_level_input>
 800ac9e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	4798      	blx	r3
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d002      	beq.n	800acbc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f001 fe86 	bl	800c9c8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1ea      	bne.n	800ac98 <ethernetif_input+0xc>
}
 800acc2:	bf00      	nop
 800acc4:	bf00      	nop
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d106      	bne.n	800ace8 <ethernetif_init+0x1c>
 800acda:	4b0e      	ldr	r3, [pc, #56]	@ (800ad14 <ethernetif_init+0x48>)
 800acdc:	f240 1289 	movw	r2, #393	@ 0x189
 800ace0:	490d      	ldr	r1, [pc, #52]	@ (800ad18 <ethernetif_init+0x4c>)
 800ace2:	480e      	ldr	r0, [pc, #56]	@ (800ad1c <ethernetif_init+0x50>)
 800ace4:	f00b f936 	bl	8015f54 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2273      	movs	r2, #115	@ 0x73
 800acec:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2274      	movs	r2, #116	@ 0x74
 800acf4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a09      	ldr	r2, [pc, #36]	@ (800ad20 <ethernetif_init+0x54>)
 800acfc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a08      	ldr	r2, [pc, #32]	@ (800ad24 <ethernetif_init+0x58>)
 800ad02:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff fe85 	bl	800aa14 <low_level_init>

  return ERR_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	08019774 	.word	0x08019774
 800ad18:	08019790 	.word	0x08019790
 800ad1c:	080197a0 	.word	0x080197a0
 800ad20:	080132a9 	.word	0x080132a9
 800ad24:	0800ab55 	.word	0x0800ab55

0800ad28 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ad34:	68f9      	ldr	r1, [r7, #12]
 800ad36:	4807      	ldr	r0, [pc, #28]	@ (800ad54 <pbuf_free_custom+0x2c>)
 800ad38:	f000 ffac 	bl	800bc94 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ad3c:	4b06      	ldr	r3, [pc, #24]	@ (800ad58 <pbuf_free_custom+0x30>)
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d102      	bne.n	800ad4a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ad44:	4b04      	ldr	r3, [pc, #16]	@ (800ad58 <pbuf_free_custom+0x30>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]
  }
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	0801c24c 	.word	0x0801c24c
 800ad58:	24005364 	.word	0x24005364

0800ad5c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ad60:	f7f7 fe30 	bl	80029c4 <HAL_GetTick>
 800ad64:	4603      	mov	r3, r0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	bd80      	pop	{r7, pc}
	...

0800ad6c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08e      	sub	sp, #56	@ 0x38
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]
 800ad7c:	605a      	str	r2, [r3, #4]
 800ad7e:	609a      	str	r2, [r3, #8]
 800ad80:	60da      	str	r2, [r3, #12]
 800ad82:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a59      	ldr	r2, [pc, #356]	@ (800aef0 <HAL_ETH_MspInit+0x184>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	f040 80ab 	bne.w	800aee6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800ad90:	4b58      	ldr	r3, [pc, #352]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ad92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad96:	4a57      	ldr	r2, [pc, #348]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ad98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad9c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ada0:	4b54      	ldr	r3, [pc, #336]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ada2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ada6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adaa:	623b      	str	r3, [r7, #32]
 800adac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800adae:	4b51      	ldr	r3, [pc, #324]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800adb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800adb4:	4a4f      	ldr	r2, [pc, #316]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800adb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800adba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800adbe:	4b4d      	ldr	r3, [pc, #308]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800adc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800adc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800adc8:	61fb      	str	r3, [r7, #28]
 800adca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800adcc:	4b49      	ldr	r3, [pc, #292]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800adce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800add2:	4a48      	ldr	r2, [pc, #288]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800add4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800add8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800addc:	4b45      	ldr	r3, [pc, #276]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800adde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ade2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ade6:	61bb      	str	r3, [r7, #24]
 800ade8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800adea:	4b42      	ldr	r3, [pc, #264]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800adec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800adf0:	4a40      	ldr	r2, [pc, #256]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800adf2:	f043 0304 	orr.w	r3, r3, #4
 800adf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800adfa:	4b3e      	ldr	r3, [pc, #248]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800adfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	617b      	str	r3, [r7, #20]
 800ae06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae08:	4b3a      	ldr	r3, [pc, #232]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ae0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae0e:	4a39      	ldr	r2, [pc, #228]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ae10:	f043 0301 	orr.w	r3, r3, #1
 800ae14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ae18:	4b36      	ldr	r3, [pc, #216]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ae1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	613b      	str	r3, [r7, #16]
 800ae24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae26:	4b33      	ldr	r3, [pc, #204]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ae28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae2c:	4a31      	ldr	r2, [pc, #196]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ae2e:	f043 0302 	orr.w	r3, r3, #2
 800ae32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ae36:	4b2f      	ldr	r3, [pc, #188]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ae38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae3c:	f003 0302 	and.w	r3, r3, #2
 800ae40:	60fb      	str	r3, [r7, #12]
 800ae42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ae44:	4b2b      	ldr	r3, [pc, #172]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ae46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae4a:	4a2a      	ldr	r2, [pc, #168]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ae4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ae54:	4b27      	ldr	r3, [pc, #156]	@ (800aef4 <HAL_ETH_MspInit+0x188>)
 800ae56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae5e:	60bb      	str	r3, [r7, #8]
 800ae60:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG12     ------> ETH_TXD1
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ae62:	2332      	movs	r3, #50	@ 0x32
 800ae64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae66:	2302      	movs	r3, #2
 800ae68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ae72:	230b      	movs	r3, #11
 800ae74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	481e      	ldr	r0, [pc, #120]	@ (800aef8 <HAL_ETH_MspInit+0x18c>)
 800ae7e:	f7fa fcf1 	bl	8005864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ae82:	2386      	movs	r3, #134	@ 0x86
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae86:	2302      	movs	r3, #2
 800ae88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ae92:	230b      	movs	r3, #11
 800ae94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	4817      	ldr	r0, [pc, #92]	@ (800aefc <HAL_ETH_MspInit+0x190>)
 800ae9e:	f7fa fce1 	bl	8005864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800aea2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aea6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aea8:	2302      	movs	r3, #2
 800aeaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeac:	2300      	movs	r3, #0
 800aeae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aeb4:	230b      	movs	r3, #11
 800aeb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aeb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aebc:	4619      	mov	r1, r3
 800aebe:	4810      	ldr	r0, [pc, #64]	@ (800af00 <HAL_ETH_MspInit+0x194>)
 800aec0:	f7fa fcd0 	bl	8005864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800aec4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800aec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aeca:	2302      	movs	r3, #2
 800aecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aece:	2300      	movs	r3, #0
 800aed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aed2:	2300      	movs	r3, #0
 800aed4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aed6:	230b      	movs	r3, #11
 800aed8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800aeda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aede:	4619      	mov	r1, r3
 800aee0:	4808      	ldr	r0, [pc, #32]	@ (800af04 <HAL_ETH_MspInit+0x198>)
 800aee2:	f7fa fcbf 	bl	8005864 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800aee6:	bf00      	nop
 800aee8:	3738      	adds	r7, #56	@ 0x38
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	40028000 	.word	0x40028000
 800aef4:	58024400 	.word	0x58024400
 800aef8:	58020800 	.word	0x58020800
 800aefc:	58020000 	.word	0x58020000
 800af00:	58020400 	.word	0x58020400
 800af04:	58021800 	.word	0x58021800

0800af08 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800af0c:	4802      	ldr	r0, [pc, #8]	@ (800af18 <ETH_PHY_IO_Init+0x10>)
 800af0e:	f7f8 fce5 	bl	80038dc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	bd80      	pop	{r7, pc}
 800af18:	24005368 	.word	0x24005368

0800af1c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800af1c:	b480      	push	{r7}
 800af1e:	af00      	add	r7, sp, #0
  return 0;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	68f9      	ldr	r1, [r7, #12]
 800af3e:	4807      	ldr	r0, [pc, #28]	@ (800af5c <ETH_PHY_IO_ReadReg+0x30>)
 800af40:	f7f8 fa35 	bl	80033ae <HAL_ETH_ReadPHYRegister>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d002      	beq.n	800af50 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800af4a:	f04f 33ff 	mov.w	r3, #4294967295
 800af4e:	e000      	b.n	800af52 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	24005368 	.word	0x24005368

0800af60 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	68f9      	ldr	r1, [r7, #12]
 800af72:	4807      	ldr	r0, [pc, #28]	@ (800af90 <ETH_PHY_IO_WriteReg+0x30>)
 800af74:	f7f8 fa70 	bl	8003458 <HAL_ETH_WritePHYRegister>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800af7e:	f04f 33ff 	mov.w	r3, #4294967295
 800af82:	e000      	b.n	800af86 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	24005368 	.word	0x24005368

0800af94 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800af98:	f7f7 fd14 	bl	80029c4 <HAL_GetTick>
 800af9c:	4603      	mov	r3, r0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b0a0      	sub	sp, #128	@ 0x80
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800afac:	f107 030c 	add.w	r3, r7, #12
 800afb0:	2264      	movs	r2, #100	@ 0x64
 800afb2:	2100      	movs	r1, #0
 800afb4:	4618      	mov	r0, r3
 800afb6:	f00b f961 	bl	801627c <memset>
  int32_t PHYLinkState = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800afc2:	2300      	movs	r3, #0
 800afc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800afc6:	2300      	movs	r3, #0
 800afc8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800afca:	483a      	ldr	r0, [pc, #232]	@ (800b0b4 <ethernet_link_check_state+0x110>)
 800afcc:	f7f7 fc22 	bl	8002814 <LAN8742_GetLinkState>
 800afd0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800afd8:	089b      	lsrs	r3, r3, #2
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00c      	beq.n	800affe <ethernet_link_check_state+0x5a>
 800afe4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	dc09      	bgt.n	800affe <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800afea:	4833      	ldr	r0, [pc, #204]	@ (800b0b8 <ethernet_link_check_state+0x114>)
 800afec:	f7f7 ffc2 	bl	8002f74 <HAL_ETH_Stop>
    netif_set_down(netif);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f001 f8d3 	bl	800c19c <netif_set_down>
    netif_set_link_down(netif);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f001 f936 	bl	800c268 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800affc:	e055      	b.n	800b0aa <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b004:	f003 0304 	and.w	r3, r3, #4
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d14e      	bne.n	800b0aa <ethernet_link_check_state+0x106>
 800b00c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b00e:	2b01      	cmp	r3, #1
 800b010:	dd4b      	ble.n	800b0aa <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800b012:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b014:	3b02      	subs	r3, #2
 800b016:	2b03      	cmp	r3, #3
 800b018:	d82a      	bhi.n	800b070 <ethernet_link_check_state+0xcc>
 800b01a:	a201      	add	r2, pc, #4	@ (adr r2, 800b020 <ethernet_link_check_state+0x7c>)
 800b01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b020:	0800b031 	.word	0x0800b031
 800b024:	0800b043 	.word	0x0800b043
 800b028:	0800b053 	.word	0x0800b053
 800b02c:	0800b063 	.word	0x0800b063
      duplex = ETH_FULLDUPLEX_MODE;
 800b030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b034:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b036:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b03a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b03c:	2301      	movs	r3, #1
 800b03e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b040:	e017      	b.n	800b072 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800b042:	2300      	movs	r3, #0
 800b044:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b046:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b04a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b04c:	2301      	movs	r3, #1
 800b04e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b050:	e00f      	b.n	800b072 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800b052:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b056:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b058:	2300      	movs	r3, #0
 800b05a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b05c:	2301      	movs	r3, #1
 800b05e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b060:	e007      	b.n	800b072 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800b062:	2300      	movs	r3, #0
 800b064:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b066:	2300      	movs	r3, #0
 800b068:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b06a:	2301      	movs	r3, #1
 800b06c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b06e:	e000      	b.n	800b072 <ethernet_link_check_state+0xce>
      break;
 800b070:	bf00      	nop
    if(linkchanged)
 800b072:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b074:	2b00      	cmp	r3, #0
 800b076:	d018      	beq.n	800b0aa <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b078:	f107 030c 	add.w	r3, r7, #12
 800b07c:	4619      	mov	r1, r3
 800b07e:	480e      	ldr	r0, [pc, #56]	@ (800b0b8 <ethernet_link_check_state+0x114>)
 800b080:	f7f8 fa3e 	bl	8003500 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b084:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b086:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800b088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b08a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b08c:	f107 030c 	add.w	r3, r7, #12
 800b090:	4619      	mov	r1, r3
 800b092:	4809      	ldr	r0, [pc, #36]	@ (800b0b8 <ethernet_link_check_state+0x114>)
 800b094:	f7f8 fc08 	bl	80038a8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800b098:	4807      	ldr	r0, [pc, #28]	@ (800b0b8 <ethernet_link_check_state+0x114>)
 800b09a:	f7f7 ff09 	bl	8002eb0 <HAL_ETH_Start>
      netif_set_up(netif);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f001 f810 	bl	800c0c4 <netif_set_up>
      netif_set_link_up(netif);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 f8ab 	bl	800c200 <netif_set_link_up>
}
 800b0aa:	bf00      	nop
 800b0ac:	3780      	adds	r7, #128	@ 0x80
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	24005450 	.word	0x24005450
 800b0b8:	24005368 	.word	0x24005368

0800b0bc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af02      	add	r7, sp, #8
 800b0c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b0c4:	4812      	ldr	r0, [pc, #72]	@ (800b110 <HAL_ETH_RxAllocateCallback+0x54>)
 800b0c6:	f000 fd77 	bl	800bbb8 <memp_malloc_pool>
 800b0ca:	60f8      	str	r0, [r7, #12]
  if (p)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d014      	beq.n	800b0fc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f103 0220 	add.w	r2, r3, #32
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	4a0d      	ldr	r2, [pc, #52]	@ (800b114 <HAL_ETH_RxAllocateCallback+0x58>)
 800b0e0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b0ea:	9201      	str	r2, [sp, #4]
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2241      	movs	r2, #65	@ 0x41
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	f001 faad 	bl	800c654 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b0fa:	e005      	b.n	800b108 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b0fc:	4b06      	ldr	r3, [pc, #24]	@ (800b118 <HAL_ETH_RxAllocateCallback+0x5c>)
 800b0fe:	2201      	movs	r2, #1
 800b100:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	601a      	str	r2, [r3, #0]
}
 800b108:	bf00      	nop
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	0801c24c 	.word	0x0801c24c
 800b114:	0800ad29 	.word	0x0800ad29
 800b118:	24005364 	.word	0x24005364

0800b11c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b089      	sub	sp, #36	@ 0x24
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b132:	2300      	movs	r3, #0
 800b134:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3b20      	subs	r3, #32
 800b13a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	2200      	movs	r2, #0
 800b146:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	887a      	ldrh	r2, [r7, #2]
 800b14c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d103      	bne.n	800b15e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	69fa      	ldr	r2, [r7, #28]
 800b15a:	601a      	str	r2, [r3, #0]
 800b15c:	e003      	b.n	800b166 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	69fa      	ldr	r2, [r7, #28]
 800b164:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	69fa      	ldr	r2, [r7, #28]
 800b16a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	61fb      	str	r3, [r7, #28]
 800b172:	e009      	b.n	800b188 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	891a      	ldrh	r2, [r3, #8]
 800b178:	887b      	ldrh	r3, [r7, #2]
 800b17a:	4413      	add	r3, r2
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	61fb      	str	r3, [r7, #28]
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1f2      	bne.n	800b174 <HAL_ETH_RxLinkCallback+0x58>

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  //SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b18e:	bf00      	nop
 800b190:	bf00      	nop
 800b192:	3724      	adds	r7, #36	@ 0x24
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b1a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b1aa:	021b      	lsls	r3, r3, #8
 800b1ac:	b21a      	sxth	r2, r3
 800b1ae:	88fb      	ldrh	r3, [r7, #6]
 800b1b0:	0a1b      	lsrs	r3, r3, #8
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	b21b      	sxth	r3, r3
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	b21b      	sxth	r3, r3
 800b1ba:	b29b      	uxth	r3, r3
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	061a      	lsls	r2, r3, #24
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	021b      	lsls	r3, r3, #8
 800b1d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	0a1b      	lsrs	r3, r3, #8
 800b1e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b1e6:	431a      	orrs	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	0e1b      	lsrs	r3, r3, #24
 800b1ec:	4313      	orrs	r3, r2
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b089      	sub	sp, #36	@ 0x24
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00d      	beq.n	800b23a <lwip_standard_chksum+0x40>
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	dd0a      	ble.n	800b23a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b224:	69fa      	ldr	r2, [r7, #28]
 800b226:	1c53      	adds	r3, r2, #1
 800b228:	61fb      	str	r3, [r7, #28]
 800b22a:	f107 030e 	add.w	r3, r7, #14
 800b22e:	3301      	adds	r3, #1
 800b230:	7812      	ldrb	r2, [r2, #0]
 800b232:	701a      	strb	r2, [r3, #0]
    len--;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	3b01      	subs	r3, #1
 800b238:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b23e:	e00a      	b.n	800b256 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	1c9a      	adds	r2, r3, #2
 800b244:	61ba      	str	r2, [r7, #24]
 800b246:	881b      	ldrh	r3, [r3, #0]
 800b248:	461a      	mov	r2, r3
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	4413      	add	r3, r2
 800b24e:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	3b02      	subs	r3, #2
 800b254:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	dcf1      	bgt.n	800b240 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	dd04      	ble.n	800b26c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b262:	f107 030e 	add.w	r3, r7, #14
 800b266:	69ba      	ldr	r2, [r7, #24]
 800b268:	7812      	ldrb	r2, [r2, #0]
 800b26a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b26c:	89fb      	ldrh	r3, [r7, #14]
 800b26e:	461a      	mov	r2, r3
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	4413      	add	r3, r2
 800b274:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	0c1a      	lsrs	r2, r3, #16
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	4413      	add	r3, r2
 800b280:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	0c1a      	lsrs	r2, r3, #16
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	4413      	add	r3, r2
 800b28c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d007      	beq.n	800b2a4 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	021b      	lsls	r3, r3, #8
 800b298:	b29a      	uxth	r2, r3
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	0a1b      	lsrs	r3, r3, #8
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	b29b      	uxth	r3, r3
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3724      	adds	r7, #36	@ 0x24
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b2c0:	887b      	ldrh	r3, [r7, #2]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff ff98 	bl	800b1fa <lwip_standard_chksum>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	43db      	mvns	r3, r3
 800b2ce:	b29b      	uxth	r3, r3
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	e02b      	b.n	800b346 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	685a      	ldr	r2, [r3, #4]
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	895b      	ldrh	r3, [r3, #10]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	f7ff ff7e 	bl	800b1fa <lwip_standard_chksum>
 800b2fe:	4603      	mov	r3, r0
 800b300:	461a      	mov	r2, r3
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	4413      	add	r3, r2
 800b306:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	0c1a      	lsrs	r2, r3, #16
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	b29b      	uxth	r3, r3
 800b310:	4413      	add	r3, r2
 800b312:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	895b      	ldrh	r3, [r3, #10]
 800b318:	f003 0301 	and.w	r3, r3, #1
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00e      	beq.n	800b340 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	bf0c      	ite	eq
 800b328:	2301      	moveq	r3, #1
 800b32a:	2300      	movne	r3, #0
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	021b      	lsls	r3, r3, #8
 800b334:	b29a      	uxth	r2, r3
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	0a1b      	lsrs	r3, r3, #8
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	4313      	orrs	r3, r2
 800b33e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	613b      	str	r3, [r7, #16]
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1d0      	bne.n	800b2ee <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d007      	beq.n	800b362 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	021b      	lsls	r3, r3, #8
 800b356:	b29a      	uxth	r2, r3
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	0a1b      	lsrs	r3, r3, #8
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	4313      	orrs	r3, r2
 800b360:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	b29b      	uxth	r3, r3
 800b366:	43db      	mvns	r3, r3
 800b368:	b29b      	uxth	r3, r3
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800b37c:	f000 f8d4 	bl	800b528 <mem_init>
  memp_init();
 800b380:	f000 fbd6 	bl	800bb30 <memp_init>
  pbuf_init();
  netif_init();
 800b384:	f000 fcd4 	bl	800bd30 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b388:	f007 f84e 	bl	8012428 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b38c:	f001 fdaa 	bl	800cee4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b390:	f006 ffc0 	bl	8012314 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b394:	bf00      	nop
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b3a6:	4b05      	ldr	r3, [pc, #20]	@ (800b3bc <ptr_to_mem+0x20>)
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	88fb      	ldrh	r3, [r7, #6]
 800b3ac:	4413      	add	r3, r2
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	24005488 	.word	0x24005488

0800b3c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b3c8:	4b05      	ldr	r3, [pc, #20]	@ (800b3e0 <mem_to_ptr+0x20>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	b29b      	uxth	r3, r3
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	24005488 	.word	0x24005488

0800b3e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b3e4:	b590      	push	{r4, r7, lr}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b3ec:	4b45      	ldr	r3, [pc, #276]	@ (800b504 <plug_holes+0x120>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d206      	bcs.n	800b404 <plug_holes+0x20>
 800b3f6:	4b44      	ldr	r3, [pc, #272]	@ (800b508 <plug_holes+0x124>)
 800b3f8:	f240 12df 	movw	r2, #479	@ 0x1df
 800b3fc:	4943      	ldr	r1, [pc, #268]	@ (800b50c <plug_holes+0x128>)
 800b3fe:	4844      	ldr	r0, [pc, #272]	@ (800b510 <plug_holes+0x12c>)
 800b400:	f00a fda8 	bl	8015f54 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b404:	4b43      	ldr	r3, [pc, #268]	@ (800b514 <plug_holes+0x130>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d306      	bcc.n	800b41c <plug_holes+0x38>
 800b40e:	4b3e      	ldr	r3, [pc, #248]	@ (800b508 <plug_holes+0x124>)
 800b410:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b414:	4940      	ldr	r1, [pc, #256]	@ (800b518 <plug_holes+0x134>)
 800b416:	483e      	ldr	r0, [pc, #248]	@ (800b510 <plug_holes+0x12c>)
 800b418:	f00a fd9c 	bl	8015f54 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	791b      	ldrb	r3, [r3, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d006      	beq.n	800b432 <plug_holes+0x4e>
 800b424:	4b38      	ldr	r3, [pc, #224]	@ (800b508 <plug_holes+0x124>)
 800b426:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b42a:	493c      	ldr	r1, [pc, #240]	@ (800b51c <plug_holes+0x138>)
 800b42c:	4838      	ldr	r0, [pc, #224]	@ (800b510 <plug_holes+0x12c>)
 800b42e:	f00a fd91 	bl	8015f54 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	881b      	ldrh	r3, [r3, #0]
 800b436:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b43a:	d906      	bls.n	800b44a <plug_holes+0x66>
 800b43c:	4b32      	ldr	r3, [pc, #200]	@ (800b508 <plug_holes+0x124>)
 800b43e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b442:	4937      	ldr	r1, [pc, #220]	@ (800b520 <plug_holes+0x13c>)
 800b444:	4832      	ldr	r0, [pc, #200]	@ (800b510 <plug_holes+0x12c>)
 800b446:	f00a fd85 	bl	8015f54 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff ffa4 	bl	800b39c <ptr_to_mem>
 800b454:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d024      	beq.n	800b4a8 <plug_holes+0xc4>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	791b      	ldrb	r3, [r3, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d120      	bne.n	800b4a8 <plug_holes+0xc4>
 800b466:	4b2b      	ldr	r3, [pc, #172]	@ (800b514 <plug_holes+0x130>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d01b      	beq.n	800b4a8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b470:	4b2c      	ldr	r3, [pc, #176]	@ (800b524 <plug_holes+0x140>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	429a      	cmp	r2, r3
 800b478:	d102      	bne.n	800b480 <plug_holes+0x9c>
      lfree = mem;
 800b47a:	4a2a      	ldr	r2, [pc, #168]	@ (800b524 <plug_holes+0x140>)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	881a      	ldrh	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b490:	d00a      	beq.n	800b4a8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff ff80 	bl	800b39c <ptr_to_mem>
 800b49c:	4604      	mov	r4, r0
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7ff ff8e 	bl	800b3c0 <mem_to_ptr>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	885b      	ldrh	r3, [r3, #2]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7ff ff75 	bl	800b39c <ptr_to_mem>
 800b4b2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d01f      	beq.n	800b4fc <plug_holes+0x118>
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	791b      	ldrb	r3, [r3, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d11b      	bne.n	800b4fc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b4c4:	4b17      	ldr	r3, [pc, #92]	@ (800b524 <plug_holes+0x140>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d102      	bne.n	800b4d4 <plug_holes+0xf0>
      lfree = pmem;
 800b4ce:	4a15      	ldr	r2, [pc, #84]	@ (800b524 <plug_holes+0x140>)
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	881a      	ldrh	r2, [r3, #0]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b4e4:	d00a      	beq.n	800b4fc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff ff56 	bl	800b39c <ptr_to_mem>
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	68b8      	ldr	r0, [r7, #8]
 800b4f4:	f7ff ff64 	bl	800b3c0 <mem_to_ptr>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b4fc:	bf00      	nop
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	bd90      	pop	{r4, r7, pc}
 800b504:	24005488 	.word	0x24005488
 800b508:	080197c8 	.word	0x080197c8
 800b50c:	080197f8 	.word	0x080197f8
 800b510:	08019810 	.word	0x08019810
 800b514:	2400548c 	.word	0x2400548c
 800b518:	08019838 	.word	0x08019838
 800b51c:	08019854 	.word	0x08019854
 800b520:	08019870 	.word	0x08019870
 800b524:	24005490 	.word	0x24005490

0800b528 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b52e:	4b16      	ldr	r3, [pc, #88]	@ (800b588 <mem_init+0x60>)
 800b530:	4a16      	ldr	r2, [pc, #88]	@ (800b58c <mem_init+0x64>)
 800b532:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b534:	4b14      	ldr	r3, [pc, #80]	@ (800b588 <mem_init+0x60>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b540:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b54e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800b552:	f7ff ff23 	bl	800b39c <ptr_to_mem>
 800b556:	4603      	mov	r3, r0
 800b558:	4a0d      	ldr	r2, [pc, #52]	@ (800b590 <mem_init+0x68>)
 800b55a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b55c:	4b0c      	ldr	r3, [pc, #48]	@ (800b590 <mem_init+0x68>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2201      	movs	r2, #1
 800b562:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b564:	4b0a      	ldr	r3, [pc, #40]	@ (800b590 <mem_init+0x68>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b56c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b56e:	4b08      	ldr	r3, [pc, #32]	@ (800b590 <mem_init+0x68>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b576:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b578:	4b03      	ldr	r3, [pc, #12]	@ (800b588 <mem_init+0x60>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a05      	ldr	r2, [pc, #20]	@ (800b594 <mem_init+0x6c>)
 800b57e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800b580:	bf00      	nop
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	24005488 	.word	0x24005488
 800b58c:	30004000 	.word	0x30004000
 800b590:	2400548c 	.word	0x2400548c
 800b594:	24005490 	.word	0x24005490

0800b598 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7ff ff0d 	bl	800b3c0 <mem_to_ptr>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7ff fef4 	bl	800b39c <ptr_to_mem>
 800b5b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	885b      	ldrh	r3, [r3, #2]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7ff feee 	bl	800b39c <ptr_to_mem>
 800b5c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b5ca:	d818      	bhi.n	800b5fe <mem_link_valid+0x66>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	885b      	ldrh	r3, [r3, #2]
 800b5d0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b5d4:	d813      	bhi.n	800b5fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b5da:	8afa      	ldrh	r2, [r7, #22]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d004      	beq.n	800b5ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	8afa      	ldrh	r2, [r7, #22]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d109      	bne.n	800b5fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b5ea:	4b08      	ldr	r3, [pc, #32]	@ (800b60c <mem_link_valid+0x74>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b5ee:	693a      	ldr	r2, [r7, #16]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d006      	beq.n	800b602 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	885b      	ldrh	r3, [r3, #2]
 800b5f8:	8afa      	ldrh	r2, [r7, #22]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d001      	beq.n	800b602 <mem_link_valid+0x6a>
    return 0;
 800b5fe:	2300      	movs	r3, #0
 800b600:	e000      	b.n	800b604 <mem_link_valid+0x6c>
  }
  return 1;
 800b602:	2301      	movs	r3, #1
}
 800b604:	4618      	mov	r0, r3
 800b606:	3718      	adds	r7, #24
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	2400548c 	.word	0x2400548c

0800b610 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d04c      	beq.n	800b6b8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f003 0303 	and.w	r3, r3, #3
 800b624:	2b00      	cmp	r3, #0
 800b626:	d007      	beq.n	800b638 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b628:	4b25      	ldr	r3, [pc, #148]	@ (800b6c0 <mem_free+0xb0>)
 800b62a:	f240 2273 	movw	r2, #627	@ 0x273
 800b62e:	4925      	ldr	r1, [pc, #148]	@ (800b6c4 <mem_free+0xb4>)
 800b630:	4825      	ldr	r0, [pc, #148]	@ (800b6c8 <mem_free+0xb8>)
 800b632:	f00a fc8f 	bl	8015f54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b636:	e040      	b.n	800b6ba <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3b08      	subs	r3, #8
 800b63c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b63e:	4b23      	ldr	r3, [pc, #140]	@ (800b6cc <mem_free+0xbc>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	429a      	cmp	r2, r3
 800b646:	d306      	bcc.n	800b656 <mem_free+0x46>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f103 020c 	add.w	r2, r3, #12
 800b64e:	4b20      	ldr	r3, [pc, #128]	@ (800b6d0 <mem_free+0xc0>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	429a      	cmp	r2, r3
 800b654:	d907      	bls.n	800b666 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b656:	4b1a      	ldr	r3, [pc, #104]	@ (800b6c0 <mem_free+0xb0>)
 800b658:	f240 227f 	movw	r2, #639	@ 0x27f
 800b65c:	491d      	ldr	r1, [pc, #116]	@ (800b6d4 <mem_free+0xc4>)
 800b65e:	481a      	ldr	r0, [pc, #104]	@ (800b6c8 <mem_free+0xb8>)
 800b660:	f00a fc78 	bl	8015f54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b664:	e029      	b.n	800b6ba <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	791b      	ldrb	r3, [r3, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d107      	bne.n	800b67e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b66e:	4b14      	ldr	r3, [pc, #80]	@ (800b6c0 <mem_free+0xb0>)
 800b670:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b674:	4918      	ldr	r1, [pc, #96]	@ (800b6d8 <mem_free+0xc8>)
 800b676:	4814      	ldr	r0, [pc, #80]	@ (800b6c8 <mem_free+0xb8>)
 800b678:	f00a fc6c 	bl	8015f54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b67c:	e01d      	b.n	800b6ba <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f7ff ff8a 	bl	800b598 <mem_link_valid>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d107      	bne.n	800b69a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b68a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6c0 <mem_free+0xb0>)
 800b68c:	f240 2295 	movw	r2, #661	@ 0x295
 800b690:	4912      	ldr	r1, [pc, #72]	@ (800b6dc <mem_free+0xcc>)
 800b692:	480d      	ldr	r0, [pc, #52]	@ (800b6c8 <mem_free+0xb8>)
 800b694:	f00a fc5e 	bl	8015f54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b698:	e00f      	b.n	800b6ba <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b6a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b6e0 <mem_free+0xd0>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d202      	bcs.n	800b6b0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b6aa:	4a0d      	ldr	r2, [pc, #52]	@ (800b6e0 <mem_free+0xd0>)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff fe97 	bl	800b3e4 <plug_holes>
 800b6b6:	e000      	b.n	800b6ba <mem_free+0xaa>
    return;
 800b6b8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b6ba:	3710      	adds	r7, #16
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	080197c8 	.word	0x080197c8
 800b6c4:	0801989c 	.word	0x0801989c
 800b6c8:	08019810 	.word	0x08019810
 800b6cc:	24005488 	.word	0x24005488
 800b6d0:	2400548c 	.word	0x2400548c
 800b6d4:	080198c0 	.word	0x080198c0
 800b6d8:	080198dc 	.word	0x080198dc
 800b6dc:	08019904 	.word	0x08019904
 800b6e0:	24005490 	.word	0x24005490

0800b6e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b088      	sub	sp, #32
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b6f0:	887b      	ldrh	r3, [r7, #2]
 800b6f2:	3303      	adds	r3, #3
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	f023 0303 	bic.w	r3, r3, #3
 800b6fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b6fc:	8bfb      	ldrh	r3, [r7, #30]
 800b6fe:	2b0b      	cmp	r3, #11
 800b700:	d801      	bhi.n	800b706 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b702:	230c      	movs	r3, #12
 800b704:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b706:	8bfb      	ldrh	r3, [r7, #30]
 800b708:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b70c:	d803      	bhi.n	800b716 <mem_trim+0x32>
 800b70e:	8bfa      	ldrh	r2, [r7, #30]
 800b710:	887b      	ldrh	r3, [r7, #2]
 800b712:	429a      	cmp	r2, r3
 800b714:	d201      	bcs.n	800b71a <mem_trim+0x36>
    return NULL;
 800b716:	2300      	movs	r3, #0
 800b718:	e0cc      	b.n	800b8b4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b71a:	4b68      	ldr	r3, [pc, #416]	@ (800b8bc <mem_trim+0x1d8>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	429a      	cmp	r2, r3
 800b722:	d304      	bcc.n	800b72e <mem_trim+0x4a>
 800b724:	4b66      	ldr	r3, [pc, #408]	@ (800b8c0 <mem_trim+0x1dc>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d306      	bcc.n	800b73c <mem_trim+0x58>
 800b72e:	4b65      	ldr	r3, [pc, #404]	@ (800b8c4 <mem_trim+0x1e0>)
 800b730:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b734:	4964      	ldr	r1, [pc, #400]	@ (800b8c8 <mem_trim+0x1e4>)
 800b736:	4865      	ldr	r0, [pc, #404]	@ (800b8cc <mem_trim+0x1e8>)
 800b738:	f00a fc0c 	bl	8015f54 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b73c:	4b5f      	ldr	r3, [pc, #380]	@ (800b8bc <mem_trim+0x1d8>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	429a      	cmp	r2, r3
 800b744:	d304      	bcc.n	800b750 <mem_trim+0x6c>
 800b746:	4b5e      	ldr	r3, [pc, #376]	@ (800b8c0 <mem_trim+0x1dc>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d301      	bcc.n	800b754 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	e0af      	b.n	800b8b4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	3b08      	subs	r3, #8
 800b758:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b75a:	69b8      	ldr	r0, [r7, #24]
 800b75c:	f7ff fe30 	bl	800b3c0 <mem_to_ptr>
 800b760:	4603      	mov	r3, r0
 800b762:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	881a      	ldrh	r2, [r3, #0]
 800b768:	8afb      	ldrh	r3, [r7, #22]
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	3b08      	subs	r3, #8
 800b770:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b772:	8bfa      	ldrh	r2, [r7, #30]
 800b774:	8abb      	ldrh	r3, [r7, #20]
 800b776:	429a      	cmp	r2, r3
 800b778:	d906      	bls.n	800b788 <mem_trim+0xa4>
 800b77a:	4b52      	ldr	r3, [pc, #328]	@ (800b8c4 <mem_trim+0x1e0>)
 800b77c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b780:	4953      	ldr	r1, [pc, #332]	@ (800b8d0 <mem_trim+0x1ec>)
 800b782:	4852      	ldr	r0, [pc, #328]	@ (800b8cc <mem_trim+0x1e8>)
 800b784:	f00a fbe6 	bl	8015f54 <iprintf>
  if (newsize > size) {
 800b788:	8bfa      	ldrh	r2, [r7, #30]
 800b78a:	8abb      	ldrh	r3, [r7, #20]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d901      	bls.n	800b794 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b790:	2300      	movs	r3, #0
 800b792:	e08f      	b.n	800b8b4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b794:	8bfa      	ldrh	r2, [r7, #30]
 800b796:	8abb      	ldrh	r3, [r7, #20]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d101      	bne.n	800b7a0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	e089      	b.n	800b8b4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff fdf9 	bl	800b39c <ptr_to_mem>
 800b7aa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	791b      	ldrb	r3, [r3, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d13f      	bne.n	800b834 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	881b      	ldrh	r3, [r3, #0]
 800b7b8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b7bc:	d106      	bne.n	800b7cc <mem_trim+0xe8>
 800b7be:	4b41      	ldr	r3, [pc, #260]	@ (800b8c4 <mem_trim+0x1e0>)
 800b7c0:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b7c4:	4943      	ldr	r1, [pc, #268]	@ (800b8d4 <mem_trim+0x1f0>)
 800b7c6:	4841      	ldr	r0, [pc, #260]	@ (800b8cc <mem_trim+0x1e8>)
 800b7c8:	f00a fbc4 	bl	8015f54 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b7d2:	8afa      	ldrh	r2, [r7, #22]
 800b7d4:	8bfb      	ldrh	r3, [r7, #30]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	3308      	adds	r3, #8
 800b7dc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b7de:	4b3e      	ldr	r3, [pc, #248]	@ (800b8d8 <mem_trim+0x1f4>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	693a      	ldr	r2, [r7, #16]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d106      	bne.n	800b7f6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b7e8:	89fb      	ldrh	r3, [r7, #14]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7ff fdd6 	bl	800b39c <ptr_to_mem>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	4a39      	ldr	r2, [pc, #228]	@ (800b8d8 <mem_trim+0x1f4>)
 800b7f4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b7f6:	89fb      	ldrh	r3, [r7, #14]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7ff fdcf 	bl	800b39c <ptr_to_mem>
 800b7fe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	2200      	movs	r2, #0
 800b804:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	89ba      	ldrh	r2, [r7, #12]
 800b80a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	8afa      	ldrh	r2, [r7, #22]
 800b810:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	89fa      	ldrh	r2, [r7, #14]
 800b816:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	881b      	ldrh	r3, [r3, #0]
 800b81c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b820:	d047      	beq.n	800b8b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	881b      	ldrh	r3, [r3, #0]
 800b826:	4618      	mov	r0, r3
 800b828:	f7ff fdb8 	bl	800b39c <ptr_to_mem>
 800b82c:	4602      	mov	r2, r0
 800b82e:	89fb      	ldrh	r3, [r7, #14]
 800b830:	8053      	strh	r3, [r2, #2]
 800b832:	e03e      	b.n	800b8b2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b834:	8bfb      	ldrh	r3, [r7, #30]
 800b836:	f103 0214 	add.w	r2, r3, #20
 800b83a:	8abb      	ldrh	r3, [r7, #20]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d838      	bhi.n	800b8b2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b840:	8afa      	ldrh	r2, [r7, #22]
 800b842:	8bfb      	ldrh	r3, [r7, #30]
 800b844:	4413      	add	r3, r2
 800b846:	b29b      	uxth	r3, r3
 800b848:	3308      	adds	r3, #8
 800b84a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b854:	d106      	bne.n	800b864 <mem_trim+0x180>
 800b856:	4b1b      	ldr	r3, [pc, #108]	@ (800b8c4 <mem_trim+0x1e0>)
 800b858:	f240 3216 	movw	r2, #790	@ 0x316
 800b85c:	491d      	ldr	r1, [pc, #116]	@ (800b8d4 <mem_trim+0x1f0>)
 800b85e:	481b      	ldr	r0, [pc, #108]	@ (800b8cc <mem_trim+0x1e8>)
 800b860:	f00a fb78 	bl	8015f54 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b864:	89fb      	ldrh	r3, [r7, #14]
 800b866:	4618      	mov	r0, r3
 800b868:	f7ff fd98 	bl	800b39c <ptr_to_mem>
 800b86c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b86e:	4b1a      	ldr	r3, [pc, #104]	@ (800b8d8 <mem_trim+0x1f4>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	429a      	cmp	r2, r3
 800b876:	d202      	bcs.n	800b87e <mem_trim+0x19a>
      lfree = mem2;
 800b878:	4a17      	ldr	r2, [pc, #92]	@ (800b8d8 <mem_trim+0x1f4>)
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	2200      	movs	r2, #0
 800b882:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	881a      	ldrh	r2, [r3, #0]
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	8afa      	ldrh	r2, [r7, #22]
 800b890:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	89fa      	ldrh	r2, [r7, #14]
 800b896:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b8a0:	d007      	beq.n	800b8b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	881b      	ldrh	r3, [r3, #0]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff fd78 	bl	800b39c <ptr_to_mem>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	89fb      	ldrh	r3, [r7, #14]
 800b8b0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b8b2:	687b      	ldr	r3, [r7, #4]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3720      	adds	r7, #32
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	24005488 	.word	0x24005488
 800b8c0:	2400548c 	.word	0x2400548c
 800b8c4:	080197c8 	.word	0x080197c8
 800b8c8:	08019938 	.word	0x08019938
 800b8cc:	08019810 	.word	0x08019810
 800b8d0:	08019950 	.word	0x08019950
 800b8d4:	08019970 	.word	0x08019970
 800b8d8:	24005490 	.word	0x24005490

0800b8dc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b8e6:	88fb      	ldrh	r3, [r7, #6]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d101      	bne.n	800b8f0 <mem_malloc+0x14>
    return NULL;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	e0d9      	b.n	800baa4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b8f0:	88fb      	ldrh	r3, [r7, #6]
 800b8f2:	3303      	adds	r3, #3
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	f023 0303 	bic.w	r3, r3, #3
 800b8fa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b8fc:	8bbb      	ldrh	r3, [r7, #28]
 800b8fe:	2b0b      	cmp	r3, #11
 800b900:	d801      	bhi.n	800b906 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b902:	230c      	movs	r3, #12
 800b904:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b906:	8bbb      	ldrh	r3, [r7, #28]
 800b908:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b90c:	d803      	bhi.n	800b916 <mem_malloc+0x3a>
 800b90e:	8bba      	ldrh	r2, [r7, #28]
 800b910:	88fb      	ldrh	r3, [r7, #6]
 800b912:	429a      	cmp	r2, r3
 800b914:	d201      	bcs.n	800b91a <mem_malloc+0x3e>
    return NULL;
 800b916:	2300      	movs	r3, #0
 800b918:	e0c4      	b.n	800baa4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b91a:	4b64      	ldr	r3, [pc, #400]	@ (800baac <mem_malloc+0x1d0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff fd4e 	bl	800b3c0 <mem_to_ptr>
 800b924:	4603      	mov	r3, r0
 800b926:	83fb      	strh	r3, [r7, #30]
 800b928:	e0b4      	b.n	800ba94 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b92a:	8bfb      	ldrh	r3, [r7, #30]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff fd35 	bl	800b39c <ptr_to_mem>
 800b932:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	791b      	ldrb	r3, [r3, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f040 80a4 	bne.w	800ba86 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	8bfb      	ldrh	r3, [r7, #30]
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	f1a3 0208 	sub.w	r2, r3, #8
 800b94c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b94e:	429a      	cmp	r2, r3
 800b950:	f0c0 8099 	bcc.w	800ba86 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	461a      	mov	r2, r3
 800b95a:	8bfb      	ldrh	r3, [r7, #30]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	f1a3 0208 	sub.w	r2, r3, #8
 800b962:	8bbb      	ldrh	r3, [r7, #28]
 800b964:	3314      	adds	r3, #20
 800b966:	429a      	cmp	r2, r3
 800b968:	d333      	bcc.n	800b9d2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b96a:	8bfa      	ldrh	r2, [r7, #30]
 800b96c:	8bbb      	ldrh	r3, [r7, #28]
 800b96e:	4413      	add	r3, r2
 800b970:	b29b      	uxth	r3, r3
 800b972:	3308      	adds	r3, #8
 800b974:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b976:	8a7b      	ldrh	r3, [r7, #18]
 800b978:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b97c:	d106      	bne.n	800b98c <mem_malloc+0xb0>
 800b97e:	4b4c      	ldr	r3, [pc, #304]	@ (800bab0 <mem_malloc+0x1d4>)
 800b980:	f240 3287 	movw	r2, #903	@ 0x387
 800b984:	494b      	ldr	r1, [pc, #300]	@ (800bab4 <mem_malloc+0x1d8>)
 800b986:	484c      	ldr	r0, [pc, #304]	@ (800bab8 <mem_malloc+0x1dc>)
 800b988:	f00a fae4 	bl	8015f54 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b98c:	8a7b      	ldrh	r3, [r7, #18]
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff fd04 	bl	800b39c <ptr_to_mem>
 800b994:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	881a      	ldrh	r2, [r3, #0]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	8bfa      	ldrh	r2, [r7, #30]
 800b9a8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	8a7a      	ldrh	r2, [r7, #18]
 800b9ae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b9be:	d00b      	beq.n	800b9d8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	881b      	ldrh	r3, [r3, #0]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff fce9 	bl	800b39c <ptr_to_mem>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	8a7b      	ldrh	r3, [r7, #18]
 800b9ce:	8053      	strh	r3, [r2, #2]
 800b9d0:	e002      	b.n	800b9d8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b9d8:	4b34      	ldr	r3, [pc, #208]	@ (800baac <mem_malloc+0x1d0>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d127      	bne.n	800ba32 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b9e2:	4b32      	ldr	r3, [pc, #200]	@ (800baac <mem_malloc+0x1d0>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b9e8:	e005      	b.n	800b9f6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff fcd4 	bl	800b39c <ptr_to_mem>
 800b9f4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	791b      	ldrb	r3, [r3, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d004      	beq.n	800ba08 <mem_malloc+0x12c>
 800b9fe:	4b2f      	ldr	r3, [pc, #188]	@ (800babc <mem_malloc+0x1e0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d1f0      	bne.n	800b9ea <mem_malloc+0x10e>
          }
          lfree = cur;
 800ba08:	4a28      	ldr	r2, [pc, #160]	@ (800baac <mem_malloc+0x1d0>)
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ba0e:	4b27      	ldr	r3, [pc, #156]	@ (800baac <mem_malloc+0x1d0>)
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	4b2a      	ldr	r3, [pc, #168]	@ (800babc <mem_malloc+0x1e0>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d00b      	beq.n	800ba32 <mem_malloc+0x156>
 800ba1a:	4b24      	ldr	r3, [pc, #144]	@ (800baac <mem_malloc+0x1d0>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	791b      	ldrb	r3, [r3, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d006      	beq.n	800ba32 <mem_malloc+0x156>
 800ba24:	4b22      	ldr	r3, [pc, #136]	@ (800bab0 <mem_malloc+0x1d4>)
 800ba26:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800ba2a:	4925      	ldr	r1, [pc, #148]	@ (800bac0 <mem_malloc+0x1e4>)
 800ba2c:	4822      	ldr	r0, [pc, #136]	@ (800bab8 <mem_malloc+0x1dc>)
 800ba2e:	f00a fa91 	bl	8015f54 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ba32:	8bba      	ldrh	r2, [r7, #28]
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	4413      	add	r3, r2
 800ba38:	3308      	adds	r3, #8
 800ba3a:	4a20      	ldr	r2, [pc, #128]	@ (800babc <mem_malloc+0x1e0>)
 800ba3c:	6812      	ldr	r2, [r2, #0]
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d906      	bls.n	800ba50 <mem_malloc+0x174>
 800ba42:	4b1b      	ldr	r3, [pc, #108]	@ (800bab0 <mem_malloc+0x1d4>)
 800ba44:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800ba48:	491e      	ldr	r1, [pc, #120]	@ (800bac4 <mem_malloc+0x1e8>)
 800ba4a:	481b      	ldr	r0, [pc, #108]	@ (800bab8 <mem_malloc+0x1dc>)
 800ba4c:	f00a fa82 	bl	8015f54 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d006      	beq.n	800ba68 <mem_malloc+0x18c>
 800ba5a:	4b15      	ldr	r3, [pc, #84]	@ (800bab0 <mem_malloc+0x1d4>)
 800ba5c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800ba60:	4919      	ldr	r1, [pc, #100]	@ (800bac8 <mem_malloc+0x1ec>)
 800ba62:	4815      	ldr	r0, [pc, #84]	@ (800bab8 <mem_malloc+0x1dc>)
 800ba64:	f00a fa76 	bl	8015f54 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	f003 0303 	and.w	r3, r3, #3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d006      	beq.n	800ba80 <mem_malloc+0x1a4>
 800ba72:	4b0f      	ldr	r3, [pc, #60]	@ (800bab0 <mem_malloc+0x1d4>)
 800ba74:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800ba78:	4914      	ldr	r1, [pc, #80]	@ (800bacc <mem_malloc+0x1f0>)
 800ba7a:	480f      	ldr	r0, [pc, #60]	@ (800bab8 <mem_malloc+0x1dc>)
 800ba7c:	f00a fa6a 	bl	8015f54 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	3308      	adds	r3, #8
 800ba84:	e00e      	b.n	800baa4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800ba86:	8bfb      	ldrh	r3, [r7, #30]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7ff fc87 	bl	800b39c <ptr_to_mem>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	881b      	ldrh	r3, [r3, #0]
 800ba92:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ba94:	8bfa      	ldrh	r2, [r7, #30]
 800ba96:	8bbb      	ldrh	r3, [r7, #28]
 800ba98:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	f4ff af44 	bcc.w	800b92a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3720      	adds	r7, #32
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	24005490 	.word	0x24005490
 800bab0:	080197c8 	.word	0x080197c8
 800bab4:	08019970 	.word	0x08019970
 800bab8:	08019810 	.word	0x08019810
 800babc:	2400548c 	.word	0x2400548c
 800bac0:	08019984 	.word	0x08019984
 800bac4:	080199a0 	.word	0x080199a0
 800bac8:	080199d0 	.word	0x080199d0
 800bacc:	08019a00 	.word	0x08019a00

0800bad0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	2200      	movs	r2, #0
 800bade:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	3303      	adds	r3, #3
 800bae6:	f023 0303 	bic.w	r3, r3, #3
 800baea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800baec:	2300      	movs	r3, #0
 800baee:	60fb      	str	r3, [r7, #12]
 800baf0:	e011      	b.n	800bb16 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	461a      	mov	r2, r3
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	3301      	adds	r3, #1
 800bb14:	60fb      	str	r3, [r7, #12]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	885b      	ldrh	r3, [r3, #2]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	dbe7      	blt.n	800baf2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bb22:	bf00      	nop
 800bb24:	bf00      	nop
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bb36:	2300      	movs	r3, #0
 800bb38:	80fb      	strh	r3, [r7, #6]
 800bb3a:	e009      	b.n	800bb50 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bb3c:	88fb      	ldrh	r3, [r7, #6]
 800bb3e:	4a08      	ldr	r2, [pc, #32]	@ (800bb60 <memp_init+0x30>)
 800bb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7ff ffc3 	bl	800bad0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bb4a:	88fb      	ldrh	r3, [r7, #6]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	80fb      	strh	r3, [r7, #6]
 800bb50:	88fb      	ldrh	r3, [r7, #6]
 800bb52:	2b08      	cmp	r3, #8
 800bb54:	d9f2      	bls.n	800bb3c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bb56:	bf00      	nop
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	0801c2c4 	.word	0x0801c2c4

0800bb64 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d012      	beq.n	800bba0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	6812      	ldr	r2, [r2, #0]
 800bb82:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f003 0303 	and.w	r3, r3, #3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d006      	beq.n	800bb9c <do_memp_malloc_pool+0x38>
 800bb8e:	4b07      	ldr	r3, [pc, #28]	@ (800bbac <do_memp_malloc_pool+0x48>)
 800bb90:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800bb94:	4906      	ldr	r1, [pc, #24]	@ (800bbb0 <do_memp_malloc_pool+0x4c>)
 800bb96:	4807      	ldr	r0, [pc, #28]	@ (800bbb4 <do_memp_malloc_pool+0x50>)
 800bb98:	f00a f9dc 	bl	8015f54 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	e000      	b.n	800bba2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	08019a24 	.word	0x08019a24
 800bbb0:	08019a54 	.word	0x08019a54
 800bbb4:	08019a78 	.word	0x08019a78

0800bbb8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d106      	bne.n	800bbd4 <memp_malloc_pool+0x1c>
 800bbc6:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf0 <memp_malloc_pool+0x38>)
 800bbc8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800bbcc:	4909      	ldr	r1, [pc, #36]	@ (800bbf4 <memp_malloc_pool+0x3c>)
 800bbce:	480a      	ldr	r0, [pc, #40]	@ (800bbf8 <memp_malloc_pool+0x40>)
 800bbd0:	f00a f9c0 	bl	8015f54 <iprintf>
  if (desc == NULL) {
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <memp_malloc_pool+0x26>
    return NULL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e003      	b.n	800bbe6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7ff ffc0 	bl	800bb64 <do_memp_malloc_pool>
 800bbe4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	08019a24 	.word	0x08019a24
 800bbf4:	08019aa0 	.word	0x08019aa0
 800bbf8:	08019a78 	.word	0x08019a78

0800bbfc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	4603      	mov	r3, r0
 800bc04:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bc06:	79fb      	ldrb	r3, [r7, #7]
 800bc08:	2b08      	cmp	r3, #8
 800bc0a:	d908      	bls.n	800bc1e <memp_malloc+0x22>
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc38 <memp_malloc+0x3c>)
 800bc0e:	f240 1257 	movw	r2, #343	@ 0x157
 800bc12:	490a      	ldr	r1, [pc, #40]	@ (800bc3c <memp_malloc+0x40>)
 800bc14:	480a      	ldr	r0, [pc, #40]	@ (800bc40 <memp_malloc+0x44>)
 800bc16:	f00a f99d 	bl	8015f54 <iprintf>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e008      	b.n	800bc30 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bc1e:	79fb      	ldrb	r3, [r7, #7]
 800bc20:	4a08      	ldr	r2, [pc, #32]	@ (800bc44 <memp_malloc+0x48>)
 800bc22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff ff9c 	bl	800bb64 <do_memp_malloc_pool>
 800bc2c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	08019a24 	.word	0x08019a24
 800bc3c:	08019ab4 	.word	0x08019ab4
 800bc40:	08019a78 	.word	0x08019a78
 800bc44:	0801c2c4 	.word	0x0801c2c4

0800bc48 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	f003 0303 	and.w	r3, r3, #3
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d006      	beq.n	800bc6a <do_memp_free_pool+0x22>
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc88 <do_memp_free_pool+0x40>)
 800bc5e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800bc62:	490a      	ldr	r1, [pc, #40]	@ (800bc8c <do_memp_free_pool+0x44>)
 800bc64:	480a      	ldr	r0, [pc, #40]	@ (800bc90 <do_memp_free_pool+0x48>)
 800bc66:	f00a f975 	bl	8015f54 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800bc80:	bf00      	nop
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	08019a24 	.word	0x08019a24
 800bc8c:	08019ad4 	.word	0x08019ad4
 800bc90:	08019a78 	.word	0x08019a78

0800bc94 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d106      	bne.n	800bcb2 <memp_free_pool+0x1e>
 800bca4:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd0 <memp_free_pool+0x3c>)
 800bca6:	f240 1295 	movw	r2, #405	@ 0x195
 800bcaa:	490a      	ldr	r1, [pc, #40]	@ (800bcd4 <memp_free_pool+0x40>)
 800bcac:	480a      	ldr	r0, [pc, #40]	@ (800bcd8 <memp_free_pool+0x44>)
 800bcae:	f00a f951 	bl	8015f54 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d007      	beq.n	800bcc8 <memp_free_pool+0x34>
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d004      	beq.n	800bcc8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800bcbe:	6839      	ldr	r1, [r7, #0]
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7ff ffc1 	bl	800bc48 <do_memp_free_pool>
 800bcc6:	e000      	b.n	800bcca <memp_free_pool+0x36>
    return;
 800bcc8:	bf00      	nop
}
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	08019a24 	.word	0x08019a24
 800bcd4:	08019aa0 	.word	0x08019aa0
 800bcd8:	08019a78 	.word	0x08019a78

0800bcdc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	6039      	str	r1, [r7, #0]
 800bce6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bce8:	79fb      	ldrb	r3, [r7, #7]
 800bcea:	2b08      	cmp	r3, #8
 800bcec:	d907      	bls.n	800bcfe <memp_free+0x22>
 800bcee:	4b0c      	ldr	r3, [pc, #48]	@ (800bd20 <memp_free+0x44>)
 800bcf0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800bcf4:	490b      	ldr	r1, [pc, #44]	@ (800bd24 <memp_free+0x48>)
 800bcf6:	480c      	ldr	r0, [pc, #48]	@ (800bd28 <memp_free+0x4c>)
 800bcf8:	f00a f92c 	bl	8015f54 <iprintf>
 800bcfc:	e00c      	b.n	800bd18 <memp_free+0x3c>

  if (mem == NULL) {
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d008      	beq.n	800bd16 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bd04:	79fb      	ldrb	r3, [r7, #7]
 800bd06:	4a09      	ldr	r2, [pc, #36]	@ (800bd2c <memp_free+0x50>)
 800bd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff ff9a 	bl	800bc48 <do_memp_free_pool>
 800bd14:	e000      	b.n	800bd18 <memp_free+0x3c>
    return;
 800bd16:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	08019a24 	.word	0x08019a24
 800bd24:	08019af4 	.word	0x08019af4
 800bd28:	08019a78 	.word	0x08019a78
 800bd2c:	0801c2c4 	.word	0x0801c2c4

0800bd30 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bd30:	b480      	push	{r7}
 800bd32:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bd34:	bf00      	nop
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
	...

0800bd40 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d108      	bne.n	800bd66 <netif_add+0x26>
 800bd54:	4b57      	ldr	r3, [pc, #348]	@ (800beb4 <netif_add+0x174>)
 800bd56:	f240 1227 	movw	r2, #295	@ 0x127
 800bd5a:	4957      	ldr	r1, [pc, #348]	@ (800beb8 <netif_add+0x178>)
 800bd5c:	4857      	ldr	r0, [pc, #348]	@ (800bebc <netif_add+0x17c>)
 800bd5e:	f00a f8f9 	bl	8015f54 <iprintf>
 800bd62:	2300      	movs	r3, #0
 800bd64:	e0a2      	b.n	800beac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d108      	bne.n	800bd7e <netif_add+0x3e>
 800bd6c:	4b51      	ldr	r3, [pc, #324]	@ (800beb4 <netif_add+0x174>)
 800bd6e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800bd72:	4953      	ldr	r1, [pc, #332]	@ (800bec0 <netif_add+0x180>)
 800bd74:	4851      	ldr	r0, [pc, #324]	@ (800bebc <netif_add+0x17c>)
 800bd76:	f00a f8ed 	bl	8015f54 <iprintf>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e096      	b.n	800beac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d101      	bne.n	800bd88 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bd84:	4b4f      	ldr	r3, [pc, #316]	@ (800bec4 <netif_add+0x184>)
 800bd86:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d101      	bne.n	800bd92 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bd8e:	4b4d      	ldr	r3, [pc, #308]	@ (800bec4 <netif_add+0x184>)
 800bd90:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d101      	bne.n	800bd9c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bd98:	4b4a      	ldr	r3, [pc, #296]	@ (800bec4 <netif_add+0x184>)
 800bd9a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4a45      	ldr	r2, [pc, #276]	@ (800bec8 <netif_add+0x188>)
 800bdb2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	6a3a      	ldr	r2, [r7, #32]
 800bdcc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bdce:	4b3f      	ldr	r3, [pc, #252]	@ (800becc <netif_add+0x18c>)
 800bdd0:	781a      	ldrb	r2, [r3, #0]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bddc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	68b9      	ldr	r1, [r7, #8]
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f000 f913 	bl	800c010 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	4798      	blx	r3
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d001      	beq.n	800bdfa <netif_add+0xba>
    return NULL;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	e058      	b.n	800beac <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be00:	2bff      	cmp	r3, #255	@ 0xff
 800be02:	d103      	bne.n	800be0c <netif_add+0xcc>
        netif->num = 0;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800be0c:	2300      	movs	r3, #0
 800be0e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800be10:	4b2f      	ldr	r3, [pc, #188]	@ (800bed0 <netif_add+0x190>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	617b      	str	r3, [r7, #20]
 800be16:	e02b      	b.n	800be70 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d106      	bne.n	800be2e <netif_add+0xee>
 800be20:	4b24      	ldr	r3, [pc, #144]	@ (800beb4 <netif_add+0x174>)
 800be22:	f240 128b 	movw	r2, #395	@ 0x18b
 800be26:	492b      	ldr	r1, [pc, #172]	@ (800bed4 <netif_add+0x194>)
 800be28:	4824      	ldr	r0, [pc, #144]	@ (800bebc <netif_add+0x17c>)
 800be2a:	f00a f893 	bl	8015f54 <iprintf>
        num_netifs++;
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	3301      	adds	r3, #1
 800be32:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	2bff      	cmp	r3, #255	@ 0xff
 800be38:	dd06      	ble.n	800be48 <netif_add+0x108>
 800be3a:	4b1e      	ldr	r3, [pc, #120]	@ (800beb4 <netif_add+0x174>)
 800be3c:	f240 128d 	movw	r2, #397	@ 0x18d
 800be40:	4925      	ldr	r1, [pc, #148]	@ (800bed8 <netif_add+0x198>)
 800be42:	481e      	ldr	r0, [pc, #120]	@ (800bebc <netif_add+0x17c>)
 800be44:	f00a f886 	bl	8015f54 <iprintf>
        if (netif2->num == netif->num) {
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be54:	429a      	cmp	r2, r3
 800be56:	d108      	bne.n	800be6a <netif_add+0x12a>
          netif->num++;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be5e:	3301      	adds	r3, #1
 800be60:	b2da      	uxtb	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800be68:	e005      	b.n	800be76 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d1d0      	bne.n	800be18 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1be      	bne.n	800bdfa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be82:	2bfe      	cmp	r3, #254	@ 0xfe
 800be84:	d103      	bne.n	800be8e <netif_add+0x14e>
    netif_num = 0;
 800be86:	4b11      	ldr	r3, [pc, #68]	@ (800becc <netif_add+0x18c>)
 800be88:	2200      	movs	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
 800be8c:	e006      	b.n	800be9c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be94:	3301      	adds	r3, #1
 800be96:	b2da      	uxtb	r2, r3
 800be98:	4b0c      	ldr	r3, [pc, #48]	@ (800becc <netif_add+0x18c>)
 800be9a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800be9c:	4b0c      	ldr	r3, [pc, #48]	@ (800bed0 <netif_add+0x190>)
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bea4:	4a0a      	ldr	r2, [pc, #40]	@ (800bed0 <netif_add+0x190>)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800beaa:	68fb      	ldr	r3, [r7, #12]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	08019b10 	.word	0x08019b10
 800beb8:	08019ba4 	.word	0x08019ba4
 800bebc:	08019b60 	.word	0x08019b60
 800bec0:	08019bc0 	.word	0x08019bc0
 800bec4:	0801c328 	.word	0x0801c328
 800bec8:	0800c2eb 	.word	0x0800c2eb
 800becc:	24008388 	.word	0x24008388
 800bed0:	24008380 	.word	0x24008380
 800bed4:	08019be4 	.word	0x08019be4
 800bed8:	08019bf8 	.word	0x08019bf8

0800bedc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f002 fb45 	bl	800e578 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f006 fd5d 	bl	80129b0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bef6:	bf00      	nop
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
	...

0800bf00 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <netif_do_set_ipaddr+0x20>
 800bf12:	4b1d      	ldr	r3, [pc, #116]	@ (800bf88 <netif_do_set_ipaddr+0x88>)
 800bf14:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800bf18:	491c      	ldr	r1, [pc, #112]	@ (800bf8c <netif_do_set_ipaddr+0x8c>)
 800bf1a:	481d      	ldr	r0, [pc, #116]	@ (800bf90 <netif_do_set_ipaddr+0x90>)
 800bf1c:	f00a f81a 	bl	8015f54 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d106      	bne.n	800bf34 <netif_do_set_ipaddr+0x34>
 800bf26:	4b18      	ldr	r3, [pc, #96]	@ (800bf88 <netif_do_set_ipaddr+0x88>)
 800bf28:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800bf2c:	4917      	ldr	r1, [pc, #92]	@ (800bf8c <netif_do_set_ipaddr+0x8c>)
 800bf2e:	4818      	ldr	r0, [pc, #96]	@ (800bf90 <netif_do_set_ipaddr+0x90>)
 800bf30:	f00a f810 	bl	8015f54 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d01c      	beq.n	800bf7c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bf52:	f107 0314 	add.w	r3, r7, #20
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7ff ffbf 	bl	800bedc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <netif_do_set_ipaddr+0x6a>
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	e000      	b.n	800bf6c <netif_do_set_ipaddr+0x6c>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bf70:	2101      	movs	r1, #1
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 f8d2 	bl	800c11c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e000      	b.n	800bf7e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3718      	adds	r7, #24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	08019b10 	.word	0x08019b10
 800bf8c:	08019c28 	.word	0x08019c28
 800bf90:	08019b60 	.word	0x08019b60

0800bf94 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	3308      	adds	r3, #8
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d00a      	beq.n	800bfc4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <netif_do_set_netmask+0x26>
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	e000      	b.n	800bfbc <netif_do_set_netmask+0x28>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e000      	b.n	800bfc6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3714      	adds	r7, #20
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b085      	sub	sp, #20
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	60f8      	str	r0, [r7, #12]
 800bfda:	60b9      	str	r1, [r7, #8]
 800bfdc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	330c      	adds	r3, #12
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d00a      	beq.n	800c002 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <netif_do_set_gw+0x26>
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	e000      	b.n	800bffa <netif_do_set_gw+0x28>
 800bff8:	2300      	movs	r3, #0
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bffe:	2301      	movs	r3, #1
 800c000:	e000      	b.n	800c004 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b088      	sub	sp, #32
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
 800c01c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c01e:	2300      	movs	r3, #0
 800c020:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c022:	2300      	movs	r3, #0
 800c024:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d101      	bne.n	800c030 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c02c:	4b1c      	ldr	r3, [pc, #112]	@ (800c0a0 <netif_set_addr+0x90>)
 800c02e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d101      	bne.n	800c03a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c036:	4b1a      	ldr	r3, [pc, #104]	@ (800c0a0 <netif_set_addr+0x90>)
 800c038:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d101      	bne.n	800c044 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c040:	4b17      	ldr	r3, [pc, #92]	@ (800c0a0 <netif_set_addr+0x90>)
 800c042:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <netif_set_addr+0x42>
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <netif_set_addr+0x46>
 800c052:	2301      	movs	r3, #1
 800c054:	e000      	b.n	800c058 <netif_set_addr+0x48>
 800c056:	2300      	movs	r3, #0
 800c058:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d006      	beq.n	800c06e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c060:	f107 0310 	add.w	r3, r7, #16
 800c064:	461a      	mov	r2, r3
 800c066:	68b9      	ldr	r1, [r7, #8]
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f7ff ff49 	bl	800bf00 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c06e:	69fa      	ldr	r2, [r7, #28]
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f7ff ff8e 	bl	800bf94 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f7ff ffa8 	bl	800bfd2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d106      	bne.n	800c096 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c088:	f107 0310 	add.w	r3, r7, #16
 800c08c:	461a      	mov	r2, r3
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f7ff ff35 	bl	800bf00 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c096:	bf00      	nop
 800c098:	3720      	adds	r7, #32
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	0801c328 	.word	0x0801c328

0800c0a4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c0ac:	4a04      	ldr	r2, [pc, #16]	@ (800c0c0 <netif_set_default+0x1c>)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c0b2:	bf00      	nop
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	24008384 	.word	0x24008384

0800c0c4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d107      	bne.n	800c0e2 <netif_set_up+0x1e>
 800c0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800c110 <netif_set_up+0x4c>)
 800c0d4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c0d8:	490e      	ldr	r1, [pc, #56]	@ (800c114 <netif_set_up+0x50>)
 800c0da:	480f      	ldr	r0, [pc, #60]	@ (800c118 <netif_set_up+0x54>)
 800c0dc:	f009 ff3a 	bl	8015f54 <iprintf>
 800c0e0:	e013      	b.n	800c10a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10c      	bne.n	800c10a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c0f6:	f043 0301 	orr.w	r3, r3, #1
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c102:	2103      	movs	r1, #3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f809 	bl	800c11c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	08019b10 	.word	0x08019b10
 800c114:	08019c98 	.word	0x08019c98
 800c118:	08019b60 	.word	0x08019b60

0800c11c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <netif_issue_reports+0x20>
 800c12e:	4b18      	ldr	r3, [pc, #96]	@ (800c190 <netif_issue_reports+0x74>)
 800c130:	f240 326d 	movw	r2, #877	@ 0x36d
 800c134:	4917      	ldr	r1, [pc, #92]	@ (800c194 <netif_issue_reports+0x78>)
 800c136:	4818      	ldr	r0, [pc, #96]	@ (800c198 <netif_issue_reports+0x7c>)
 800c138:	f009 ff0c 	bl	8015f54 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c142:	f003 0304 	and.w	r3, r3, #4
 800c146:	2b00      	cmp	r3, #0
 800c148:	d01e      	beq.n	800c188 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c150:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c154:	2b00      	cmp	r3, #0
 800c156:	d017      	beq.n	800c188 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c158:	78fb      	ldrb	r3, [r7, #3]
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d013      	beq.n	800c18a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	3304      	adds	r3, #4
 800c166:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00e      	beq.n	800c18a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c172:	f003 0308 	and.w	r3, r3, #8
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3304      	adds	r3, #4
 800c17e:	4619      	mov	r1, r3
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f007 fb7f 	bl	8013884 <etharp_request>
 800c186:	e000      	b.n	800c18a <netif_issue_reports+0x6e>
    return;
 800c188:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	08019b10 	.word	0x08019b10
 800c194:	08019cb4 	.word	0x08019cb4
 800c198:	08019b60 	.word	0x08019b60

0800c19c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d107      	bne.n	800c1ba <netif_set_down+0x1e>
 800c1aa:	4b12      	ldr	r3, [pc, #72]	@ (800c1f4 <netif_set_down+0x58>)
 800c1ac:	f240 329b 	movw	r2, #923	@ 0x39b
 800c1b0:	4911      	ldr	r1, [pc, #68]	@ (800c1f8 <netif_set_down+0x5c>)
 800c1b2:	4812      	ldr	r0, [pc, #72]	@ (800c1fc <netif_set_down+0x60>)
 800c1b4:	f009 fece 	bl	8015f54 <iprintf>
 800c1b8:	e019      	b.n	800c1ee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d012      	beq.n	800c1ee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c1ce:	f023 0301 	bic.w	r3, r3, #1
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c1e0:	f003 0308 	and.w	r3, r3, #8
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f006 ff09 	bl	8013000 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	08019b10 	.word	0x08019b10
 800c1f8:	08019cd8 	.word	0x08019cd8
 800c1fc:	08019b60 	.word	0x08019b60

0800c200 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d107      	bne.n	800c21e <netif_set_link_up+0x1e>
 800c20e:	4b13      	ldr	r3, [pc, #76]	@ (800c25c <netif_set_link_up+0x5c>)
 800c210:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c214:	4912      	ldr	r1, [pc, #72]	@ (800c260 <netif_set_link_up+0x60>)
 800c216:	4813      	ldr	r0, [pc, #76]	@ (800c264 <netif_set_link_up+0x64>)
 800c218:	f009 fe9c 	bl	8015f54 <iprintf>
 800c21c:	e01b      	b.n	800c256 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c224:	f003 0304 	and.w	r3, r3, #4
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d114      	bne.n	800c256 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c232:	f043 0304 	orr.w	r3, r3, #4
 800c236:	b2da      	uxtb	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c23e:	2103      	movs	r1, #3
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7ff ff6b 	bl	800c11c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	69db      	ldr	r3, [r3, #28]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <netif_set_link_up+0x56>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	69db      	ldr	r3, [r3, #28]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	08019b10 	.word	0x08019b10
 800c260:	08019cf8 	.word	0x08019cf8
 800c264:	08019b60 	.word	0x08019b60

0800c268 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d107      	bne.n	800c286 <netif_set_link_down+0x1e>
 800c276:	4b11      	ldr	r3, [pc, #68]	@ (800c2bc <netif_set_link_down+0x54>)
 800c278:	f240 4206 	movw	r2, #1030	@ 0x406
 800c27c:	4910      	ldr	r1, [pc, #64]	@ (800c2c0 <netif_set_link_down+0x58>)
 800c27e:	4811      	ldr	r0, [pc, #68]	@ (800c2c4 <netif_set_link_down+0x5c>)
 800c280:	f009 fe68 	bl	8015f54 <iprintf>
 800c284:	e017      	b.n	800c2b6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c28c:	f003 0304 	and.w	r3, r3, #4
 800c290:	2b00      	cmp	r3, #0
 800c292:	d010      	beq.n	800c2b6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c29a:	f023 0304 	bic.w	r3, r3, #4
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	69db      	ldr	r3, [r3, #28]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <netif_set_link_down+0x4e>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	08019b10 	.word	0x08019b10
 800c2c0:	08019d1c 	.word	0x08019d1c
 800c2c4:	08019b60 	.word	0x08019b60

0800c2c8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d002      	beq.n	800c2de <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	683a      	ldr	r2, [r7, #0]
 800c2dc:	61da      	str	r2, [r3, #28]
  }
}
 800c2de:	bf00      	nop
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b085      	sub	sp, #20
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c2f6:	f06f 030b 	mvn.w	r3, #11
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
	...

0800c308 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	4603      	mov	r3, r0
 800c310:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c312:	79fb      	ldrb	r3, [r7, #7]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d013      	beq.n	800c340 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c318:	4b0d      	ldr	r3, [pc, #52]	@ (800c350 <netif_get_by_index+0x48>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	e00c      	b.n	800c33a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c326:	3301      	adds	r3, #1
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	79fa      	ldrb	r2, [r7, #7]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d101      	bne.n	800c334 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	e006      	b.n	800c342 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	60fb      	str	r3, [r7, #12]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1ef      	bne.n	800c320 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	24008380 	.word	0x24008380

0800c354 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c35a:	4b0c      	ldr	r3, [pc, #48]	@ (800c38c <pbuf_free_ooseq+0x38>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c360:	4b0b      	ldr	r3, [pc, #44]	@ (800c390 <pbuf_free_ooseq+0x3c>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	607b      	str	r3, [r7, #4]
 800c366:	e00a      	b.n	800c37e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d003      	beq.n	800c378 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f002 f93f 	bl	800e5f4 <tcp_free_ooseq>
      return;
 800c376:	e005      	b.n	800c384 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	607b      	str	r3, [r7, #4]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1f1      	bne.n	800c368 <pbuf_free_ooseq+0x14>
    }
  }
}
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	24008389 	.word	0x24008389
 800c390:	24008398 	.word	0x24008398

0800c394 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c394:	b480      	push	{r7}
 800c396:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800c398:	4b03      	ldr	r3, [pc, #12]	@ (800c3a8 <pbuf_pool_is_empty+0x14>)
 800c39a:	2201      	movs	r2, #1
 800c39c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c39e:	bf00      	nop
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr
 800c3a8:	24008389 	.word	0x24008389

0800c3ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	4611      	mov	r1, r2
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	80fb      	strh	r3, [r7, #6]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	88fa      	ldrh	r2, [r7, #6]
 800c3d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	88ba      	ldrh	r2, [r7, #4]
 800c3d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c3da:	8b3b      	ldrh	r3, [r7, #24]
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	7f3a      	ldrb	r2, [r7, #28]
 800c3e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	73da      	strb	r2, [r3, #15]
}
 800c3f4:	bf00      	nop
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b08c      	sub	sp, #48	@ 0x30
 800c404:	af02      	add	r7, sp, #8
 800c406:	4603      	mov	r3, r0
 800c408:	71fb      	strb	r3, [r7, #7]
 800c40a:	460b      	mov	r3, r1
 800c40c:	80bb      	strh	r3, [r7, #4]
 800c40e:	4613      	mov	r3, r2
 800c410:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c412:	79fb      	ldrb	r3, [r7, #7]
 800c414:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c416:	887b      	ldrh	r3, [r7, #2]
 800c418:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c41c:	d07f      	beq.n	800c51e <pbuf_alloc+0x11e>
 800c41e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c422:	f300 80c8 	bgt.w	800c5b6 <pbuf_alloc+0x1b6>
 800c426:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c42a:	d010      	beq.n	800c44e <pbuf_alloc+0x4e>
 800c42c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c430:	f300 80c1 	bgt.w	800c5b6 <pbuf_alloc+0x1b6>
 800c434:	2b01      	cmp	r3, #1
 800c436:	d002      	beq.n	800c43e <pbuf_alloc+0x3e>
 800c438:	2b41      	cmp	r3, #65	@ 0x41
 800c43a:	f040 80bc 	bne.w	800c5b6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c43e:	887a      	ldrh	r2, [r7, #2]
 800c440:	88bb      	ldrh	r3, [r7, #4]
 800c442:	4619      	mov	r1, r3
 800c444:	2000      	movs	r0, #0
 800c446:	f000 f8d1 	bl	800c5ec <pbuf_alloc_reference>
 800c44a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c44c:	e0bd      	b.n	800c5ca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c44e:	2300      	movs	r3, #0
 800c450:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c452:	2300      	movs	r3, #0
 800c454:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c456:	88bb      	ldrh	r3, [r7, #4]
 800c458:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c45a:	2008      	movs	r0, #8
 800c45c:	f7ff fbce 	bl	800bbfc <memp_malloc>
 800c460:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d109      	bne.n	800c47c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c468:	f7ff ff94 	bl	800c394 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d002      	beq.n	800c478 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c472:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c474:	f000 faa8 	bl	800c9c8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c478:	2300      	movs	r3, #0
 800c47a:	e0a7      	b.n	800c5cc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c47c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c47e:	3303      	adds	r3, #3
 800c480:	b29b      	uxth	r3, r3
 800c482:	f023 0303 	bic.w	r3, r3, #3
 800c486:	b29b      	uxth	r3, r3
 800c488:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	8b7a      	ldrh	r2, [r7, #26]
 800c490:	4293      	cmp	r3, r2
 800c492:	bf28      	it	cs
 800c494:	4613      	movcs	r3, r2
 800c496:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c498:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c49a:	3310      	adds	r3, #16
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	4413      	add	r3, r2
 800c4a0:	3303      	adds	r3, #3
 800c4a2:	f023 0303 	bic.w	r3, r3, #3
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	89f9      	ldrh	r1, [r7, #14]
 800c4aa:	8b7a      	ldrh	r2, [r7, #26]
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	887b      	ldrh	r3, [r7, #2]
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4601      	mov	r1, r0
 800c4b8:	6938      	ldr	r0, [r7, #16]
 800c4ba:	f7ff ff77 	bl	800c3ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	f003 0303 	and.w	r3, r3, #3
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d006      	beq.n	800c4d8 <pbuf_alloc+0xd8>
 800c4ca:	4b42      	ldr	r3, [pc, #264]	@ (800c5d4 <pbuf_alloc+0x1d4>)
 800c4cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c4d0:	4941      	ldr	r1, [pc, #260]	@ (800c5d8 <pbuf_alloc+0x1d8>)
 800c4d2:	4842      	ldr	r0, [pc, #264]	@ (800c5dc <pbuf_alloc+0x1dc>)
 800c4d4:	f009 fd3e 	bl	8015f54 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c4d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4da:	3303      	adds	r3, #3
 800c4dc:	f023 0303 	bic.w	r3, r3, #3
 800c4e0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c4e4:	d106      	bne.n	800c4f4 <pbuf_alloc+0xf4>
 800c4e6:	4b3b      	ldr	r3, [pc, #236]	@ (800c5d4 <pbuf_alloc+0x1d4>)
 800c4e8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c4ec:	493c      	ldr	r1, [pc, #240]	@ (800c5e0 <pbuf_alloc+0x1e0>)
 800c4ee:	483b      	ldr	r0, [pc, #236]	@ (800c5dc <pbuf_alloc+0x1dc>)
 800c4f0:	f009 fd30 	bl	8015f54 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d102      	bne.n	800c500 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4fe:	e002      	b.n	800c506 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	693a      	ldr	r2, [r7, #16]
 800c504:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c50a:	8b7a      	ldrh	r2, [r7, #26]
 800c50c:	89fb      	ldrh	r3, [r7, #14]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c512:	2300      	movs	r3, #0
 800c514:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c516:	8b7b      	ldrh	r3, [r7, #26]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d19e      	bne.n	800c45a <pbuf_alloc+0x5a>
      break;
 800c51c:	e055      	b.n	800c5ca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c51e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c520:	3303      	adds	r3, #3
 800c522:	b29b      	uxth	r3, r3
 800c524:	f023 0303 	bic.w	r3, r3, #3
 800c528:	b29a      	uxth	r2, r3
 800c52a:	88bb      	ldrh	r3, [r7, #4]
 800c52c:	3303      	adds	r3, #3
 800c52e:	b29b      	uxth	r3, r3
 800c530:	f023 0303 	bic.w	r3, r3, #3
 800c534:	b29b      	uxth	r3, r3
 800c536:	4413      	add	r3, r2
 800c538:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c53a:	8b3b      	ldrh	r3, [r7, #24]
 800c53c:	3310      	adds	r3, #16
 800c53e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c540:	8b3a      	ldrh	r2, [r7, #24]
 800c542:	88bb      	ldrh	r3, [r7, #4]
 800c544:	3303      	adds	r3, #3
 800c546:	f023 0303 	bic.w	r3, r3, #3
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d306      	bcc.n	800c55c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c54e:	8afa      	ldrh	r2, [r7, #22]
 800c550:	88bb      	ldrh	r3, [r7, #4]
 800c552:	3303      	adds	r3, #3
 800c554:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c558:	429a      	cmp	r2, r3
 800c55a:	d201      	bcs.n	800c560 <pbuf_alloc+0x160>
        return NULL;
 800c55c:	2300      	movs	r3, #0
 800c55e:	e035      	b.n	800c5cc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c560:	8afb      	ldrh	r3, [r7, #22]
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff f9ba 	bl	800b8dc <mem_malloc>
 800c568:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d101      	bne.n	800c574 <pbuf_alloc+0x174>
        return NULL;
 800c570:	2300      	movs	r3, #0
 800c572:	e02b      	b.n	800c5cc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c574:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c576:	3310      	adds	r3, #16
 800c578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c57a:	4413      	add	r3, r2
 800c57c:	3303      	adds	r3, #3
 800c57e:	f023 0303 	bic.w	r3, r3, #3
 800c582:	4618      	mov	r0, r3
 800c584:	88b9      	ldrh	r1, [r7, #4]
 800c586:	88ba      	ldrh	r2, [r7, #4]
 800c588:	2300      	movs	r3, #0
 800c58a:	9301      	str	r3, [sp, #4]
 800c58c:	887b      	ldrh	r3, [r7, #2]
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	460b      	mov	r3, r1
 800c592:	4601      	mov	r1, r0
 800c594:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c596:	f7ff ff09 	bl	800c3ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	f003 0303 	and.w	r3, r3, #3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d010      	beq.n	800c5c8 <pbuf_alloc+0x1c8>
 800c5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c5d4 <pbuf_alloc+0x1d4>)
 800c5a8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c5ac:	490d      	ldr	r1, [pc, #52]	@ (800c5e4 <pbuf_alloc+0x1e4>)
 800c5ae:	480b      	ldr	r0, [pc, #44]	@ (800c5dc <pbuf_alloc+0x1dc>)
 800c5b0:	f009 fcd0 	bl	8015f54 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c5b4:	e008      	b.n	800c5c8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c5b6:	4b07      	ldr	r3, [pc, #28]	@ (800c5d4 <pbuf_alloc+0x1d4>)
 800c5b8:	f240 1227 	movw	r2, #295	@ 0x127
 800c5bc:	490a      	ldr	r1, [pc, #40]	@ (800c5e8 <pbuf_alloc+0x1e8>)
 800c5be:	4807      	ldr	r0, [pc, #28]	@ (800c5dc <pbuf_alloc+0x1dc>)
 800c5c0:	f009 fcc8 	bl	8015f54 <iprintf>
      return NULL;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	e001      	b.n	800c5cc <pbuf_alloc+0x1cc>
      break;
 800c5c8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3728      	adds	r7, #40	@ 0x28
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	08019d40 	.word	0x08019d40
 800c5d8:	08019d70 	.word	0x08019d70
 800c5dc:	08019da0 	.word	0x08019da0
 800c5e0:	08019dc8 	.word	0x08019dc8
 800c5e4:	08019dfc 	.word	0x08019dfc
 800c5e8:	08019e28 	.word	0x08019e28

0800c5ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af02      	add	r7, sp, #8
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	807b      	strh	r3, [r7, #2]
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c5fc:	883b      	ldrh	r3, [r7, #0]
 800c5fe:	2b41      	cmp	r3, #65	@ 0x41
 800c600:	d009      	beq.n	800c616 <pbuf_alloc_reference+0x2a>
 800c602:	883b      	ldrh	r3, [r7, #0]
 800c604:	2b01      	cmp	r3, #1
 800c606:	d006      	beq.n	800c616 <pbuf_alloc_reference+0x2a>
 800c608:	4b0f      	ldr	r3, [pc, #60]	@ (800c648 <pbuf_alloc_reference+0x5c>)
 800c60a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c60e:	490f      	ldr	r1, [pc, #60]	@ (800c64c <pbuf_alloc_reference+0x60>)
 800c610:	480f      	ldr	r0, [pc, #60]	@ (800c650 <pbuf_alloc_reference+0x64>)
 800c612:	f009 fc9f 	bl	8015f54 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c616:	2007      	movs	r0, #7
 800c618:	f7ff faf0 	bl	800bbfc <memp_malloc>
 800c61c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d101      	bne.n	800c628 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c624:	2300      	movs	r3, #0
 800c626:	e00b      	b.n	800c640 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c628:	8879      	ldrh	r1, [r7, #2]
 800c62a:	887a      	ldrh	r2, [r7, #2]
 800c62c:	2300      	movs	r3, #0
 800c62e:	9301      	str	r3, [sp, #4]
 800c630:	883b      	ldrh	r3, [r7, #0]
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	460b      	mov	r3, r1
 800c636:	6879      	ldr	r1, [r7, #4]
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff feb7 	bl	800c3ac <pbuf_init_alloced_pbuf>
  return p;
 800c63e:	68fb      	ldr	r3, [r7, #12]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	08019d40 	.word	0x08019d40
 800c64c:	08019e44 	.word	0x08019e44
 800c650:	08019da0 	.word	0x08019da0

0800c654 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b088      	sub	sp, #32
 800c658:	af02      	add	r7, sp, #8
 800c65a:	607b      	str	r3, [r7, #4]
 800c65c:	4603      	mov	r3, r0
 800c65e:	73fb      	strb	r3, [r7, #15]
 800c660:	460b      	mov	r3, r1
 800c662:	81bb      	strh	r3, [r7, #12]
 800c664:	4613      	mov	r3, r2
 800c666:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c668:	7bfb      	ldrb	r3, [r7, #15]
 800c66a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c66c:	8a7b      	ldrh	r3, [r7, #18]
 800c66e:	3303      	adds	r3, #3
 800c670:	f023 0203 	bic.w	r2, r3, #3
 800c674:	89bb      	ldrh	r3, [r7, #12]
 800c676:	441a      	add	r2, r3
 800c678:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d901      	bls.n	800c682 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c67e:	2300      	movs	r3, #0
 800c680:	e018      	b.n	800c6b4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d007      	beq.n	800c698 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c688:	8a7b      	ldrh	r3, [r7, #18]
 800c68a:	3303      	adds	r3, #3
 800c68c:	f023 0303 	bic.w	r3, r3, #3
 800c690:	6a3a      	ldr	r2, [r7, #32]
 800c692:	4413      	add	r3, r2
 800c694:	617b      	str	r3, [r7, #20]
 800c696:	e001      	b.n	800c69c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c698:	2300      	movs	r3, #0
 800c69a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	89b9      	ldrh	r1, [r7, #12]
 800c6a0:	89ba      	ldrh	r2, [r7, #12]
 800c6a2:	2302      	movs	r3, #2
 800c6a4:	9301      	str	r3, [sp, #4]
 800c6a6:	897b      	ldrh	r3, [r7, #10]
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	6979      	ldr	r1, [r7, #20]
 800c6ae:	f7ff fe7d 	bl	800c3ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c6b2:	687b      	ldr	r3, [r7, #4]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3718      	adds	r7, #24
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d106      	bne.n	800c6dc <pbuf_realloc+0x20>
 800c6ce:	4b3a      	ldr	r3, [pc, #232]	@ (800c7b8 <pbuf_realloc+0xfc>)
 800c6d0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c6d4:	4939      	ldr	r1, [pc, #228]	@ (800c7bc <pbuf_realloc+0x100>)
 800c6d6:	483a      	ldr	r0, [pc, #232]	@ (800c7c0 <pbuf_realloc+0x104>)
 800c6d8:	f009 fc3c 	bl	8015f54 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	891b      	ldrh	r3, [r3, #8]
 800c6e0:	887a      	ldrh	r2, [r7, #2]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d263      	bcs.n	800c7ae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	891a      	ldrh	r2, [r3, #8]
 800c6ea:	887b      	ldrh	r3, [r7, #2]
 800c6ec:	1ad3      	subs	r3, r2, r3
 800c6ee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c6f0:	887b      	ldrh	r3, [r7, #2]
 800c6f2:	817b      	strh	r3, [r7, #10]
  q = p;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c6f8:	e018      	b.n	800c72c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	895b      	ldrh	r3, [r3, #10]
 800c6fe:	897a      	ldrh	r2, [r7, #10]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	891a      	ldrh	r2, [r3, #8]
 800c708:	893b      	ldrh	r3, [r7, #8]
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d106      	bne.n	800c72c <pbuf_realloc+0x70>
 800c71e:	4b26      	ldr	r3, [pc, #152]	@ (800c7b8 <pbuf_realloc+0xfc>)
 800c720:	f240 12af 	movw	r2, #431	@ 0x1af
 800c724:	4927      	ldr	r1, [pc, #156]	@ (800c7c4 <pbuf_realloc+0x108>)
 800c726:	4826      	ldr	r0, [pc, #152]	@ (800c7c0 <pbuf_realloc+0x104>)
 800c728:	f009 fc14 	bl	8015f54 <iprintf>
  while (rem_len > q->len) {
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	895b      	ldrh	r3, [r3, #10]
 800c730:	897a      	ldrh	r2, [r7, #10]
 800c732:	429a      	cmp	r2, r3
 800c734:	d8e1      	bhi.n	800c6fa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	7b1b      	ldrb	r3, [r3, #12]
 800c73a:	f003 030f 	and.w	r3, r3, #15
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d121      	bne.n	800c786 <pbuf_realloc+0xca>
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	895b      	ldrh	r3, [r3, #10]
 800c746:	897a      	ldrh	r2, [r7, #10]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d01c      	beq.n	800c786 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	7b5b      	ldrb	r3, [r3, #13]
 800c750:	f003 0302 	and.w	r3, r3, #2
 800c754:	2b00      	cmp	r3, #0
 800c756:	d116      	bne.n	800c786 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	1ad3      	subs	r3, r2, r3
 800c760:	b29a      	uxth	r2, r3
 800c762:	897b      	ldrh	r3, [r7, #10]
 800c764:	4413      	add	r3, r2
 800c766:	b29b      	uxth	r3, r3
 800c768:	4619      	mov	r1, r3
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f7fe ffba 	bl	800b6e4 <mem_trim>
 800c770:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d106      	bne.n	800c786 <pbuf_realloc+0xca>
 800c778:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b8 <pbuf_realloc+0xfc>)
 800c77a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c77e:	4912      	ldr	r1, [pc, #72]	@ (800c7c8 <pbuf_realloc+0x10c>)
 800c780:	480f      	ldr	r0, [pc, #60]	@ (800c7c0 <pbuf_realloc+0x104>)
 800c782:	f009 fbe7 	bl	8015f54 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	897a      	ldrh	r2, [r7, #10]
 800c78a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	895a      	ldrh	r2, [r3, #10]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d004      	beq.n	800c7a6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 f911 	bl	800c9c8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	601a      	str	r2, [r3, #0]
 800c7ac:	e000      	b.n	800c7b0 <pbuf_realloc+0xf4>
    return;
 800c7ae:	bf00      	nop

}
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	08019d40 	.word	0x08019d40
 800c7bc:	08019e58 	.word	0x08019e58
 800c7c0:	08019da0 	.word	0x08019da0
 800c7c4:	08019e70 	.word	0x08019e70
 800c7c8:	08019e88 	.word	0x08019e88

0800c7cc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d106      	bne.n	800c7ee <pbuf_add_header_impl+0x22>
 800c7e0:	4b2b      	ldr	r3, [pc, #172]	@ (800c890 <pbuf_add_header_impl+0xc4>)
 800c7e2:	f240 12df 	movw	r2, #479	@ 0x1df
 800c7e6:	492b      	ldr	r1, [pc, #172]	@ (800c894 <pbuf_add_header_impl+0xc8>)
 800c7e8:	482b      	ldr	r0, [pc, #172]	@ (800c898 <pbuf_add_header_impl+0xcc>)
 800c7ea:	f009 fbb3 	bl	8015f54 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d003      	beq.n	800c7fc <pbuf_add_header_impl+0x30>
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7fa:	d301      	bcc.n	800c800 <pbuf_add_header_impl+0x34>
    return 1;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e043      	b.n	800c888 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <pbuf_add_header_impl+0x3e>
    return 0;
 800c806:	2300      	movs	r3, #0
 800c808:	e03e      	b.n	800c888 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	891a      	ldrh	r2, [r3, #8]
 800c812:	8a7b      	ldrh	r3, [r7, #18]
 800c814:	4413      	add	r3, r2
 800c816:	b29b      	uxth	r3, r3
 800c818:	8a7a      	ldrh	r2, [r7, #18]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d901      	bls.n	800c822 <pbuf_add_header_impl+0x56>
    return 1;
 800c81e:	2301      	movs	r3, #1
 800c820:	e032      	b.n	800c888 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	7b1b      	ldrb	r3, [r3, #12]
 800c826:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c828:	8a3b      	ldrh	r3, [r7, #16]
 800c82a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00c      	beq.n	800c84c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	425b      	negs	r3, r3
 800c83a:	4413      	add	r3, r2
 800c83c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3310      	adds	r3, #16
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	429a      	cmp	r2, r3
 800c846:	d20d      	bcs.n	800c864 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c848:	2301      	movs	r3, #1
 800c84a:	e01d      	b.n	800c888 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c84c:	79fb      	ldrb	r3, [r7, #7]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d006      	beq.n	800c860 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	425b      	negs	r3, r3
 800c85a:	4413      	add	r3, r2
 800c85c:	617b      	str	r3, [r7, #20]
 800c85e:	e001      	b.n	800c864 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c860:	2301      	movs	r3, #1
 800c862:	e011      	b.n	800c888 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	895a      	ldrh	r2, [r3, #10]
 800c86e:	8a7b      	ldrh	r3, [r7, #18]
 800c870:	4413      	add	r3, r2
 800c872:	b29a      	uxth	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	891a      	ldrh	r2, [r3, #8]
 800c87c:	8a7b      	ldrh	r3, [r7, #18]
 800c87e:	4413      	add	r3, r2
 800c880:	b29a      	uxth	r2, r3
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	811a      	strh	r2, [r3, #8]


  return 0;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3718      	adds	r7, #24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	08019d40 	.word	0x08019d40
 800c894:	08019ea4 	.word	0x08019ea4
 800c898:	08019da0 	.word	0x08019da0

0800c89c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7ff ff8e 	bl	800c7cc <pbuf_add_header_impl>
 800c8b0:	4603      	mov	r3, r0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
	...

0800c8bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d106      	bne.n	800c8da <pbuf_remove_header+0x1e>
 800c8cc:	4b20      	ldr	r3, [pc, #128]	@ (800c950 <pbuf_remove_header+0x94>)
 800c8ce:	f240 224b 	movw	r2, #587	@ 0x24b
 800c8d2:	4920      	ldr	r1, [pc, #128]	@ (800c954 <pbuf_remove_header+0x98>)
 800c8d4:	4820      	ldr	r0, [pc, #128]	@ (800c958 <pbuf_remove_header+0x9c>)
 800c8d6:	f009 fb3d 	bl	8015f54 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d003      	beq.n	800c8e8 <pbuf_remove_header+0x2c>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8e6:	d301      	bcc.n	800c8ec <pbuf_remove_header+0x30>
    return 1;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e02c      	b.n	800c946 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d101      	bne.n	800c8f6 <pbuf_remove_header+0x3a>
    return 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	e027      	b.n	800c946 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	895b      	ldrh	r3, [r3, #10]
 800c8fe:	89fa      	ldrh	r2, [r7, #14]
 800c900:	429a      	cmp	r2, r3
 800c902:	d908      	bls.n	800c916 <pbuf_remove_header+0x5a>
 800c904:	4b12      	ldr	r3, [pc, #72]	@ (800c950 <pbuf_remove_header+0x94>)
 800c906:	f240 2255 	movw	r2, #597	@ 0x255
 800c90a:	4914      	ldr	r1, [pc, #80]	@ (800c95c <pbuf_remove_header+0xa0>)
 800c90c:	4812      	ldr	r0, [pc, #72]	@ (800c958 <pbuf_remove_header+0x9c>)
 800c90e:	f009 fb21 	bl	8015f54 <iprintf>
 800c912:	2301      	movs	r3, #1
 800c914:	e017      	b.n	800c946 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	441a      	add	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	895a      	ldrh	r2, [r3, #10]
 800c92c:	89fb      	ldrh	r3, [r7, #14]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	b29a      	uxth	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	891a      	ldrh	r2, [r3, #8]
 800c93a:	89fb      	ldrh	r3, [r7, #14]
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	b29a      	uxth	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	08019d40 	.word	0x08019d40
 800c954:	08019ea4 	.word	0x08019ea4
 800c958:	08019da0 	.word	0x08019da0
 800c95c:	08019eb0 	.word	0x08019eb0

0800c960 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	460b      	mov	r3, r1
 800c96a:	807b      	strh	r3, [r7, #2]
 800c96c:	4613      	mov	r3, r2
 800c96e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c970:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c974:	2b00      	cmp	r3, #0
 800c976:	da08      	bge.n	800c98a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c978:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c97c:	425b      	negs	r3, r3
 800c97e:	4619      	mov	r1, r3
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7ff ff9b 	bl	800c8bc <pbuf_remove_header>
 800c986:	4603      	mov	r3, r0
 800c988:	e007      	b.n	800c99a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c98a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c98e:	787a      	ldrb	r2, [r7, #1]
 800c990:	4619      	mov	r1, r3
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f7ff ff1a 	bl	800c7cc <pbuf_add_header_impl>
 800c998:	4603      	mov	r3, r0
  }
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c9ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7ff ffd2 	bl	800c960 <pbuf_header_impl>
 800c9bc:	4603      	mov	r3, r0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
	...

0800c9c8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10b      	bne.n	800c9ee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d106      	bne.n	800c9ea <pbuf_free+0x22>
 800c9dc:	4b38      	ldr	r3, [pc, #224]	@ (800cac0 <pbuf_free+0xf8>)
 800c9de:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c9e2:	4938      	ldr	r1, [pc, #224]	@ (800cac4 <pbuf_free+0xfc>)
 800c9e4:	4838      	ldr	r0, [pc, #224]	@ (800cac8 <pbuf_free+0x100>)
 800c9e6:	f009 fab5 	bl	8015f54 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	e063      	b.n	800cab6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c9f2:	e05c      	b.n	800caae <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	7b9b      	ldrb	r3, [r3, #14]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d106      	bne.n	800ca0a <pbuf_free+0x42>
 800c9fc:	4b30      	ldr	r3, [pc, #192]	@ (800cac0 <pbuf_free+0xf8>)
 800c9fe:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800ca02:	4932      	ldr	r1, [pc, #200]	@ (800cacc <pbuf_free+0x104>)
 800ca04:	4830      	ldr	r0, [pc, #192]	@ (800cac8 <pbuf_free+0x100>)
 800ca06:	f009 faa5 	bl	8015f54 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	7b9b      	ldrb	r3, [r3, #14]
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	739a      	strb	r2, [r3, #14]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	7b9b      	ldrb	r3, [r3, #14]
 800ca1a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ca1c:	7dbb      	ldrb	r3, [r7, #22]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d143      	bne.n	800caaa <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	7b1b      	ldrb	r3, [r3, #12]
 800ca2c:	f003 030f 	and.w	r3, r3, #15
 800ca30:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	7b5b      	ldrb	r3, [r3, #13]
 800ca36:	f003 0302 	and.w	r3, r3, #2
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d011      	beq.n	800ca62 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d106      	bne.n	800ca58 <pbuf_free+0x90>
 800ca4a:	4b1d      	ldr	r3, [pc, #116]	@ (800cac0 <pbuf_free+0xf8>)
 800ca4c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ca50:	491f      	ldr	r1, [pc, #124]	@ (800cad0 <pbuf_free+0x108>)
 800ca52:	481d      	ldr	r0, [pc, #116]	@ (800cac8 <pbuf_free+0x100>)
 800ca54:	f009 fa7e 	bl	8015f54 <iprintf>
        pc->custom_free_function(p);
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	4798      	blx	r3
 800ca60:	e01d      	b.n	800ca9e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	d104      	bne.n	800ca72 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	2008      	movs	r0, #8
 800ca6c:	f7ff f936 	bl	800bcdc <memp_free>
 800ca70:	e015      	b.n	800ca9e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ca72:	7bfb      	ldrb	r3, [r7, #15]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d104      	bne.n	800ca82 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800ca78:	6879      	ldr	r1, [r7, #4]
 800ca7a:	2007      	movs	r0, #7
 800ca7c:	f7ff f92e 	bl	800bcdc <memp_free>
 800ca80:	e00d      	b.n	800ca9e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ca82:	7bfb      	ldrb	r3, [r7, #15]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d103      	bne.n	800ca90 <pbuf_free+0xc8>
          mem_free(p);
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7fe fdc1 	bl	800b610 <mem_free>
 800ca8e:	e006      	b.n	800ca9e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ca90:	4b0b      	ldr	r3, [pc, #44]	@ (800cac0 <pbuf_free+0xf8>)
 800ca92:	f240 320f 	movw	r2, #783	@ 0x30f
 800ca96:	490f      	ldr	r1, [pc, #60]	@ (800cad4 <pbuf_free+0x10c>)
 800ca98:	480b      	ldr	r0, [pc, #44]	@ (800cac8 <pbuf_free+0x100>)
 800ca9a:	f009 fa5b 	bl	8015f54 <iprintf>
        }
      }
      count++;
 800ca9e:	7dfb      	ldrb	r3, [r7, #23]
 800caa0:	3301      	adds	r3, #1
 800caa2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	607b      	str	r3, [r7, #4]
 800caa8:	e001      	b.n	800caae <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800caaa:	2300      	movs	r3, #0
 800caac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d19f      	bne.n	800c9f4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3718      	adds	r7, #24
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	08019d40 	.word	0x08019d40
 800cac4:	08019ea4 	.word	0x08019ea4
 800cac8:	08019da0 	.word	0x08019da0
 800cacc:	08019ed0 	.word	0x08019ed0
 800cad0:	08019ee8 	.word	0x08019ee8
 800cad4:	08019f0c 	.word	0x08019f0c

0800cad8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cae0:	2300      	movs	r3, #0
 800cae2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cae4:	e005      	b.n	800caf2 <pbuf_clen+0x1a>
    ++len;
 800cae6:	89fb      	ldrh	r3, [r7, #14]
 800cae8:	3301      	adds	r3, #1
 800caea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1f6      	bne.n	800cae6 <pbuf_clen+0xe>
  }
  return len;
 800caf8:	89fb      	ldrh	r3, [r7, #14]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
	...

0800cb08 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d010      	beq.n	800cb38 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	7b9b      	ldrb	r3, [r3, #14]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	7b9b      	ldrb	r3, [r3, #14]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d106      	bne.n	800cb38 <pbuf_ref+0x30>
 800cb2a:	4b05      	ldr	r3, [pc, #20]	@ (800cb40 <pbuf_ref+0x38>)
 800cb2c:	f240 3242 	movw	r2, #834	@ 0x342
 800cb30:	4904      	ldr	r1, [pc, #16]	@ (800cb44 <pbuf_ref+0x3c>)
 800cb32:	4805      	ldr	r0, [pc, #20]	@ (800cb48 <pbuf_ref+0x40>)
 800cb34:	f009 fa0e 	bl	8015f54 <iprintf>
  }
}
 800cb38:	bf00      	nop
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	08019d40 	.word	0x08019d40
 800cb44:	08019f20 	.word	0x08019f20
 800cb48:	08019da0 	.word	0x08019da0

0800cb4c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d002      	beq.n	800cb62 <pbuf_cat+0x16>
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d107      	bne.n	800cb72 <pbuf_cat+0x26>
 800cb62:	4b20      	ldr	r3, [pc, #128]	@ (800cbe4 <pbuf_cat+0x98>)
 800cb64:	f240 3259 	movw	r2, #857	@ 0x359
 800cb68:	491f      	ldr	r1, [pc, #124]	@ (800cbe8 <pbuf_cat+0x9c>)
 800cb6a:	4820      	ldr	r0, [pc, #128]	@ (800cbec <pbuf_cat+0xa0>)
 800cb6c:	f009 f9f2 	bl	8015f54 <iprintf>
 800cb70:	e034      	b.n	800cbdc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	e00a      	b.n	800cb8e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	891a      	ldrh	r2, [r3, #8]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	891b      	ldrh	r3, [r3, #8]
 800cb80:	4413      	add	r3, r2
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	60fb      	str	r3, [r7, #12]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1f0      	bne.n	800cb78 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	891a      	ldrh	r2, [r3, #8]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	895b      	ldrh	r3, [r3, #10]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d006      	beq.n	800cbb0 <pbuf_cat+0x64>
 800cba2:	4b10      	ldr	r3, [pc, #64]	@ (800cbe4 <pbuf_cat+0x98>)
 800cba4:	f240 3262 	movw	r2, #866	@ 0x362
 800cba8:	4911      	ldr	r1, [pc, #68]	@ (800cbf0 <pbuf_cat+0xa4>)
 800cbaa:	4810      	ldr	r0, [pc, #64]	@ (800cbec <pbuf_cat+0xa0>)
 800cbac:	f009 f9d2 	bl	8015f54 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d006      	beq.n	800cbc6 <pbuf_cat+0x7a>
 800cbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe4 <pbuf_cat+0x98>)
 800cbba:	f240 3263 	movw	r2, #867	@ 0x363
 800cbbe:	490d      	ldr	r1, [pc, #52]	@ (800cbf4 <pbuf_cat+0xa8>)
 800cbc0:	480a      	ldr	r0, [pc, #40]	@ (800cbec <pbuf_cat+0xa0>)
 800cbc2:	f009 f9c7 	bl	8015f54 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	891a      	ldrh	r2, [r3, #8]
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	891b      	ldrh	r3, [r3, #8]
 800cbce:	4413      	add	r3, r2
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	683a      	ldr	r2, [r7, #0]
 800cbda:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	08019d40 	.word	0x08019d40
 800cbe8:	08019f34 	.word	0x08019f34
 800cbec:	08019da0 	.word	0x08019da0
 800cbf0:	08019f6c 	.word	0x08019f6c
 800cbf4:	08019f9c 	.word	0x08019f9c

0800cbf8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cc02:	2300      	movs	r3, #0
 800cc04:	617b      	str	r3, [r7, #20]
 800cc06:	2300      	movs	r3, #0
 800cc08:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d008      	beq.n	800cc22 <pbuf_copy+0x2a>
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d005      	beq.n	800cc22 <pbuf_copy+0x2a>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	891a      	ldrh	r2, [r3, #8]
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	891b      	ldrh	r3, [r3, #8]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d209      	bcs.n	800cc36 <pbuf_copy+0x3e>
 800cc22:	4b57      	ldr	r3, [pc, #348]	@ (800cd80 <pbuf_copy+0x188>)
 800cc24:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800cc28:	4956      	ldr	r1, [pc, #344]	@ (800cd84 <pbuf_copy+0x18c>)
 800cc2a:	4857      	ldr	r0, [pc, #348]	@ (800cd88 <pbuf_copy+0x190>)
 800cc2c:	f009 f992 	bl	8015f54 <iprintf>
 800cc30:	f06f 030f 	mvn.w	r3, #15
 800cc34:	e09f      	b.n	800cd76 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	895b      	ldrh	r3, [r3, #10]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	1ad2      	subs	r2, r2, r3
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	895b      	ldrh	r3, [r3, #10]
 800cc44:	4619      	mov	r1, r3
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	1acb      	subs	r3, r1, r3
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d306      	bcc.n	800cc5c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	895b      	ldrh	r3, [r3, #10]
 800cc52:	461a      	mov	r2, r3
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	e005      	b.n	800cc68 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	895b      	ldrh	r3, [r3, #10]
 800cc60:	461a      	mov	r2, r3
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	685a      	ldr	r2, [r3, #4]
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	18d0      	adds	r0, r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	4413      	add	r3, r2
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	f009 fb8f 	bl	801639e <memcpy>
    offset_to += len;
 800cc80:	697a      	ldr	r2, [r7, #20]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	4413      	add	r3, r2
 800cc86:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	895b      	ldrh	r3, [r3, #10]
 800cc94:	461a      	mov	r2, r3
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d906      	bls.n	800ccaa <pbuf_copy+0xb2>
 800cc9c:	4b38      	ldr	r3, [pc, #224]	@ (800cd80 <pbuf_copy+0x188>)
 800cc9e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800cca2:	493a      	ldr	r1, [pc, #232]	@ (800cd8c <pbuf_copy+0x194>)
 800cca4:	4838      	ldr	r0, [pc, #224]	@ (800cd88 <pbuf_copy+0x190>)
 800cca6:	f009 f955 	bl	8015f54 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	895b      	ldrh	r3, [r3, #10]
 800ccae:	461a      	mov	r2, r3
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d906      	bls.n	800ccc4 <pbuf_copy+0xcc>
 800ccb6:	4b32      	ldr	r3, [pc, #200]	@ (800cd80 <pbuf_copy+0x188>)
 800ccb8:	f240 32da 	movw	r2, #986	@ 0x3da
 800ccbc:	4934      	ldr	r1, [pc, #208]	@ (800cd90 <pbuf_copy+0x198>)
 800ccbe:	4832      	ldr	r0, [pc, #200]	@ (800cd88 <pbuf_copy+0x190>)
 800ccc0:	f009 f948 	bl	8015f54 <iprintf>
    if (offset_from >= p_from->len) {
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	895b      	ldrh	r3, [r3, #10]
 800ccc8:	461a      	mov	r2, r3
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d304      	bcc.n	800ccda <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	895b      	ldrh	r3, [r3, #10]
 800ccde:	461a      	mov	r2, r3
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d114      	bne.n	800cd10 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10c      	bne.n	800cd10 <pbuf_copy+0x118>
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d009      	beq.n	800cd10 <pbuf_copy+0x118>
 800ccfc:	4b20      	ldr	r3, [pc, #128]	@ (800cd80 <pbuf_copy+0x188>)
 800ccfe:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800cd02:	4924      	ldr	r1, [pc, #144]	@ (800cd94 <pbuf_copy+0x19c>)
 800cd04:	4820      	ldr	r0, [pc, #128]	@ (800cd88 <pbuf_copy+0x190>)
 800cd06:	f009 f925 	bl	8015f54 <iprintf>
 800cd0a:	f06f 030f 	mvn.w	r3, #15
 800cd0e:	e032      	b.n	800cd76 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d013      	beq.n	800cd3e <pbuf_copy+0x146>
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	895a      	ldrh	r2, [r3, #10]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	891b      	ldrh	r3, [r3, #8]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d10d      	bne.n	800cd3e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d009      	beq.n	800cd3e <pbuf_copy+0x146>
 800cd2a:	4b15      	ldr	r3, [pc, #84]	@ (800cd80 <pbuf_copy+0x188>)
 800cd2c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800cd30:	4919      	ldr	r1, [pc, #100]	@ (800cd98 <pbuf_copy+0x1a0>)
 800cd32:	4815      	ldr	r0, [pc, #84]	@ (800cd88 <pbuf_copy+0x190>)
 800cd34:	f009 f90e 	bl	8015f54 <iprintf>
 800cd38:	f06f 0305 	mvn.w	r3, #5
 800cd3c:	e01b      	b.n	800cd76 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d013      	beq.n	800cd6c <pbuf_copy+0x174>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	895a      	ldrh	r2, [r3, #10]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	891b      	ldrh	r3, [r3, #8]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d10d      	bne.n	800cd6c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d009      	beq.n	800cd6c <pbuf_copy+0x174>
 800cd58:	4b09      	ldr	r3, [pc, #36]	@ (800cd80 <pbuf_copy+0x188>)
 800cd5a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800cd5e:	490e      	ldr	r1, [pc, #56]	@ (800cd98 <pbuf_copy+0x1a0>)
 800cd60:	4809      	ldr	r0, [pc, #36]	@ (800cd88 <pbuf_copy+0x190>)
 800cd62:	f009 f8f7 	bl	8015f54 <iprintf>
 800cd66:	f06f 0305 	mvn.w	r3, #5
 800cd6a:	e004      	b.n	800cd76 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f47f af61 	bne.w	800cc36 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3718      	adds	r7, #24
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	08019d40 	.word	0x08019d40
 800cd84:	08019fe8 	.word	0x08019fe8
 800cd88:	08019da0 	.word	0x08019da0
 800cd8c:	0801a018 	.word	0x0801a018
 800cd90:	0801a030 	.word	0x0801a030
 800cd94:	0801a04c 	.word	0x0801a04c
 800cd98:	0801a05c 	.word	0x0801a05c

0800cd9c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b088      	sub	sp, #32
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	4611      	mov	r1, r2
 800cda8:	461a      	mov	r2, r3
 800cdaa:	460b      	mov	r3, r1
 800cdac:	80fb      	strh	r3, [r7, #6]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d108      	bne.n	800cdd2 <pbuf_copy_partial+0x36>
 800cdc0:	4b2b      	ldr	r3, [pc, #172]	@ (800ce70 <pbuf_copy_partial+0xd4>)
 800cdc2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800cdc6:	492b      	ldr	r1, [pc, #172]	@ (800ce74 <pbuf_copy_partial+0xd8>)
 800cdc8:	482b      	ldr	r0, [pc, #172]	@ (800ce78 <pbuf_copy_partial+0xdc>)
 800cdca:	f009 f8c3 	bl	8015f54 <iprintf>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	e04a      	b.n	800ce68 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d108      	bne.n	800cdea <pbuf_copy_partial+0x4e>
 800cdd8:	4b25      	ldr	r3, [pc, #148]	@ (800ce70 <pbuf_copy_partial+0xd4>)
 800cdda:	f240 420b 	movw	r2, #1035	@ 0x40b
 800cdde:	4927      	ldr	r1, [pc, #156]	@ (800ce7c <pbuf_copy_partial+0xe0>)
 800cde0:	4825      	ldr	r0, [pc, #148]	@ (800ce78 <pbuf_copy_partial+0xdc>)
 800cde2:	f009 f8b7 	bl	8015f54 <iprintf>
 800cde6:	2300      	movs	r3, #0
 800cde8:	e03e      	b.n	800ce68 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	61fb      	str	r3, [r7, #28]
 800cdee:	e034      	b.n	800ce5a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cdf0:	88bb      	ldrh	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00a      	beq.n	800ce0c <pbuf_copy_partial+0x70>
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	895b      	ldrh	r3, [r3, #10]
 800cdfa:	88ba      	ldrh	r2, [r7, #4]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d305      	bcc.n	800ce0c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	895b      	ldrh	r3, [r3, #10]
 800ce04:	88ba      	ldrh	r2, [r7, #4]
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	80bb      	strh	r3, [r7, #4]
 800ce0a:	e023      	b.n	800ce54 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	895a      	ldrh	r2, [r3, #10]
 800ce10:	88bb      	ldrh	r3, [r7, #4]
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ce16:	8b3a      	ldrh	r2, [r7, #24]
 800ce18:	88fb      	ldrh	r3, [r7, #6]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d901      	bls.n	800ce22 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ce1e:	88fb      	ldrh	r3, [r7, #6]
 800ce20:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ce22:	8b7b      	ldrh	r3, [r7, #26]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	18d0      	adds	r0, r2, r3
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	88bb      	ldrh	r3, [r7, #4]
 800ce2e:	4413      	add	r3, r2
 800ce30:	8b3a      	ldrh	r2, [r7, #24]
 800ce32:	4619      	mov	r1, r3
 800ce34:	f009 fab3 	bl	801639e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ce38:	8afa      	ldrh	r2, [r7, #22]
 800ce3a:	8b3b      	ldrh	r3, [r7, #24]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ce40:	8b7a      	ldrh	r2, [r7, #26]
 800ce42:	8b3b      	ldrh	r3, [r7, #24]
 800ce44:	4413      	add	r3, r2
 800ce46:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ce48:	88fa      	ldrh	r2, [r7, #6]
 800ce4a:	8b3b      	ldrh	r3, [r7, #24]
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ce50:	2300      	movs	r3, #0
 800ce52:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	61fb      	str	r3, [r7, #28]
 800ce5a:	88fb      	ldrh	r3, [r7, #6]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <pbuf_copy_partial+0xca>
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1c4      	bne.n	800cdf0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ce66:	8afb      	ldrh	r3, [r7, #22]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3720      	adds	r7, #32
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	08019d40 	.word	0x08019d40
 800ce74:	0801a088 	.word	0x0801a088
 800ce78:	08019da0 	.word	0x08019da0
 800ce7c:	0801a0a8 	.word	0x0801a0a8

0800ce80 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	603a      	str	r2, [r7, #0]
 800ce8a:	71fb      	strb	r3, [r7, #7]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	8919      	ldrh	r1, [r3, #8]
 800ce94:	88ba      	ldrh	r2, [r7, #4]
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff fab1 	bl	800c400 <pbuf_alloc>
 800ce9e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d101      	bne.n	800ceaa <pbuf_clone+0x2a>
    return NULL;
 800cea6:	2300      	movs	r3, #0
 800cea8:	e011      	b.n	800cece <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ceaa:	6839      	ldr	r1, [r7, #0]
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f7ff fea3 	bl	800cbf8 <pbuf_copy>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ceb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d006      	beq.n	800cecc <pbuf_clone+0x4c>
 800cebe:	4b06      	ldr	r3, [pc, #24]	@ (800ced8 <pbuf_clone+0x58>)
 800cec0:	f240 5224 	movw	r2, #1316	@ 0x524
 800cec4:	4905      	ldr	r1, [pc, #20]	@ (800cedc <pbuf_clone+0x5c>)
 800cec6:	4806      	ldr	r0, [pc, #24]	@ (800cee0 <pbuf_clone+0x60>)
 800cec8:	f009 f844 	bl	8015f54 <iprintf>
  return q;
 800cecc:	68fb      	ldr	r3, [r7, #12]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	08019d40 	.word	0x08019d40
 800cedc:	0801a1b4 	.word	0x0801a1b4
 800cee0:	08019da0 	.word	0x08019da0

0800cee4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cee8:	f008 f87e 	bl	8014fe8 <rand>
 800ceec:	4603      	mov	r3, r0
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	4b01      	ldr	r3, [pc, #4]	@ (800cf04 <tcp_init+0x20>)
 800cefe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cf00:	bf00      	nop
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	24000044 	.word	0x24000044

0800cf08 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	7d1b      	ldrb	r3, [r3, #20]
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d105      	bne.n	800cf24 <tcp_free+0x1c>
 800cf18:	4b06      	ldr	r3, [pc, #24]	@ (800cf34 <tcp_free+0x2c>)
 800cf1a:	22d4      	movs	r2, #212	@ 0xd4
 800cf1c:	4906      	ldr	r1, [pc, #24]	@ (800cf38 <tcp_free+0x30>)
 800cf1e:	4807      	ldr	r0, [pc, #28]	@ (800cf3c <tcp_free+0x34>)
 800cf20:	f009 f818 	bl	8015f54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cf24:	6879      	ldr	r1, [r7, #4]
 800cf26:	2001      	movs	r0, #1
 800cf28:	f7fe fed8 	bl	800bcdc <memp_free>
}
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	0801a240 	.word	0x0801a240
 800cf38:	0801a270 	.word	0x0801a270
 800cf3c:	0801a284 	.word	0x0801a284

0800cf40 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	7d1b      	ldrb	r3, [r3, #20]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d105      	bne.n	800cf5c <tcp_free_listen+0x1c>
 800cf50:	4b06      	ldr	r3, [pc, #24]	@ (800cf6c <tcp_free_listen+0x2c>)
 800cf52:	22df      	movs	r2, #223	@ 0xdf
 800cf54:	4906      	ldr	r1, [pc, #24]	@ (800cf70 <tcp_free_listen+0x30>)
 800cf56:	4807      	ldr	r0, [pc, #28]	@ (800cf74 <tcp_free_listen+0x34>)
 800cf58:	f008 fffc 	bl	8015f54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cf5c:	6879      	ldr	r1, [r7, #4]
 800cf5e:	2002      	movs	r0, #2
 800cf60:	f7fe febc 	bl	800bcdc <memp_free>
}
 800cf64:	bf00      	nop
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	0801a240 	.word	0x0801a240
 800cf70:	0801a2ac 	.word	0x0801a2ac
 800cf74:	0801a284 	.word	0x0801a284

0800cf78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cf7c:	f000 fea4 	bl	800dcc8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cf80:	4b07      	ldr	r3, [pc, #28]	@ (800cfa0 <tcp_tmr+0x28>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	3301      	adds	r3, #1
 800cf86:	b2da      	uxtb	r2, r3
 800cf88:	4b05      	ldr	r3, [pc, #20]	@ (800cfa0 <tcp_tmr+0x28>)
 800cf8a:	701a      	strb	r2, [r3, #0]
 800cf8c:	4b04      	ldr	r3, [pc, #16]	@ (800cfa0 <tcp_tmr+0x28>)
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	f003 0301 	and.w	r3, r3, #1
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d001      	beq.n	800cf9c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cf98:	f000 fb54 	bl	800d644 <tcp_slowtmr>
  }
}
 800cf9c:	bf00      	nop
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	240083a1 	.word	0x240083a1

0800cfa4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d105      	bne.n	800cfc0 <tcp_remove_listener+0x1c>
 800cfb4:	4b0d      	ldr	r3, [pc, #52]	@ (800cfec <tcp_remove_listener+0x48>)
 800cfb6:	22ff      	movs	r2, #255	@ 0xff
 800cfb8:	490d      	ldr	r1, [pc, #52]	@ (800cff0 <tcp_remove_listener+0x4c>)
 800cfba:	480e      	ldr	r0, [pc, #56]	@ (800cff4 <tcp_remove_listener+0x50>)
 800cfbc:	f008 ffca 	bl	8015f54 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	60fb      	str	r3, [r7, #12]
 800cfc4:	e00a      	b.n	800cfdc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d102      	bne.n	800cfd6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1f1      	bne.n	800cfc6 <tcp_remove_listener+0x22>
    }
  }
}
 800cfe2:	bf00      	nop
 800cfe4:	bf00      	nop
 800cfe6:	3710      	adds	r7, #16
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	0801a240 	.word	0x0801a240
 800cff0:	0801a2c8 	.word	0x0801a2c8
 800cff4:	0801a284 	.word	0x0801a284

0800cff8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d106      	bne.n	800d014 <tcp_listen_closed+0x1c>
 800d006:	4b14      	ldr	r3, [pc, #80]	@ (800d058 <tcp_listen_closed+0x60>)
 800d008:	f240 1211 	movw	r2, #273	@ 0x111
 800d00c:	4913      	ldr	r1, [pc, #76]	@ (800d05c <tcp_listen_closed+0x64>)
 800d00e:	4814      	ldr	r0, [pc, #80]	@ (800d060 <tcp_listen_closed+0x68>)
 800d010:	f008 ffa0 	bl	8015f54 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	7d1b      	ldrb	r3, [r3, #20]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d006      	beq.n	800d02a <tcp_listen_closed+0x32>
 800d01c:	4b0e      	ldr	r3, [pc, #56]	@ (800d058 <tcp_listen_closed+0x60>)
 800d01e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d022:	4910      	ldr	r1, [pc, #64]	@ (800d064 <tcp_listen_closed+0x6c>)
 800d024:	480e      	ldr	r0, [pc, #56]	@ (800d060 <tcp_listen_closed+0x68>)
 800d026:	f008 ff95 	bl	8015f54 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d02a:	2301      	movs	r3, #1
 800d02c:	60fb      	str	r3, [r7, #12]
 800d02e:	e00b      	b.n	800d048 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d030:	4a0d      	ldr	r2, [pc, #52]	@ (800d068 <tcp_listen_closed+0x70>)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	6879      	ldr	r1, [r7, #4]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7ff ffb1 	bl	800cfa4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	3301      	adds	r3, #1
 800d046:	60fb      	str	r3, [r7, #12]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	d9f0      	bls.n	800d030 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d04e:	bf00      	nop
 800d050:	bf00      	nop
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	0801a240 	.word	0x0801a240
 800d05c:	0801a2f0 	.word	0x0801a2f0
 800d060:	0801a284 	.word	0x0801a284
 800d064:	0801a2fc 	.word	0x0801a2fc
 800d068:	0801c300 	.word	0x0801c300

0800d06c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d06c:	b5b0      	push	{r4, r5, r7, lr}
 800d06e:	b088      	sub	sp, #32
 800d070:	af04      	add	r7, sp, #16
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d106      	bne.n	800d08c <tcp_close_shutdown+0x20>
 800d07e:	4b63      	ldr	r3, [pc, #396]	@ (800d20c <tcp_close_shutdown+0x1a0>)
 800d080:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d084:	4962      	ldr	r1, [pc, #392]	@ (800d210 <tcp_close_shutdown+0x1a4>)
 800d086:	4863      	ldr	r0, [pc, #396]	@ (800d214 <tcp_close_shutdown+0x1a8>)
 800d088:	f008 ff64 	bl	8015f54 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d08c:	78fb      	ldrb	r3, [r7, #3]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d066      	beq.n	800d160 <tcp_close_shutdown+0xf4>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	7d1b      	ldrb	r3, [r3, #20]
 800d096:	2b04      	cmp	r3, #4
 800d098:	d003      	beq.n	800d0a2 <tcp_close_shutdown+0x36>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	7d1b      	ldrb	r3, [r3, #20]
 800d09e:	2b07      	cmp	r3, #7
 800d0a0:	d15e      	bne.n	800d160 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d104      	bne.n	800d0b4 <tcp_close_shutdown+0x48>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0ae:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d0b2:	d055      	beq.n	800d160 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	8b5b      	ldrh	r3, [r3, #26]
 800d0b8:	f003 0310 	and.w	r3, r3, #16
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d106      	bne.n	800d0ce <tcp_close_shutdown+0x62>
 800d0c0:	4b52      	ldr	r3, [pc, #328]	@ (800d20c <tcp_close_shutdown+0x1a0>)
 800d0c2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d0c6:	4954      	ldr	r1, [pc, #336]	@ (800d218 <tcp_close_shutdown+0x1ac>)
 800d0c8:	4852      	ldr	r0, [pc, #328]	@ (800d214 <tcp_close_shutdown+0x1a8>)
 800d0ca:	f008 ff43 	bl	8015f54 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d0d6:	687d      	ldr	r5, [r7, #4]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	3304      	adds	r3, #4
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	8ad2      	ldrh	r2, [r2, #22]
 800d0e0:	6879      	ldr	r1, [r7, #4]
 800d0e2:	8b09      	ldrh	r1, [r1, #24]
 800d0e4:	9102      	str	r1, [sp, #8]
 800d0e6:	9201      	str	r2, [sp, #4]
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	462b      	mov	r3, r5
 800d0ec:	4622      	mov	r2, r4
 800d0ee:	4601      	mov	r1, r0
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f004 fe8d 	bl	8011e10 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f001 f8c8 	bl	800e28c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d0fc:	4b47      	ldr	r3, [pc, #284]	@ (800d21c <tcp_close_shutdown+0x1b0>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	429a      	cmp	r2, r3
 800d104:	d105      	bne.n	800d112 <tcp_close_shutdown+0xa6>
 800d106:	4b45      	ldr	r3, [pc, #276]	@ (800d21c <tcp_close_shutdown+0x1b0>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	4a43      	ldr	r2, [pc, #268]	@ (800d21c <tcp_close_shutdown+0x1b0>)
 800d10e:	6013      	str	r3, [r2, #0]
 800d110:	e013      	b.n	800d13a <tcp_close_shutdown+0xce>
 800d112:	4b42      	ldr	r3, [pc, #264]	@ (800d21c <tcp_close_shutdown+0x1b0>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	60fb      	str	r3, [r7, #12]
 800d118:	e00c      	b.n	800d134 <tcp_close_shutdown+0xc8>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	429a      	cmp	r2, r3
 800d122:	d104      	bne.n	800d12e <tcp_close_shutdown+0xc2>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68da      	ldr	r2, [r3, #12]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	60da      	str	r2, [r3, #12]
 800d12c:	e005      	b.n	800d13a <tcp_close_shutdown+0xce>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1ef      	bne.n	800d11a <tcp_close_shutdown+0xae>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	60da      	str	r2, [r3, #12]
 800d140:	4b37      	ldr	r3, [pc, #220]	@ (800d220 <tcp_close_shutdown+0x1b4>)
 800d142:	2201      	movs	r2, #1
 800d144:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d146:	4b37      	ldr	r3, [pc, #220]	@ (800d224 <tcp_close_shutdown+0x1b8>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d102      	bne.n	800d156 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d150:	f003 fd5c 	bl	8010c0c <tcp_trigger_input_pcb_close>
 800d154:	e002      	b.n	800d15c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff fed6 	bl	800cf08 <tcp_free>
      }
      return ERR_OK;
 800d15c:	2300      	movs	r3, #0
 800d15e:	e050      	b.n	800d202 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	7d1b      	ldrb	r3, [r3, #20]
 800d164:	2b02      	cmp	r3, #2
 800d166:	d03b      	beq.n	800d1e0 <tcp_close_shutdown+0x174>
 800d168:	2b02      	cmp	r3, #2
 800d16a:	dc44      	bgt.n	800d1f6 <tcp_close_shutdown+0x18a>
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d002      	beq.n	800d176 <tcp_close_shutdown+0x10a>
 800d170:	2b01      	cmp	r3, #1
 800d172:	d02a      	beq.n	800d1ca <tcp_close_shutdown+0x15e>
 800d174:	e03f      	b.n	800d1f6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	8adb      	ldrh	r3, [r3, #22]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d021      	beq.n	800d1c2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d17e:	4b2a      	ldr	r3, [pc, #168]	@ (800d228 <tcp_close_shutdown+0x1bc>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	429a      	cmp	r2, r3
 800d186:	d105      	bne.n	800d194 <tcp_close_shutdown+0x128>
 800d188:	4b27      	ldr	r3, [pc, #156]	@ (800d228 <tcp_close_shutdown+0x1bc>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	4a26      	ldr	r2, [pc, #152]	@ (800d228 <tcp_close_shutdown+0x1bc>)
 800d190:	6013      	str	r3, [r2, #0]
 800d192:	e013      	b.n	800d1bc <tcp_close_shutdown+0x150>
 800d194:	4b24      	ldr	r3, [pc, #144]	@ (800d228 <tcp_close_shutdown+0x1bc>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	60bb      	str	r3, [r7, #8]
 800d19a:	e00c      	b.n	800d1b6 <tcp_close_shutdown+0x14a>
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d104      	bne.n	800d1b0 <tcp_close_shutdown+0x144>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	68da      	ldr	r2, [r3, #12]
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	60da      	str	r2, [r3, #12]
 800d1ae:	e005      	b.n	800d1bc <tcp_close_shutdown+0x150>
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	60bb      	str	r3, [r7, #8]
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1ef      	bne.n	800d19c <tcp_close_shutdown+0x130>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7ff fea0 	bl	800cf08 <tcp_free>
      break;
 800d1c8:	e01a      	b.n	800d200 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff ff14 	bl	800cff8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d1d0:	6879      	ldr	r1, [r7, #4]
 800d1d2:	4816      	ldr	r0, [pc, #88]	@ (800d22c <tcp_close_shutdown+0x1c0>)
 800d1d4:	f001 f8aa 	bl	800e32c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7ff feb1 	bl	800cf40 <tcp_free_listen>
      break;
 800d1de:	e00f      	b.n	800d200 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	480e      	ldr	r0, [pc, #56]	@ (800d21c <tcp_close_shutdown+0x1b0>)
 800d1e4:	f001 f8a2 	bl	800e32c <tcp_pcb_remove>
 800d1e8:	4b0d      	ldr	r3, [pc, #52]	@ (800d220 <tcp_close_shutdown+0x1b4>)
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff fe8a 	bl	800cf08 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d1f4:	e004      	b.n	800d200 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f81a 	bl	800d230 <tcp_close_shutdown_fin>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	e000      	b.n	800d202 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bdb0      	pop	{r4, r5, r7, pc}
 800d20a:	bf00      	nop
 800d20c:	0801a240 	.word	0x0801a240
 800d210:	0801a314 	.word	0x0801a314
 800d214:	0801a284 	.word	0x0801a284
 800d218:	0801a334 	.word	0x0801a334
 800d21c:	24008398 	.word	0x24008398
 800d220:	240083a0 	.word	0x240083a0
 800d224:	240083d8 	.word	0x240083d8
 800d228:	24008390 	.word	0x24008390
 800d22c:	24008394 	.word	0x24008394

0800d230 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d106      	bne.n	800d24c <tcp_close_shutdown_fin+0x1c>
 800d23e:	4b2e      	ldr	r3, [pc, #184]	@ (800d2f8 <tcp_close_shutdown_fin+0xc8>)
 800d240:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d244:	492d      	ldr	r1, [pc, #180]	@ (800d2fc <tcp_close_shutdown_fin+0xcc>)
 800d246:	482e      	ldr	r0, [pc, #184]	@ (800d300 <tcp_close_shutdown_fin+0xd0>)
 800d248:	f008 fe84 	bl	8015f54 <iprintf>

  switch (pcb->state) {
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	7d1b      	ldrb	r3, [r3, #20]
 800d250:	2b07      	cmp	r3, #7
 800d252:	d020      	beq.n	800d296 <tcp_close_shutdown_fin+0x66>
 800d254:	2b07      	cmp	r3, #7
 800d256:	dc2b      	bgt.n	800d2b0 <tcp_close_shutdown_fin+0x80>
 800d258:	2b03      	cmp	r3, #3
 800d25a:	d002      	beq.n	800d262 <tcp_close_shutdown_fin+0x32>
 800d25c:	2b04      	cmp	r3, #4
 800d25e:	d00d      	beq.n	800d27c <tcp_close_shutdown_fin+0x4c>
 800d260:	e026      	b.n	800d2b0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f003 fee2 	bl	801102c <tcp_send_fin>
 800d268:	4603      	mov	r3, r0
 800d26a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d26c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d11f      	bne.n	800d2b4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2205      	movs	r2, #5
 800d278:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d27a:	e01b      	b.n	800d2b4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f003 fed5 	bl	801102c <tcp_send_fin>
 800d282:	4603      	mov	r3, r0
 800d284:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d114      	bne.n	800d2b8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2205      	movs	r2, #5
 800d292:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d294:	e010      	b.n	800d2b8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f003 fec8 	bl	801102c <tcp_send_fin>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d109      	bne.n	800d2bc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2209      	movs	r2, #9
 800d2ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d2ae:	e005      	b.n	800d2bc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	e01c      	b.n	800d2ee <tcp_close_shutdown_fin+0xbe>
      break;
 800d2b4:	bf00      	nop
 800d2b6:	e002      	b.n	800d2be <tcp_close_shutdown_fin+0x8e>
      break;
 800d2b8:	bf00      	nop
 800d2ba:	e000      	b.n	800d2be <tcp_close_shutdown_fin+0x8e>
      break;
 800d2bc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d103      	bne.n	800d2ce <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f003 ffee 	bl	80112a8 <tcp_output>
 800d2cc:	e00d      	b.n	800d2ea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d2ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d6:	d108      	bne.n	800d2ea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	8b5b      	ldrh	r3, [r3, #26]
 800d2dc:	f043 0308 	orr.w	r3, r3, #8
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	e001      	b.n	800d2ee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	0801a240 	.word	0x0801a240
 800d2fc:	0801a2f0 	.word	0x0801a2f0
 800d300:	0801a284 	.word	0x0801a284

0800d304 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d109      	bne.n	800d326 <tcp_close+0x22>
 800d312:	4b0f      	ldr	r3, [pc, #60]	@ (800d350 <tcp_close+0x4c>)
 800d314:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d318:	490e      	ldr	r1, [pc, #56]	@ (800d354 <tcp_close+0x50>)
 800d31a:	480f      	ldr	r0, [pc, #60]	@ (800d358 <tcp_close+0x54>)
 800d31c:	f008 fe1a 	bl	8015f54 <iprintf>
 800d320:	f06f 030f 	mvn.w	r3, #15
 800d324:	e00f      	b.n	800d346 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	7d1b      	ldrb	r3, [r3, #20]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d006      	beq.n	800d33c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	8b5b      	ldrh	r3, [r3, #26]
 800d332:	f043 0310 	orr.w	r3, r3, #16
 800d336:	b29a      	uxth	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d33c:	2101      	movs	r1, #1
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff fe94 	bl	800d06c <tcp_close_shutdown>
 800d344:	4603      	mov	r3, r0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	0801a240 	.word	0x0801a240
 800d354:	0801a350 	.word	0x0801a350
 800d358:	0801a284 	.word	0x0801a284

0800d35c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b08e      	sub	sp, #56	@ 0x38
 800d360:	af04      	add	r7, sp, #16
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d107      	bne.n	800d37c <tcp_abandon+0x20>
 800d36c:	4b52      	ldr	r3, [pc, #328]	@ (800d4b8 <tcp_abandon+0x15c>)
 800d36e:	f240 223d 	movw	r2, #573	@ 0x23d
 800d372:	4952      	ldr	r1, [pc, #328]	@ (800d4bc <tcp_abandon+0x160>)
 800d374:	4852      	ldr	r0, [pc, #328]	@ (800d4c0 <tcp_abandon+0x164>)
 800d376:	f008 fded 	bl	8015f54 <iprintf>
 800d37a:	e099      	b.n	800d4b0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	7d1b      	ldrb	r3, [r3, #20]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d106      	bne.n	800d392 <tcp_abandon+0x36>
 800d384:	4b4c      	ldr	r3, [pc, #304]	@ (800d4b8 <tcp_abandon+0x15c>)
 800d386:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d38a:	494e      	ldr	r1, [pc, #312]	@ (800d4c4 <tcp_abandon+0x168>)
 800d38c:	484c      	ldr	r0, [pc, #304]	@ (800d4c0 <tcp_abandon+0x164>)
 800d38e:	f008 fde1 	bl	8015f54 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	7d1b      	ldrb	r3, [r3, #20]
 800d396:	2b0a      	cmp	r3, #10
 800d398:	d107      	bne.n	800d3aa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d39a:	6879      	ldr	r1, [r7, #4]
 800d39c:	484a      	ldr	r0, [pc, #296]	@ (800d4c8 <tcp_abandon+0x16c>)
 800d39e:	f000 ffc5 	bl	800e32c <tcp_pcb_remove>
    tcp_free(pcb);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f7ff fdb0 	bl	800cf08 <tcp_free>
 800d3a8:	e082      	b.n	800d4b0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3b6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3bc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3c4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	691b      	ldr	r3, [r3, #16]
 800d3ca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	7d1b      	ldrb	r3, [r3, #20]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d126      	bne.n	800d422 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	8adb      	ldrh	r3, [r3, #22]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d02e      	beq.n	800d43a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d3dc:	4b3b      	ldr	r3, [pc, #236]	@ (800d4cc <tcp_abandon+0x170>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d105      	bne.n	800d3f2 <tcp_abandon+0x96>
 800d3e6:	4b39      	ldr	r3, [pc, #228]	@ (800d4cc <tcp_abandon+0x170>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	4a37      	ldr	r2, [pc, #220]	@ (800d4cc <tcp_abandon+0x170>)
 800d3ee:	6013      	str	r3, [r2, #0]
 800d3f0:	e013      	b.n	800d41a <tcp_abandon+0xbe>
 800d3f2:	4b36      	ldr	r3, [pc, #216]	@ (800d4cc <tcp_abandon+0x170>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	61fb      	str	r3, [r7, #28]
 800d3f8:	e00c      	b.n	800d414 <tcp_abandon+0xb8>
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	429a      	cmp	r2, r3
 800d402:	d104      	bne.n	800d40e <tcp_abandon+0xb2>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	68da      	ldr	r2, [r3, #12]
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	60da      	str	r2, [r3, #12]
 800d40c:	e005      	b.n	800d41a <tcp_abandon+0xbe>
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	61fb      	str	r3, [r7, #28]
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1ef      	bne.n	800d3fa <tcp_abandon+0x9e>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	60da      	str	r2, [r3, #12]
 800d420:	e00b      	b.n	800d43a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	8adb      	ldrh	r3, [r3, #22]
 800d42a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d42c:	6879      	ldr	r1, [r7, #4]
 800d42e:	4828      	ldr	r0, [pc, #160]	@ (800d4d0 <tcp_abandon+0x174>)
 800d430:	f000 ff7c 	bl	800e32c <tcp_pcb_remove>
 800d434:	4b27      	ldr	r3, [pc, #156]	@ (800d4d4 <tcp_abandon+0x178>)
 800d436:	2201      	movs	r2, #1
 800d438:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d004      	beq.n	800d44c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d446:	4618      	mov	r0, r3
 800d448:	f000 fd1e 	bl	800de88 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d450:	2b00      	cmp	r3, #0
 800d452:	d004      	beq.n	800d45e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d458:	4618      	mov	r0, r3
 800d45a:	f000 fd15 	bl	800de88 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d462:	2b00      	cmp	r3, #0
 800d464:	d004      	beq.n	800d470 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d46a:	4618      	mov	r0, r3
 800d46c:	f000 fd0c 	bl	800de88 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00e      	beq.n	800d494 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d476:	6879      	ldr	r1, [r7, #4]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	3304      	adds	r3, #4
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	8b12      	ldrh	r2, [r2, #24]
 800d480:	9202      	str	r2, [sp, #8]
 800d482:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d484:	9201      	str	r2, [sp, #4]
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	460b      	mov	r3, r1
 800d48a:	697a      	ldr	r2, [r7, #20]
 800d48c:	69b9      	ldr	r1, [r7, #24]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f004 fcbe 	bl	8011e10 <tcp_rst>
    }
    last_state = pcb->state;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	7d1b      	ldrb	r3, [r3, #20]
 800d498:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7ff fd34 	bl	800cf08 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d004      	beq.n	800d4b0 <tcp_abandon+0x154>
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	f06f 010c 	mvn.w	r1, #12
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	4798      	blx	r3
  }
}
 800d4b0:	3728      	adds	r7, #40	@ 0x28
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	0801a240 	.word	0x0801a240
 800d4bc:	0801a384 	.word	0x0801a384
 800d4c0:	0801a284 	.word	0x0801a284
 800d4c4:	0801a3a0 	.word	0x0801a3a0
 800d4c8:	2400839c 	.word	0x2400839c
 800d4cc:	24008390 	.word	0x24008390
 800d4d0:	24008398 	.word	0x24008398
 800d4d4:	240083a0 	.word	0x240083a0

0800d4d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7ff ff3a 	bl	800d35c <tcp_abandon>
}
 800d4e8:	bf00      	nop
 800d4ea:	3708      	adds	r7, #8
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d106      	bne.n	800d50c <tcp_update_rcv_ann_wnd+0x1c>
 800d4fe:	4b25      	ldr	r3, [pc, #148]	@ (800d594 <tcp_update_rcv_ann_wnd+0xa4>)
 800d500:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d504:	4924      	ldr	r1, [pc, #144]	@ (800d598 <tcp_update_rcv_ann_wnd+0xa8>)
 800d506:	4825      	ldr	r0, [pc, #148]	@ (800d59c <tcp_update_rcv_ann_wnd+0xac>)
 800d508:	f008 fd24 	bl	8015f54 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d514:	4413      	add	r3, r2
 800d516:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800d520:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800d524:	bf28      	it	cs
 800d526:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800d52a:	b292      	uxth	r2, r2
 800d52c:	4413      	add	r3, r2
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	2b00      	cmp	r3, #0
 800d534:	db08      	blt.n	800d548 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	e020      	b.n	800d58a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d550:	1ad3      	subs	r3, r2, r3
 800d552:	2b00      	cmp	r3, #0
 800d554:	dd03      	ble.n	800d55e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d55c:	e014      	b.n	800d588 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d566:	1ad3      	subs	r3, r2, r3
 800d568:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d570:	d306      	bcc.n	800d580 <tcp_update_rcv_ann_wnd+0x90>
 800d572:	4b08      	ldr	r3, [pc, #32]	@ (800d594 <tcp_update_rcv_ann_wnd+0xa4>)
 800d574:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800d578:	4909      	ldr	r1, [pc, #36]	@ (800d5a0 <tcp_update_rcv_ann_wnd+0xb0>)
 800d57a:	4808      	ldr	r0, [pc, #32]	@ (800d59c <tcp_update_rcv_ann_wnd+0xac>)
 800d57c:	f008 fcea 	bl	8015f54 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	b29a      	uxth	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800d588:	2300      	movs	r3, #0
  }
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	0801a240 	.word	0x0801a240
 800d598:	0801a49c 	.word	0x0801a49c
 800d59c:	0801a284 	.word	0x0801a284
 800d5a0:	0801a4c0 	.word	0x0801a4c0

0800d5a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d107      	bne.n	800d5c6 <tcp_recved+0x22>
 800d5b6:	4b1f      	ldr	r3, [pc, #124]	@ (800d634 <tcp_recved+0x90>)
 800d5b8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800d5bc:	491e      	ldr	r1, [pc, #120]	@ (800d638 <tcp_recved+0x94>)
 800d5be:	481f      	ldr	r0, [pc, #124]	@ (800d63c <tcp_recved+0x98>)
 800d5c0:	f008 fcc8 	bl	8015f54 <iprintf>
 800d5c4:	e032      	b.n	800d62c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	7d1b      	ldrb	r3, [r3, #20]
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d106      	bne.n	800d5dc <tcp_recved+0x38>
 800d5ce:	4b19      	ldr	r3, [pc, #100]	@ (800d634 <tcp_recved+0x90>)
 800d5d0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800d5d4:	491a      	ldr	r1, [pc, #104]	@ (800d640 <tcp_recved+0x9c>)
 800d5d6:	4819      	ldr	r0, [pc, #100]	@ (800d63c <tcp_recved+0x98>)
 800d5d8:	f008 fcbc 	bl	8015f54 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d5e0:	887b      	ldrh	r3, [r7, #2]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d5e6:	89fb      	ldrh	r3, [r7, #14]
 800d5e8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d5ec:	d804      	bhi.n	800d5f8 <tcp_recved+0x54>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5f2:	89fa      	ldrh	r2, [r7, #14]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d204      	bcs.n	800d602 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d5fe:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d600:	e002      	b.n	800d608 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	89fa      	ldrh	r2, [r7, #14]
 800d606:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f7ff ff71 	bl	800d4f0 <tcp_update_rcv_ann_wnd>
 800d60e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d616:	d309      	bcc.n	800d62c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	8b5b      	ldrh	r3, [r3, #26]
 800d61c:	f043 0302 	orr.w	r3, r3, #2
 800d620:	b29a      	uxth	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f003 fe3e 	bl	80112a8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	0801a240 	.word	0x0801a240
 800d638:	0801a4dc 	.word	0x0801a4dc
 800d63c:	0801a284 	.word	0x0801a284
 800d640:	0801a4f4 	.word	0x0801a4f4

0800d644 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d644:	b5b0      	push	{r4, r5, r7, lr}
 800d646:	b090      	sub	sp, #64	@ 0x40
 800d648:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d64a:	2300      	movs	r3, #0
 800d64c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d650:	4b95      	ldr	r3, [pc, #596]	@ (800d8a8 <tcp_slowtmr+0x264>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	3301      	adds	r3, #1
 800d656:	4a94      	ldr	r2, [pc, #592]	@ (800d8a8 <tcp_slowtmr+0x264>)
 800d658:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d65a:	4b94      	ldr	r3, [pc, #592]	@ (800d8ac <tcp_slowtmr+0x268>)
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	3301      	adds	r3, #1
 800d660:	b2da      	uxtb	r2, r3
 800d662:	4b92      	ldr	r3, [pc, #584]	@ (800d8ac <tcp_slowtmr+0x268>)
 800d664:	701a      	strb	r2, [r3, #0]
 800d666:	e000      	b.n	800d66a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d668:	bf00      	nop
  prev = NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d66e:	4b90      	ldr	r3, [pc, #576]	@ (800d8b0 <tcp_slowtmr+0x26c>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d674:	e29d      	b.n	800dbb2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d678:	7d1b      	ldrb	r3, [r3, #20]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d106      	bne.n	800d68c <tcp_slowtmr+0x48>
 800d67e:	4b8d      	ldr	r3, [pc, #564]	@ (800d8b4 <tcp_slowtmr+0x270>)
 800d680:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d684:	498c      	ldr	r1, [pc, #560]	@ (800d8b8 <tcp_slowtmr+0x274>)
 800d686:	488d      	ldr	r0, [pc, #564]	@ (800d8bc <tcp_slowtmr+0x278>)
 800d688:	f008 fc64 	bl	8015f54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68e:	7d1b      	ldrb	r3, [r3, #20]
 800d690:	2b01      	cmp	r3, #1
 800d692:	d106      	bne.n	800d6a2 <tcp_slowtmr+0x5e>
 800d694:	4b87      	ldr	r3, [pc, #540]	@ (800d8b4 <tcp_slowtmr+0x270>)
 800d696:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d69a:	4989      	ldr	r1, [pc, #548]	@ (800d8c0 <tcp_slowtmr+0x27c>)
 800d69c:	4887      	ldr	r0, [pc, #540]	@ (800d8bc <tcp_slowtmr+0x278>)
 800d69e:	f008 fc59 	bl	8015f54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a4:	7d1b      	ldrb	r3, [r3, #20]
 800d6a6:	2b0a      	cmp	r3, #10
 800d6a8:	d106      	bne.n	800d6b8 <tcp_slowtmr+0x74>
 800d6aa:	4b82      	ldr	r3, [pc, #520]	@ (800d8b4 <tcp_slowtmr+0x270>)
 800d6ac:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d6b0:	4984      	ldr	r1, [pc, #528]	@ (800d8c4 <tcp_slowtmr+0x280>)
 800d6b2:	4882      	ldr	r0, [pc, #520]	@ (800d8bc <tcp_slowtmr+0x278>)
 800d6b4:	f008 fc4e 	bl	8015f54 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ba:	7f9a      	ldrb	r2, [r3, #30]
 800d6bc:	4b7b      	ldr	r3, [pc, #492]	@ (800d8ac <tcp_slowtmr+0x268>)
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d105      	bne.n	800d6d0 <tcp_slowtmr+0x8c>
      prev = pcb;
 800d6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d6ce:	e270      	b.n	800dbb2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800d6d0:	4b76      	ldr	r3, [pc, #472]	@ (800d8ac <tcp_slowtmr+0x268>)
 800d6d2:	781a      	ldrb	r2, [r3, #0]
 800d6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e6:	7d1b      	ldrb	r3, [r3, #20]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d10a      	bne.n	800d702 <tcp_slowtmr+0xbe>
 800d6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d6f2:	2b05      	cmp	r3, #5
 800d6f4:	d905      	bls.n	800d702 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d6f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d700:	e11e      	b.n	800d940 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d704:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d708:	2b0b      	cmp	r3, #11
 800d70a:	d905      	bls.n	800d718 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d70c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d710:	3301      	adds	r3, #1
 800d712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d716:	e113      	b.n	800d940 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d075      	beq.n	800d80e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d726:	2b00      	cmp	r3, #0
 800d728:	d006      	beq.n	800d738 <tcp_slowtmr+0xf4>
 800d72a:	4b62      	ldr	r3, [pc, #392]	@ (800d8b4 <tcp_slowtmr+0x270>)
 800d72c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800d730:	4965      	ldr	r1, [pc, #404]	@ (800d8c8 <tcp_slowtmr+0x284>)
 800d732:	4862      	ldr	r0, [pc, #392]	@ (800d8bc <tcp_slowtmr+0x278>)
 800d734:	f008 fc0e 	bl	8015f54 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d106      	bne.n	800d74e <tcp_slowtmr+0x10a>
 800d740:	4b5c      	ldr	r3, [pc, #368]	@ (800d8b4 <tcp_slowtmr+0x270>)
 800d742:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d746:	4961      	ldr	r1, [pc, #388]	@ (800d8cc <tcp_slowtmr+0x288>)
 800d748:	485c      	ldr	r0, [pc, #368]	@ (800d8bc <tcp_slowtmr+0x278>)
 800d74a:	f008 fc03 	bl	8015f54 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d750:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d754:	2b0b      	cmp	r3, #11
 800d756:	d905      	bls.n	800d764 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d75c:	3301      	adds	r3, #1
 800d75e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d762:	e0ed      	b.n	800d940 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d766:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d76a:	3b01      	subs	r3, #1
 800d76c:	4a58      	ldr	r2, [pc, #352]	@ (800d8d0 <tcp_slowtmr+0x28c>)
 800d76e:	5cd3      	ldrb	r3, [r2, r3]
 800d770:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d774:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d778:	7c7a      	ldrb	r2, [r7, #17]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d907      	bls.n	800d78e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d780:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d784:	3301      	adds	r3, #1
 800d786:	b2da      	uxtb	r2, r3
 800d788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d790:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d794:	7c7a      	ldrb	r2, [r7, #17]
 800d796:	429a      	cmp	r2, r3
 800d798:	f200 80d2 	bhi.w	800d940 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d79c:	2301      	movs	r3, #1
 800d79e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d108      	bne.n	800d7bc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d7aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7ac:	f004 fc24 	bl	8011ff8 <tcp_zero_window_probe>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d014      	beq.n	800d7e0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	623b      	str	r3, [r7, #32]
 800d7ba:	e011      	b.n	800d7e0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7c6:	f003 fae9 	bl	8010d9c <tcp_split_unsent_seg>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d107      	bne.n	800d7e0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d7d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7d2:	f003 fd69 	bl	80112a8 <tcp_output>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d101      	bne.n	800d7e0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d7e0:	6a3b      	ldr	r3, [r7, #32]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f000 80ac 	beq.w	800d940 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d7f6:	2b06      	cmp	r3, #6
 800d7f8:	f200 80a2 	bhi.w	800d940 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7fe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d802:	3301      	adds	r3, #1
 800d804:	b2da      	uxtb	r2, r3
 800d806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d808:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d80c:	e098      	b.n	800d940 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d810:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d814:	2b00      	cmp	r3, #0
 800d816:	db0f      	blt.n	800d838 <tcp_slowtmr+0x1f4>
 800d818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d81e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d822:	4293      	cmp	r3, r2
 800d824:	d008      	beq.n	800d838 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d828:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	3301      	adds	r3, #1
 800d830:	b29b      	uxth	r3, r3
 800d832:	b21a      	sxth	r2, r3
 800d834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d836:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d840:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d844:	429a      	cmp	r2, r3
 800d846:	db7b      	blt.n	800d940 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d848:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d84a:	f004 f821 	bl	8011890 <tcp_rexmit_rto_prepare>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d007      	beq.n	800d864 <tcp_slowtmr+0x220>
 800d854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d171      	bne.n	800d940 <tcp_slowtmr+0x2fc>
 800d85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d860:	2b00      	cmp	r3, #0
 800d862:	d06d      	beq.n	800d940 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d866:	7d1b      	ldrb	r3, [r3, #20]
 800d868:	2b02      	cmp	r3, #2
 800d86a:	d03a      	beq.n	800d8e2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d872:	2b0c      	cmp	r3, #12
 800d874:	bf28      	it	cs
 800d876:	230c      	movcs	r3, #12
 800d878:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d880:	10db      	asrs	r3, r3, #3
 800d882:	b21b      	sxth	r3, r3
 800d884:	461a      	mov	r2, r3
 800d886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d888:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d88c:	4413      	add	r3, r2
 800d88e:	7efa      	ldrb	r2, [r7, #27]
 800d890:	4910      	ldr	r1, [pc, #64]	@ (800d8d4 <tcp_slowtmr+0x290>)
 800d892:	5c8a      	ldrb	r2, [r1, r2]
 800d894:	4093      	lsls	r3, r2
 800d896:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	dc1a      	bgt.n	800d8d8 <tcp_slowtmr+0x294>
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	b21a      	sxth	r2, r3
 800d8a6:	e019      	b.n	800d8dc <tcp_slowtmr+0x298>
 800d8a8:	2400838c 	.word	0x2400838c
 800d8ac:	240083a2 	.word	0x240083a2
 800d8b0:	24008398 	.word	0x24008398
 800d8b4:	0801a240 	.word	0x0801a240
 800d8b8:	0801a584 	.word	0x0801a584
 800d8bc:	0801a284 	.word	0x0801a284
 800d8c0:	0801a5b0 	.word	0x0801a5b0
 800d8c4:	0801a5dc 	.word	0x0801a5dc
 800d8c8:	0801a60c 	.word	0x0801a60c
 800d8cc:	0801a640 	.word	0x0801a640
 800d8d0:	0801c2f8 	.word	0x0801c2f8
 800d8d4:	0801c2e8 	.word	0x0801c2e8
 800d8d8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	bf28      	it	cs
 800d8f8:	4613      	movcs	r3, r2
 800d8fa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d8fc:	8a7b      	ldrh	r3, [r7, #18]
 800d8fe:	085b      	lsrs	r3, r3, #1
 800d900:	b29a      	uxth	r2, r3
 800d902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d904:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d910:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	b29b      	uxth	r3, r3
 800d916:	429a      	cmp	r2, r3
 800d918:	d206      	bcs.n	800d928 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d91e:	005b      	lsls	r3, r3, #1
 800d920:	b29a      	uxth	r2, r3
 800d922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d924:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d934:	2200      	movs	r2, #0
 800d936:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d93a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d93c:	f004 f818 	bl	8011970 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d942:	7d1b      	ldrb	r3, [r3, #20]
 800d944:	2b06      	cmp	r3, #6
 800d946:	d111      	bne.n	800d96c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d94a:	8b5b      	ldrh	r3, [r3, #26]
 800d94c:	f003 0310 	and.w	r3, r3, #16
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00b      	beq.n	800d96c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d954:	4b9c      	ldr	r3, [pc, #624]	@ (800dbc8 <tcp_slowtmr+0x584>)
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95a:	6a1b      	ldr	r3, [r3, #32]
 800d95c:	1ad3      	subs	r3, r2, r3
 800d95e:	2b28      	cmp	r3, #40	@ 0x28
 800d960:	d904      	bls.n	800d96c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d966:	3301      	adds	r3, #1
 800d968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d96e:	7a5b      	ldrb	r3, [r3, #9]
 800d970:	f003 0308 	and.w	r3, r3, #8
 800d974:	2b00      	cmp	r3, #0
 800d976:	d04a      	beq.n	800da0e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d97a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d97c:	2b04      	cmp	r3, #4
 800d97e:	d003      	beq.n	800d988 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d982:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d984:	2b07      	cmp	r3, #7
 800d986:	d142      	bne.n	800da0e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d988:	4b8f      	ldr	r3, [pc, #572]	@ (800dbc8 <tcp_slowtmr+0x584>)
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d98e:	6a1b      	ldr	r3, [r3, #32]
 800d990:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d994:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d998:	4b8c      	ldr	r3, [pc, #560]	@ (800dbcc <tcp_slowtmr+0x588>)
 800d99a:	440b      	add	r3, r1
 800d99c:	498c      	ldr	r1, [pc, #560]	@ (800dbd0 <tcp_slowtmr+0x58c>)
 800d99e:	fba1 1303 	umull	r1, r3, r1, r3
 800d9a2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d90a      	bls.n	800d9be <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800d9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d9b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d9bc:	e027      	b.n	800da0e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9be:	4b82      	ldr	r3, [pc, #520]	@ (800dbc8 <tcp_slowtmr+0x584>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c4:	6a1b      	ldr	r3, [r3, #32]
 800d9c6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ca:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	4b7f      	ldr	r3, [pc, #508]	@ (800dbd4 <tcp_slowtmr+0x590>)
 800d9d8:	fb00 f303 	mul.w	r3, r0, r3
 800d9dc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d9de:	497c      	ldr	r1, [pc, #496]	@ (800dbd0 <tcp_slowtmr+0x58c>)
 800d9e0:	fba1 1303 	umull	r1, r3, r1, r3
 800d9e4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d911      	bls.n	800da0e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d9ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9ec:	f004 fac4 	bl	8011f78 <tcp_keepalive>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d9f6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d107      	bne.n	800da0e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da00:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800da04:	3301      	adds	r3, #1
 800da06:	b2da      	uxtb	r2, r3
 800da08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800da0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da12:	2b00      	cmp	r3, #0
 800da14:	d011      	beq.n	800da3a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800da16:	4b6c      	ldr	r3, [pc, #432]	@ (800dbc8 <tcp_slowtmr+0x584>)
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	1ad2      	subs	r2, r2, r3
 800da20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da22:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800da26:	4619      	mov	r1, r3
 800da28:	460b      	mov	r3, r1
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	440b      	add	r3, r1
 800da2e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800da30:	429a      	cmp	r2, r3
 800da32:	d302      	bcc.n	800da3a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800da34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da36:	f000 fddd 	bl	800e5f4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800da3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da3c:	7d1b      	ldrb	r3, [r3, #20]
 800da3e:	2b03      	cmp	r3, #3
 800da40:	d10b      	bne.n	800da5a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da42:	4b61      	ldr	r3, [pc, #388]	@ (800dbc8 <tcp_slowtmr+0x584>)
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da48:	6a1b      	ldr	r3, [r3, #32]
 800da4a:	1ad3      	subs	r3, r2, r3
 800da4c:	2b28      	cmp	r3, #40	@ 0x28
 800da4e:	d904      	bls.n	800da5a <tcp_slowtmr+0x416>
        ++pcb_remove;
 800da50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da54:	3301      	adds	r3, #1
 800da56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800da5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da5c:	7d1b      	ldrb	r3, [r3, #20]
 800da5e:	2b09      	cmp	r3, #9
 800da60:	d10b      	bne.n	800da7a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800da62:	4b59      	ldr	r3, [pc, #356]	@ (800dbc8 <tcp_slowtmr+0x584>)
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	2bf0      	cmp	r3, #240	@ 0xf0
 800da6e:	d904      	bls.n	800da7a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800da70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da74:	3301      	adds	r3, #1
 800da76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800da7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d060      	beq.n	800db44 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800da82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da88:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800da8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da8c:	f000 fbfe 	bl	800e28c <tcp_pcb_purge>
      if (prev != NULL) {
 800da90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da92:	2b00      	cmp	r3, #0
 800da94:	d010      	beq.n	800dab8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800da96:	4b50      	ldr	r3, [pc, #320]	@ (800dbd8 <tcp_slowtmr+0x594>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d106      	bne.n	800daae <tcp_slowtmr+0x46a>
 800daa0:	4b4e      	ldr	r3, [pc, #312]	@ (800dbdc <tcp_slowtmr+0x598>)
 800daa2:	f240 526d 	movw	r2, #1389	@ 0x56d
 800daa6:	494e      	ldr	r1, [pc, #312]	@ (800dbe0 <tcp_slowtmr+0x59c>)
 800daa8:	484e      	ldr	r0, [pc, #312]	@ (800dbe4 <tcp_slowtmr+0x5a0>)
 800daaa:	f008 fa53 	bl	8015f54 <iprintf>
        prev->next = pcb->next;
 800daae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab0:	68da      	ldr	r2, [r3, #12]
 800dab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab4:	60da      	str	r2, [r3, #12]
 800dab6:	e00f      	b.n	800dad8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800dab8:	4b47      	ldr	r3, [pc, #284]	@ (800dbd8 <tcp_slowtmr+0x594>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d006      	beq.n	800dad0 <tcp_slowtmr+0x48c>
 800dac2:	4b46      	ldr	r3, [pc, #280]	@ (800dbdc <tcp_slowtmr+0x598>)
 800dac4:	f240 5271 	movw	r2, #1393	@ 0x571
 800dac8:	4947      	ldr	r1, [pc, #284]	@ (800dbe8 <tcp_slowtmr+0x5a4>)
 800daca:	4846      	ldr	r0, [pc, #280]	@ (800dbe4 <tcp_slowtmr+0x5a0>)
 800dacc:	f008 fa42 	bl	8015f54 <iprintf>
        tcp_active_pcbs = pcb->next;
 800dad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	4a40      	ldr	r2, [pc, #256]	@ (800dbd8 <tcp_slowtmr+0x594>)
 800dad6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800dad8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d013      	beq.n	800db08 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800dae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800dae8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800daea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daec:	3304      	adds	r3, #4
 800daee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800daf0:	8ad2      	ldrh	r2, [r2, #22]
 800daf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800daf4:	8b09      	ldrh	r1, [r1, #24]
 800daf6:	9102      	str	r1, [sp, #8]
 800daf8:	9201      	str	r2, [sp, #4]
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	462b      	mov	r3, r5
 800dafe:	4622      	mov	r2, r4
 800db00:	4601      	mov	r1, r0
 800db02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db04:	f004 f984 	bl	8011e10 <tcp_rst>
      err_arg = pcb->callback_arg;
 800db08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0a:	691b      	ldr	r3, [r3, #16]
 800db0c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800db0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db10:	7d1b      	ldrb	r3, [r3, #20]
 800db12:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800db14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db16:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800db18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800db1e:	6838      	ldr	r0, [r7, #0]
 800db20:	f7ff f9f2 	bl	800cf08 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800db24:	4b31      	ldr	r3, [pc, #196]	@ (800dbec <tcp_slowtmr+0x5a8>)
 800db26:	2200      	movs	r2, #0
 800db28:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d004      	beq.n	800db3a <tcp_slowtmr+0x4f6>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f06f 010c 	mvn.w	r1, #12
 800db36:	68b8      	ldr	r0, [r7, #8]
 800db38:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800db3a:	4b2c      	ldr	r3, [pc, #176]	@ (800dbec <tcp_slowtmr+0x5a8>)
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d037      	beq.n	800dbb2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800db42:	e592      	b.n	800d66a <tcp_slowtmr+0x26>
      prev = pcb;
 800db44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db46:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800db48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800db4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db50:	7f1b      	ldrb	r3, [r3, #28]
 800db52:	3301      	adds	r3, #1
 800db54:	b2da      	uxtb	r2, r3
 800db56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db58:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800db5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db5c:	7f1a      	ldrb	r2, [r3, #28]
 800db5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db60:	7f5b      	ldrb	r3, [r3, #29]
 800db62:	429a      	cmp	r2, r3
 800db64:	d325      	bcc.n	800dbb2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800db66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db68:	2200      	movs	r2, #0
 800db6a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800db6c:	4b1f      	ldr	r3, [pc, #124]	@ (800dbec <tcp_slowtmr+0x5a8>)
 800db6e:	2200      	movs	r2, #0
 800db70:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800db72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00b      	beq.n	800db94 <tcp_slowtmr+0x550>
 800db7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800db82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db84:	6912      	ldr	r2, [r2, #16]
 800db86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db88:	4610      	mov	r0, r2
 800db8a:	4798      	blx	r3
 800db8c:	4603      	mov	r3, r0
 800db8e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800db92:	e002      	b.n	800db9a <tcp_slowtmr+0x556>
 800db94:	2300      	movs	r3, #0
 800db96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800db9a:	4b14      	ldr	r3, [pc, #80]	@ (800dbec <tcp_slowtmr+0x5a8>)
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f47f ad62 	bne.w	800d668 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800dba4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d102      	bne.n	800dbb2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800dbac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbae:	f003 fb7b 	bl	80112a8 <tcp_output>
  while (pcb != NULL) {
 800dbb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f47f ad5e 	bne.w	800d676 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800dbbe:	4b0c      	ldr	r3, [pc, #48]	@ (800dbf0 <tcp_slowtmr+0x5ac>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800dbc4:	e069      	b.n	800dc9a <tcp_slowtmr+0x656>
 800dbc6:	bf00      	nop
 800dbc8:	2400838c 	.word	0x2400838c
 800dbcc:	000a4cb8 	.word	0x000a4cb8
 800dbd0:	10624dd3 	.word	0x10624dd3
 800dbd4:	000124f8 	.word	0x000124f8
 800dbd8:	24008398 	.word	0x24008398
 800dbdc:	0801a240 	.word	0x0801a240
 800dbe0:	0801a678 	.word	0x0801a678
 800dbe4:	0801a284 	.word	0x0801a284
 800dbe8:	0801a6a4 	.word	0x0801a6a4
 800dbec:	240083a0 	.word	0x240083a0
 800dbf0:	2400839c 	.word	0x2400839c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf6:	7d1b      	ldrb	r3, [r3, #20]
 800dbf8:	2b0a      	cmp	r3, #10
 800dbfa:	d006      	beq.n	800dc0a <tcp_slowtmr+0x5c6>
 800dbfc:	4b2b      	ldr	r3, [pc, #172]	@ (800dcac <tcp_slowtmr+0x668>)
 800dbfe:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800dc02:	492b      	ldr	r1, [pc, #172]	@ (800dcb0 <tcp_slowtmr+0x66c>)
 800dc04:	482b      	ldr	r0, [pc, #172]	@ (800dcb4 <tcp_slowtmr+0x670>)
 800dc06:	f008 f9a5 	bl	8015f54 <iprintf>
    pcb_remove = 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dc10:	4b29      	ldr	r3, [pc, #164]	@ (800dcb8 <tcp_slowtmr+0x674>)
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc16:	6a1b      	ldr	r3, [r3, #32]
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	2bf0      	cmp	r3, #240	@ 0xf0
 800dc1c:	d904      	bls.n	800dc28 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800dc1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc22:	3301      	adds	r3, #1
 800dc24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dc28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d02f      	beq.n	800dc90 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dc30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc32:	f000 fb2b 	bl	800e28c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d010      	beq.n	800dc5e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dc3c:	4b1f      	ldr	r3, [pc, #124]	@ (800dcbc <tcp_slowtmr+0x678>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d106      	bne.n	800dc54 <tcp_slowtmr+0x610>
 800dc46:	4b19      	ldr	r3, [pc, #100]	@ (800dcac <tcp_slowtmr+0x668>)
 800dc48:	f240 52af 	movw	r2, #1455	@ 0x5af
 800dc4c:	491c      	ldr	r1, [pc, #112]	@ (800dcc0 <tcp_slowtmr+0x67c>)
 800dc4e:	4819      	ldr	r0, [pc, #100]	@ (800dcb4 <tcp_slowtmr+0x670>)
 800dc50:	f008 f980 	bl	8015f54 <iprintf>
        prev->next = pcb->next;
 800dc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc56:	68da      	ldr	r2, [r3, #12]
 800dc58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc5a:	60da      	str	r2, [r3, #12]
 800dc5c:	e00f      	b.n	800dc7e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dc5e:	4b17      	ldr	r3, [pc, #92]	@ (800dcbc <tcp_slowtmr+0x678>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d006      	beq.n	800dc76 <tcp_slowtmr+0x632>
 800dc68:	4b10      	ldr	r3, [pc, #64]	@ (800dcac <tcp_slowtmr+0x668>)
 800dc6a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800dc6e:	4915      	ldr	r1, [pc, #84]	@ (800dcc4 <tcp_slowtmr+0x680>)
 800dc70:	4810      	ldr	r0, [pc, #64]	@ (800dcb4 <tcp_slowtmr+0x670>)
 800dc72:	f008 f96f 	bl	8015f54 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	4a10      	ldr	r2, [pc, #64]	@ (800dcbc <tcp_slowtmr+0x678>)
 800dc7c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc80:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800dc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800dc88:	69f8      	ldr	r0, [r7, #28]
 800dc8a:	f7ff f93d 	bl	800cf08 <tcp_free>
 800dc8e:	e004      	b.n	800dc9a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800dc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc92:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800dc94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800dc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1a9      	bne.n	800dbf4 <tcp_slowtmr+0x5b0>
    }
  }
}
 800dca0:	bf00      	nop
 800dca2:	bf00      	nop
 800dca4:	3730      	adds	r7, #48	@ 0x30
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bdb0      	pop	{r4, r5, r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	0801a240 	.word	0x0801a240
 800dcb0:	0801a6d0 	.word	0x0801a6d0
 800dcb4:	0801a284 	.word	0x0801a284
 800dcb8:	2400838c 	.word	0x2400838c
 800dcbc:	2400839c 	.word	0x2400839c
 800dcc0:	0801a700 	.word	0x0801a700
 800dcc4:	0801a728 	.word	0x0801a728

0800dcc8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dcce:	4b2d      	ldr	r3, [pc, #180]	@ (800dd84 <tcp_fasttmr+0xbc>)
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	4b2b      	ldr	r3, [pc, #172]	@ (800dd84 <tcp_fasttmr+0xbc>)
 800dcd8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dcda:	4b2b      	ldr	r3, [pc, #172]	@ (800dd88 <tcp_fasttmr+0xc0>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dce0:	e048      	b.n	800dd74 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	7f9a      	ldrb	r2, [r3, #30]
 800dce6:	4b27      	ldr	r3, [pc, #156]	@ (800dd84 <tcp_fasttmr+0xbc>)
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d03f      	beq.n	800dd6e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dcee:	4b25      	ldr	r3, [pc, #148]	@ (800dd84 <tcp_fasttmr+0xbc>)
 800dcf0:	781a      	ldrb	r2, [r3, #0]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	8b5b      	ldrh	r3, [r3, #26]
 800dcfa:	f003 0301 	and.w	r3, r3, #1
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d010      	beq.n	800dd24 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	8b5b      	ldrh	r3, [r3, #26]
 800dd06:	f043 0302 	orr.w	r3, r3, #2
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f003 fac9 	bl	80112a8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	8b5b      	ldrh	r3, [r3, #26]
 800dd1a:	f023 0303 	bic.w	r3, r3, #3
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	8b5b      	ldrh	r3, [r3, #26]
 800dd28:	f003 0308 	and.w	r3, r3, #8
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d009      	beq.n	800dd44 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	8b5b      	ldrh	r3, [r3, #26]
 800dd34:	f023 0308 	bic.w	r3, r3, #8
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7ff fa76 	bl	800d230 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00a      	beq.n	800dd68 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dd52:	4b0e      	ldr	r3, [pc, #56]	@ (800dd8c <tcp_fasttmr+0xc4>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 f819 	bl	800dd90 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dd5e:	4b0b      	ldr	r3, [pc, #44]	@ (800dd8c <tcp_fasttmr+0xc4>)
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d000      	beq.n	800dd68 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dd66:	e7b8      	b.n	800dcda <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	607b      	str	r3, [r7, #4]
 800dd6c:	e002      	b.n	800dd74 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d1b3      	bne.n	800dce2 <tcp_fasttmr+0x1a>
    }
  }
}
 800dd7a:	bf00      	nop
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	240083a2 	.word	0x240083a2
 800dd88:	24008398 	.word	0x24008398
 800dd8c:	240083a0 	.word	0x240083a0

0800dd90 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dd90:	b590      	push	{r4, r7, lr}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d109      	bne.n	800ddb2 <tcp_process_refused_data+0x22>
 800dd9e:	4b37      	ldr	r3, [pc, #220]	@ (800de7c <tcp_process_refused_data+0xec>)
 800dda0:	f240 6209 	movw	r2, #1545	@ 0x609
 800dda4:	4936      	ldr	r1, [pc, #216]	@ (800de80 <tcp_process_refused_data+0xf0>)
 800dda6:	4837      	ldr	r0, [pc, #220]	@ (800de84 <tcp_process_refused_data+0xf4>)
 800dda8:	f008 f8d4 	bl	8015f54 <iprintf>
 800ddac:	f06f 030f 	mvn.w	r3, #15
 800ddb0:	e060      	b.n	800de74 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ddb6:	7b5b      	ldrb	r3, [r3, #13]
 800ddb8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ddbe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00b      	beq.n	800dde8 <tcp_process_refused_data+0x58>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6918      	ldr	r0, [r3, #16]
 800ddda:	2300      	movs	r3, #0
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	6879      	ldr	r1, [r7, #4]
 800dde0:	47a0      	blx	r4
 800dde2:	4603      	mov	r3, r0
 800dde4:	73fb      	strb	r3, [r7, #15]
 800dde6:	e007      	b.n	800ddf8 <tcp_process_refused_data+0x68>
 800dde8:	2300      	movs	r3, #0
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	6879      	ldr	r1, [r7, #4]
 800ddee:	2000      	movs	r0, #0
 800ddf0:	f000 f8a4 	bl	800df3c <tcp_recv_null>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ddf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d12a      	bne.n	800de56 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800de00:	7bbb      	ldrb	r3, [r7, #14]
 800de02:	f003 0320 	and.w	r3, r3, #32
 800de06:	2b00      	cmp	r3, #0
 800de08:	d033      	beq.n	800de72 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de0e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800de12:	d005      	beq.n	800de20 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de18:	3301      	adds	r3, #1
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00b      	beq.n	800de42 <tcp_process_refused_data+0xb2>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6918      	ldr	r0, [r3, #16]
 800de34:	2300      	movs	r3, #0
 800de36:	2200      	movs	r2, #0
 800de38:	6879      	ldr	r1, [r7, #4]
 800de3a:	47a0      	blx	r4
 800de3c:	4603      	mov	r3, r0
 800de3e:	73fb      	strb	r3, [r7, #15]
 800de40:	e001      	b.n	800de46 <tcp_process_refused_data+0xb6>
 800de42:	2300      	movs	r3, #0
 800de44:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800de46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de4a:	f113 0f0d 	cmn.w	r3, #13
 800de4e:	d110      	bne.n	800de72 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800de50:	f06f 030c 	mvn.w	r3, #12
 800de54:	e00e      	b.n	800de74 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800de56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de5a:	f113 0f0d 	cmn.w	r3, #13
 800de5e:	d102      	bne.n	800de66 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800de60:	f06f 030c 	mvn.w	r3, #12
 800de64:	e006      	b.n	800de74 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68ba      	ldr	r2, [r7, #8]
 800de6a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800de6c:	f06f 0304 	mvn.w	r3, #4
 800de70:	e000      	b.n	800de74 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3714      	adds	r7, #20
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd90      	pop	{r4, r7, pc}
 800de7c:	0801a240 	.word	0x0801a240
 800de80:	0801a750 	.word	0x0801a750
 800de84:	0801a284 	.word	0x0801a284

0800de88 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800de90:	e007      	b.n	800dea2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 f80a 	bl	800deb2 <tcp_seg_free>
    seg = next;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1f4      	bne.n	800de92 <tcp_segs_free+0xa>
  }
}
 800dea8:	bf00      	nop
 800deaa:	bf00      	nop
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b082      	sub	sp, #8
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00c      	beq.n	800deda <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d004      	beq.n	800ded2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	4618      	mov	r0, r3
 800dece:	f7fe fd7b 	bl	800c9c8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ded2:	6879      	ldr	r1, [r7, #4]
 800ded4:	2003      	movs	r0, #3
 800ded6:	f7fd ff01 	bl	800bcdc <memp_free>
  }
}
 800deda:	bf00      	nop
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
	...

0800dee4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d106      	bne.n	800df00 <tcp_seg_copy+0x1c>
 800def2:	4b0f      	ldr	r3, [pc, #60]	@ (800df30 <tcp_seg_copy+0x4c>)
 800def4:	f240 6282 	movw	r2, #1666	@ 0x682
 800def8:	490e      	ldr	r1, [pc, #56]	@ (800df34 <tcp_seg_copy+0x50>)
 800defa:	480f      	ldr	r0, [pc, #60]	@ (800df38 <tcp_seg_copy+0x54>)
 800defc:	f008 f82a 	bl	8015f54 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800df00:	2003      	movs	r0, #3
 800df02:	f7fd fe7b 	bl	800bbfc <memp_malloc>
 800df06:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d101      	bne.n	800df12 <tcp_seg_copy+0x2e>
    return NULL;
 800df0e:	2300      	movs	r3, #0
 800df10:	e00a      	b.n	800df28 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800df12:	2210      	movs	r2, #16
 800df14:	6879      	ldr	r1, [r7, #4]
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	f008 fa41 	bl	801639e <memcpy>
  pbuf_ref(cseg->p);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe fdf1 	bl	800cb08 <pbuf_ref>
  return cseg;
 800df26:	68fb      	ldr	r3, [r7, #12]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3710      	adds	r7, #16
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	0801a240 	.word	0x0801a240
 800df34:	0801a794 	.word	0x0801a794
 800df38:	0801a284 	.word	0x0801a284

0800df3c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
 800df48:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d109      	bne.n	800df64 <tcp_recv_null+0x28>
 800df50:	4b12      	ldr	r3, [pc, #72]	@ (800df9c <tcp_recv_null+0x60>)
 800df52:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800df56:	4912      	ldr	r1, [pc, #72]	@ (800dfa0 <tcp_recv_null+0x64>)
 800df58:	4812      	ldr	r0, [pc, #72]	@ (800dfa4 <tcp_recv_null+0x68>)
 800df5a:	f007 fffb 	bl	8015f54 <iprintf>
 800df5e:	f06f 030f 	mvn.w	r3, #15
 800df62:	e016      	b.n	800df92 <tcp_recv_null+0x56>

  if (p != NULL) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d009      	beq.n	800df7e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	891b      	ldrh	r3, [r3, #8]
 800df6e:	4619      	mov	r1, r3
 800df70:	68b8      	ldr	r0, [r7, #8]
 800df72:	f7ff fb17 	bl	800d5a4 <tcp_recved>
    pbuf_free(p);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7fe fd26 	bl	800c9c8 <pbuf_free>
 800df7c:	e008      	b.n	800df90 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800df7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d104      	bne.n	800df90 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800df86:	68b8      	ldr	r0, [r7, #8]
 800df88:	f7ff f9bc 	bl	800d304 <tcp_close>
 800df8c:	4603      	mov	r3, r0
 800df8e:	e000      	b.n	800df92 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800df90:	2300      	movs	r3, #0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	0801a240 	.word	0x0801a240
 800dfa0:	0801a7b0 	.word	0x0801a7b0
 800dfa4:	0801a284 	.word	0x0801a284

0800dfa8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	4603      	mov	r3, r0
 800dfb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dfb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	db01      	blt.n	800dfbe <tcp_kill_prio+0x16>
 800dfba:	79fb      	ldrb	r3, [r7, #7]
 800dfbc:	e000      	b.n	800dfc0 <tcp_kill_prio+0x18>
 800dfbe:	237f      	movs	r3, #127	@ 0x7f
 800dfc0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dfc2:	7afb      	ldrb	r3, [r7, #11]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d034      	beq.n	800e032 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dfc8:	7afb      	ldrb	r3, [r7, #11]
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfd6:	4b19      	ldr	r3, [pc, #100]	@ (800e03c <tcp_kill_prio+0x94>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	617b      	str	r3, [r7, #20]
 800dfdc:	e01f      	b.n	800e01e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	7d5b      	ldrb	r3, [r3, #21]
 800dfe2:	7afa      	ldrb	r2, [r7, #11]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d80c      	bhi.n	800e002 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dfec:	7afa      	ldrb	r2, [r7, #11]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d112      	bne.n	800e018 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dff2:	4b13      	ldr	r3, [pc, #76]	@ (800e040 <tcp_kill_prio+0x98>)
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	6a1b      	ldr	r3, [r3, #32]
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d80a      	bhi.n	800e018 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e002:	4b0f      	ldr	r3, [pc, #60]	@ (800e040 <tcp_kill_prio+0x98>)
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	6a1b      	ldr	r3, [r3, #32]
 800e00a:	1ad3      	subs	r3, r2, r3
 800e00c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	7d5b      	ldrb	r3, [r3, #21]
 800e016:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	617b      	str	r3, [r7, #20]
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d1dc      	bne.n	800dfde <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d004      	beq.n	800e034 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e02a:	6938      	ldr	r0, [r7, #16]
 800e02c:	f7ff fa54 	bl	800d4d8 <tcp_abort>
 800e030:	e000      	b.n	800e034 <tcp_kill_prio+0x8c>
    return;
 800e032:	bf00      	nop
  }
}
 800e034:	3718      	adds	r7, #24
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	24008398 	.word	0x24008398
 800e040:	2400838c 	.word	0x2400838c

0800e044 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e04e:	79fb      	ldrb	r3, [r7, #7]
 800e050:	2b08      	cmp	r3, #8
 800e052:	d009      	beq.n	800e068 <tcp_kill_state+0x24>
 800e054:	79fb      	ldrb	r3, [r7, #7]
 800e056:	2b09      	cmp	r3, #9
 800e058:	d006      	beq.n	800e068 <tcp_kill_state+0x24>
 800e05a:	4b1a      	ldr	r3, [pc, #104]	@ (800e0c4 <tcp_kill_state+0x80>)
 800e05c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e060:	4919      	ldr	r1, [pc, #100]	@ (800e0c8 <tcp_kill_state+0x84>)
 800e062:	481a      	ldr	r0, [pc, #104]	@ (800e0cc <tcp_kill_state+0x88>)
 800e064:	f007 ff76 	bl	8015f54 <iprintf>

  inactivity = 0;
 800e068:	2300      	movs	r3, #0
 800e06a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e06c:	2300      	movs	r3, #0
 800e06e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e070:	4b17      	ldr	r3, [pc, #92]	@ (800e0d0 <tcp_kill_state+0x8c>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	617b      	str	r3, [r7, #20]
 800e076:	e017      	b.n	800e0a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	7d1b      	ldrb	r3, [r3, #20]
 800e07c:	79fa      	ldrb	r2, [r7, #7]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d10f      	bne.n	800e0a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e082:	4b14      	ldr	r3, [pc, #80]	@ (800e0d4 <tcp_kill_state+0x90>)
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	6a1b      	ldr	r3, [r3, #32]
 800e08a:	1ad3      	subs	r3, r2, r3
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d807      	bhi.n	800e0a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e092:	4b10      	ldr	r3, [pc, #64]	@ (800e0d4 <tcp_kill_state+0x90>)
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	6a1b      	ldr	r3, [r3, #32]
 800e09a:	1ad3      	subs	r3, r2, r3
 800e09c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	617b      	str	r3, [r7, #20]
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1e4      	bne.n	800e078 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d003      	beq.n	800e0bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	6938      	ldr	r0, [r7, #16]
 800e0b8:	f7ff f950 	bl	800d35c <tcp_abandon>
  }
}
 800e0bc:	bf00      	nop
 800e0be:	3718      	adds	r7, #24
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	0801a240 	.word	0x0801a240
 800e0c8:	0801a7cc 	.word	0x0801a7cc
 800e0cc:	0801a284 	.word	0x0801a284
 800e0d0:	24008398 	.word	0x24008398
 800e0d4:	2400838c 	.word	0x2400838c

0800e0d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0e6:	4b12      	ldr	r3, [pc, #72]	@ (800e130 <tcp_kill_timewait+0x58>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	60fb      	str	r3, [r7, #12]
 800e0ec:	e012      	b.n	800e114 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e0ee:	4b11      	ldr	r3, [pc, #68]	@ (800e134 <tcp_kill_timewait+0x5c>)
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	6a1b      	ldr	r3, [r3, #32]
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d807      	bhi.n	800e10e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e134 <tcp_kill_timewait+0x5c>)
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6a1b      	ldr	r3, [r3, #32]
 800e106:	1ad3      	subs	r3, r2, r3
 800e108:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1e9      	bne.n	800e0ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d002      	beq.n	800e126 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e120:	68b8      	ldr	r0, [r7, #8]
 800e122:	f7ff f9d9 	bl	800d4d8 <tcp_abort>
  }
}
 800e126:	bf00      	nop
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	2400839c 	.word	0x2400839c
 800e134:	2400838c 	.word	0x2400838c

0800e138 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e13e:	4b10      	ldr	r3, [pc, #64]	@ (800e180 <tcp_handle_closepend+0x48>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e144:	e014      	b.n	800e170 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	8b5b      	ldrh	r3, [r3, #26]
 800e150:	f003 0308 	and.w	r3, r3, #8
 800e154:	2b00      	cmp	r3, #0
 800e156:	d009      	beq.n	800e16c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	8b5b      	ldrh	r3, [r3, #26]
 800e15c:	f023 0308 	bic.w	r3, r3, #8
 800e160:	b29a      	uxth	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7ff f862 	bl	800d230 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1e7      	bne.n	800e146 <tcp_handle_closepend+0xe>
  }
}
 800e176:	bf00      	nop
 800e178:	bf00      	nop
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	24008398 	.word	0x24008398

0800e184 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	4603      	mov	r3, r0
 800e18c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e18e:	2001      	movs	r0, #1
 800e190:	f7fd fd34 	bl	800bbfc <memp_malloc>
 800e194:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d126      	bne.n	800e1ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e19c:	f7ff ffcc 	bl	800e138 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e1a0:	f7ff ff9a 	bl	800e0d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e1a4:	2001      	movs	r0, #1
 800e1a6:	f7fd fd29 	bl	800bbfc <memp_malloc>
 800e1aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d11b      	bne.n	800e1ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e1b2:	2009      	movs	r0, #9
 800e1b4:	f7ff ff46 	bl	800e044 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e1b8:	2001      	movs	r0, #1
 800e1ba:	f7fd fd1f 	bl	800bbfc <memp_malloc>
 800e1be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d111      	bne.n	800e1ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e1c6:	2008      	movs	r0, #8
 800e1c8:	f7ff ff3c 	bl	800e044 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e1cc:	2001      	movs	r0, #1
 800e1ce:	f7fd fd15 	bl	800bbfc <memp_malloc>
 800e1d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d107      	bne.n	800e1ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff fee3 	bl	800dfa8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e1e2:	2001      	movs	r0, #1
 800e1e4:	f7fd fd0a 	bl	800bbfc <memp_malloc>
 800e1e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d03f      	beq.n	800e270 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e1f0:	229c      	movs	r2, #156	@ 0x9c
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f008 f841 	bl	801627c <memset>
    pcb->prio = prio;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	79fa      	ldrb	r2, [r7, #7]
 800e1fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e206:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e210:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	22ff      	movs	r2, #255	@ 0xff
 800e21e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e226:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2206      	movs	r2, #6
 800e22c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2206      	movs	r2, #6
 800e234:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e23c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2201      	movs	r2, #1
 800e242:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800e246:	4b0d      	ldr	r3, [pc, #52]	@ (800e27c <tcp_alloc+0xf8>)
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e24e:	4b0c      	ldr	r3, [pc, #48]	@ (800e280 <tcp_alloc+0xfc>)
 800e250:	781a      	ldrb	r2, [r3, #0]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e25c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	4a08      	ldr	r2, [pc, #32]	@ (800e284 <tcp_alloc+0x100>)
 800e264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	4a07      	ldr	r2, [pc, #28]	@ (800e288 <tcp_alloc+0x104>)
 800e26c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e270:	68fb      	ldr	r3, [r7, #12]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	2400838c 	.word	0x2400838c
 800e280:	240083a2 	.word	0x240083a2
 800e284:	0800df3d 	.word	0x0800df3d
 800e288:	006ddd00 	.word	0x006ddd00

0800e28c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d107      	bne.n	800e2aa <tcp_pcb_purge+0x1e>
 800e29a:	4b21      	ldr	r3, [pc, #132]	@ (800e320 <tcp_pcb_purge+0x94>)
 800e29c:	f640 0251 	movw	r2, #2129	@ 0x851
 800e2a0:	4920      	ldr	r1, [pc, #128]	@ (800e324 <tcp_pcb_purge+0x98>)
 800e2a2:	4821      	ldr	r0, [pc, #132]	@ (800e328 <tcp_pcb_purge+0x9c>)
 800e2a4:	f007 fe56 	bl	8015f54 <iprintf>
 800e2a8:	e037      	b.n	800e31a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	7d1b      	ldrb	r3, [r3, #20]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d033      	beq.n	800e31a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e2b6:	2b0a      	cmp	r3, #10
 800e2b8:	d02f      	beq.n	800e31a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d02b      	beq.n	800e31a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d007      	beq.n	800e2da <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fe fb7a 	bl	800c9c8 <pbuf_free>
      pcb->refused_data = NULL;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d002      	beq.n	800e2e8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 f986 	bl	800e5f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e2ee:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7ff fdc7 	bl	800de88 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff fdc2 	bl	800de88 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2200      	movs	r2, #0
 800e308:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	0801a240 	.word	0x0801a240
 800e324:	0801a88c 	.word	0x0801a88c
 800e328:	0801a284 	.word	0x0801a284

0800e32c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d106      	bne.n	800e34a <tcp_pcb_remove+0x1e>
 800e33c:	4b3e      	ldr	r3, [pc, #248]	@ (800e438 <tcp_pcb_remove+0x10c>)
 800e33e:	f640 0283 	movw	r2, #2179	@ 0x883
 800e342:	493e      	ldr	r1, [pc, #248]	@ (800e43c <tcp_pcb_remove+0x110>)
 800e344:	483e      	ldr	r0, [pc, #248]	@ (800e440 <tcp_pcb_remove+0x114>)
 800e346:	f007 fe05 	bl	8015f54 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d106      	bne.n	800e35e <tcp_pcb_remove+0x32>
 800e350:	4b39      	ldr	r3, [pc, #228]	@ (800e438 <tcp_pcb_remove+0x10c>)
 800e352:	f640 0284 	movw	r2, #2180	@ 0x884
 800e356:	493b      	ldr	r1, [pc, #236]	@ (800e444 <tcp_pcb_remove+0x118>)
 800e358:	4839      	ldr	r0, [pc, #228]	@ (800e440 <tcp_pcb_remove+0x114>)
 800e35a:	f007 fdfb 	bl	8015f54 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	683a      	ldr	r2, [r7, #0]
 800e364:	429a      	cmp	r2, r3
 800e366:	d105      	bne.n	800e374 <tcp_pcb_remove+0x48>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68da      	ldr	r2, [r3, #12]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	e013      	b.n	800e39c <tcp_pcb_remove+0x70>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	60fb      	str	r3, [r7, #12]
 800e37a:	e00c      	b.n	800e396 <tcp_pcb_remove+0x6a>
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	683a      	ldr	r2, [r7, #0]
 800e382:	429a      	cmp	r2, r3
 800e384:	d104      	bne.n	800e390 <tcp_pcb_remove+0x64>
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	68da      	ldr	r2, [r3, #12]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	60da      	str	r2, [r3, #12]
 800e38e:	e005      	b.n	800e39c <tcp_pcb_remove+0x70>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	60fb      	str	r3, [r7, #12]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d1ef      	bne.n	800e37c <tcp_pcb_remove+0x50>
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e3a2:	6838      	ldr	r0, [r7, #0]
 800e3a4:	f7ff ff72 	bl	800e28c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	7d1b      	ldrb	r3, [r3, #20]
 800e3ac:	2b0a      	cmp	r3, #10
 800e3ae:	d013      	beq.n	800e3d8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d00f      	beq.n	800e3d8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	8b5b      	ldrh	r3, [r3, #26]
 800e3bc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d009      	beq.n	800e3d8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	8b5b      	ldrh	r3, [r3, #26]
 800e3c8:	f043 0302 	orr.w	r3, r3, #2
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e3d2:	6838      	ldr	r0, [r7, #0]
 800e3d4:	f002 ff68 	bl	80112a8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	7d1b      	ldrb	r3, [r3, #20]
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d020      	beq.n	800e422 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d006      	beq.n	800e3f6 <tcp_pcb_remove+0xca>
 800e3e8:	4b13      	ldr	r3, [pc, #76]	@ (800e438 <tcp_pcb_remove+0x10c>)
 800e3ea:	f640 0293 	movw	r2, #2195	@ 0x893
 800e3ee:	4916      	ldr	r1, [pc, #88]	@ (800e448 <tcp_pcb_remove+0x11c>)
 800e3f0:	4813      	ldr	r0, [pc, #76]	@ (800e440 <tcp_pcb_remove+0x114>)
 800e3f2:	f007 fdaf 	bl	8015f54 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d006      	beq.n	800e40c <tcp_pcb_remove+0xe0>
 800e3fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e438 <tcp_pcb_remove+0x10c>)
 800e400:	f640 0294 	movw	r2, #2196	@ 0x894
 800e404:	4911      	ldr	r1, [pc, #68]	@ (800e44c <tcp_pcb_remove+0x120>)
 800e406:	480e      	ldr	r0, [pc, #56]	@ (800e440 <tcp_pcb_remove+0x114>)
 800e408:	f007 fda4 	bl	8015f54 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e410:	2b00      	cmp	r3, #0
 800e412:	d006      	beq.n	800e422 <tcp_pcb_remove+0xf6>
 800e414:	4b08      	ldr	r3, [pc, #32]	@ (800e438 <tcp_pcb_remove+0x10c>)
 800e416:	f640 0296 	movw	r2, #2198	@ 0x896
 800e41a:	490d      	ldr	r1, [pc, #52]	@ (800e450 <tcp_pcb_remove+0x124>)
 800e41c:	4808      	ldr	r0, [pc, #32]	@ (800e440 <tcp_pcb_remove+0x114>)
 800e41e:	f007 fd99 	bl	8015f54 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	2200      	movs	r2, #0
 800e426:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	2200      	movs	r2, #0
 800e42c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e42e:	bf00      	nop
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	0801a240 	.word	0x0801a240
 800e43c:	0801a8a8 	.word	0x0801a8a8
 800e440:	0801a284 	.word	0x0801a284
 800e444:	0801a8c4 	.word	0x0801a8c4
 800e448:	0801a8e4 	.word	0x0801a8e4
 800e44c:	0801a8fc 	.word	0x0801a8fc
 800e450:	0801a918 	.word	0x0801a918

0800e454 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d106      	bne.n	800e470 <tcp_next_iss+0x1c>
 800e462:	4b0a      	ldr	r3, [pc, #40]	@ (800e48c <tcp_next_iss+0x38>)
 800e464:	f640 02af 	movw	r2, #2223	@ 0x8af
 800e468:	4909      	ldr	r1, [pc, #36]	@ (800e490 <tcp_next_iss+0x3c>)
 800e46a:	480a      	ldr	r0, [pc, #40]	@ (800e494 <tcp_next_iss+0x40>)
 800e46c:	f007 fd72 	bl	8015f54 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e470:	4b09      	ldr	r3, [pc, #36]	@ (800e498 <tcp_next_iss+0x44>)
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	4b09      	ldr	r3, [pc, #36]	@ (800e49c <tcp_next_iss+0x48>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4413      	add	r3, r2
 800e47a:	4a07      	ldr	r2, [pc, #28]	@ (800e498 <tcp_next_iss+0x44>)
 800e47c:	6013      	str	r3, [r2, #0]
  return iss;
 800e47e:	4b06      	ldr	r3, [pc, #24]	@ (800e498 <tcp_next_iss+0x44>)
 800e480:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	0801a240 	.word	0x0801a240
 800e490:	0801a930 	.word	0x0801a930
 800e494:	0801a284 	.word	0x0801a284
 800e498:	24000048 	.word	0x24000048
 800e49c:	2400838c 	.word	0x2400838c

0800e4a0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	607a      	str	r2, [r7, #4]
 800e4ac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d106      	bne.n	800e4c2 <tcp_eff_send_mss_netif+0x22>
 800e4b4:	4b14      	ldr	r3, [pc, #80]	@ (800e508 <tcp_eff_send_mss_netif+0x68>)
 800e4b6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800e4ba:	4914      	ldr	r1, [pc, #80]	@ (800e50c <tcp_eff_send_mss_netif+0x6c>)
 800e4bc:	4814      	ldr	r0, [pc, #80]	@ (800e510 <tcp_eff_send_mss_netif+0x70>)
 800e4be:	f007 fd49 	bl	8015f54 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d101      	bne.n	800e4cc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e4c8:	89fb      	ldrh	r3, [r7, #14]
 800e4ca:	e019      	b.n	800e500 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e4d0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e4d2:	8afb      	ldrh	r3, [r7, #22]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d012      	beq.n	800e4fe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e4d8:	2328      	movs	r3, #40	@ 0x28
 800e4da:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e4dc:	8afa      	ldrh	r2, [r7, #22]
 800e4de:	8abb      	ldrh	r3, [r7, #20]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d904      	bls.n	800e4ee <tcp_eff_send_mss_netif+0x4e>
 800e4e4:	8afa      	ldrh	r2, [r7, #22]
 800e4e6:	8abb      	ldrh	r3, [r7, #20]
 800e4e8:	1ad3      	subs	r3, r2, r3
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	e000      	b.n	800e4f0 <tcp_eff_send_mss_netif+0x50>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e4f2:	8a7a      	ldrh	r2, [r7, #18]
 800e4f4:	89fb      	ldrh	r3, [r7, #14]
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	bf28      	it	cs
 800e4fa:	4613      	movcs	r3, r2
 800e4fc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e4fe:	89fb      	ldrh	r3, [r7, #14]
}
 800e500:	4618      	mov	r0, r3
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	0801a240 	.word	0x0801a240
 800e50c:	0801a94c 	.word	0x0801a94c
 800e510:	0801a284 	.word	0x0801a284

0800e514 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d119      	bne.n	800e55c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e528:	4b10      	ldr	r3, [pc, #64]	@ (800e56c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e52a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800e52e:	4910      	ldr	r1, [pc, #64]	@ (800e570 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e530:	4810      	ldr	r0, [pc, #64]	@ (800e574 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e532:	f007 fd0f 	bl	8015f54 <iprintf>

  while (pcb != NULL) {
 800e536:	e011      	b.n	800e55c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	429a      	cmp	r2, r3
 800e542:	d108      	bne.n	800e556 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	f7fe ffc4 	bl	800d4d8 <tcp_abort>
      pcb = next;
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	60fb      	str	r3, [r7, #12]
 800e554:	e002      	b.n	800e55c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d1ea      	bne.n	800e538 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e562:	bf00      	nop
 800e564:	bf00      	nop
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	0801a240 	.word	0x0801a240
 800e570:	0801a974 	.word	0x0801a974
 800e574:	0801a284 	.word	0x0801a284

0800e578 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d02a      	beq.n	800e5de <tcp_netif_ip_addr_changed+0x66>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d026      	beq.n	800e5de <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e590:	4b15      	ldr	r3, [pc, #84]	@ (800e5e8 <tcp_netif_ip_addr_changed+0x70>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4619      	mov	r1, r3
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7ff ffbc 	bl	800e514 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e59c:	4b13      	ldr	r3, [pc, #76]	@ (800e5ec <tcp_netif_ip_addr_changed+0x74>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f7ff ffb6 	bl	800e514 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d017      	beq.n	800e5de <tcp_netif_ip_addr_changed+0x66>
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d013      	beq.n	800e5de <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e5b6:	4b0e      	ldr	r3, [pc, #56]	@ (800e5f0 <tcp_netif_ip_addr_changed+0x78>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	60fb      	str	r3, [r7, #12]
 800e5bc:	e00c      	b.n	800e5d8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d103      	bne.n	800e5d2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	60fb      	str	r3, [r7, #12]
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d1ef      	bne.n	800e5be <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e5de:	bf00      	nop
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	24008398 	.word	0x24008398
 800e5ec:	24008390 	.word	0x24008390
 800e5f0:	24008394 	.word	0x24008394

0800e5f4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e600:	2b00      	cmp	r3, #0
 800e602:	d007      	beq.n	800e614 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e608:	4618      	mov	r0, r3
 800e60a:	f7ff fc3d 	bl	800de88 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e614:	bf00      	nop
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e61c:	b590      	push	{r4, r7, lr}
 800e61e:	b08d      	sub	sp, #52	@ 0x34
 800e620:	af04      	add	r7, sp, #16
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d105      	bne.n	800e638 <tcp_input+0x1c>
 800e62c:	4b9b      	ldr	r3, [pc, #620]	@ (800e89c <tcp_input+0x280>)
 800e62e:	2283      	movs	r2, #131	@ 0x83
 800e630:	499b      	ldr	r1, [pc, #620]	@ (800e8a0 <tcp_input+0x284>)
 800e632:	489c      	ldr	r0, [pc, #624]	@ (800e8a4 <tcp_input+0x288>)
 800e634:	f007 fc8e 	bl	8015f54 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	4a9a      	ldr	r2, [pc, #616]	@ (800e8a8 <tcp_input+0x28c>)
 800e63e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	895b      	ldrh	r3, [r3, #10]
 800e644:	2b13      	cmp	r3, #19
 800e646:	f240 83d1 	bls.w	800edec <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e64a:	4b98      	ldr	r3, [pc, #608]	@ (800e8ac <tcp_input+0x290>)
 800e64c:	695b      	ldr	r3, [r3, #20]
 800e64e:	4a97      	ldr	r2, [pc, #604]	@ (800e8ac <tcp_input+0x290>)
 800e650:	6812      	ldr	r2, [r2, #0]
 800e652:	4611      	mov	r1, r2
 800e654:	4618      	mov	r0, r3
 800e656:	f005 fd71 	bl	801413c <ip4_addr_isbroadcast_u32>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f040 83c7 	bne.w	800edf0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e662:	4b92      	ldr	r3, [pc, #584]	@ (800e8ac <tcp_input+0x290>)
 800e664:	695b      	ldr	r3, [r3, #20]
 800e666:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e66a:	2be0      	cmp	r3, #224	@ 0xe0
 800e66c:	f000 83c0 	beq.w	800edf0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e670:	4b8d      	ldr	r3, [pc, #564]	@ (800e8a8 <tcp_input+0x28c>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	899b      	ldrh	r3, [r3, #12]
 800e676:	b29b      	uxth	r3, r3
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fc fd8f 	bl	800b19c <lwip_htons>
 800e67e:	4603      	mov	r3, r0
 800e680:	0b1b      	lsrs	r3, r3, #12
 800e682:	b29b      	uxth	r3, r3
 800e684:	b2db      	uxtb	r3, r3
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e68a:	7cbb      	ldrb	r3, [r7, #18]
 800e68c:	2b13      	cmp	r3, #19
 800e68e:	f240 83b1 	bls.w	800edf4 <tcp_input+0x7d8>
 800e692:	7cbb      	ldrb	r3, [r7, #18]
 800e694:	b29a      	uxth	r2, r3
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	891b      	ldrh	r3, [r3, #8]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	f200 83aa 	bhi.w	800edf4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e6a0:	7cbb      	ldrb	r3, [r7, #18]
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	3b14      	subs	r3, #20
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	4b81      	ldr	r3, [pc, #516]	@ (800e8b0 <tcp_input+0x294>)
 800e6aa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e6ac:	4b81      	ldr	r3, [pc, #516]	@ (800e8b4 <tcp_input+0x298>)
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	895a      	ldrh	r2, [r3, #10]
 800e6b6:	7cbb      	ldrb	r3, [r7, #18]
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d309      	bcc.n	800e6d2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e6be:	4b7c      	ldr	r3, [pc, #496]	@ (800e8b0 <tcp_input+0x294>)
 800e6c0:	881a      	ldrh	r2, [r3, #0]
 800e6c2:	4b7d      	ldr	r3, [pc, #500]	@ (800e8b8 <tcp_input+0x29c>)
 800e6c4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e6c6:	7cbb      	ldrb	r3, [r7, #18]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7fe f8f6 	bl	800c8bc <pbuf_remove_header>
 800e6d0:	e04e      	b.n	800e770 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d105      	bne.n	800e6e6 <tcp_input+0xca>
 800e6da:	4b70      	ldr	r3, [pc, #448]	@ (800e89c <tcp_input+0x280>)
 800e6dc:	22c2      	movs	r2, #194	@ 0xc2
 800e6de:	4977      	ldr	r1, [pc, #476]	@ (800e8bc <tcp_input+0x2a0>)
 800e6e0:	4870      	ldr	r0, [pc, #448]	@ (800e8a4 <tcp_input+0x288>)
 800e6e2:	f007 fc37 	bl	8015f54 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e6e6:	2114      	movs	r1, #20
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f7fe f8e7 	bl	800c8bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	895a      	ldrh	r2, [r3, #10]
 800e6f2:	4b71      	ldr	r3, [pc, #452]	@ (800e8b8 <tcp_input+0x29c>)
 800e6f4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e6f6:	4b6e      	ldr	r3, [pc, #440]	@ (800e8b0 <tcp_input+0x294>)
 800e6f8:	881a      	ldrh	r2, [r3, #0]
 800e6fa:	4b6f      	ldr	r3, [pc, #444]	@ (800e8b8 <tcp_input+0x29c>)
 800e6fc:	881b      	ldrh	r3, [r3, #0]
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e702:	4b6d      	ldr	r3, [pc, #436]	@ (800e8b8 <tcp_input+0x29c>)
 800e704:	881b      	ldrh	r3, [r3, #0]
 800e706:	4619      	mov	r1, r3
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f7fe f8d7 	bl	800c8bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	895b      	ldrh	r3, [r3, #10]
 800e714:	8a3a      	ldrh	r2, [r7, #16]
 800e716:	429a      	cmp	r2, r3
 800e718:	f200 836e 	bhi.w	800edf8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	4a64      	ldr	r2, [pc, #400]	@ (800e8b4 <tcp_input+0x298>)
 800e724:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	8a3a      	ldrh	r2, [r7, #16]
 800e72c:	4611      	mov	r1, r2
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fe f8c4 	bl	800c8bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	891a      	ldrh	r2, [r3, #8]
 800e738:	8a3b      	ldrh	r3, [r7, #16]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	895b      	ldrh	r3, [r3, #10]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d005      	beq.n	800e756 <tcp_input+0x13a>
 800e74a:	4b54      	ldr	r3, [pc, #336]	@ (800e89c <tcp_input+0x280>)
 800e74c:	22df      	movs	r2, #223	@ 0xdf
 800e74e:	495c      	ldr	r1, [pc, #368]	@ (800e8c0 <tcp_input+0x2a4>)
 800e750:	4854      	ldr	r0, [pc, #336]	@ (800e8a4 <tcp_input+0x288>)
 800e752:	f007 fbff 	bl	8015f54 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	891a      	ldrh	r2, [r3, #8]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	891b      	ldrh	r3, [r3, #8]
 800e760:	429a      	cmp	r2, r3
 800e762:	d005      	beq.n	800e770 <tcp_input+0x154>
 800e764:	4b4d      	ldr	r3, [pc, #308]	@ (800e89c <tcp_input+0x280>)
 800e766:	22e0      	movs	r2, #224	@ 0xe0
 800e768:	4956      	ldr	r1, [pc, #344]	@ (800e8c4 <tcp_input+0x2a8>)
 800e76a:	484e      	ldr	r0, [pc, #312]	@ (800e8a4 <tcp_input+0x288>)
 800e76c:	f007 fbf2 	bl	8015f54 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e770:	4b4d      	ldr	r3, [pc, #308]	@ (800e8a8 <tcp_input+0x28c>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	881b      	ldrh	r3, [r3, #0]
 800e776:	b29b      	uxth	r3, r3
 800e778:	4a4b      	ldr	r2, [pc, #300]	@ (800e8a8 <tcp_input+0x28c>)
 800e77a:	6814      	ldr	r4, [r2, #0]
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7fc fd0d 	bl	800b19c <lwip_htons>
 800e782:	4603      	mov	r3, r0
 800e784:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e786:	4b48      	ldr	r3, [pc, #288]	@ (800e8a8 <tcp_input+0x28c>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	885b      	ldrh	r3, [r3, #2]
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	4a46      	ldr	r2, [pc, #280]	@ (800e8a8 <tcp_input+0x28c>)
 800e790:	6814      	ldr	r4, [r2, #0]
 800e792:	4618      	mov	r0, r3
 800e794:	f7fc fd02 	bl	800b19c <lwip_htons>
 800e798:	4603      	mov	r3, r0
 800e79a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e79c:	4b42      	ldr	r3, [pc, #264]	@ (800e8a8 <tcp_input+0x28c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	4a41      	ldr	r2, [pc, #260]	@ (800e8a8 <tcp_input+0x28c>)
 800e7a4:	6814      	ldr	r4, [r2, #0]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fc fd0e 	bl	800b1c8 <lwip_htonl>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	6063      	str	r3, [r4, #4]
 800e7b0:	6863      	ldr	r3, [r4, #4]
 800e7b2:	4a45      	ldr	r2, [pc, #276]	@ (800e8c8 <tcp_input+0x2ac>)
 800e7b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e7b6:	4b3c      	ldr	r3, [pc, #240]	@ (800e8a8 <tcp_input+0x28c>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	4a3a      	ldr	r2, [pc, #232]	@ (800e8a8 <tcp_input+0x28c>)
 800e7be:	6814      	ldr	r4, [r2, #0]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fc fd01 	bl	800b1c8 <lwip_htonl>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	60a3      	str	r3, [r4, #8]
 800e7ca:	68a3      	ldr	r3, [r4, #8]
 800e7cc:	4a3f      	ldr	r2, [pc, #252]	@ (800e8cc <tcp_input+0x2b0>)
 800e7ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e7d0:	4b35      	ldr	r3, [pc, #212]	@ (800e8a8 <tcp_input+0x28c>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	89db      	ldrh	r3, [r3, #14]
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	4a33      	ldr	r2, [pc, #204]	@ (800e8a8 <tcp_input+0x28c>)
 800e7da:	6814      	ldr	r4, [r2, #0]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fc fcdd 	bl	800b19c <lwip_htons>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e7e6:	4b30      	ldr	r3, [pc, #192]	@ (800e8a8 <tcp_input+0x28c>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	899b      	ldrh	r3, [r3, #12]
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fc fcd4 	bl	800b19c <lwip_htons>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e7fc:	b2da      	uxtb	r2, r3
 800e7fe:	4b34      	ldr	r3, [pc, #208]	@ (800e8d0 <tcp_input+0x2b4>)
 800e800:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	891a      	ldrh	r2, [r3, #8]
 800e806:	4b33      	ldr	r3, [pc, #204]	@ (800e8d4 <tcp_input+0x2b8>)
 800e808:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e80a:	4b31      	ldr	r3, [pc, #196]	@ (800e8d0 <tcp_input+0x2b4>)
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	f003 0303 	and.w	r3, r3, #3
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00c      	beq.n	800e830 <tcp_input+0x214>
    tcplen++;
 800e816:	4b2f      	ldr	r3, [pc, #188]	@ (800e8d4 <tcp_input+0x2b8>)
 800e818:	881b      	ldrh	r3, [r3, #0]
 800e81a:	3301      	adds	r3, #1
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	4b2d      	ldr	r3, [pc, #180]	@ (800e8d4 <tcp_input+0x2b8>)
 800e820:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	891a      	ldrh	r2, [r3, #8]
 800e826:	4b2b      	ldr	r3, [pc, #172]	@ (800e8d4 <tcp_input+0x2b8>)
 800e828:	881b      	ldrh	r3, [r3, #0]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	f200 82e6 	bhi.w	800edfc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e830:	2300      	movs	r3, #0
 800e832:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e834:	4b28      	ldr	r3, [pc, #160]	@ (800e8d8 <tcp_input+0x2bc>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	61fb      	str	r3, [r7, #28]
 800e83a:	e09d      	b.n	800e978 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e83c:	69fb      	ldr	r3, [r7, #28]
 800e83e:	7d1b      	ldrb	r3, [r3, #20]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d105      	bne.n	800e850 <tcp_input+0x234>
 800e844:	4b15      	ldr	r3, [pc, #84]	@ (800e89c <tcp_input+0x280>)
 800e846:	22fb      	movs	r2, #251	@ 0xfb
 800e848:	4924      	ldr	r1, [pc, #144]	@ (800e8dc <tcp_input+0x2c0>)
 800e84a:	4816      	ldr	r0, [pc, #88]	@ (800e8a4 <tcp_input+0x288>)
 800e84c:	f007 fb82 	bl	8015f54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	7d1b      	ldrb	r3, [r3, #20]
 800e854:	2b0a      	cmp	r3, #10
 800e856:	d105      	bne.n	800e864 <tcp_input+0x248>
 800e858:	4b10      	ldr	r3, [pc, #64]	@ (800e89c <tcp_input+0x280>)
 800e85a:	22fc      	movs	r2, #252	@ 0xfc
 800e85c:	4920      	ldr	r1, [pc, #128]	@ (800e8e0 <tcp_input+0x2c4>)
 800e85e:	4811      	ldr	r0, [pc, #68]	@ (800e8a4 <tcp_input+0x288>)
 800e860:	f007 fb78 	bl	8015f54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	7d1b      	ldrb	r3, [r3, #20]
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d105      	bne.n	800e878 <tcp_input+0x25c>
 800e86c:	4b0b      	ldr	r3, [pc, #44]	@ (800e89c <tcp_input+0x280>)
 800e86e:	22fd      	movs	r2, #253	@ 0xfd
 800e870:	491c      	ldr	r1, [pc, #112]	@ (800e8e4 <tcp_input+0x2c8>)
 800e872:	480c      	ldr	r0, [pc, #48]	@ (800e8a4 <tcp_input+0x288>)
 800e874:	f007 fb6e 	bl	8015f54 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	7a1b      	ldrb	r3, [r3, #8]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d033      	beq.n	800e8e8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	7a1a      	ldrb	r2, [r3, #8]
 800e884:	4b09      	ldr	r3, [pc, #36]	@ (800e8ac <tcp_input+0x290>)
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e88c:	3301      	adds	r3, #1
 800e88e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e890:	429a      	cmp	r2, r3
 800e892:	d029      	beq.n	800e8e8 <tcp_input+0x2cc>
      prev = pcb;
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	61bb      	str	r3, [r7, #24]
      continue;
 800e898:	e06b      	b.n	800e972 <tcp_input+0x356>
 800e89a:	bf00      	nop
 800e89c:	0801a9a8 	.word	0x0801a9a8
 800e8a0:	0801a9dc 	.word	0x0801a9dc
 800e8a4:	0801a9f4 	.word	0x0801a9f4
 800e8a8:	240083b4 	.word	0x240083b4
 800e8ac:	24005470 	.word	0x24005470
 800e8b0:	240083b8 	.word	0x240083b8
 800e8b4:	240083bc 	.word	0x240083bc
 800e8b8:	240083ba 	.word	0x240083ba
 800e8bc:	0801aa1c 	.word	0x0801aa1c
 800e8c0:	0801aa2c 	.word	0x0801aa2c
 800e8c4:	0801aa38 	.word	0x0801aa38
 800e8c8:	240083c4 	.word	0x240083c4
 800e8cc:	240083c8 	.word	0x240083c8
 800e8d0:	240083d0 	.word	0x240083d0
 800e8d4:	240083ce 	.word	0x240083ce
 800e8d8:	24008398 	.word	0x24008398
 800e8dc:	0801aa58 	.word	0x0801aa58
 800e8e0:	0801aa80 	.word	0x0801aa80
 800e8e4:	0801aaac 	.word	0x0801aaac
    }

    if (pcb->remote_port == tcphdr->src &&
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	8b1a      	ldrh	r2, [r3, #24]
 800e8ec:	4b72      	ldr	r3, [pc, #456]	@ (800eab8 <tcp_input+0x49c>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d13a      	bne.n	800e96e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	8ada      	ldrh	r2, [r3, #22]
 800e8fc:	4b6e      	ldr	r3, [pc, #440]	@ (800eab8 <tcp_input+0x49c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	885b      	ldrh	r3, [r3, #2]
 800e902:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e904:	429a      	cmp	r2, r3
 800e906:	d132      	bne.n	800e96e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	685a      	ldr	r2, [r3, #4]
 800e90c:	4b6b      	ldr	r3, [pc, #428]	@ (800eabc <tcp_input+0x4a0>)
 800e90e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e910:	429a      	cmp	r2, r3
 800e912:	d12c      	bne.n	800e96e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	4b68      	ldr	r3, [pc, #416]	@ (800eabc <tcp_input+0x4a0>)
 800e91a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d126      	bne.n	800e96e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	69fa      	ldr	r2, [r7, #28]
 800e926:	429a      	cmp	r2, r3
 800e928:	d106      	bne.n	800e938 <tcp_input+0x31c>
 800e92a:	4b65      	ldr	r3, [pc, #404]	@ (800eac0 <tcp_input+0x4a4>)
 800e92c:	f240 120d 	movw	r2, #269	@ 0x10d
 800e930:	4964      	ldr	r1, [pc, #400]	@ (800eac4 <tcp_input+0x4a8>)
 800e932:	4865      	ldr	r0, [pc, #404]	@ (800eac8 <tcp_input+0x4ac>)
 800e934:	f007 fb0e 	bl	8015f54 <iprintf>
      if (prev != NULL) {
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00a      	beq.n	800e954 <tcp_input+0x338>
        prev->next = pcb->next;
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	68da      	ldr	r2, [r3, #12]
 800e942:	69bb      	ldr	r3, [r7, #24]
 800e944:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e946:	4b61      	ldr	r3, [pc, #388]	@ (800eacc <tcp_input+0x4b0>)
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e94e:	4a5f      	ldr	r2, [pc, #380]	@ (800eacc <tcp_input+0x4b0>)
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	69fa      	ldr	r2, [r7, #28]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d111      	bne.n	800e982 <tcp_input+0x366>
 800e95e:	4b58      	ldr	r3, [pc, #352]	@ (800eac0 <tcp_input+0x4a4>)
 800e960:	f240 1215 	movw	r2, #277	@ 0x115
 800e964:	495a      	ldr	r1, [pc, #360]	@ (800ead0 <tcp_input+0x4b4>)
 800e966:	4858      	ldr	r0, [pc, #352]	@ (800eac8 <tcp_input+0x4ac>)
 800e968:	f007 faf4 	bl	8015f54 <iprintf>
      break;
 800e96c:	e009      	b.n	800e982 <tcp_input+0x366>
    }
    prev = pcb;
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	61fb      	str	r3, [r7, #28]
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	f47f af5e 	bne.w	800e83c <tcp_input+0x220>
 800e980:	e000      	b.n	800e984 <tcp_input+0x368>
      break;
 800e982:	bf00      	nop
  }

  if (pcb == NULL) {
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	2b00      	cmp	r3, #0
 800e988:	f040 80aa 	bne.w	800eae0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e98c:	4b51      	ldr	r3, [pc, #324]	@ (800ead4 <tcp_input+0x4b8>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	61fb      	str	r3, [r7, #28]
 800e992:	e03f      	b.n	800ea14 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	7d1b      	ldrb	r3, [r3, #20]
 800e998:	2b0a      	cmp	r3, #10
 800e99a:	d006      	beq.n	800e9aa <tcp_input+0x38e>
 800e99c:	4b48      	ldr	r3, [pc, #288]	@ (800eac0 <tcp_input+0x4a4>)
 800e99e:	f240 121f 	movw	r2, #287	@ 0x11f
 800e9a2:	494d      	ldr	r1, [pc, #308]	@ (800ead8 <tcp_input+0x4bc>)
 800e9a4:	4848      	ldr	r0, [pc, #288]	@ (800eac8 <tcp_input+0x4ac>)
 800e9a6:	f007 fad5 	bl	8015f54 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	7a1b      	ldrb	r3, [r3, #8]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d009      	beq.n	800e9c6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	7a1a      	ldrb	r2, [r3, #8]
 800e9b6:	4b41      	ldr	r3, [pc, #260]	@ (800eabc <tcp_input+0x4a0>)
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9be:	3301      	adds	r3, #1
 800e9c0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d122      	bne.n	800ea0c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	8b1a      	ldrh	r2, [r3, #24]
 800e9ca:	4b3b      	ldr	r3, [pc, #236]	@ (800eab8 <tcp_input+0x49c>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	881b      	ldrh	r3, [r3, #0]
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d11b      	bne.n	800ea0e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	8ada      	ldrh	r2, [r3, #22]
 800e9da:	4b37      	ldr	r3, [pc, #220]	@ (800eab8 <tcp_input+0x49c>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	885b      	ldrh	r3, [r3, #2]
 800e9e0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d113      	bne.n	800ea0e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	685a      	ldr	r2, [r3, #4]
 800e9ea:	4b34      	ldr	r3, [pc, #208]	@ (800eabc <tcp_input+0x4a0>)
 800e9ec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d10d      	bne.n	800ea0e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	4b31      	ldr	r3, [pc, #196]	@ (800eabc <tcp_input+0x4a0>)
 800e9f8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d107      	bne.n	800ea0e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e9fe:	69f8      	ldr	r0, [r7, #28]
 800ea00:	f000 fb56 	bl	800f0b0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f7fd ffdf 	bl	800c9c8 <pbuf_free>
        return;
 800ea0a:	e1fd      	b.n	800ee08 <tcp_input+0x7ec>
        continue;
 800ea0c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	61fb      	str	r3, [r7, #28]
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1bc      	bne.n	800e994 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea1e:	4b2f      	ldr	r3, [pc, #188]	@ (800eadc <tcp_input+0x4c0>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	617b      	str	r3, [r7, #20]
 800ea24:	e02a      	b.n	800ea7c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	7a1b      	ldrb	r3, [r3, #8]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d00c      	beq.n	800ea48 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	7a1a      	ldrb	r2, [r3, #8]
 800ea32:	4b22      	ldr	r3, [pc, #136]	@ (800eabc <tcp_input+0x4a0>)
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d002      	beq.n	800ea48 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	61bb      	str	r3, [r7, #24]
        continue;
 800ea46:	e016      	b.n	800ea76 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	8ada      	ldrh	r2, [r3, #22]
 800ea4c:	4b1a      	ldr	r3, [pc, #104]	@ (800eab8 <tcp_input+0x49c>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	885b      	ldrh	r3, [r3, #2]
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d10c      	bne.n	800ea72 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	4b17      	ldr	r3, [pc, #92]	@ (800eabc <tcp_input+0x4a0>)
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d00f      	beq.n	800ea84 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00d      	beq.n	800ea86 <tcp_input+0x46a>
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d009      	beq.n	800ea86 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	617b      	str	r3, [r7, #20]
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d1d1      	bne.n	800ea26 <tcp_input+0x40a>
 800ea82:	e000      	b.n	800ea86 <tcp_input+0x46a>
            break;
 800ea84:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d029      	beq.n	800eae0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00a      	beq.n	800eaa8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	68da      	ldr	r2, [r3, #12]
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ea9a:	4b10      	ldr	r3, [pc, #64]	@ (800eadc <tcp_input+0x4c0>)
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800eaa2:	4a0e      	ldr	r2, [pc, #56]	@ (800eadc <tcp_input+0x4c0>)
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800eaa8:	6978      	ldr	r0, [r7, #20]
 800eaaa:	f000 fa03 	bl	800eeb4 <tcp_listen_input>
      }
      pbuf_free(p);
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f7fd ff8a 	bl	800c9c8 <pbuf_free>
      return;
 800eab4:	e1a8      	b.n	800ee08 <tcp_input+0x7ec>
 800eab6:	bf00      	nop
 800eab8:	240083b4 	.word	0x240083b4
 800eabc:	24005470 	.word	0x24005470
 800eac0:	0801a9a8 	.word	0x0801a9a8
 800eac4:	0801aad4 	.word	0x0801aad4
 800eac8:	0801a9f4 	.word	0x0801a9f4
 800eacc:	24008398 	.word	0x24008398
 800ead0:	0801ab00 	.word	0x0801ab00
 800ead4:	2400839c 	.word	0x2400839c
 800ead8:	0801ab2c 	.word	0x0801ab2c
 800eadc:	24008394 	.word	0x24008394
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f000 8158 	beq.w	800ed98 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800eae8:	4b95      	ldr	r3, [pc, #596]	@ (800ed40 <tcp_input+0x724>)
 800eaea:	2200      	movs	r2, #0
 800eaec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	891a      	ldrh	r2, [r3, #8]
 800eaf2:	4b93      	ldr	r3, [pc, #588]	@ (800ed40 <tcp_input+0x724>)
 800eaf4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800eaf6:	4a92      	ldr	r2, [pc, #584]	@ (800ed40 <tcp_input+0x724>)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800eafc:	4b91      	ldr	r3, [pc, #580]	@ (800ed44 <tcp_input+0x728>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a8f      	ldr	r2, [pc, #572]	@ (800ed40 <tcp_input+0x724>)
 800eb02:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800eb04:	4b90      	ldr	r3, [pc, #576]	@ (800ed48 <tcp_input+0x72c>)
 800eb06:	2200      	movs	r2, #0
 800eb08:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800eb0a:	4b90      	ldr	r3, [pc, #576]	@ (800ed4c <tcp_input+0x730>)
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800eb10:	4b8f      	ldr	r3, [pc, #572]	@ (800ed50 <tcp_input+0x734>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800eb16:	4b8f      	ldr	r3, [pc, #572]	@ (800ed54 <tcp_input+0x738>)
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	f003 0308 	and.w	r3, r3, #8
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d006      	beq.n	800eb30 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	7b5b      	ldrb	r3, [r3, #13]
 800eb26:	f043 0301 	orr.w	r3, r3, #1
 800eb2a:	b2da      	uxtb	r2, r3
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d017      	beq.n	800eb68 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eb38:	69f8      	ldr	r0, [r7, #28]
 800eb3a:	f7ff f929 	bl	800dd90 <tcp_process_refused_data>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	f113 0f0d 	cmn.w	r3, #13
 800eb44:	d007      	beq.n	800eb56 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00c      	beq.n	800eb68 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eb4e:	4b82      	ldr	r3, [pc, #520]	@ (800ed58 <tcp_input+0x73c>)
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d008      	beq.n	800eb68 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800eb56:	69fb      	ldr	r3, [r7, #28]
 800eb58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f040 80e3 	bne.w	800ed26 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800eb60:	69f8      	ldr	r0, [r7, #28]
 800eb62:	f003 f9a7 	bl	8011eb4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eb66:	e0de      	b.n	800ed26 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800eb68:	4a7c      	ldr	r2, [pc, #496]	@ (800ed5c <tcp_input+0x740>)
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eb6e:	69f8      	ldr	r0, [r7, #28]
 800eb70:	f000 fb18 	bl	800f1a4 <tcp_process>
 800eb74:	4603      	mov	r3, r0
 800eb76:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eb78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb7c:	f113 0f0d 	cmn.w	r3, #13
 800eb80:	f000 80d3 	beq.w	800ed2a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800eb84:	4b71      	ldr	r3, [pc, #452]	@ (800ed4c <tcp_input+0x730>)
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	f003 0308 	and.w	r3, r3, #8
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d015      	beq.n	800ebbc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d008      	beq.n	800ebac <tcp_input+0x590>
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eba0:	69fa      	ldr	r2, [r7, #28]
 800eba2:	6912      	ldr	r2, [r2, #16]
 800eba4:	f06f 010d 	mvn.w	r1, #13
 800eba8:	4610      	mov	r0, r2
 800ebaa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ebac:	69f9      	ldr	r1, [r7, #28]
 800ebae:	486c      	ldr	r0, [pc, #432]	@ (800ed60 <tcp_input+0x744>)
 800ebb0:	f7ff fbbc 	bl	800e32c <tcp_pcb_remove>
        tcp_free(pcb);
 800ebb4:	69f8      	ldr	r0, [r7, #28]
 800ebb6:	f7fe f9a7 	bl	800cf08 <tcp_free>
 800ebba:	e0da      	b.n	800ed72 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ebc0:	4b63      	ldr	r3, [pc, #396]	@ (800ed50 <tcp_input+0x734>)
 800ebc2:	881b      	ldrh	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d01d      	beq.n	800ec04 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ebc8:	4b61      	ldr	r3, [pc, #388]	@ (800ed50 <tcp_input+0x734>)
 800ebca:	881b      	ldrh	r3, [r3, #0]
 800ebcc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00a      	beq.n	800ebee <tcp_input+0x5d2>
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebde:	69fa      	ldr	r2, [r7, #28]
 800ebe0:	6910      	ldr	r0, [r2, #16]
 800ebe2:	89fa      	ldrh	r2, [r7, #14]
 800ebe4:	69f9      	ldr	r1, [r7, #28]
 800ebe6:	4798      	blx	r3
 800ebe8:	4603      	mov	r3, r0
 800ebea:	74fb      	strb	r3, [r7, #19]
 800ebec:	e001      	b.n	800ebf2 <tcp_input+0x5d6>
 800ebee:	2300      	movs	r3, #0
 800ebf0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ebf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebf6:	f113 0f0d 	cmn.w	r3, #13
 800ebfa:	f000 8098 	beq.w	800ed2e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ebfe:	4b54      	ldr	r3, [pc, #336]	@ (800ed50 <tcp_input+0x734>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ec04:	69f8      	ldr	r0, [r7, #28]
 800ec06:	f000 f915 	bl	800ee34 <tcp_input_delayed_close>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f040 8090 	bne.w	800ed32 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ec12:	4b4d      	ldr	r3, [pc, #308]	@ (800ed48 <tcp_input+0x72c>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d041      	beq.n	800ec9e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d006      	beq.n	800ec30 <tcp_input+0x614>
 800ec22:	4b50      	ldr	r3, [pc, #320]	@ (800ed64 <tcp_input+0x748>)
 800ec24:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ec28:	494f      	ldr	r1, [pc, #316]	@ (800ed68 <tcp_input+0x74c>)
 800ec2a:	4850      	ldr	r0, [pc, #320]	@ (800ed6c <tcp_input+0x750>)
 800ec2c:	f007 f992 	bl	8015f54 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	8b5b      	ldrh	r3, [r3, #26]
 800ec34:	f003 0310 	and.w	r3, r3, #16
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d008      	beq.n	800ec4e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ec3c:	4b42      	ldr	r3, [pc, #264]	@ (800ed48 <tcp_input+0x72c>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fd fec1 	bl	800c9c8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ec46:	69f8      	ldr	r0, [r7, #28]
 800ec48:	f7fe fc46 	bl	800d4d8 <tcp_abort>
            goto aborted;
 800ec4c:	e091      	b.n	800ed72 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d00c      	beq.n	800ec72 <tcp_input+0x656>
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	6918      	ldr	r0, [r3, #16]
 800ec62:	4b39      	ldr	r3, [pc, #228]	@ (800ed48 <tcp_input+0x72c>)
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	2300      	movs	r3, #0
 800ec68:	69f9      	ldr	r1, [r7, #28]
 800ec6a:	47a0      	blx	r4
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	74fb      	strb	r3, [r7, #19]
 800ec70:	e008      	b.n	800ec84 <tcp_input+0x668>
 800ec72:	4b35      	ldr	r3, [pc, #212]	@ (800ed48 <tcp_input+0x72c>)
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	2300      	movs	r3, #0
 800ec78:	69f9      	ldr	r1, [r7, #28]
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	f7ff f95e 	bl	800df3c <tcp_recv_null>
 800ec80:	4603      	mov	r3, r0
 800ec82:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ec84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec88:	f113 0f0d 	cmn.w	r3, #13
 800ec8c:	d053      	beq.n	800ed36 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ec8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d003      	beq.n	800ec9e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ec96:	4b2c      	ldr	r3, [pc, #176]	@ (800ed48 <tcp_input+0x72c>)
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ec9e:	4b2b      	ldr	r3, [pc, #172]	@ (800ed4c <tcp_input+0x730>)
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	f003 0320 	and.w	r3, r3, #32
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d030      	beq.n	800ed0c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d009      	beq.n	800ecc6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ecb6:	7b5a      	ldrb	r2, [r3, #13]
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ecbc:	f042 0220 	orr.w	r2, r2, #32
 800ecc0:	b2d2      	uxtb	r2, r2
 800ecc2:	735a      	strb	r2, [r3, #13]
 800ecc4:	e022      	b.n	800ed0c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecca:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ecce:	d005      	beq.n	800ecdc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00b      	beq.n	800ecfe <tcp_input+0x6e2>
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	6918      	ldr	r0, [r3, #16]
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	69f9      	ldr	r1, [r7, #28]
 800ecf6:	47a0      	blx	r4
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	74fb      	strb	r3, [r7, #19]
 800ecfc:	e001      	b.n	800ed02 <tcp_input+0x6e6>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ed02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed06:	f113 0f0d 	cmn.w	r3, #13
 800ed0a:	d016      	beq.n	800ed3a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ed0c:	4b13      	ldr	r3, [pc, #76]	@ (800ed5c <tcp_input+0x740>)
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ed12:	69f8      	ldr	r0, [r7, #28]
 800ed14:	f000 f88e 	bl	800ee34 <tcp_input_delayed_close>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d128      	bne.n	800ed70 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ed1e:	69f8      	ldr	r0, [r7, #28]
 800ed20:	f002 fac2 	bl	80112a8 <tcp_output>
 800ed24:	e025      	b.n	800ed72 <tcp_input+0x756>
        goto aborted;
 800ed26:	bf00      	nop
 800ed28:	e023      	b.n	800ed72 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ed2a:	bf00      	nop
 800ed2c:	e021      	b.n	800ed72 <tcp_input+0x756>
              goto aborted;
 800ed2e:	bf00      	nop
 800ed30:	e01f      	b.n	800ed72 <tcp_input+0x756>
          goto aborted;
 800ed32:	bf00      	nop
 800ed34:	e01d      	b.n	800ed72 <tcp_input+0x756>
            goto aborted;
 800ed36:	bf00      	nop
 800ed38:	e01b      	b.n	800ed72 <tcp_input+0x756>
              goto aborted;
 800ed3a:	bf00      	nop
 800ed3c:	e019      	b.n	800ed72 <tcp_input+0x756>
 800ed3e:	bf00      	nop
 800ed40:	240083a4 	.word	0x240083a4
 800ed44:	240083b4 	.word	0x240083b4
 800ed48:	240083d4 	.word	0x240083d4
 800ed4c:	240083d1 	.word	0x240083d1
 800ed50:	240083cc 	.word	0x240083cc
 800ed54:	240083d0 	.word	0x240083d0
 800ed58:	240083ce 	.word	0x240083ce
 800ed5c:	240083d8 	.word	0x240083d8
 800ed60:	24008398 	.word	0x24008398
 800ed64:	0801a9a8 	.word	0x0801a9a8
 800ed68:	0801ab5c 	.word	0x0801ab5c
 800ed6c:	0801a9f4 	.word	0x0801a9f4
          goto aborted;
 800ed70:	bf00      	nop
    tcp_input_pcb = NULL;
 800ed72:	4b27      	ldr	r3, [pc, #156]	@ (800ee10 <tcp_input+0x7f4>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ed78:	4b26      	ldr	r3, [pc, #152]	@ (800ee14 <tcp_input+0x7f8>)
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ed7e:	4b26      	ldr	r3, [pc, #152]	@ (800ee18 <tcp_input+0x7fc>)
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d03f      	beq.n	800ee06 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ed86:	4b24      	ldr	r3, [pc, #144]	@ (800ee18 <tcp_input+0x7fc>)
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fd fe1c 	bl	800c9c8 <pbuf_free>
      inseg.p = NULL;
 800ed90:	4b21      	ldr	r3, [pc, #132]	@ (800ee18 <tcp_input+0x7fc>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ed96:	e036      	b.n	800ee06 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ed98:	4b20      	ldr	r3, [pc, #128]	@ (800ee1c <tcp_input+0x800>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	899b      	ldrh	r3, [r3, #12]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7fc f9fb 	bl	800b19c <lwip_htons>
 800eda6:	4603      	mov	r3, r0
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	f003 0304 	and.w	r3, r3, #4
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d118      	bne.n	800ede4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edb2:	4b1b      	ldr	r3, [pc, #108]	@ (800ee20 <tcp_input+0x804>)
 800edb4:	6819      	ldr	r1, [r3, #0]
 800edb6:	4b1b      	ldr	r3, [pc, #108]	@ (800ee24 <tcp_input+0x808>)
 800edb8:	881b      	ldrh	r3, [r3, #0]
 800edba:	461a      	mov	r2, r3
 800edbc:	4b1a      	ldr	r3, [pc, #104]	@ (800ee28 <tcp_input+0x80c>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edc2:	4b16      	ldr	r3, [pc, #88]	@ (800ee1c <tcp_input+0x800>)
 800edc4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edc6:	885b      	ldrh	r3, [r3, #2]
 800edc8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edca:	4a14      	ldr	r2, [pc, #80]	@ (800ee1c <tcp_input+0x800>)
 800edcc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edce:	8812      	ldrh	r2, [r2, #0]
 800edd0:	b292      	uxth	r2, r2
 800edd2:	9202      	str	r2, [sp, #8]
 800edd4:	9301      	str	r3, [sp, #4]
 800edd6:	4b15      	ldr	r3, [pc, #84]	@ (800ee2c <tcp_input+0x810>)
 800edd8:	9300      	str	r3, [sp, #0]
 800edda:	4b15      	ldr	r3, [pc, #84]	@ (800ee30 <tcp_input+0x814>)
 800eddc:	4602      	mov	r2, r0
 800edde:	2000      	movs	r0, #0
 800ede0:	f003 f816 	bl	8011e10 <tcp_rst>
    pbuf_free(p);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f7fd fdef 	bl	800c9c8 <pbuf_free>
  return;
 800edea:	e00c      	b.n	800ee06 <tcp_input+0x7ea>
    goto dropped;
 800edec:	bf00      	nop
 800edee:	e006      	b.n	800edfe <tcp_input+0x7e2>
    goto dropped;
 800edf0:	bf00      	nop
 800edf2:	e004      	b.n	800edfe <tcp_input+0x7e2>
    goto dropped;
 800edf4:	bf00      	nop
 800edf6:	e002      	b.n	800edfe <tcp_input+0x7e2>
      goto dropped;
 800edf8:	bf00      	nop
 800edfa:	e000      	b.n	800edfe <tcp_input+0x7e2>
      goto dropped;
 800edfc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f7fd fde2 	bl	800c9c8 <pbuf_free>
 800ee04:	e000      	b.n	800ee08 <tcp_input+0x7ec>
  return;
 800ee06:	bf00      	nop
}
 800ee08:	3724      	adds	r7, #36	@ 0x24
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd90      	pop	{r4, r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	240083d8 	.word	0x240083d8
 800ee14:	240083d4 	.word	0x240083d4
 800ee18:	240083a4 	.word	0x240083a4
 800ee1c:	240083b4 	.word	0x240083b4
 800ee20:	240083c8 	.word	0x240083c8
 800ee24:	240083ce 	.word	0x240083ce
 800ee28:	240083c4 	.word	0x240083c4
 800ee2c:	24005480 	.word	0x24005480
 800ee30:	24005484 	.word	0x24005484

0800ee34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d106      	bne.n	800ee50 <tcp_input_delayed_close+0x1c>
 800ee42:	4b17      	ldr	r3, [pc, #92]	@ (800eea0 <tcp_input_delayed_close+0x6c>)
 800ee44:	f240 225a 	movw	r2, #602	@ 0x25a
 800ee48:	4916      	ldr	r1, [pc, #88]	@ (800eea4 <tcp_input_delayed_close+0x70>)
 800ee4a:	4817      	ldr	r0, [pc, #92]	@ (800eea8 <tcp_input_delayed_close+0x74>)
 800ee4c:	f007 f882 	bl	8015f54 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ee50:	4b16      	ldr	r3, [pc, #88]	@ (800eeac <tcp_input_delayed_close+0x78>)
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	f003 0310 	and.w	r3, r3, #16
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d01c      	beq.n	800ee96 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	8b5b      	ldrh	r3, [r3, #26]
 800ee60:	f003 0310 	and.w	r3, r3, #16
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d10d      	bne.n	800ee84 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d008      	beq.n	800ee84 <tcp_input_delayed_close+0x50>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	6912      	ldr	r2, [r2, #16]
 800ee7c:	f06f 010e 	mvn.w	r1, #14
 800ee80:	4610      	mov	r0, r2
 800ee82:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ee84:	6879      	ldr	r1, [r7, #4]
 800ee86:	480a      	ldr	r0, [pc, #40]	@ (800eeb0 <tcp_input_delayed_close+0x7c>)
 800ee88:	f7ff fa50 	bl	800e32c <tcp_pcb_remove>
    tcp_free(pcb);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7fe f83b 	bl	800cf08 <tcp_free>
    return 1;
 800ee92:	2301      	movs	r3, #1
 800ee94:	e000      	b.n	800ee98 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ee96:	2300      	movs	r3, #0
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3708      	adds	r7, #8
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	0801a9a8 	.word	0x0801a9a8
 800eea4:	0801ab78 	.word	0x0801ab78
 800eea8:	0801a9f4 	.word	0x0801a9f4
 800eeac:	240083d1 	.word	0x240083d1
 800eeb0:	24008398 	.word	0x24008398

0800eeb4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eeb4:	b590      	push	{r4, r7, lr}
 800eeb6:	b08b      	sub	sp, #44	@ 0x2c
 800eeb8:	af04      	add	r7, sp, #16
 800eeba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eebc:	4b6f      	ldr	r3, [pc, #444]	@ (800f07c <tcp_listen_input+0x1c8>)
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	f003 0304 	and.w	r3, r3, #4
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f040 80d2 	bne.w	800f06e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d106      	bne.n	800eede <tcp_listen_input+0x2a>
 800eed0:	4b6b      	ldr	r3, [pc, #428]	@ (800f080 <tcp_listen_input+0x1cc>)
 800eed2:	f240 2281 	movw	r2, #641	@ 0x281
 800eed6:	496b      	ldr	r1, [pc, #428]	@ (800f084 <tcp_listen_input+0x1d0>)
 800eed8:	486b      	ldr	r0, [pc, #428]	@ (800f088 <tcp_listen_input+0x1d4>)
 800eeda:	f007 f83b 	bl	8015f54 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eede:	4b67      	ldr	r3, [pc, #412]	@ (800f07c <tcp_listen_input+0x1c8>)
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	f003 0310 	and.w	r3, r3, #16
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d019      	beq.n	800ef1e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeea:	4b68      	ldr	r3, [pc, #416]	@ (800f08c <tcp_listen_input+0x1d8>)
 800eeec:	6819      	ldr	r1, [r3, #0]
 800eeee:	4b68      	ldr	r3, [pc, #416]	@ (800f090 <tcp_listen_input+0x1dc>)
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	461a      	mov	r2, r3
 800eef4:	4b67      	ldr	r3, [pc, #412]	@ (800f094 <tcp_listen_input+0x1e0>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eefa:	4b67      	ldr	r3, [pc, #412]	@ (800f098 <tcp_listen_input+0x1e4>)
 800eefc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eefe:	885b      	ldrh	r3, [r3, #2]
 800ef00:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef02:	4a65      	ldr	r2, [pc, #404]	@ (800f098 <tcp_listen_input+0x1e4>)
 800ef04:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef06:	8812      	ldrh	r2, [r2, #0]
 800ef08:	b292      	uxth	r2, r2
 800ef0a:	9202      	str	r2, [sp, #8]
 800ef0c:	9301      	str	r3, [sp, #4]
 800ef0e:	4b63      	ldr	r3, [pc, #396]	@ (800f09c <tcp_listen_input+0x1e8>)
 800ef10:	9300      	str	r3, [sp, #0]
 800ef12:	4b63      	ldr	r3, [pc, #396]	@ (800f0a0 <tcp_listen_input+0x1ec>)
 800ef14:	4602      	mov	r2, r0
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f002 ff7a 	bl	8011e10 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ef1c:	e0a9      	b.n	800f072 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ef1e:	4b57      	ldr	r3, [pc, #348]	@ (800f07c <tcp_listen_input+0x1c8>)
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	f003 0302 	and.w	r3, r3, #2
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	f000 80a3 	beq.w	800f072 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	7d5b      	ldrb	r3, [r3, #21]
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7ff f927 	bl	800e184 <tcp_alloc>
 800ef36:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d111      	bne.n	800ef62 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	699b      	ldr	r3, [r3, #24]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00a      	beq.n	800ef5c <tcp_listen_input+0xa8>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	6910      	ldr	r0, [r2, #16]
 800ef4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef52:	2100      	movs	r1, #0
 800ef54:	4798      	blx	r3
 800ef56:	4603      	mov	r3, r0
 800ef58:	73bb      	strb	r3, [r7, #14]
      return;
 800ef5a:	e08b      	b.n	800f074 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ef5c:	23f0      	movs	r3, #240	@ 0xf0
 800ef5e:	73bb      	strb	r3, [r7, #14]
      return;
 800ef60:	e088      	b.n	800f074 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ef62:	4b50      	ldr	r3, [pc, #320]	@ (800f0a4 <tcp_listen_input+0x1f0>)
 800ef64:	695a      	ldr	r2, [r3, #20]
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ef6a:	4b4e      	ldr	r3, [pc, #312]	@ (800f0a4 <tcp_listen_input+0x1f0>)
 800ef6c:	691a      	ldr	r2, [r3, #16]
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	8ada      	ldrh	r2, [r3, #22]
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ef7a:	4b47      	ldr	r3, [pc, #284]	@ (800f098 <tcp_listen_input+0x1e4>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	881b      	ldrh	r3, [r3, #0]
 800ef80:	b29a      	uxth	r2, r3
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2203      	movs	r2, #3
 800ef8a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ef8c:	4b41      	ldr	r3, [pc, #260]	@ (800f094 <tcp_listen_input+0x1e0>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	1c5a      	adds	r2, r3, #1
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ef9e:	6978      	ldr	r0, [r7, #20]
 800efa0:	f7ff fa58 	bl	800e454 <tcp_next_iss>
 800efa4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	693a      	ldr	r2, [r7, #16]
 800efaa:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	693a      	ldr	r2, [r7, #16]
 800efb0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	693a      	ldr	r2, [r7, #16]
 800efb6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	693a      	ldr	r2, [r7, #16]
 800efbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800efbe:	4b35      	ldr	r3, [pc, #212]	@ (800f094 <tcp_listen_input+0x1e0>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	1e5a      	subs	r2, r3, #1
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	691a      	ldr	r2, [r3, #16]
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	7a5b      	ldrb	r3, [r3, #9]
 800efda:	f003 030c 	and.w	r3, r3, #12
 800efde:	b2da      	uxtb	r2, r3
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	7a1a      	ldrb	r2, [r3, #8]
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800efec:	4b2e      	ldr	r3, [pc, #184]	@ (800f0a8 <tcp_listen_input+0x1f4>)
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	60da      	str	r2, [r3, #12]
 800eff4:	4a2c      	ldr	r2, [pc, #176]	@ (800f0a8 <tcp_listen_input+0x1f4>)
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	6013      	str	r3, [r2, #0]
 800effa:	f003 f8cb 	bl	8012194 <tcp_timer_needed>
 800effe:	4b2b      	ldr	r3, [pc, #172]	@ (800f0ac <tcp_listen_input+0x1f8>)
 800f000:	2201      	movs	r2, #1
 800f002:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f004:	6978      	ldr	r0, [r7, #20]
 800f006:	f001 fd8b 	bl	8010b20 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f00a:	4b23      	ldr	r3, [pc, #140]	@ (800f098 <tcp_listen_input+0x1e4>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	89db      	ldrh	r3, [r3, #14]
 800f010:	b29a      	uxth	r2, r3
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	3304      	adds	r3, #4
 800f02c:	4618      	mov	r0, r3
 800f02e:	f004 fdef 	bl	8013c10 <ip4_route>
 800f032:	4601      	mov	r1, r0
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	3304      	adds	r3, #4
 800f038:	461a      	mov	r2, r3
 800f03a:	4620      	mov	r0, r4
 800f03c:	f7ff fa30 	bl	800e4a0 <tcp_eff_send_mss_netif>
 800f040:	4603      	mov	r3, r0
 800f042:	461a      	mov	r2, r3
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f048:	2112      	movs	r1, #18
 800f04a:	6978      	ldr	r0, [r7, #20]
 800f04c:	f002 f83e 	bl	80110cc <tcp_enqueue_flags>
 800f050:	4603      	mov	r3, r0
 800f052:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d004      	beq.n	800f066 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f05c:	2100      	movs	r1, #0
 800f05e:	6978      	ldr	r0, [r7, #20]
 800f060:	f7fe f97c 	bl	800d35c <tcp_abandon>
      return;
 800f064:	e006      	b.n	800f074 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f066:	6978      	ldr	r0, [r7, #20]
 800f068:	f002 f91e 	bl	80112a8 <tcp_output>
  return;
 800f06c:	e001      	b.n	800f072 <tcp_listen_input+0x1be>
    return;
 800f06e:	bf00      	nop
 800f070:	e000      	b.n	800f074 <tcp_listen_input+0x1c0>
  return;
 800f072:	bf00      	nop
}
 800f074:	371c      	adds	r7, #28
 800f076:	46bd      	mov	sp, r7
 800f078:	bd90      	pop	{r4, r7, pc}
 800f07a:	bf00      	nop
 800f07c:	240083d0 	.word	0x240083d0
 800f080:	0801a9a8 	.word	0x0801a9a8
 800f084:	0801aba0 	.word	0x0801aba0
 800f088:	0801a9f4 	.word	0x0801a9f4
 800f08c:	240083c8 	.word	0x240083c8
 800f090:	240083ce 	.word	0x240083ce
 800f094:	240083c4 	.word	0x240083c4
 800f098:	240083b4 	.word	0x240083b4
 800f09c:	24005480 	.word	0x24005480
 800f0a0:	24005484 	.word	0x24005484
 800f0a4:	24005470 	.word	0x24005470
 800f0a8:	24008398 	.word	0x24008398
 800f0ac:	240083a0 	.word	0x240083a0

0800f0b0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af04      	add	r7, sp, #16
 800f0b6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f0b8:	4b2f      	ldr	r3, [pc, #188]	@ (800f178 <tcp_timewait_input+0xc8>)
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	f003 0304 	and.w	r3, r3, #4
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d153      	bne.n	800f16c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d106      	bne.n	800f0d8 <tcp_timewait_input+0x28>
 800f0ca:	4b2c      	ldr	r3, [pc, #176]	@ (800f17c <tcp_timewait_input+0xcc>)
 800f0cc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f0d0:	492b      	ldr	r1, [pc, #172]	@ (800f180 <tcp_timewait_input+0xd0>)
 800f0d2:	482c      	ldr	r0, [pc, #176]	@ (800f184 <tcp_timewait_input+0xd4>)
 800f0d4:	f006 ff3e 	bl	8015f54 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f0d8:	4b27      	ldr	r3, [pc, #156]	@ (800f178 <tcp_timewait_input+0xc8>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 0302 	and.w	r3, r3, #2
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d02a      	beq.n	800f13a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f0e4:	4b28      	ldr	r3, [pc, #160]	@ (800f188 <tcp_timewait_input+0xd8>)
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0ec:	1ad3      	subs	r3, r2, r3
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	db2d      	blt.n	800f14e <tcp_timewait_input+0x9e>
 800f0f2:	4b25      	ldr	r3, [pc, #148]	@ (800f188 <tcp_timewait_input+0xd8>)
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0fa:	6879      	ldr	r1, [r7, #4]
 800f0fc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f0fe:	440b      	add	r3, r1
 800f100:	1ad3      	subs	r3, r2, r3
 800f102:	2b00      	cmp	r3, #0
 800f104:	dc23      	bgt.n	800f14e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f106:	4b21      	ldr	r3, [pc, #132]	@ (800f18c <tcp_timewait_input+0xdc>)
 800f108:	6819      	ldr	r1, [r3, #0]
 800f10a:	4b21      	ldr	r3, [pc, #132]	@ (800f190 <tcp_timewait_input+0xe0>)
 800f10c:	881b      	ldrh	r3, [r3, #0]
 800f10e:	461a      	mov	r2, r3
 800f110:	4b1d      	ldr	r3, [pc, #116]	@ (800f188 <tcp_timewait_input+0xd8>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f116:	4b1f      	ldr	r3, [pc, #124]	@ (800f194 <tcp_timewait_input+0xe4>)
 800f118:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f11a:	885b      	ldrh	r3, [r3, #2]
 800f11c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f11e:	4a1d      	ldr	r2, [pc, #116]	@ (800f194 <tcp_timewait_input+0xe4>)
 800f120:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f122:	8812      	ldrh	r2, [r2, #0]
 800f124:	b292      	uxth	r2, r2
 800f126:	9202      	str	r2, [sp, #8]
 800f128:	9301      	str	r3, [sp, #4]
 800f12a:	4b1b      	ldr	r3, [pc, #108]	@ (800f198 <tcp_timewait_input+0xe8>)
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	4b1b      	ldr	r3, [pc, #108]	@ (800f19c <tcp_timewait_input+0xec>)
 800f130:	4602      	mov	r2, r0
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f002 fe6c 	bl	8011e10 <tcp_rst>
      return;
 800f138:	e01b      	b.n	800f172 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f13a:	4b0f      	ldr	r3, [pc, #60]	@ (800f178 <tcp_timewait_input+0xc8>)
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	f003 0301 	and.w	r3, r3, #1
 800f142:	2b00      	cmp	r3, #0
 800f144:	d003      	beq.n	800f14e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f146:	4b16      	ldr	r3, [pc, #88]	@ (800f1a0 <tcp_timewait_input+0xf0>)
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f14e:	4b10      	ldr	r3, [pc, #64]	@ (800f190 <tcp_timewait_input+0xe0>)
 800f150:	881b      	ldrh	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d00c      	beq.n	800f170 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	8b5b      	ldrh	r3, [r3, #26]
 800f15a:	f043 0302 	orr.w	r3, r3, #2
 800f15e:	b29a      	uxth	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f002 f89f 	bl	80112a8 <tcp_output>
  }
  return;
 800f16a:	e001      	b.n	800f170 <tcp_timewait_input+0xc0>
    return;
 800f16c:	bf00      	nop
 800f16e:	e000      	b.n	800f172 <tcp_timewait_input+0xc2>
  return;
 800f170:	bf00      	nop
}
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	240083d0 	.word	0x240083d0
 800f17c:	0801a9a8 	.word	0x0801a9a8
 800f180:	0801abc0 	.word	0x0801abc0
 800f184:	0801a9f4 	.word	0x0801a9f4
 800f188:	240083c4 	.word	0x240083c4
 800f18c:	240083c8 	.word	0x240083c8
 800f190:	240083ce 	.word	0x240083ce
 800f194:	240083b4 	.word	0x240083b4
 800f198:	24005480 	.word	0x24005480
 800f19c:	24005484 	.word	0x24005484
 800f1a0:	2400838c 	.word	0x2400838c

0800f1a4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f1a4:	b590      	push	{r4, r7, lr}
 800f1a6:	b08d      	sub	sp, #52	@ 0x34
 800f1a8:	af04      	add	r7, sp, #16
 800f1aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d106      	bne.n	800f1c8 <tcp_process+0x24>
 800f1ba:	4b9d      	ldr	r3, [pc, #628]	@ (800f430 <tcp_process+0x28c>)
 800f1bc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f1c0:	499c      	ldr	r1, [pc, #624]	@ (800f434 <tcp_process+0x290>)
 800f1c2:	489d      	ldr	r0, [pc, #628]	@ (800f438 <tcp_process+0x294>)
 800f1c4:	f006 fec6 	bl	8015f54 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f1c8:	4b9c      	ldr	r3, [pc, #624]	@ (800f43c <tcp_process+0x298>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	f003 0304 	and.w	r3, r3, #4
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d04e      	beq.n	800f272 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	7d1b      	ldrb	r3, [r3, #20]
 800f1d8:	2b02      	cmp	r3, #2
 800f1da:	d108      	bne.n	800f1ee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1e0:	4b97      	ldr	r3, [pc, #604]	@ (800f440 <tcp_process+0x29c>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d123      	bne.n	800f230 <tcp_process+0x8c>
        acceptable = 1;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	76fb      	strb	r3, [r7, #27]
 800f1ec:	e020      	b.n	800f230 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1f2:	4b94      	ldr	r3, [pc, #592]	@ (800f444 <tcp_process+0x2a0>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d102      	bne.n	800f200 <tcp_process+0x5c>
        acceptable = 1;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	76fb      	strb	r3, [r7, #27]
 800f1fe:	e017      	b.n	800f230 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f200:	4b90      	ldr	r3, [pc, #576]	@ (800f444 <tcp_process+0x2a0>)
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f208:	1ad3      	subs	r3, r2, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	db10      	blt.n	800f230 <tcp_process+0x8c>
 800f20e:	4b8d      	ldr	r3, [pc, #564]	@ (800f444 <tcp_process+0x2a0>)
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f216:	6879      	ldr	r1, [r7, #4]
 800f218:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f21a:	440b      	add	r3, r1
 800f21c:	1ad3      	subs	r3, r2, r3
 800f21e:	2b00      	cmp	r3, #0
 800f220:	dc06      	bgt.n	800f230 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	8b5b      	ldrh	r3, [r3, #26]
 800f226:	f043 0302 	orr.w	r3, r3, #2
 800f22a:	b29a      	uxth	r2, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f230:	7efb      	ldrb	r3, [r7, #27]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d01b      	beq.n	800f26e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	7d1b      	ldrb	r3, [r3, #20]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d106      	bne.n	800f24c <tcp_process+0xa8>
 800f23e:	4b7c      	ldr	r3, [pc, #496]	@ (800f430 <tcp_process+0x28c>)
 800f240:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f244:	4980      	ldr	r1, [pc, #512]	@ (800f448 <tcp_process+0x2a4>)
 800f246:	487c      	ldr	r0, [pc, #496]	@ (800f438 <tcp_process+0x294>)
 800f248:	f006 fe84 	bl	8015f54 <iprintf>
      recv_flags |= TF_RESET;
 800f24c:	4b7f      	ldr	r3, [pc, #508]	@ (800f44c <tcp_process+0x2a8>)
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	f043 0308 	orr.w	r3, r3, #8
 800f254:	b2da      	uxtb	r2, r3
 800f256:	4b7d      	ldr	r3, [pc, #500]	@ (800f44c <tcp_process+0x2a8>)
 800f258:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	8b5b      	ldrh	r3, [r3, #26]
 800f25e:	f023 0301 	bic.w	r3, r3, #1
 800f262:	b29a      	uxth	r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f268:	f06f 030d 	mvn.w	r3, #13
 800f26c:	e37a      	b.n	800f964 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f26e:	2300      	movs	r3, #0
 800f270:	e378      	b.n	800f964 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f272:	4b72      	ldr	r3, [pc, #456]	@ (800f43c <tcp_process+0x298>)
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	f003 0302 	and.w	r3, r3, #2
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d010      	beq.n	800f2a0 <tcp_process+0xfc>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	7d1b      	ldrb	r3, [r3, #20]
 800f282:	2b02      	cmp	r3, #2
 800f284:	d00c      	beq.n	800f2a0 <tcp_process+0xfc>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	7d1b      	ldrb	r3, [r3, #20]
 800f28a:	2b03      	cmp	r3, #3
 800f28c:	d008      	beq.n	800f2a0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	8b5b      	ldrh	r3, [r3, #26]
 800f292:	f043 0302 	orr.w	r3, r3, #2
 800f296:	b29a      	uxth	r2, r3
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f29c:	2300      	movs	r3, #0
 800f29e:	e361      	b.n	800f964 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	8b5b      	ldrh	r3, [r3, #26]
 800f2a4:	f003 0310 	and.w	r3, r3, #16
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d103      	bne.n	800f2b4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f2ac:	4b68      	ldr	r3, [pc, #416]	@ (800f450 <tcp_process+0x2ac>)
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f001 fc2b 	bl	8010b20 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	7d1b      	ldrb	r3, [r3, #20]
 800f2ce:	3b02      	subs	r3, #2
 800f2d0:	2b07      	cmp	r3, #7
 800f2d2:	f200 8337 	bhi.w	800f944 <tcp_process+0x7a0>
 800f2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f2dc <tcp_process+0x138>)
 800f2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2dc:	0800f2fd 	.word	0x0800f2fd
 800f2e0:	0800f52d 	.word	0x0800f52d
 800f2e4:	0800f6a5 	.word	0x0800f6a5
 800f2e8:	0800f6cf 	.word	0x0800f6cf
 800f2ec:	0800f7f3 	.word	0x0800f7f3
 800f2f0:	0800f6a5 	.word	0x0800f6a5
 800f2f4:	0800f87f 	.word	0x0800f87f
 800f2f8:	0800f90f 	.word	0x0800f90f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f2fc:	4b4f      	ldr	r3, [pc, #316]	@ (800f43c <tcp_process+0x298>)
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	f003 0310 	and.w	r3, r3, #16
 800f304:	2b00      	cmp	r3, #0
 800f306:	f000 80e4 	beq.w	800f4d2 <tcp_process+0x32e>
 800f30a:	4b4c      	ldr	r3, [pc, #304]	@ (800f43c <tcp_process+0x298>)
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	f003 0302 	and.w	r3, r3, #2
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 80dd 	beq.w	800f4d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f31c:	1c5a      	adds	r2, r3, #1
 800f31e:	4b48      	ldr	r3, [pc, #288]	@ (800f440 <tcp_process+0x29c>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	429a      	cmp	r2, r3
 800f324:	f040 80d5 	bne.w	800f4d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f328:	4b46      	ldr	r3, [pc, #280]	@ (800f444 <tcp_process+0x2a0>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800f33a:	4b41      	ldr	r3, [pc, #260]	@ (800f440 <tcp_process+0x29c>)
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f342:	4b44      	ldr	r3, [pc, #272]	@ (800f454 <tcp_process+0x2b0>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	89db      	ldrh	r3, [r3, #14]
 800f348:	b29a      	uxth	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f35c:	4b39      	ldr	r3, [pc, #228]	@ (800f444 <tcp_process+0x2a0>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	1e5a      	subs	r2, r3, #1
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2204      	movs	r2, #4
 800f36a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	3304      	adds	r3, #4
 800f374:	4618      	mov	r0, r3
 800f376:	f004 fc4b 	bl	8013c10 <ip4_route>
 800f37a:	4601      	mov	r1, r0
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	3304      	adds	r3, #4
 800f380:	461a      	mov	r2, r3
 800f382:	4620      	mov	r0, r4
 800f384:	f7ff f88c 	bl	800e4a0 <tcp_eff_send_mss_netif>
 800f388:	4603      	mov	r3, r0
 800f38a:	461a      	mov	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f394:	009a      	lsls	r2, r3, #2
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f39a:	005b      	lsls	r3, r3, #1
 800f39c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f3a0:	428b      	cmp	r3, r1
 800f3a2:	bf38      	it	cc
 800f3a4:	460b      	movcc	r3, r1
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d204      	bcs.n	800f3b4 <tcp_process+0x210>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	e00d      	b.n	800f3d0 <tcp_process+0x22c>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f3b8:	005b      	lsls	r3, r3, #1
 800f3ba:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d904      	bls.n	800f3cc <tcp_process+0x228>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f3c6:	005b      	lsls	r3, r3, #1
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	e001      	b.n	800f3d0 <tcp_process+0x22c>
 800f3cc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d106      	bne.n	800f3ee <tcp_process+0x24a>
 800f3e0:	4b13      	ldr	r3, [pc, #76]	@ (800f430 <tcp_process+0x28c>)
 800f3e2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800f3e6:	491c      	ldr	r1, [pc, #112]	@ (800f458 <tcp_process+0x2b4>)
 800f3e8:	4813      	ldr	r0, [pc, #76]	@ (800f438 <tcp_process+0x294>)
 800f3ea:	f006 fdb3 	bl	8015f54 <iprintf>
        --pcb->snd_queuelen;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f402:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d12a      	bne.n	800f460 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f40e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d106      	bne.n	800f424 <tcp_process+0x280>
 800f416:	4b06      	ldr	r3, [pc, #24]	@ (800f430 <tcp_process+0x28c>)
 800f418:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800f41c:	490f      	ldr	r1, [pc, #60]	@ (800f45c <tcp_process+0x2b8>)
 800f41e:	4806      	ldr	r0, [pc, #24]	@ (800f438 <tcp_process+0x294>)
 800f420:	f006 fd98 	bl	8015f54 <iprintf>
          pcb->unsent = rseg->next;
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f42c:	e01c      	b.n	800f468 <tcp_process+0x2c4>
 800f42e:	bf00      	nop
 800f430:	0801a9a8 	.word	0x0801a9a8
 800f434:	0801abe0 	.word	0x0801abe0
 800f438:	0801a9f4 	.word	0x0801a9f4
 800f43c:	240083d0 	.word	0x240083d0
 800f440:	240083c8 	.word	0x240083c8
 800f444:	240083c4 	.word	0x240083c4
 800f448:	0801abfc 	.word	0x0801abfc
 800f44c:	240083d1 	.word	0x240083d1
 800f450:	2400838c 	.word	0x2400838c
 800f454:	240083b4 	.word	0x240083b4
 800f458:	0801ac1c 	.word	0x0801ac1c
 800f45c:	0801ac34 	.word	0x0801ac34
        } else {
          pcb->unacked = rseg->next;
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800f468:	69f8      	ldr	r0, [r7, #28]
 800f46a:	f7fe fd22 	bl	800deb2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f472:	2b00      	cmp	r3, #0
 800f474:	d104      	bne.n	800f480 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f47c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f47e:	e006      	b.n	800f48e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00a      	beq.n	800f4ae <tcp_process+0x30a>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	6910      	ldr	r0, [r2, #16]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	6879      	ldr	r1, [r7, #4]
 800f4a6:	4798      	blx	r3
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	76bb      	strb	r3, [r7, #26]
 800f4ac:	e001      	b.n	800f4b2 <tcp_process+0x30e>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f4b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f4b6:	f113 0f0d 	cmn.w	r3, #13
 800f4ba:	d102      	bne.n	800f4c2 <tcp_process+0x31e>
          return ERR_ABRT;
 800f4bc:	f06f 030c 	mvn.w	r3, #12
 800f4c0:	e250      	b.n	800f964 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	8b5b      	ldrh	r3, [r3, #26]
 800f4c6:	f043 0302 	orr.w	r3, r3, #2
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f4d0:	e23a      	b.n	800f948 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f4d2:	4b98      	ldr	r3, [pc, #608]	@ (800f734 <tcp_process+0x590>)
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	f003 0310 	and.w	r3, r3, #16
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	f000 8234 	beq.w	800f948 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4e0:	4b95      	ldr	r3, [pc, #596]	@ (800f738 <tcp_process+0x594>)
 800f4e2:	6819      	ldr	r1, [r3, #0]
 800f4e4:	4b95      	ldr	r3, [pc, #596]	@ (800f73c <tcp_process+0x598>)
 800f4e6:	881b      	ldrh	r3, [r3, #0]
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	4b95      	ldr	r3, [pc, #596]	@ (800f740 <tcp_process+0x59c>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4f0:	4b94      	ldr	r3, [pc, #592]	@ (800f744 <tcp_process+0x5a0>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4f4:	885b      	ldrh	r3, [r3, #2]
 800f4f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4f8:	4a92      	ldr	r2, [pc, #584]	@ (800f744 <tcp_process+0x5a0>)
 800f4fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4fc:	8812      	ldrh	r2, [r2, #0]
 800f4fe:	b292      	uxth	r2, r2
 800f500:	9202      	str	r2, [sp, #8]
 800f502:	9301      	str	r3, [sp, #4]
 800f504:	4b90      	ldr	r3, [pc, #576]	@ (800f748 <tcp_process+0x5a4>)
 800f506:	9300      	str	r3, [sp, #0]
 800f508:	4b90      	ldr	r3, [pc, #576]	@ (800f74c <tcp_process+0x5a8>)
 800f50a:	4602      	mov	r2, r0
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f002 fc7f 	bl	8011e10 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f518:	2b05      	cmp	r3, #5
 800f51a:	f200 8215 	bhi.w	800f948 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2200      	movs	r2, #0
 800f522:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f002 fa4b 	bl	80119c0 <tcp_rexmit_rto>
      break;
 800f52a:	e20d      	b.n	800f948 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f52c:	4b81      	ldr	r3, [pc, #516]	@ (800f734 <tcp_process+0x590>)
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	f003 0310 	and.w	r3, r3, #16
 800f534:	2b00      	cmp	r3, #0
 800f536:	f000 80a1 	beq.w	800f67c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f53a:	4b7f      	ldr	r3, [pc, #508]	@ (800f738 <tcp_process+0x594>)
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f542:	1ad3      	subs	r3, r2, r3
 800f544:	3b01      	subs	r3, #1
 800f546:	2b00      	cmp	r3, #0
 800f548:	db7e      	blt.n	800f648 <tcp_process+0x4a4>
 800f54a:	4b7b      	ldr	r3, [pc, #492]	@ (800f738 <tcp_process+0x594>)
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	2b00      	cmp	r3, #0
 800f556:	dc77      	bgt.n	800f648 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2204      	movs	r2, #4
 800f55c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f562:	2b00      	cmp	r3, #0
 800f564:	d102      	bne.n	800f56c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f566:	23fa      	movs	r3, #250	@ 0xfa
 800f568:	76bb      	strb	r3, [r7, #26]
 800f56a:	e01d      	b.n	800f5a8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f570:	699b      	ldr	r3, [r3, #24]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d106      	bne.n	800f584 <tcp_process+0x3e0>
 800f576:	4b76      	ldr	r3, [pc, #472]	@ (800f750 <tcp_process+0x5ac>)
 800f578:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f57c:	4975      	ldr	r1, [pc, #468]	@ (800f754 <tcp_process+0x5b0>)
 800f57e:	4876      	ldr	r0, [pc, #472]	@ (800f758 <tcp_process+0x5b4>)
 800f580:	f006 fce8 	bl	8015f54 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f588:	699b      	ldr	r3, [r3, #24]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d00a      	beq.n	800f5a4 <tcp_process+0x400>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f592:	699b      	ldr	r3, [r3, #24]
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	6910      	ldr	r0, [r2, #16]
 800f598:	2200      	movs	r2, #0
 800f59a:	6879      	ldr	r1, [r7, #4]
 800f59c:	4798      	blx	r3
 800f59e:	4603      	mov	r3, r0
 800f5a0:	76bb      	strb	r3, [r7, #26]
 800f5a2:	e001      	b.n	800f5a8 <tcp_process+0x404>
 800f5a4:	23f0      	movs	r3, #240	@ 0xf0
 800f5a6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f5a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00a      	beq.n	800f5c6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f5b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f5b4:	f113 0f0d 	cmn.w	r3, #13
 800f5b8:	d002      	beq.n	800f5c0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f7fd ff8c 	bl	800d4d8 <tcp_abort>
            }
            return ERR_ABRT;
 800f5c0:	f06f 030c 	mvn.w	r3, #12
 800f5c4:	e1ce      	b.n	800f964 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 fae0 	bl	800fb8c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f5cc:	4b63      	ldr	r3, [pc, #396]	@ (800f75c <tcp_process+0x5b8>)
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d005      	beq.n	800f5e0 <tcp_process+0x43c>
            recv_acked--;
 800f5d4:	4b61      	ldr	r3, [pc, #388]	@ (800f75c <tcp_process+0x5b8>)
 800f5d6:	881b      	ldrh	r3, [r3, #0]
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	b29a      	uxth	r2, r3
 800f5dc:	4b5f      	ldr	r3, [pc, #380]	@ (800f75c <tcp_process+0x5b8>)
 800f5de:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f5e4:	009a      	lsls	r2, r3, #2
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f5f0:	428b      	cmp	r3, r1
 800f5f2:	bf38      	it	cc
 800f5f4:	460b      	movcc	r3, r1
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d204      	bcs.n	800f604 <tcp_process+0x460>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	b29b      	uxth	r3, r3
 800f602:	e00d      	b.n	800f620 <tcp_process+0x47c>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f608:	005b      	lsls	r3, r3, #1
 800f60a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f60e:	4293      	cmp	r3, r2
 800f610:	d904      	bls.n	800f61c <tcp_process+0x478>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f616:	005b      	lsls	r3, r3, #1
 800f618:	b29b      	uxth	r3, r3
 800f61a:	e001      	b.n	800f620 <tcp_process+0x47c>
 800f61c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f626:	4b4e      	ldr	r3, [pc, #312]	@ (800f760 <tcp_process+0x5bc>)
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	f003 0320 	and.w	r3, r3, #32
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d037      	beq.n	800f6a2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	8b5b      	ldrh	r3, [r3, #26]
 800f636:	f043 0302 	orr.w	r3, r3, #2
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2207      	movs	r2, #7
 800f644:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f646:	e02c      	b.n	800f6a2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f648:	4b3b      	ldr	r3, [pc, #236]	@ (800f738 <tcp_process+0x594>)
 800f64a:	6819      	ldr	r1, [r3, #0]
 800f64c:	4b3b      	ldr	r3, [pc, #236]	@ (800f73c <tcp_process+0x598>)
 800f64e:	881b      	ldrh	r3, [r3, #0]
 800f650:	461a      	mov	r2, r3
 800f652:	4b3b      	ldr	r3, [pc, #236]	@ (800f740 <tcp_process+0x59c>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f658:	4b3a      	ldr	r3, [pc, #232]	@ (800f744 <tcp_process+0x5a0>)
 800f65a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f65c:	885b      	ldrh	r3, [r3, #2]
 800f65e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f660:	4a38      	ldr	r2, [pc, #224]	@ (800f744 <tcp_process+0x5a0>)
 800f662:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f664:	8812      	ldrh	r2, [r2, #0]
 800f666:	b292      	uxth	r2, r2
 800f668:	9202      	str	r2, [sp, #8]
 800f66a:	9301      	str	r3, [sp, #4]
 800f66c:	4b36      	ldr	r3, [pc, #216]	@ (800f748 <tcp_process+0x5a4>)
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	4b36      	ldr	r3, [pc, #216]	@ (800f74c <tcp_process+0x5a8>)
 800f672:	4602      	mov	r2, r0
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f002 fbcb 	bl	8011e10 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f67a:	e167      	b.n	800f94c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f67c:	4b2d      	ldr	r3, [pc, #180]	@ (800f734 <tcp_process+0x590>)
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	f003 0302 	and.w	r3, r3, #2
 800f684:	2b00      	cmp	r3, #0
 800f686:	f000 8161 	beq.w	800f94c <tcp_process+0x7a8>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f68e:	1e5a      	subs	r2, r3, #1
 800f690:	4b2b      	ldr	r3, [pc, #172]	@ (800f740 <tcp_process+0x59c>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	429a      	cmp	r2, r3
 800f696:	f040 8159 	bne.w	800f94c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f002 f9b2 	bl	8011a04 <tcp_rexmit>
      break;
 800f6a0:	e154      	b.n	800f94c <tcp_process+0x7a8>
 800f6a2:	e153      	b.n	800f94c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 fa71 	bl	800fb8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f6aa:	4b2d      	ldr	r3, [pc, #180]	@ (800f760 <tcp_process+0x5bc>)
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	f003 0320 	and.w	r3, r3, #32
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	f000 814c 	beq.w	800f950 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	8b5b      	ldrh	r3, [r3, #26]
 800f6bc:	f043 0302 	orr.w	r3, r3, #2
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2207      	movs	r2, #7
 800f6ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f6cc:	e140      	b.n	800f950 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 fa5c 	bl	800fb8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f6d4:	4b22      	ldr	r3, [pc, #136]	@ (800f760 <tcp_process+0x5bc>)
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	f003 0320 	and.w	r3, r3, #32
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d071      	beq.n	800f7c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f6e0:	4b14      	ldr	r3, [pc, #80]	@ (800f734 <tcp_process+0x590>)
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	f003 0310 	and.w	r3, r3, #16
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d060      	beq.n	800f7ae <tcp_process+0x60a>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f6f0:	4b11      	ldr	r3, [pc, #68]	@ (800f738 <tcp_process+0x594>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d15a      	bne.n	800f7ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d156      	bne.n	800f7ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	8b5b      	ldrh	r3, [r3, #26]
 800f704:	f043 0302 	orr.w	r3, r3, #2
 800f708:	b29a      	uxth	r2, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f7fe fdbc 	bl	800e28c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f714:	4b13      	ldr	r3, [pc, #76]	@ (800f764 <tcp_process+0x5c0>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d105      	bne.n	800f72a <tcp_process+0x586>
 800f71e:	4b11      	ldr	r3, [pc, #68]	@ (800f764 <tcp_process+0x5c0>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	4a0f      	ldr	r2, [pc, #60]	@ (800f764 <tcp_process+0x5c0>)
 800f726:	6013      	str	r3, [r2, #0]
 800f728:	e02e      	b.n	800f788 <tcp_process+0x5e4>
 800f72a:	4b0e      	ldr	r3, [pc, #56]	@ (800f764 <tcp_process+0x5c0>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	617b      	str	r3, [r7, #20]
 800f730:	e027      	b.n	800f782 <tcp_process+0x5de>
 800f732:	bf00      	nop
 800f734:	240083d0 	.word	0x240083d0
 800f738:	240083c8 	.word	0x240083c8
 800f73c:	240083ce 	.word	0x240083ce
 800f740:	240083c4 	.word	0x240083c4
 800f744:	240083b4 	.word	0x240083b4
 800f748:	24005480 	.word	0x24005480
 800f74c:	24005484 	.word	0x24005484
 800f750:	0801a9a8 	.word	0x0801a9a8
 800f754:	0801ac48 	.word	0x0801ac48
 800f758:	0801a9f4 	.word	0x0801a9f4
 800f75c:	240083cc 	.word	0x240083cc
 800f760:	240083d1 	.word	0x240083d1
 800f764:	24008398 	.word	0x24008398
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	68db      	ldr	r3, [r3, #12]
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	429a      	cmp	r2, r3
 800f770:	d104      	bne.n	800f77c <tcp_process+0x5d8>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	68da      	ldr	r2, [r3, #12]
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	60da      	str	r2, [r3, #12]
 800f77a:	e005      	b.n	800f788 <tcp_process+0x5e4>
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	617b      	str	r3, [r7, #20]
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d1ef      	bne.n	800f768 <tcp_process+0x5c4>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	60da      	str	r2, [r3, #12]
 800f78e:	4b77      	ldr	r3, [pc, #476]	@ (800f96c <tcp_process+0x7c8>)
 800f790:	2201      	movs	r2, #1
 800f792:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	220a      	movs	r2, #10
 800f798:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f79a:	4b75      	ldr	r3, [pc, #468]	@ (800f970 <tcp_process+0x7cc>)
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	60da      	str	r2, [r3, #12]
 800f7a2:	4a73      	ldr	r2, [pc, #460]	@ (800f970 <tcp_process+0x7cc>)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6013      	str	r3, [r2, #0]
 800f7a8:	f002 fcf4 	bl	8012194 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f7ac:	e0d2      	b.n	800f954 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	8b5b      	ldrh	r3, [r3, #26]
 800f7b2:	f043 0302 	orr.w	r3, r3, #2
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2208      	movs	r2, #8
 800f7c0:	751a      	strb	r2, [r3, #20]
      break;
 800f7c2:	e0c7      	b.n	800f954 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f7c4:	4b6b      	ldr	r3, [pc, #428]	@ (800f974 <tcp_process+0x7d0>)
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	f003 0310 	and.w	r3, r3, #16
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 80c1 	beq.w	800f954 <tcp_process+0x7b0>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f7d6:	4b68      	ldr	r3, [pc, #416]	@ (800f978 <tcp_process+0x7d4>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	f040 80ba 	bne.w	800f954 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f040 80b5 	bne.w	800f954 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2206      	movs	r2, #6
 800f7ee:	751a      	strb	r2, [r3, #20]
      break;
 800f7f0:	e0b0      	b.n	800f954 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f000 f9ca 	bl	800fb8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f7f8:	4b60      	ldr	r3, [pc, #384]	@ (800f97c <tcp_process+0x7d8>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	f003 0320 	and.w	r3, r3, #32
 800f800:	2b00      	cmp	r3, #0
 800f802:	f000 80a9 	beq.w	800f958 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	8b5b      	ldrh	r3, [r3, #26]
 800f80a:	f043 0302 	orr.w	r3, r3, #2
 800f80e:	b29a      	uxth	r2, r3
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7fe fd39 	bl	800e28c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f81a:	4b59      	ldr	r3, [pc, #356]	@ (800f980 <tcp_process+0x7dc>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	429a      	cmp	r2, r3
 800f822:	d105      	bne.n	800f830 <tcp_process+0x68c>
 800f824:	4b56      	ldr	r3, [pc, #344]	@ (800f980 <tcp_process+0x7dc>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	4a55      	ldr	r2, [pc, #340]	@ (800f980 <tcp_process+0x7dc>)
 800f82c:	6013      	str	r3, [r2, #0]
 800f82e:	e013      	b.n	800f858 <tcp_process+0x6b4>
 800f830:	4b53      	ldr	r3, [pc, #332]	@ (800f980 <tcp_process+0x7dc>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	613b      	str	r3, [r7, #16]
 800f836:	e00c      	b.n	800f852 <tcp_process+0x6ae>
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d104      	bne.n	800f84c <tcp_process+0x6a8>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	68da      	ldr	r2, [r3, #12]
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	60da      	str	r2, [r3, #12]
 800f84a:	e005      	b.n	800f858 <tcp_process+0x6b4>
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	68db      	ldr	r3, [r3, #12]
 800f850:	613b      	str	r3, [r7, #16]
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1ef      	bne.n	800f838 <tcp_process+0x694>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	60da      	str	r2, [r3, #12]
 800f85e:	4b43      	ldr	r3, [pc, #268]	@ (800f96c <tcp_process+0x7c8>)
 800f860:	2201      	movs	r2, #1
 800f862:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	220a      	movs	r2, #10
 800f868:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f86a:	4b41      	ldr	r3, [pc, #260]	@ (800f970 <tcp_process+0x7cc>)
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	60da      	str	r2, [r3, #12]
 800f872:	4a3f      	ldr	r2, [pc, #252]	@ (800f970 <tcp_process+0x7cc>)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6013      	str	r3, [r2, #0]
 800f878:	f002 fc8c 	bl	8012194 <tcp_timer_needed>
      }
      break;
 800f87c:	e06c      	b.n	800f958 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 f984 	bl	800fb8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f884:	4b3b      	ldr	r3, [pc, #236]	@ (800f974 <tcp_process+0x7d0>)
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	f003 0310 	and.w	r3, r3, #16
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d065      	beq.n	800f95c <tcp_process+0x7b8>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f894:	4b38      	ldr	r3, [pc, #224]	@ (800f978 <tcp_process+0x7d4>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d15f      	bne.n	800f95c <tcp_process+0x7b8>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d15b      	bne.n	800f95c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f7fe fcf1 	bl	800e28c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f8aa:	4b35      	ldr	r3, [pc, #212]	@ (800f980 <tcp_process+0x7dc>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d105      	bne.n	800f8c0 <tcp_process+0x71c>
 800f8b4:	4b32      	ldr	r3, [pc, #200]	@ (800f980 <tcp_process+0x7dc>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	4a31      	ldr	r2, [pc, #196]	@ (800f980 <tcp_process+0x7dc>)
 800f8bc:	6013      	str	r3, [r2, #0]
 800f8be:	e013      	b.n	800f8e8 <tcp_process+0x744>
 800f8c0:	4b2f      	ldr	r3, [pc, #188]	@ (800f980 <tcp_process+0x7dc>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	60fb      	str	r3, [r7, #12]
 800f8c6:	e00c      	b.n	800f8e2 <tcp_process+0x73e>
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	68db      	ldr	r3, [r3, #12]
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d104      	bne.n	800f8dc <tcp_process+0x738>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	68da      	ldr	r2, [r3, #12]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	60da      	str	r2, [r3, #12]
 800f8da:	e005      	b.n	800f8e8 <tcp_process+0x744>
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	60fb      	str	r3, [r7, #12]
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1ef      	bne.n	800f8c8 <tcp_process+0x724>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	60da      	str	r2, [r3, #12]
 800f8ee:	4b1f      	ldr	r3, [pc, #124]	@ (800f96c <tcp_process+0x7c8>)
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	220a      	movs	r2, #10
 800f8f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f8fa:	4b1d      	ldr	r3, [pc, #116]	@ (800f970 <tcp_process+0x7cc>)
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	60da      	str	r2, [r3, #12]
 800f902:	4a1b      	ldr	r2, [pc, #108]	@ (800f970 <tcp_process+0x7cc>)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6013      	str	r3, [r2, #0]
 800f908:	f002 fc44 	bl	8012194 <tcp_timer_needed>
      }
      break;
 800f90c:	e026      	b.n	800f95c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f93c 	bl	800fb8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f914:	4b17      	ldr	r3, [pc, #92]	@ (800f974 <tcp_process+0x7d0>)
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	f003 0310 	and.w	r3, r3, #16
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d01f      	beq.n	800f960 <tcp_process+0x7bc>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f924:	4b14      	ldr	r3, [pc, #80]	@ (800f978 <tcp_process+0x7d4>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d119      	bne.n	800f960 <tcp_process+0x7bc>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f930:	2b00      	cmp	r3, #0
 800f932:	d115      	bne.n	800f960 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f934:	4b11      	ldr	r3, [pc, #68]	@ (800f97c <tcp_process+0x7d8>)
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	f043 0310 	orr.w	r3, r3, #16
 800f93c:	b2da      	uxtb	r2, r3
 800f93e:	4b0f      	ldr	r3, [pc, #60]	@ (800f97c <tcp_process+0x7d8>)
 800f940:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f942:	e00d      	b.n	800f960 <tcp_process+0x7bc>
    default:
      break;
 800f944:	bf00      	nop
 800f946:	e00c      	b.n	800f962 <tcp_process+0x7be>
      break;
 800f948:	bf00      	nop
 800f94a:	e00a      	b.n	800f962 <tcp_process+0x7be>
      break;
 800f94c:	bf00      	nop
 800f94e:	e008      	b.n	800f962 <tcp_process+0x7be>
      break;
 800f950:	bf00      	nop
 800f952:	e006      	b.n	800f962 <tcp_process+0x7be>
      break;
 800f954:	bf00      	nop
 800f956:	e004      	b.n	800f962 <tcp_process+0x7be>
      break;
 800f958:	bf00      	nop
 800f95a:	e002      	b.n	800f962 <tcp_process+0x7be>
      break;
 800f95c:	bf00      	nop
 800f95e:	e000      	b.n	800f962 <tcp_process+0x7be>
      break;
 800f960:	bf00      	nop
  }
  return ERR_OK;
 800f962:	2300      	movs	r3, #0
}
 800f964:	4618      	mov	r0, r3
 800f966:	3724      	adds	r7, #36	@ 0x24
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd90      	pop	{r4, r7, pc}
 800f96c:	240083a0 	.word	0x240083a0
 800f970:	2400839c 	.word	0x2400839c
 800f974:	240083d0 	.word	0x240083d0
 800f978:	240083c8 	.word	0x240083c8
 800f97c:	240083d1 	.word	0x240083d1
 800f980:	24008398 	.word	0x24008398

0800f984 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f984:	b590      	push	{r4, r7, lr}
 800f986:	b085      	sub	sp, #20
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d106      	bne.n	800f9a2 <tcp_oos_insert_segment+0x1e>
 800f994:	4b3b      	ldr	r3, [pc, #236]	@ (800fa84 <tcp_oos_insert_segment+0x100>)
 800f996:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f99a:	493b      	ldr	r1, [pc, #236]	@ (800fa88 <tcp_oos_insert_segment+0x104>)
 800f99c:	483b      	ldr	r0, [pc, #236]	@ (800fa8c <tcp_oos_insert_segment+0x108>)
 800f99e:	f006 fad9 	bl	8015f54 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	899b      	ldrh	r3, [r3, #12]
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fb fbf6 	bl	800b19c <lwip_htons>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	f003 0301 	and.w	r3, r3, #1
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d028      	beq.n	800fa0e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f9bc:	6838      	ldr	r0, [r7, #0]
 800f9be:	f7fe fa63 	bl	800de88 <tcp_segs_free>
    next = NULL;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	603b      	str	r3, [r7, #0]
 800f9c6:	e056      	b.n	800fa76 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	899b      	ldrh	r3, [r3, #12]
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fb fbe3 	bl	800b19c <lwip_htons>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	f003 0301 	and.w	r3, r3, #1
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d00d      	beq.n	800f9fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	899b      	ldrh	r3, [r3, #12]
 800f9e8:	b29c      	uxth	r4, r3
 800f9ea:	2001      	movs	r0, #1
 800f9ec:	f7fb fbd6 	bl	800b19c <lwip_htons>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	4322      	orrs	r2, r4
 800f9fa:	b292      	uxth	r2, r2
 800f9fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f7fe fa52 	bl	800deb2 <tcp_seg_free>
    while (next &&
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00e      	beq.n	800fa32 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	891b      	ldrh	r3, [r3, #8]
 800fa18:	461a      	mov	r2, r3
 800fa1a:	4b1d      	ldr	r3, [pc, #116]	@ (800fa90 <tcp_oos_insert_segment+0x10c>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	441a      	add	r2, r3
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	6839      	ldr	r1, [r7, #0]
 800fa28:	8909      	ldrh	r1, [r1, #8]
 800fa2a:	440b      	add	r3, r1
 800fa2c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	daca      	bge.n	800f9c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d01e      	beq.n	800fa76 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	891b      	ldrh	r3, [r3, #8]
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	4b14      	ldr	r3, [pc, #80]	@ (800fa90 <tcp_oos_insert_segment+0x10c>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	441a      	add	r2, r3
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	68db      	ldr	r3, [r3, #12]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	dd12      	ble.n	800fa76 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	b29a      	uxth	r2, r3
 800fa58:	4b0d      	ldr	r3, [pc, #52]	@ (800fa90 <tcp_oos_insert_segment+0x10c>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	b29a      	uxth	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	891b      	ldrh	r3, [r3, #8]
 800fa6e:	4619      	mov	r1, r3
 800fa70:	4610      	mov	r0, r2
 800fa72:	f7fc fe23 	bl	800c6bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	683a      	ldr	r2, [r7, #0]
 800fa7a:	601a      	str	r2, [r3, #0]
}
 800fa7c:	bf00      	nop
 800fa7e:	3714      	adds	r7, #20
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd90      	pop	{r4, r7, pc}
 800fa84:	0801a9a8 	.word	0x0801a9a8
 800fa88:	0801ac68 	.word	0x0801ac68
 800fa8c:	0801a9f4 	.word	0x0801a9f4
 800fa90:	240083c4 	.word	0x240083c4

0800fa94 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fa94:	b5b0      	push	{r4, r5, r7, lr}
 800fa96:	b086      	sub	sp, #24
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
 800faa0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800faa2:	e03e      	b.n	800fb22 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fd f810 	bl	800cad8 <pbuf_clen>
 800fab8:	4603      	mov	r3, r0
 800faba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fac2:	8a7a      	ldrh	r2, [r7, #18]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d906      	bls.n	800fad6 <tcp_free_acked_segments+0x42>
 800fac8:	4b2a      	ldr	r3, [pc, #168]	@ (800fb74 <tcp_free_acked_segments+0xe0>)
 800faca:	f240 4257 	movw	r2, #1111	@ 0x457
 800face:	492a      	ldr	r1, [pc, #168]	@ (800fb78 <tcp_free_acked_segments+0xe4>)
 800fad0:	482a      	ldr	r0, [pc, #168]	@ (800fb7c <tcp_free_acked_segments+0xe8>)
 800fad2:	f006 fa3f 	bl	8015f54 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800fadc:	8a7b      	ldrh	r3, [r7, #18]
 800fade:	1ad3      	subs	r3, r2, r3
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	891a      	ldrh	r2, [r3, #8]
 800faec:	4b24      	ldr	r3, [pc, #144]	@ (800fb80 <tcp_free_acked_segments+0xec>)
 800faee:	881b      	ldrh	r3, [r3, #0]
 800faf0:	4413      	add	r3, r2
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	4b22      	ldr	r3, [pc, #136]	@ (800fb80 <tcp_free_acked_segments+0xec>)
 800faf6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800faf8:	6978      	ldr	r0, [r7, #20]
 800fafa:	f7fe f9da 	bl	800deb2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d00c      	beq.n	800fb22 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d109      	bne.n	800fb22 <tcp_free_acked_segments+0x8e>
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d106      	bne.n	800fb22 <tcp_free_acked_segments+0x8e>
 800fb14:	4b17      	ldr	r3, [pc, #92]	@ (800fb74 <tcp_free_acked_segments+0xe0>)
 800fb16:	f240 4261 	movw	r2, #1121	@ 0x461
 800fb1a:	491a      	ldr	r1, [pc, #104]	@ (800fb84 <tcp_free_acked_segments+0xf0>)
 800fb1c:	4817      	ldr	r0, [pc, #92]	@ (800fb7c <tcp_free_acked_segments+0xe8>)
 800fb1e:	f006 fa19 	bl	8015f54 <iprintf>
  while (seg_list != NULL &&
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d020      	beq.n	800fb6a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	68db      	ldr	r3, [r3, #12]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fb fb4a 	bl	800b1c8 <lwip_htonl>
 800fb34:	4604      	mov	r4, r0
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	891b      	ldrh	r3, [r3, #8]
 800fb3a:	461d      	mov	r5, r3
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	899b      	ldrh	r3, [r3, #12]
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7fb fb29 	bl	800b19c <lwip_htons>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	f003 0303 	and.w	r3, r3, #3
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d001      	beq.n	800fb5a <tcp_free_acked_segments+0xc6>
 800fb56:	2301      	movs	r3, #1
 800fb58:	e000      	b.n	800fb5c <tcp_free_acked_segments+0xc8>
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	442b      	add	r3, r5
 800fb5e:	18e2      	adds	r2, r4, r3
 800fb60:	4b09      	ldr	r3, [pc, #36]	@ (800fb88 <tcp_free_acked_segments+0xf4>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	dd9c      	ble.n	800faa4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fb6a:	68bb      	ldr	r3, [r7, #8]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3718      	adds	r7, #24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bdb0      	pop	{r4, r5, r7, pc}
 800fb74:	0801a9a8 	.word	0x0801a9a8
 800fb78:	0801ac90 	.word	0x0801ac90
 800fb7c:	0801a9f4 	.word	0x0801a9f4
 800fb80:	240083cc 	.word	0x240083cc
 800fb84:	0801acb8 	.word	0x0801acb8
 800fb88:	240083c8 	.word	0x240083c8

0800fb8c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fb8c:	b5b0      	push	{r4, r5, r7, lr}
 800fb8e:	b094      	sub	sp, #80	@ 0x50
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fb94:	2300      	movs	r3, #0
 800fb96:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d106      	bne.n	800fbac <tcp_receive+0x20>
 800fb9e:	4b91      	ldr	r3, [pc, #580]	@ (800fde4 <tcp_receive+0x258>)
 800fba0:	f240 427b 	movw	r2, #1147	@ 0x47b
 800fba4:	4990      	ldr	r1, [pc, #576]	@ (800fde8 <tcp_receive+0x25c>)
 800fba6:	4891      	ldr	r0, [pc, #580]	@ (800fdec <tcp_receive+0x260>)
 800fba8:	f006 f9d4 	bl	8015f54 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	7d1b      	ldrb	r3, [r3, #20]
 800fbb0:	2b03      	cmp	r3, #3
 800fbb2:	d806      	bhi.n	800fbc2 <tcp_receive+0x36>
 800fbb4:	4b8b      	ldr	r3, [pc, #556]	@ (800fde4 <tcp_receive+0x258>)
 800fbb6:	f240 427c 	movw	r2, #1148	@ 0x47c
 800fbba:	498d      	ldr	r1, [pc, #564]	@ (800fdf0 <tcp_receive+0x264>)
 800fbbc:	488b      	ldr	r0, [pc, #556]	@ (800fdec <tcp_receive+0x260>)
 800fbbe:	f006 f9c9 	bl	8015f54 <iprintf>

  if (flags & TCP_ACK) {
 800fbc2:	4b8c      	ldr	r3, [pc, #560]	@ (800fdf4 <tcp_receive+0x268>)
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	f003 0310 	and.w	r3, r3, #16
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 8264 	beq.w	8010098 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbdc:	4413      	add	r3, r2
 800fbde:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fbe4:	4b84      	ldr	r3, [pc, #528]	@ (800fdf8 <tcp_receive+0x26c>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	1ad3      	subs	r3, r2, r3
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	db1b      	blt.n	800fc26 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fbf2:	4b81      	ldr	r3, [pc, #516]	@ (800fdf8 <tcp_receive+0x26c>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d106      	bne.n	800fc08 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fbfe:	4b7f      	ldr	r3, [pc, #508]	@ (800fdfc <tcp_receive+0x270>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	1ad3      	subs	r3, r2, r3
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	db0e      	blt.n	800fc26 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fc0c:	4b7b      	ldr	r3, [pc, #492]	@ (800fdfc <tcp_receive+0x270>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d125      	bne.n	800fc60 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fc14:	4b7a      	ldr	r3, [pc, #488]	@ (800fe00 <tcp_receive+0x274>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	89db      	ldrh	r3, [r3, #14]
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d91c      	bls.n	800fc60 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fc26:	4b76      	ldr	r3, [pc, #472]	@ (800fe00 <tcp_receive+0x274>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	89db      	ldrh	r3, [r3, #14]
 800fc2c:	b29a      	uxth	r2, r3
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d205      	bcs.n	800fc50 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800fc50:	4b69      	ldr	r3, [pc, #420]	@ (800fdf8 <tcp_receive+0x26c>)
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800fc58:	4b68      	ldr	r3, [pc, #416]	@ (800fdfc <tcp_receive+0x270>)
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fc60:	4b66      	ldr	r3, [pc, #408]	@ (800fdfc <tcp_receive+0x270>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc68:	1ad3      	subs	r3, r2, r3
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	dc58      	bgt.n	800fd20 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fc6e:	4b65      	ldr	r3, [pc, #404]	@ (800fe04 <tcp_receive+0x278>)
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d14b      	bne.n	800fd0e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800fc80:	4413      	add	r3, r2
 800fc82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d142      	bne.n	800fd0e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	db3d      	blt.n	800fd0e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc96:	4b59      	ldr	r3, [pc, #356]	@ (800fdfc <tcp_receive+0x270>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d137      	bne.n	800fd0e <tcp_receive+0x182>
              found_dupack = 1;
 800fc9e:	2301      	movs	r3, #1
 800fca0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fca8:	2bff      	cmp	r3, #255	@ 0xff
 800fcaa:	d007      	beq.n	800fcbc <tcp_receive+0x130>
                ++pcb->dupacks;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	b2da      	uxtb	r2, r3
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fcc2:	2b03      	cmp	r3, #3
 800fcc4:	d91b      	bls.n	800fcfe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fcd0:	4413      	add	r3, r2
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d30a      	bcc.n	800fcf4 <tcp_receive+0x168>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fce8:	4413      	add	r3, r2
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fcf2:	e004      	b.n	800fcfe <tcp_receive+0x172>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fcfa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d902      	bls.n	800fd0e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f001 fee7 	bl	8011adc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fd0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f040 8161 	bne.w	800ffd8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fd1e:	e15b      	b.n	800ffd8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd20:	4b36      	ldr	r3, [pc, #216]	@ (800fdfc <tcp_receive+0x270>)
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	3b01      	subs	r3, #1
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f2c0 814e 	blt.w	800ffce <tcp_receive+0x442>
 800fd32:	4b32      	ldr	r3, [pc, #200]	@ (800fdfc <tcp_receive+0x270>)
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd3a:	1ad3      	subs	r3, r2, r3
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	f300 8146 	bgt.w	800ffce <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	8b5b      	ldrh	r3, [r3, #26]
 800fd46:	f003 0304 	and.w	r3, r3, #4
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d010      	beq.n	800fd70 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	8b5b      	ldrh	r3, [r3, #26]
 800fd52:	f023 0304 	bic.w	r3, r3, #4
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fd7e:	10db      	asrs	r3, r3, #3
 800fd80:	b21b      	sxth	r3, r3
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	4413      	add	r3, r2
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	b21a      	sxth	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fd98:	4b18      	ldr	r3, [pc, #96]	@ (800fdfc <tcp_receive+0x270>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	b29a      	uxth	r2, r3
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800fdb0:	4b12      	ldr	r3, [pc, #72]	@ (800fdfc <tcp_receive+0x270>)
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	7d1b      	ldrb	r3, [r3, #20]
 800fdbc:	2b03      	cmp	r3, #3
 800fdbe:	f240 8097 	bls.w	800fef0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d245      	bcs.n	800fe5e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	8b5b      	ldrh	r3, [r3, #26]
 800fdd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d014      	beq.n	800fe08 <tcp_receive+0x27c>
 800fdde:	2301      	movs	r3, #1
 800fde0:	e013      	b.n	800fe0a <tcp_receive+0x27e>
 800fde2:	bf00      	nop
 800fde4:	0801a9a8 	.word	0x0801a9a8
 800fde8:	0801acd8 	.word	0x0801acd8
 800fdec:	0801a9f4 	.word	0x0801a9f4
 800fdf0:	0801acf4 	.word	0x0801acf4
 800fdf4:	240083d0 	.word	0x240083d0
 800fdf8:	240083c4 	.word	0x240083c4
 800fdfc:	240083c8 	.word	0x240083c8
 800fe00:	240083b4 	.word	0x240083b4
 800fe04:	240083ce 	.word	0x240083ce
 800fe08:	2302      	movs	r3, #2
 800fe0a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fe0e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fe18:	fb12 f303 	smulbb	r3, r2, r3
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fe20:	4293      	cmp	r3, r2
 800fe22:	bf28      	it	cs
 800fe24:	4613      	movcs	r3, r2
 800fe26:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fe2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fe30:	4413      	add	r3, r2
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d309      	bcc.n	800fe52 <tcp_receive+0x2c6>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fe44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fe46:	4413      	add	r3, r2
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fe50:	e04e      	b.n	800fef0 <tcp_receive+0x364>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fe5c:	e048      	b.n	800fef0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fe64:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fe66:	4413      	add	r3, r2
 800fe68:	b29a      	uxth	r2, r3
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d309      	bcc.n	800fe88 <tcp_receive+0x2fc>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fe7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fe7c:	4413      	add	r3, r2
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fe86:	e004      	b.n	800fe92 <tcp_receive+0x306>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d326      	bcc.n	800fef0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800feae:	1ad3      	subs	r3, r2, r3
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fec2:	4413      	add	r3, r2
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fecc:	429a      	cmp	r2, r3
 800fece:	d30a      	bcc.n	800fee6 <tcp_receive+0x35a>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800feda:	4413      	add	r3, r2
 800fedc:	b29a      	uxth	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fee4:	e004      	b.n	800fef0 <tcp_receive+0x364>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800feec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fef8:	4a98      	ldr	r2, [pc, #608]	@ (801015c <tcp_receive+0x5d0>)
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f7ff fdca 	bl	800fa94 <tcp_free_acked_segments>
 800ff00:	4602      	mov	r2, r0
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff0e:	4a94      	ldr	r2, [pc, #592]	@ (8010160 <tcp_receive+0x5d4>)
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f7ff fdbf 	bl	800fa94 <tcp_free_acked_segments>
 800ff16:	4602      	mov	r2, r0
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d104      	bne.n	800ff2e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ff2a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ff2c:	e002      	b.n	800ff34 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d103      	bne.n	800ff4a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ff50:	4b84      	ldr	r3, [pc, #528]	@ (8010164 <tcp_receive+0x5d8>)
 800ff52:	881b      	ldrh	r3, [r3, #0]
 800ff54:	4413      	add	r3, r2
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	8b5b      	ldrh	r3, [r3, #26]
 800ff62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d035      	beq.n	800ffd6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d118      	bne.n	800ffa4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00c      	beq.n	800ff94 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fb f91e 	bl	800b1c8 <lwip_htonl>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	dc20      	bgt.n	800ffd6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	8b5b      	ldrh	r3, [r3, #26]
 800ff98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ff9c:	b29a      	uxth	r2, r3
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ffa2:	e018      	b.n	800ffd6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fb f909 	bl	800b1c8 <lwip_htonl>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	1ae3      	subs	r3, r4, r3
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	dc0b      	bgt.n	800ffd6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	8b5b      	ldrh	r3, [r3, #26]
 800ffc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ffcc:	e003      	b.n	800ffd6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f001 ff70 	bl	8011eb4 <tcp_send_empty_ack>
 800ffd4:	e000      	b.n	800ffd8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ffd6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d05b      	beq.n	8010098 <tcp_receive+0x50c>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffe4:	4b60      	ldr	r3, [pc, #384]	@ (8010168 <tcp_receive+0x5dc>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	da54      	bge.n	8010098 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ffee:	4b5f      	ldr	r3, [pc, #380]	@ (801016c <tcp_receive+0x5e0>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	b29a      	uxth	r2, r3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010002:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801000c:	10db      	asrs	r3, r3, #3
 801000e:	b21b      	sxth	r3, r3
 8010010:	b29b      	uxth	r3, r3
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	b29b      	uxth	r3, r3
 8010016:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010020:	b29a      	uxth	r2, r3
 8010022:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010026:	4413      	add	r3, r2
 8010028:	b29b      	uxth	r3, r3
 801002a:	b21a      	sxth	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010030:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010034:	2b00      	cmp	r3, #0
 8010036:	da05      	bge.n	8010044 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010038:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801003c:	425b      	negs	r3, r3
 801003e:	b29b      	uxth	r3, r3
 8010040:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010044:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801004e:	109b      	asrs	r3, r3, #2
 8010050:	b21b      	sxth	r3, r3
 8010052:	b29b      	uxth	r3, r3
 8010054:	1ad3      	subs	r3, r2, r3
 8010056:	b29b      	uxth	r3, r3
 8010058:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010062:	b29a      	uxth	r2, r3
 8010064:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010068:	4413      	add	r3, r2
 801006a:	b29b      	uxth	r3, r3
 801006c:	b21a      	sxth	r2, r3
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010078:	10db      	asrs	r3, r3, #3
 801007a:	b21b      	sxth	r3, r3
 801007c:	b29a      	uxth	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010084:	b29b      	uxth	r3, r3
 8010086:	4413      	add	r3, r2
 8010088:	b29b      	uxth	r3, r3
 801008a:	b21a      	sxth	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2200      	movs	r2, #0
 8010096:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010098:	4b35      	ldr	r3, [pc, #212]	@ (8010170 <tcp_receive+0x5e4>)
 801009a:	881b      	ldrh	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	f000 84df 	beq.w	8010a60 <tcp_receive+0xed4>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	7d1b      	ldrb	r3, [r3, #20]
 80100a6:	2b06      	cmp	r3, #6
 80100a8:	f200 84da 	bhi.w	8010a60 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100b0:	4b30      	ldr	r3, [pc, #192]	@ (8010174 <tcp_receive+0x5e8>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	3b01      	subs	r3, #1
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f2c0 808f 	blt.w	80101dc <tcp_receive+0x650>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100c2:	4b2b      	ldr	r3, [pc, #172]	@ (8010170 <tcp_receive+0x5e4>)
 80100c4:	881b      	ldrh	r3, [r3, #0]
 80100c6:	4619      	mov	r1, r3
 80100c8:	4b2a      	ldr	r3, [pc, #168]	@ (8010174 <tcp_receive+0x5e8>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	440b      	add	r3, r1
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	3301      	adds	r3, #1
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f300 8082 	bgt.w	80101dc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80100d8:	4b27      	ldr	r3, [pc, #156]	@ (8010178 <tcp_receive+0x5ec>)
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100e2:	4b24      	ldr	r3, [pc, #144]	@ (8010174 <tcp_receive+0x5e8>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80100ea:	4b23      	ldr	r3, [pc, #140]	@ (8010178 <tcp_receive+0x5ec>)
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d106      	bne.n	8010100 <tcp_receive+0x574>
 80100f2:	4b22      	ldr	r3, [pc, #136]	@ (801017c <tcp_receive+0x5f0>)
 80100f4:	f240 5294 	movw	r2, #1428	@ 0x594
 80100f8:	4921      	ldr	r1, [pc, #132]	@ (8010180 <tcp_receive+0x5f4>)
 80100fa:	4822      	ldr	r0, [pc, #136]	@ (8010184 <tcp_receive+0x5f8>)
 80100fc:	f005 ff2a 	bl	8015f54 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010102:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010106:	4293      	cmp	r3, r2
 8010108:	d906      	bls.n	8010118 <tcp_receive+0x58c>
 801010a:	4b1c      	ldr	r3, [pc, #112]	@ (801017c <tcp_receive+0x5f0>)
 801010c:	f240 5295 	movw	r2, #1429	@ 0x595
 8010110:	491d      	ldr	r1, [pc, #116]	@ (8010188 <tcp_receive+0x5fc>)
 8010112:	481c      	ldr	r0, [pc, #112]	@ (8010184 <tcp_receive+0x5f8>)
 8010114:	f005 ff1e 	bl	8015f54 <iprintf>
      off = (u16_t)off32;
 8010118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801011a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801011e:	4b16      	ldr	r3, [pc, #88]	@ (8010178 <tcp_receive+0x5ec>)
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	891b      	ldrh	r3, [r3, #8]
 8010124:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010128:	429a      	cmp	r2, r3
 801012a:	d906      	bls.n	801013a <tcp_receive+0x5ae>
 801012c:	4b13      	ldr	r3, [pc, #76]	@ (801017c <tcp_receive+0x5f0>)
 801012e:	f240 5297 	movw	r2, #1431	@ 0x597
 8010132:	4916      	ldr	r1, [pc, #88]	@ (801018c <tcp_receive+0x600>)
 8010134:	4813      	ldr	r0, [pc, #76]	@ (8010184 <tcp_receive+0x5f8>)
 8010136:	f005 ff0d 	bl	8015f54 <iprintf>
      inseg.len -= off;
 801013a:	4b0f      	ldr	r3, [pc, #60]	@ (8010178 <tcp_receive+0x5ec>)
 801013c:	891a      	ldrh	r2, [r3, #8]
 801013e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010142:	1ad3      	subs	r3, r2, r3
 8010144:	b29a      	uxth	r2, r3
 8010146:	4b0c      	ldr	r3, [pc, #48]	@ (8010178 <tcp_receive+0x5ec>)
 8010148:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801014a:	4b0b      	ldr	r3, [pc, #44]	@ (8010178 <tcp_receive+0x5ec>)
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	891a      	ldrh	r2, [r3, #8]
 8010150:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010154:	1ad3      	subs	r3, r2, r3
 8010156:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010158:	e02a      	b.n	80101b0 <tcp_receive+0x624>
 801015a:	bf00      	nop
 801015c:	0801ad10 	.word	0x0801ad10
 8010160:	0801ad18 	.word	0x0801ad18
 8010164:	240083cc 	.word	0x240083cc
 8010168:	240083c8 	.word	0x240083c8
 801016c:	2400838c 	.word	0x2400838c
 8010170:	240083ce 	.word	0x240083ce
 8010174:	240083c4 	.word	0x240083c4
 8010178:	240083a4 	.word	0x240083a4
 801017c:	0801a9a8 	.word	0x0801a9a8
 8010180:	0801ad20 	.word	0x0801ad20
 8010184:	0801a9f4 	.word	0x0801a9f4
 8010188:	0801ad30 	.word	0x0801ad30
 801018c:	0801ad40 	.word	0x0801ad40
        off -= p->len;
 8010190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010192:	895b      	ldrh	r3, [r3, #10]
 8010194:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010198:	1ad3      	subs	r3, r2, r3
 801019a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801019e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101a0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80101a2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80101a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101a6:	2200      	movs	r2, #0
 80101a8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80101aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80101b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101b2:	895b      	ldrh	r3, [r3, #10]
 80101b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d8e9      	bhi.n	8010190 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80101bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80101c0:	4619      	mov	r1, r3
 80101c2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80101c4:	f7fc fb7a 	bl	800c8bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101cc:	4a90      	ldr	r2, [pc, #576]	@ (8010410 <tcp_receive+0x884>)
 80101ce:	6013      	str	r3, [r2, #0]
 80101d0:	4b90      	ldr	r3, [pc, #576]	@ (8010414 <tcp_receive+0x888>)
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	4a8e      	ldr	r2, [pc, #568]	@ (8010410 <tcp_receive+0x884>)
 80101d6:	6812      	ldr	r2, [r2, #0]
 80101d8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80101da:	e00d      	b.n	80101f8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80101dc:	4b8c      	ldr	r3, [pc, #560]	@ (8010410 <tcp_receive+0x884>)
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	da06      	bge.n	80101f8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	8b5b      	ldrh	r3, [r3, #26]
 80101ee:	f043 0302 	orr.w	r3, r3, #2
 80101f2:	b29a      	uxth	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101f8:	4b85      	ldr	r3, [pc, #532]	@ (8010410 <tcp_receive+0x884>)
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010200:	1ad3      	subs	r3, r2, r3
 8010202:	2b00      	cmp	r3, #0
 8010204:	f2c0 8427 	blt.w	8010a56 <tcp_receive+0xeca>
 8010208:	4b81      	ldr	r3, [pc, #516]	@ (8010410 <tcp_receive+0x884>)
 801020a:	681a      	ldr	r2, [r3, #0]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010210:	6879      	ldr	r1, [r7, #4]
 8010212:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010214:	440b      	add	r3, r1
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	3301      	adds	r3, #1
 801021a:	2b00      	cmp	r3, #0
 801021c:	f300 841b 	bgt.w	8010a56 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010224:	4b7a      	ldr	r3, [pc, #488]	@ (8010410 <tcp_receive+0x884>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	429a      	cmp	r2, r3
 801022a:	f040 8298 	bne.w	801075e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801022e:	4b79      	ldr	r3, [pc, #484]	@ (8010414 <tcp_receive+0x888>)
 8010230:	891c      	ldrh	r4, [r3, #8]
 8010232:	4b78      	ldr	r3, [pc, #480]	@ (8010414 <tcp_receive+0x888>)
 8010234:	68db      	ldr	r3, [r3, #12]
 8010236:	899b      	ldrh	r3, [r3, #12]
 8010238:	b29b      	uxth	r3, r3
 801023a:	4618      	mov	r0, r3
 801023c:	f7fa ffae 	bl	800b19c <lwip_htons>
 8010240:	4603      	mov	r3, r0
 8010242:	b2db      	uxtb	r3, r3
 8010244:	f003 0303 	and.w	r3, r3, #3
 8010248:	2b00      	cmp	r3, #0
 801024a:	d001      	beq.n	8010250 <tcp_receive+0x6c4>
 801024c:	2301      	movs	r3, #1
 801024e:	e000      	b.n	8010252 <tcp_receive+0x6c6>
 8010250:	2300      	movs	r3, #0
 8010252:	4423      	add	r3, r4
 8010254:	b29a      	uxth	r2, r3
 8010256:	4b70      	ldr	r3, [pc, #448]	@ (8010418 <tcp_receive+0x88c>)
 8010258:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801025e:	4b6e      	ldr	r3, [pc, #440]	@ (8010418 <tcp_receive+0x88c>)
 8010260:	881b      	ldrh	r3, [r3, #0]
 8010262:	429a      	cmp	r2, r3
 8010264:	d274      	bcs.n	8010350 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010266:	4b6b      	ldr	r3, [pc, #428]	@ (8010414 <tcp_receive+0x888>)
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	899b      	ldrh	r3, [r3, #12]
 801026c:	b29b      	uxth	r3, r3
 801026e:	4618      	mov	r0, r3
 8010270:	f7fa ff94 	bl	800b19c <lwip_htons>
 8010274:	4603      	mov	r3, r0
 8010276:	b2db      	uxtb	r3, r3
 8010278:	f003 0301 	and.w	r3, r3, #1
 801027c:	2b00      	cmp	r3, #0
 801027e:	d01e      	beq.n	80102be <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010280:	4b64      	ldr	r3, [pc, #400]	@ (8010414 <tcp_receive+0x888>)
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	899b      	ldrh	r3, [r3, #12]
 8010286:	b29b      	uxth	r3, r3
 8010288:	b21b      	sxth	r3, r3
 801028a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801028e:	b21c      	sxth	r4, r3
 8010290:	4b60      	ldr	r3, [pc, #384]	@ (8010414 <tcp_receive+0x888>)
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	899b      	ldrh	r3, [r3, #12]
 8010296:	b29b      	uxth	r3, r3
 8010298:	4618      	mov	r0, r3
 801029a:	f7fa ff7f 	bl	800b19c <lwip_htons>
 801029e:	4603      	mov	r3, r0
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fa ff77 	bl	800b19c <lwip_htons>
 80102ae:	4603      	mov	r3, r0
 80102b0:	b21b      	sxth	r3, r3
 80102b2:	4323      	orrs	r3, r4
 80102b4:	b21a      	sxth	r2, r3
 80102b6:	4b57      	ldr	r3, [pc, #348]	@ (8010414 <tcp_receive+0x888>)
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	b292      	uxth	r2, r2
 80102bc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80102c2:	4b54      	ldr	r3, [pc, #336]	@ (8010414 <tcp_receive+0x888>)
 80102c4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80102c6:	4b53      	ldr	r3, [pc, #332]	@ (8010414 <tcp_receive+0x888>)
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	899b      	ldrh	r3, [r3, #12]
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fa ff64 	bl	800b19c <lwip_htons>
 80102d4:	4603      	mov	r3, r0
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	f003 0302 	and.w	r3, r3, #2
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d005      	beq.n	80102ec <tcp_receive+0x760>
            inseg.len -= 1;
 80102e0:	4b4c      	ldr	r3, [pc, #304]	@ (8010414 <tcp_receive+0x888>)
 80102e2:	891b      	ldrh	r3, [r3, #8]
 80102e4:	3b01      	subs	r3, #1
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	4b4a      	ldr	r3, [pc, #296]	@ (8010414 <tcp_receive+0x888>)
 80102ea:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80102ec:	4b49      	ldr	r3, [pc, #292]	@ (8010414 <tcp_receive+0x888>)
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	4a48      	ldr	r2, [pc, #288]	@ (8010414 <tcp_receive+0x888>)
 80102f2:	8912      	ldrh	r2, [r2, #8]
 80102f4:	4611      	mov	r1, r2
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fc f9e0 	bl	800c6bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80102fc:	4b45      	ldr	r3, [pc, #276]	@ (8010414 <tcp_receive+0x888>)
 80102fe:	891c      	ldrh	r4, [r3, #8]
 8010300:	4b44      	ldr	r3, [pc, #272]	@ (8010414 <tcp_receive+0x888>)
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	899b      	ldrh	r3, [r3, #12]
 8010306:	b29b      	uxth	r3, r3
 8010308:	4618      	mov	r0, r3
 801030a:	f7fa ff47 	bl	800b19c <lwip_htons>
 801030e:	4603      	mov	r3, r0
 8010310:	b2db      	uxtb	r3, r3
 8010312:	f003 0303 	and.w	r3, r3, #3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d001      	beq.n	801031e <tcp_receive+0x792>
 801031a:	2301      	movs	r3, #1
 801031c:	e000      	b.n	8010320 <tcp_receive+0x794>
 801031e:	2300      	movs	r3, #0
 8010320:	4423      	add	r3, r4
 8010322:	b29a      	uxth	r2, r3
 8010324:	4b3c      	ldr	r3, [pc, #240]	@ (8010418 <tcp_receive+0x88c>)
 8010326:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010328:	4b3b      	ldr	r3, [pc, #236]	@ (8010418 <tcp_receive+0x88c>)
 801032a:	881b      	ldrh	r3, [r3, #0]
 801032c:	461a      	mov	r2, r3
 801032e:	4b38      	ldr	r3, [pc, #224]	@ (8010410 <tcp_receive+0x884>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	441a      	add	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010338:	6879      	ldr	r1, [r7, #4]
 801033a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801033c:	440b      	add	r3, r1
 801033e:	429a      	cmp	r2, r3
 8010340:	d006      	beq.n	8010350 <tcp_receive+0x7c4>
 8010342:	4b36      	ldr	r3, [pc, #216]	@ (801041c <tcp_receive+0x890>)
 8010344:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010348:	4935      	ldr	r1, [pc, #212]	@ (8010420 <tcp_receive+0x894>)
 801034a:	4836      	ldr	r0, [pc, #216]	@ (8010424 <tcp_receive+0x898>)
 801034c:	f005 fe02 	bl	8015f54 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010354:	2b00      	cmp	r3, #0
 8010356:	f000 80e6 	beq.w	8010526 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801035a:	4b2e      	ldr	r3, [pc, #184]	@ (8010414 <tcp_receive+0x888>)
 801035c:	68db      	ldr	r3, [r3, #12]
 801035e:	899b      	ldrh	r3, [r3, #12]
 8010360:	b29b      	uxth	r3, r3
 8010362:	4618      	mov	r0, r3
 8010364:	f7fa ff1a 	bl	800b19c <lwip_htons>
 8010368:	4603      	mov	r3, r0
 801036a:	b2db      	uxtb	r3, r3
 801036c:	f003 0301 	and.w	r3, r3, #1
 8010370:	2b00      	cmp	r3, #0
 8010372:	d010      	beq.n	8010396 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010374:	e00a      	b.n	801038c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801037a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f7fd fd93 	bl	800deb2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010390:	2b00      	cmp	r3, #0
 8010392:	d1f0      	bne.n	8010376 <tcp_receive+0x7ea>
 8010394:	e0c7      	b.n	8010526 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801039a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801039c:	e051      	b.n	8010442 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801039e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103a0:	68db      	ldr	r3, [r3, #12]
 80103a2:	899b      	ldrh	r3, [r3, #12]
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fa fef8 	bl	800b19c <lwip_htons>
 80103ac:	4603      	mov	r3, r0
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	f003 0301 	and.w	r3, r3, #1
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d03c      	beq.n	8010432 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80103b8:	4b16      	ldr	r3, [pc, #88]	@ (8010414 <tcp_receive+0x888>)
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	899b      	ldrh	r3, [r3, #12]
 80103be:	b29b      	uxth	r3, r3
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7fa feeb 	bl	800b19c <lwip_htons>
 80103c6:	4603      	mov	r3, r0
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d12f      	bne.n	8010432 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80103d2:	4b10      	ldr	r3, [pc, #64]	@ (8010414 <tcp_receive+0x888>)
 80103d4:	68db      	ldr	r3, [r3, #12]
 80103d6:	899b      	ldrh	r3, [r3, #12]
 80103d8:	b29c      	uxth	r4, r3
 80103da:	2001      	movs	r0, #1
 80103dc:	f7fa fede 	bl	800b19c <lwip_htons>
 80103e0:	4603      	mov	r3, r0
 80103e2:	461a      	mov	r2, r3
 80103e4:	4b0b      	ldr	r3, [pc, #44]	@ (8010414 <tcp_receive+0x888>)
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	4322      	orrs	r2, r4
 80103ea:	b292      	uxth	r2, r2
 80103ec:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80103ee:	4b09      	ldr	r3, [pc, #36]	@ (8010414 <tcp_receive+0x888>)
 80103f0:	891c      	ldrh	r4, [r3, #8]
 80103f2:	4b08      	ldr	r3, [pc, #32]	@ (8010414 <tcp_receive+0x888>)
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	899b      	ldrh	r3, [r3, #12]
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fa fece 	bl	800b19c <lwip_htons>
 8010400:	4603      	mov	r3, r0
 8010402:	b2db      	uxtb	r3, r3
 8010404:	f003 0303 	and.w	r3, r3, #3
 8010408:	2b00      	cmp	r3, #0
 801040a:	d00d      	beq.n	8010428 <tcp_receive+0x89c>
 801040c:	2301      	movs	r3, #1
 801040e:	e00c      	b.n	801042a <tcp_receive+0x89e>
 8010410:	240083c4 	.word	0x240083c4
 8010414:	240083a4 	.word	0x240083a4
 8010418:	240083ce 	.word	0x240083ce
 801041c:	0801a9a8 	.word	0x0801a9a8
 8010420:	0801ad50 	.word	0x0801ad50
 8010424:	0801a9f4 	.word	0x0801a9f4
 8010428:	2300      	movs	r3, #0
 801042a:	4423      	add	r3, r4
 801042c:	b29a      	uxth	r2, r3
 801042e:	4b98      	ldr	r3, [pc, #608]	@ (8010690 <tcp_receive+0xb04>)
 8010430:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010434:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801043c:	6938      	ldr	r0, [r7, #16]
 801043e:	f7fd fd38 	bl	800deb2 <tcp_seg_free>
            while (next &&
 8010442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00e      	beq.n	8010466 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010448:	4b91      	ldr	r3, [pc, #580]	@ (8010690 <tcp_receive+0xb04>)
 801044a:	881b      	ldrh	r3, [r3, #0]
 801044c:	461a      	mov	r2, r3
 801044e:	4b91      	ldr	r3, [pc, #580]	@ (8010694 <tcp_receive+0xb08>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	441a      	add	r2, r3
 8010454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801045c:	8909      	ldrh	r1, [r1, #8]
 801045e:	440b      	add	r3, r1
 8010460:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010462:	2b00      	cmp	r3, #0
 8010464:	da9b      	bge.n	801039e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010468:	2b00      	cmp	r3, #0
 801046a:	d059      	beq.n	8010520 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801046c:	4b88      	ldr	r3, [pc, #544]	@ (8010690 <tcp_receive+0xb04>)
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	461a      	mov	r2, r3
 8010472:	4b88      	ldr	r3, [pc, #544]	@ (8010694 <tcp_receive+0xb08>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	441a      	add	r2, r3
 8010478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801047a:	68db      	ldr	r3, [r3, #12]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010480:	2b00      	cmp	r3, #0
 8010482:	dd4d      	ble.n	8010520 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	b29a      	uxth	r2, r3
 801048c:	4b81      	ldr	r3, [pc, #516]	@ (8010694 <tcp_receive+0xb08>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	b29b      	uxth	r3, r3
 8010492:	1ad3      	subs	r3, r2, r3
 8010494:	b29a      	uxth	r2, r3
 8010496:	4b80      	ldr	r3, [pc, #512]	@ (8010698 <tcp_receive+0xb0c>)
 8010498:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801049a:	4b7f      	ldr	r3, [pc, #508]	@ (8010698 <tcp_receive+0xb0c>)
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	899b      	ldrh	r3, [r3, #12]
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7fa fe7a 	bl	800b19c <lwip_htons>
 80104a8:	4603      	mov	r3, r0
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	f003 0302 	and.w	r3, r3, #2
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d005      	beq.n	80104c0 <tcp_receive+0x934>
                inseg.len -= 1;
 80104b4:	4b78      	ldr	r3, [pc, #480]	@ (8010698 <tcp_receive+0xb0c>)
 80104b6:	891b      	ldrh	r3, [r3, #8]
 80104b8:	3b01      	subs	r3, #1
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	4b76      	ldr	r3, [pc, #472]	@ (8010698 <tcp_receive+0xb0c>)
 80104be:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80104c0:	4b75      	ldr	r3, [pc, #468]	@ (8010698 <tcp_receive+0xb0c>)
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	4a74      	ldr	r2, [pc, #464]	@ (8010698 <tcp_receive+0xb0c>)
 80104c6:	8912      	ldrh	r2, [r2, #8]
 80104c8:	4611      	mov	r1, r2
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7fc f8f6 	bl	800c6bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80104d0:	4b71      	ldr	r3, [pc, #452]	@ (8010698 <tcp_receive+0xb0c>)
 80104d2:	891c      	ldrh	r4, [r3, #8]
 80104d4:	4b70      	ldr	r3, [pc, #448]	@ (8010698 <tcp_receive+0xb0c>)
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	899b      	ldrh	r3, [r3, #12]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fa fe5d 	bl	800b19c <lwip_htons>
 80104e2:	4603      	mov	r3, r0
 80104e4:	b2db      	uxtb	r3, r3
 80104e6:	f003 0303 	and.w	r3, r3, #3
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d001      	beq.n	80104f2 <tcp_receive+0x966>
 80104ee:	2301      	movs	r3, #1
 80104f0:	e000      	b.n	80104f4 <tcp_receive+0x968>
 80104f2:	2300      	movs	r3, #0
 80104f4:	4423      	add	r3, r4
 80104f6:	b29a      	uxth	r2, r3
 80104f8:	4b65      	ldr	r3, [pc, #404]	@ (8010690 <tcp_receive+0xb04>)
 80104fa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80104fc:	4b64      	ldr	r3, [pc, #400]	@ (8010690 <tcp_receive+0xb04>)
 80104fe:	881b      	ldrh	r3, [r3, #0]
 8010500:	461a      	mov	r2, r3
 8010502:	4b64      	ldr	r3, [pc, #400]	@ (8010694 <tcp_receive+0xb08>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	441a      	add	r2, r3
 8010508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	429a      	cmp	r2, r3
 8010510:	d006      	beq.n	8010520 <tcp_receive+0x994>
 8010512:	4b62      	ldr	r3, [pc, #392]	@ (801069c <tcp_receive+0xb10>)
 8010514:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8010518:	4961      	ldr	r1, [pc, #388]	@ (80106a0 <tcp_receive+0xb14>)
 801051a:	4862      	ldr	r0, [pc, #392]	@ (80106a4 <tcp_receive+0xb18>)
 801051c:	f005 fd1a 	bl	8015f54 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010524:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010526:	4b5a      	ldr	r3, [pc, #360]	@ (8010690 <tcp_receive+0xb04>)
 8010528:	881b      	ldrh	r3, [r3, #0]
 801052a:	461a      	mov	r2, r3
 801052c:	4b59      	ldr	r3, [pc, #356]	@ (8010694 <tcp_receive+0xb08>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	441a      	add	r2, r3
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801053a:	4b55      	ldr	r3, [pc, #340]	@ (8010690 <tcp_receive+0xb04>)
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	429a      	cmp	r2, r3
 8010540:	d206      	bcs.n	8010550 <tcp_receive+0x9c4>
 8010542:	4b56      	ldr	r3, [pc, #344]	@ (801069c <tcp_receive+0xb10>)
 8010544:	f240 6207 	movw	r2, #1543	@ 0x607
 8010548:	4957      	ldr	r1, [pc, #348]	@ (80106a8 <tcp_receive+0xb1c>)
 801054a:	4856      	ldr	r0, [pc, #344]	@ (80106a4 <tcp_receive+0xb18>)
 801054c:	f005 fd02 	bl	8015f54 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010554:	4b4e      	ldr	r3, [pc, #312]	@ (8010690 <tcp_receive+0xb04>)
 8010556:	881b      	ldrh	r3, [r3, #0]
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	b29a      	uxth	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f7fc ffc5 	bl	800d4f0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010566:	4b4c      	ldr	r3, [pc, #304]	@ (8010698 <tcp_receive+0xb0c>)
 8010568:	685b      	ldr	r3, [r3, #4]
 801056a:	891b      	ldrh	r3, [r3, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d006      	beq.n	801057e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010570:	4b49      	ldr	r3, [pc, #292]	@ (8010698 <tcp_receive+0xb0c>)
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	4a4d      	ldr	r2, [pc, #308]	@ (80106ac <tcp_receive+0xb20>)
 8010576:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010578:	4b47      	ldr	r3, [pc, #284]	@ (8010698 <tcp_receive+0xb0c>)
 801057a:	2200      	movs	r2, #0
 801057c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801057e:	4b46      	ldr	r3, [pc, #280]	@ (8010698 <tcp_receive+0xb0c>)
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	899b      	ldrh	r3, [r3, #12]
 8010584:	b29b      	uxth	r3, r3
 8010586:	4618      	mov	r0, r3
 8010588:	f7fa fe08 	bl	800b19c <lwip_htons>
 801058c:	4603      	mov	r3, r0
 801058e:	b2db      	uxtb	r3, r3
 8010590:	f003 0301 	and.w	r3, r3, #1
 8010594:	2b00      	cmp	r3, #0
 8010596:	f000 80b8 	beq.w	801070a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801059a:	4b45      	ldr	r3, [pc, #276]	@ (80106b0 <tcp_receive+0xb24>)
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	f043 0320 	orr.w	r3, r3, #32
 80105a2:	b2da      	uxtb	r2, r3
 80105a4:	4b42      	ldr	r3, [pc, #264]	@ (80106b0 <tcp_receive+0xb24>)
 80105a6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80105a8:	e0af      	b.n	801070a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105ae:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	4a36      	ldr	r2, [pc, #216]	@ (8010694 <tcp_receive+0xb08>)
 80105ba:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	891b      	ldrh	r3, [r3, #8]
 80105c0:	461c      	mov	r4, r3
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	68db      	ldr	r3, [r3, #12]
 80105c6:	899b      	ldrh	r3, [r3, #12]
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fa fde6 	bl	800b19c <lwip_htons>
 80105d0:	4603      	mov	r3, r0
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	f003 0303 	and.w	r3, r3, #3
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d001      	beq.n	80105e0 <tcp_receive+0xa54>
 80105dc:	2301      	movs	r3, #1
 80105de:	e000      	b.n	80105e2 <tcp_receive+0xa56>
 80105e0:	2300      	movs	r3, #0
 80105e2:	191a      	adds	r2, r3, r4
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105e8:	441a      	add	r2, r3
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105f2:	461c      	mov	r4, r3
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	891b      	ldrh	r3, [r3, #8]
 80105f8:	461d      	mov	r5, r3
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	68db      	ldr	r3, [r3, #12]
 80105fe:	899b      	ldrh	r3, [r3, #12]
 8010600:	b29b      	uxth	r3, r3
 8010602:	4618      	mov	r0, r3
 8010604:	f7fa fdca 	bl	800b19c <lwip_htons>
 8010608:	4603      	mov	r3, r0
 801060a:	b2db      	uxtb	r3, r3
 801060c:	f003 0303 	and.w	r3, r3, #3
 8010610:	2b00      	cmp	r3, #0
 8010612:	d001      	beq.n	8010618 <tcp_receive+0xa8c>
 8010614:	2301      	movs	r3, #1
 8010616:	e000      	b.n	801061a <tcp_receive+0xa8e>
 8010618:	2300      	movs	r3, #0
 801061a:	442b      	add	r3, r5
 801061c:	429c      	cmp	r4, r3
 801061e:	d206      	bcs.n	801062e <tcp_receive+0xaa2>
 8010620:	4b1e      	ldr	r3, [pc, #120]	@ (801069c <tcp_receive+0xb10>)
 8010622:	f240 622b 	movw	r2, #1579	@ 0x62b
 8010626:	4923      	ldr	r1, [pc, #140]	@ (80106b4 <tcp_receive+0xb28>)
 8010628:	481e      	ldr	r0, [pc, #120]	@ (80106a4 <tcp_receive+0xb18>)
 801062a:	f005 fc93 	bl	8015f54 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	891b      	ldrh	r3, [r3, #8]
 8010632:	461c      	mov	r4, r3
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	68db      	ldr	r3, [r3, #12]
 8010638:	899b      	ldrh	r3, [r3, #12]
 801063a:	b29b      	uxth	r3, r3
 801063c:	4618      	mov	r0, r3
 801063e:	f7fa fdad 	bl	800b19c <lwip_htons>
 8010642:	4603      	mov	r3, r0
 8010644:	b2db      	uxtb	r3, r3
 8010646:	f003 0303 	and.w	r3, r3, #3
 801064a:	2b00      	cmp	r3, #0
 801064c:	d001      	beq.n	8010652 <tcp_receive+0xac6>
 801064e:	2301      	movs	r3, #1
 8010650:	e000      	b.n	8010654 <tcp_receive+0xac8>
 8010652:	2300      	movs	r3, #0
 8010654:	1919      	adds	r1, r3, r4
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801065a:	b28b      	uxth	r3, r1
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	b29a      	uxth	r2, r3
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f7fc ff43 	bl	800d4f0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	891b      	ldrh	r3, [r3, #8]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d028      	beq.n	80106c6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010674:	4b0d      	ldr	r3, [pc, #52]	@ (80106ac <tcp_receive+0xb20>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d01d      	beq.n	80106b8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801067c:	4b0b      	ldr	r3, [pc, #44]	@ (80106ac <tcp_receive+0xb20>)
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	4619      	mov	r1, r3
 8010686:	4610      	mov	r0, r2
 8010688:	f7fc fa60 	bl	800cb4c <pbuf_cat>
 801068c:	e018      	b.n	80106c0 <tcp_receive+0xb34>
 801068e:	bf00      	nop
 8010690:	240083ce 	.word	0x240083ce
 8010694:	240083c4 	.word	0x240083c4
 8010698:	240083a4 	.word	0x240083a4
 801069c:	0801a9a8 	.word	0x0801a9a8
 80106a0:	0801ad88 	.word	0x0801ad88
 80106a4:	0801a9f4 	.word	0x0801a9f4
 80106a8:	0801adc4 	.word	0x0801adc4
 80106ac:	240083d4 	.word	0x240083d4
 80106b0:	240083d1 	.word	0x240083d1
 80106b4:	0801ade4 	.word	0x0801ade4
            } else {
              recv_data = cseg->p;
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	685b      	ldr	r3, [r3, #4]
 80106bc:	4a70      	ldr	r2, [pc, #448]	@ (8010880 <tcp_receive+0xcf4>)
 80106be:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	2200      	movs	r2, #0
 80106c4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	68db      	ldr	r3, [r3, #12]
 80106ca:	899b      	ldrh	r3, [r3, #12]
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7fa fd64 	bl	800b19c <lwip_htons>
 80106d4:	4603      	mov	r3, r0
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	f003 0301 	and.w	r3, r3, #1
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00d      	beq.n	80106fc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80106e0:	4b68      	ldr	r3, [pc, #416]	@ (8010884 <tcp_receive+0xcf8>)
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	f043 0320 	orr.w	r3, r3, #32
 80106e8:	b2da      	uxtb	r2, r3
 80106ea:	4b66      	ldr	r3, [pc, #408]	@ (8010884 <tcp_receive+0xcf8>)
 80106ec:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	7d1b      	ldrb	r3, [r3, #20]
 80106f2:	2b04      	cmp	r3, #4
 80106f4:	d102      	bne.n	80106fc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2207      	movs	r2, #7
 80106fa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8010704:	68b8      	ldr	r0, [r7, #8]
 8010706:	f7fd fbd4 	bl	800deb2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801070e:	2b00      	cmp	r3, #0
 8010710:	d008      	beq.n	8010724 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010716:	68db      	ldr	r3, [r3, #12]
 8010718:	685a      	ldr	r2, [r3, #4]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801071e:	429a      	cmp	r2, r3
 8010720:	f43f af43 	beq.w	80105aa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	8b5b      	ldrh	r3, [r3, #26]
 8010728:	f003 0301 	and.w	r3, r3, #1
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00e      	beq.n	801074e <tcp_receive+0xbc2>
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	8b5b      	ldrh	r3, [r3, #26]
 8010734:	f023 0301 	bic.w	r3, r3, #1
 8010738:	b29a      	uxth	r2, r3
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	835a      	strh	r2, [r3, #26]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	8b5b      	ldrh	r3, [r3, #26]
 8010742:	f043 0302 	orr.w	r3, r3, #2
 8010746:	b29a      	uxth	r2, r3
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801074c:	e187      	b.n	8010a5e <tcp_receive+0xed2>
        tcp_ack(pcb);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	8b5b      	ldrh	r3, [r3, #26]
 8010752:	f043 0301 	orr.w	r3, r3, #1
 8010756:	b29a      	uxth	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801075c:	e17f      	b.n	8010a5e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010762:	2b00      	cmp	r3, #0
 8010764:	d106      	bne.n	8010774 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010766:	4848      	ldr	r0, [pc, #288]	@ (8010888 <tcp_receive+0xcfc>)
 8010768:	f7fd fbbc 	bl	800dee4 <tcp_seg_copy>
 801076c:	4602      	mov	r2, r0
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	675a      	str	r2, [r3, #116]	@ 0x74
 8010772:	e16c      	b.n	8010a4e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010774:	2300      	movs	r3, #0
 8010776:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801077c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801077e:	e156      	b.n	8010a2e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010782:	68db      	ldr	r3, [r3, #12]
 8010784:	685a      	ldr	r2, [r3, #4]
 8010786:	4b41      	ldr	r3, [pc, #260]	@ (801088c <tcp_receive+0xd00>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	429a      	cmp	r2, r3
 801078c:	d11d      	bne.n	80107ca <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801078e:	4b3e      	ldr	r3, [pc, #248]	@ (8010888 <tcp_receive+0xcfc>)
 8010790:	891a      	ldrh	r2, [r3, #8]
 8010792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010794:	891b      	ldrh	r3, [r3, #8]
 8010796:	429a      	cmp	r2, r3
 8010798:	f240 814e 	bls.w	8010a38 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801079c:	483a      	ldr	r0, [pc, #232]	@ (8010888 <tcp_receive+0xcfc>)
 801079e:	f7fd fba1 	bl	800dee4 <tcp_seg_copy>
 80107a2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	f000 8148 	beq.w	8010a3c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80107ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d003      	beq.n	80107ba <tcp_receive+0xc2e>
                    prev->next = cseg;
 80107b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107b4:	697a      	ldr	r2, [r7, #20]
 80107b6:	601a      	str	r2, [r3, #0]
 80107b8:	e002      	b.n	80107c0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	697a      	ldr	r2, [r7, #20]
 80107be:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80107c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80107c2:	6978      	ldr	r0, [r7, #20]
 80107c4:	f7ff f8de 	bl	800f984 <tcp_oos_insert_segment>
                }
                break;
 80107c8:	e138      	b.n	8010a3c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80107ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d117      	bne.n	8010800 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80107d0:	4b2e      	ldr	r3, [pc, #184]	@ (801088c <tcp_receive+0xd00>)
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	1ad3      	subs	r3, r2, r3
 80107dc:	2b00      	cmp	r3, #0
 80107de:	da57      	bge.n	8010890 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80107e0:	4829      	ldr	r0, [pc, #164]	@ (8010888 <tcp_receive+0xcfc>)
 80107e2:	f7fd fb7f 	bl	800dee4 <tcp_seg_copy>
 80107e6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f000 8128 	beq.w	8010a40 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	69ba      	ldr	r2, [r7, #24]
 80107f4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80107f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80107f8:	69b8      	ldr	r0, [r7, #24]
 80107fa:	f7ff f8c3 	bl	800f984 <tcp_oos_insert_segment>
                  }
                  break;
 80107fe:	e11f      	b.n	8010a40 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010800:	4b22      	ldr	r3, [pc, #136]	@ (801088c <tcp_receive+0xd00>)
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	1ad3      	subs	r3, r2, r3
 801080c:	3b01      	subs	r3, #1
 801080e:	2b00      	cmp	r3, #0
 8010810:	db3e      	blt.n	8010890 <tcp_receive+0xd04>
 8010812:	4b1e      	ldr	r3, [pc, #120]	@ (801088c <tcp_receive+0xd00>)
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	1ad3      	subs	r3, r2, r3
 801081e:	3301      	adds	r3, #1
 8010820:	2b00      	cmp	r3, #0
 8010822:	dc35      	bgt.n	8010890 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010824:	4818      	ldr	r0, [pc, #96]	@ (8010888 <tcp_receive+0xcfc>)
 8010826:	f7fd fb5d 	bl	800dee4 <tcp_seg_copy>
 801082a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	2b00      	cmp	r3, #0
 8010830:	f000 8108 	beq.w	8010a44 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801083c:	8912      	ldrh	r2, [r2, #8]
 801083e:	441a      	add	r2, r3
 8010840:	4b12      	ldr	r3, [pc, #72]	@ (801088c <tcp_receive+0xd00>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	1ad3      	subs	r3, r2, r3
 8010846:	2b00      	cmp	r3, #0
 8010848:	dd12      	ble.n	8010870 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801084a:	4b10      	ldr	r3, [pc, #64]	@ (801088c <tcp_receive+0xd00>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	b29a      	uxth	r2, r3
 8010850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	b29b      	uxth	r3, r3
 8010858:	1ad3      	subs	r3, r2, r3
 801085a:	b29a      	uxth	r2, r3
 801085c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801085e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010862:	685a      	ldr	r2, [r3, #4]
 8010864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010866:	891b      	ldrh	r3, [r3, #8]
 8010868:	4619      	mov	r1, r3
 801086a:	4610      	mov	r0, r2
 801086c:	f7fb ff26 	bl	800c6bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010872:	69fa      	ldr	r2, [r7, #28]
 8010874:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010876:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010878:	69f8      	ldr	r0, [r7, #28]
 801087a:	f7ff f883 	bl	800f984 <tcp_oos_insert_segment>
                  }
                  break;
 801087e:	e0e1      	b.n	8010a44 <tcp_receive+0xeb8>
 8010880:	240083d4 	.word	0x240083d4
 8010884:	240083d1 	.word	0x240083d1
 8010888:	240083a4 	.word	0x240083a4
 801088c:	240083c4 	.word	0x240083c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010892:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	f040 80c5 	bne.w	8010a28 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801089e:	4b7f      	ldr	r3, [pc, #508]	@ (8010a9c <tcp_receive+0xf10>)
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108a4:	68db      	ldr	r3, [r3, #12]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	f340 80bc 	ble.w	8010a28 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80108b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	899b      	ldrh	r3, [r3, #12]
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7fa fc6f 	bl	800b19c <lwip_htons>
 80108be:	4603      	mov	r3, r0
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	f003 0301 	and.w	r3, r3, #1
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	f040 80be 	bne.w	8010a48 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80108cc:	4874      	ldr	r0, [pc, #464]	@ (8010aa0 <tcp_receive+0xf14>)
 80108ce:	f7fd fb09 	bl	800dee4 <tcp_seg_copy>
 80108d2:	4602      	mov	r2, r0
 80108d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80108d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	f000 80b5 	beq.w	8010a4c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80108e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108e4:	68db      	ldr	r3, [r3, #12]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80108ea:	8912      	ldrh	r2, [r2, #8]
 80108ec:	441a      	add	r2, r3
 80108ee:	4b6b      	ldr	r3, [pc, #428]	@ (8010a9c <tcp_receive+0xf10>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	1ad3      	subs	r3, r2, r3
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	dd12      	ble.n	801091e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80108f8:	4b68      	ldr	r3, [pc, #416]	@ (8010a9c <tcp_receive+0xf10>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	b29a      	uxth	r2, r3
 80108fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	b29b      	uxth	r3, r3
 8010906:	1ad3      	subs	r3, r2, r3
 8010908:	b29a      	uxth	r2, r3
 801090a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801090c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801090e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010910:	685a      	ldr	r2, [r3, #4]
 8010912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010914:	891b      	ldrh	r3, [r3, #8]
 8010916:	4619      	mov	r1, r3
 8010918:	4610      	mov	r0, r2
 801091a:	f7fb fecf 	bl	800c6bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801091e:	4b61      	ldr	r3, [pc, #388]	@ (8010aa4 <tcp_receive+0xf18>)
 8010920:	881b      	ldrh	r3, [r3, #0]
 8010922:	461a      	mov	r2, r3
 8010924:	4b5d      	ldr	r3, [pc, #372]	@ (8010a9c <tcp_receive+0xf10>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	441a      	add	r2, r3
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801092e:	6879      	ldr	r1, [r7, #4]
 8010930:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010932:	440b      	add	r3, r1
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	2b00      	cmp	r3, #0
 8010938:	f340 8088 	ble.w	8010a4c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801093c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	68db      	ldr	r3, [r3, #12]
 8010942:	899b      	ldrh	r3, [r3, #12]
 8010944:	b29b      	uxth	r3, r3
 8010946:	4618      	mov	r0, r3
 8010948:	f7fa fc28 	bl	800b19c <lwip_htons>
 801094c:	4603      	mov	r3, r0
 801094e:	b2db      	uxtb	r3, r3
 8010950:	f003 0301 	and.w	r3, r3, #1
 8010954:	2b00      	cmp	r3, #0
 8010956:	d021      	beq.n	801099c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	899b      	ldrh	r3, [r3, #12]
 8010960:	b29b      	uxth	r3, r3
 8010962:	b21b      	sxth	r3, r3
 8010964:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010968:	b21c      	sxth	r4, r3
 801096a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	899b      	ldrh	r3, [r3, #12]
 8010972:	b29b      	uxth	r3, r3
 8010974:	4618      	mov	r0, r3
 8010976:	f7fa fc11 	bl	800b19c <lwip_htons>
 801097a:	4603      	mov	r3, r0
 801097c:	b2db      	uxtb	r3, r3
 801097e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010982:	b29b      	uxth	r3, r3
 8010984:	4618      	mov	r0, r3
 8010986:	f7fa fc09 	bl	800b19c <lwip_htons>
 801098a:	4603      	mov	r3, r0
 801098c:	b21b      	sxth	r3, r3
 801098e:	4323      	orrs	r3, r4
 8010990:	b21a      	sxth	r2, r3
 8010992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	68db      	ldr	r3, [r3, #12]
 8010998:	b292      	uxth	r2, r2
 801099a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109a6:	4413      	add	r3, r2
 80109a8:	b299      	uxth	r1, r3
 80109aa:	4b3c      	ldr	r3, [pc, #240]	@ (8010a9c <tcp_receive+0xf10>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	1a8a      	subs	r2, r1, r2
 80109b6:	b292      	uxth	r2, r2
 80109b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80109ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	685a      	ldr	r2, [r3, #4]
 80109c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	891b      	ldrh	r3, [r3, #8]
 80109c6:	4619      	mov	r1, r3
 80109c8:	4610      	mov	r0, r2
 80109ca:	f7fb fe77 	bl	800c6bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80109ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	891c      	ldrh	r4, [r3, #8]
 80109d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	899b      	ldrh	r3, [r3, #12]
 80109dc:	b29b      	uxth	r3, r3
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fa fbdc 	bl	800b19c <lwip_htons>
 80109e4:	4603      	mov	r3, r0
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	f003 0303 	and.w	r3, r3, #3
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d001      	beq.n	80109f4 <tcp_receive+0xe68>
 80109f0:	2301      	movs	r3, #1
 80109f2:	e000      	b.n	80109f6 <tcp_receive+0xe6a>
 80109f4:	2300      	movs	r3, #0
 80109f6:	4423      	add	r3, r4
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	4b2a      	ldr	r3, [pc, #168]	@ (8010aa4 <tcp_receive+0xf18>)
 80109fc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80109fe:	4b29      	ldr	r3, [pc, #164]	@ (8010aa4 <tcp_receive+0xf18>)
 8010a00:	881b      	ldrh	r3, [r3, #0]
 8010a02:	461a      	mov	r2, r3
 8010a04:	4b25      	ldr	r3, [pc, #148]	@ (8010a9c <tcp_receive+0xf10>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	441a      	add	r2, r3
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a0e:	6879      	ldr	r1, [r7, #4]
 8010a10:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010a12:	440b      	add	r3, r1
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d019      	beq.n	8010a4c <tcp_receive+0xec0>
 8010a18:	4b23      	ldr	r3, [pc, #140]	@ (8010aa8 <tcp_receive+0xf1c>)
 8010a1a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8010a1e:	4923      	ldr	r1, [pc, #140]	@ (8010aac <tcp_receive+0xf20>)
 8010a20:	4823      	ldr	r0, [pc, #140]	@ (8010ab0 <tcp_receive+0xf24>)
 8010a22:	f005 fa97 	bl	8015f54 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010a26:	e011      	b.n	8010a4c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	f47f aea5 	bne.w	8010780 <tcp_receive+0xbf4>
 8010a36:	e00a      	b.n	8010a4e <tcp_receive+0xec2>
                break;
 8010a38:	bf00      	nop
 8010a3a:	e008      	b.n	8010a4e <tcp_receive+0xec2>
                break;
 8010a3c:	bf00      	nop
 8010a3e:	e006      	b.n	8010a4e <tcp_receive+0xec2>
                  break;
 8010a40:	bf00      	nop
 8010a42:	e004      	b.n	8010a4e <tcp_receive+0xec2>
                  break;
 8010a44:	bf00      	nop
 8010a46:	e002      	b.n	8010a4e <tcp_receive+0xec2>
                  break;
 8010a48:	bf00      	nop
 8010a4a:	e000      	b.n	8010a4e <tcp_receive+0xec2>
                break;
 8010a4c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f001 fa30 	bl	8011eb4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010a54:	e003      	b.n	8010a5e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f001 fa2c 	bl	8011eb4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a5c:	e01a      	b.n	8010a94 <tcp_receive+0xf08>
 8010a5e:	e019      	b.n	8010a94 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010a60:	4b0e      	ldr	r3, [pc, #56]	@ (8010a9c <tcp_receive+0xf10>)
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	db0a      	blt.n	8010a84 <tcp_receive+0xef8>
 8010a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8010a9c <tcp_receive+0xf10>)
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a76:	6879      	ldr	r1, [r7, #4]
 8010a78:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010a7a:	440b      	add	r3, r1
 8010a7c:	1ad3      	subs	r3, r2, r3
 8010a7e:	3301      	adds	r3, #1
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	dd07      	ble.n	8010a94 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	8b5b      	ldrh	r3, [r3, #26]
 8010a88:	f043 0302 	orr.w	r3, r3, #2
 8010a8c:	b29a      	uxth	r2, r3
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010a92:	e7ff      	b.n	8010a94 <tcp_receive+0xf08>
 8010a94:	bf00      	nop
 8010a96:	3750      	adds	r7, #80	@ 0x50
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8010a9c:	240083c4 	.word	0x240083c4
 8010aa0:	240083a4 	.word	0x240083a4
 8010aa4:	240083ce 	.word	0x240083ce
 8010aa8:	0801a9a8 	.word	0x0801a9a8
 8010aac:	0801ad50 	.word	0x0801ad50
 8010ab0:	0801a9f4 	.word	0x0801a9f4

08010ab4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010aba:	4b15      	ldr	r3, [pc, #84]	@ (8010b10 <tcp_get_next_optbyte+0x5c>)
 8010abc:	881b      	ldrh	r3, [r3, #0]
 8010abe:	1c5a      	adds	r2, r3, #1
 8010ac0:	b291      	uxth	r1, r2
 8010ac2:	4a13      	ldr	r2, [pc, #76]	@ (8010b10 <tcp_get_next_optbyte+0x5c>)
 8010ac4:	8011      	strh	r1, [r2, #0]
 8010ac6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010ac8:	4b12      	ldr	r3, [pc, #72]	@ (8010b14 <tcp_get_next_optbyte+0x60>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d004      	beq.n	8010ada <tcp_get_next_optbyte+0x26>
 8010ad0:	4b11      	ldr	r3, [pc, #68]	@ (8010b18 <tcp_get_next_optbyte+0x64>)
 8010ad2:	881b      	ldrh	r3, [r3, #0]
 8010ad4:	88fa      	ldrh	r2, [r7, #6]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d208      	bcs.n	8010aec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010ada:	4b10      	ldr	r3, [pc, #64]	@ (8010b1c <tcp_get_next_optbyte+0x68>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	3314      	adds	r3, #20
 8010ae0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010ae2:	88fb      	ldrh	r3, [r7, #6]
 8010ae4:	683a      	ldr	r2, [r7, #0]
 8010ae6:	4413      	add	r3, r2
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	e00b      	b.n	8010b04 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010aec:	88fb      	ldrh	r3, [r7, #6]
 8010aee:	b2da      	uxtb	r2, r3
 8010af0:	4b09      	ldr	r3, [pc, #36]	@ (8010b18 <tcp_get_next_optbyte+0x64>)
 8010af2:	881b      	ldrh	r3, [r3, #0]
 8010af4:	b2db      	uxtb	r3, r3
 8010af6:	1ad3      	subs	r3, r2, r3
 8010af8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010afa:	4b06      	ldr	r3, [pc, #24]	@ (8010b14 <tcp_get_next_optbyte+0x60>)
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	797b      	ldrb	r3, [r7, #5]
 8010b00:	4413      	add	r3, r2
 8010b02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr
 8010b10:	240083c0 	.word	0x240083c0
 8010b14:	240083bc 	.word	0x240083bc
 8010b18:	240083ba 	.word	0x240083ba
 8010b1c:	240083b4 	.word	0x240083b4

08010b20 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d106      	bne.n	8010b3c <tcp_parseopt+0x1c>
 8010b2e:	4b32      	ldr	r3, [pc, #200]	@ (8010bf8 <tcp_parseopt+0xd8>)
 8010b30:	f240 727d 	movw	r2, #1917	@ 0x77d
 8010b34:	4931      	ldr	r1, [pc, #196]	@ (8010bfc <tcp_parseopt+0xdc>)
 8010b36:	4832      	ldr	r0, [pc, #200]	@ (8010c00 <tcp_parseopt+0xe0>)
 8010b38:	f005 fa0c 	bl	8015f54 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010b3c:	4b31      	ldr	r3, [pc, #196]	@ (8010c04 <tcp_parseopt+0xe4>)
 8010b3e:	881b      	ldrh	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d056      	beq.n	8010bf2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010b44:	4b30      	ldr	r3, [pc, #192]	@ (8010c08 <tcp_parseopt+0xe8>)
 8010b46:	2200      	movs	r2, #0
 8010b48:	801a      	strh	r2, [r3, #0]
 8010b4a:	e046      	b.n	8010bda <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8010b4c:	f7ff ffb2 	bl	8010ab4 <tcp_get_next_optbyte>
 8010b50:	4603      	mov	r3, r0
 8010b52:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010b54:	7bfb      	ldrb	r3, [r7, #15]
 8010b56:	2b02      	cmp	r3, #2
 8010b58:	d006      	beq.n	8010b68 <tcp_parseopt+0x48>
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	dc2a      	bgt.n	8010bb4 <tcp_parseopt+0x94>
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d042      	beq.n	8010be8 <tcp_parseopt+0xc8>
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d038      	beq.n	8010bd8 <tcp_parseopt+0xb8>
 8010b66:	e025      	b.n	8010bb4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010b68:	f7ff ffa4 	bl	8010ab4 <tcp_get_next_optbyte>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b04      	cmp	r3, #4
 8010b70:	d13c      	bne.n	8010bec <tcp_parseopt+0xcc>
 8010b72:	4b25      	ldr	r3, [pc, #148]	@ (8010c08 <tcp_parseopt+0xe8>)
 8010b74:	881b      	ldrh	r3, [r3, #0]
 8010b76:	3301      	adds	r3, #1
 8010b78:	4a22      	ldr	r2, [pc, #136]	@ (8010c04 <tcp_parseopt+0xe4>)
 8010b7a:	8812      	ldrh	r2, [r2, #0]
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	da35      	bge.n	8010bec <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010b80:	f7ff ff98 	bl	8010ab4 <tcp_get_next_optbyte>
 8010b84:	4603      	mov	r3, r0
 8010b86:	021b      	lsls	r3, r3, #8
 8010b88:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010b8a:	f7ff ff93 	bl	8010ab4 <tcp_get_next_optbyte>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	461a      	mov	r2, r3
 8010b92:	89bb      	ldrh	r3, [r7, #12]
 8010b94:	4313      	orrs	r3, r2
 8010b96:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010b98:	89bb      	ldrh	r3, [r7, #12]
 8010b9a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010b9e:	d804      	bhi.n	8010baa <tcp_parseopt+0x8a>
 8010ba0:	89bb      	ldrh	r3, [r7, #12]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d001      	beq.n	8010baa <tcp_parseopt+0x8a>
 8010ba6:	89ba      	ldrh	r2, [r7, #12]
 8010ba8:	e001      	b.n	8010bae <tcp_parseopt+0x8e>
 8010baa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010bb2:	e012      	b.n	8010bda <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010bb4:	f7ff ff7e 	bl	8010ab4 <tcp_get_next_optbyte>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010bbc:	7afb      	ldrb	r3, [r7, #11]
 8010bbe:	2b01      	cmp	r3, #1
 8010bc0:	d916      	bls.n	8010bf0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010bc2:	7afb      	ldrb	r3, [r7, #11]
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	4b10      	ldr	r3, [pc, #64]	@ (8010c08 <tcp_parseopt+0xe8>)
 8010bc8:	881b      	ldrh	r3, [r3, #0]
 8010bca:	4413      	add	r3, r2
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	3b02      	subs	r3, #2
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8010c08 <tcp_parseopt+0xe8>)
 8010bd4:	801a      	strh	r2, [r3, #0]
 8010bd6:	e000      	b.n	8010bda <tcp_parseopt+0xba>
          break;
 8010bd8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010bda:	4b0b      	ldr	r3, [pc, #44]	@ (8010c08 <tcp_parseopt+0xe8>)
 8010bdc:	881a      	ldrh	r2, [r3, #0]
 8010bde:	4b09      	ldr	r3, [pc, #36]	@ (8010c04 <tcp_parseopt+0xe4>)
 8010be0:	881b      	ldrh	r3, [r3, #0]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d3b2      	bcc.n	8010b4c <tcp_parseopt+0x2c>
 8010be6:	e004      	b.n	8010bf2 <tcp_parseopt+0xd2>
          return;
 8010be8:	bf00      	nop
 8010bea:	e002      	b.n	8010bf2 <tcp_parseopt+0xd2>
            return;
 8010bec:	bf00      	nop
 8010bee:	e000      	b.n	8010bf2 <tcp_parseopt+0xd2>
            return;
 8010bf0:	bf00      	nop
      }
    }
  }
}
 8010bf2:	3710      	adds	r7, #16
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	0801a9a8 	.word	0x0801a9a8
 8010bfc:	0801ae0c 	.word	0x0801ae0c
 8010c00:	0801a9f4 	.word	0x0801a9f4
 8010c04:	240083b8 	.word	0x240083b8
 8010c08:	240083c0 	.word	0x240083c0

08010c0c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010c10:	4b05      	ldr	r3, [pc, #20]	@ (8010c28 <tcp_trigger_input_pcb_close+0x1c>)
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	f043 0310 	orr.w	r3, r3, #16
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	4b03      	ldr	r3, [pc, #12]	@ (8010c28 <tcp_trigger_input_pcb_close+0x1c>)
 8010c1c:	701a      	strb	r2, [r3, #0]
}
 8010c1e:	bf00      	nop
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr
 8010c28:	240083d1 	.word	0x240083d1

08010c2c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b084      	sub	sp, #16
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	60f8      	str	r0, [r7, #12]
 8010c34:	60b9      	str	r1, [r7, #8]
 8010c36:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00a      	beq.n	8010c54 <tcp_route+0x28>
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	7a1b      	ldrb	r3, [r3, #8]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d006      	beq.n	8010c54 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	7a1b      	ldrb	r3, [r3, #8]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fb fb5c 	bl	800c308 <netif_get_by_index>
 8010c50:	4603      	mov	r3, r0
 8010c52:	e003      	b.n	8010c5c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f002 ffdb 	bl	8013c10 <ip4_route>
 8010c5a:	4603      	mov	r3, r0
  }
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010c64:	b590      	push	{r4, r7, lr}
 8010c66:	b087      	sub	sp, #28
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	60b9      	str	r1, [r7, #8]
 8010c6e:	603b      	str	r3, [r7, #0]
 8010c70:	4613      	mov	r3, r2
 8010c72:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d105      	bne.n	8010c86 <tcp_create_segment+0x22>
 8010c7a:	4b43      	ldr	r3, [pc, #268]	@ (8010d88 <tcp_create_segment+0x124>)
 8010c7c:	22a3      	movs	r2, #163	@ 0xa3
 8010c7e:	4943      	ldr	r1, [pc, #268]	@ (8010d8c <tcp_create_segment+0x128>)
 8010c80:	4843      	ldr	r0, [pc, #268]	@ (8010d90 <tcp_create_segment+0x12c>)
 8010c82:	f005 f967 	bl	8015f54 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d105      	bne.n	8010c98 <tcp_create_segment+0x34>
 8010c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8010d88 <tcp_create_segment+0x124>)
 8010c8e:	22a4      	movs	r2, #164	@ 0xa4
 8010c90:	4940      	ldr	r1, [pc, #256]	@ (8010d94 <tcp_create_segment+0x130>)
 8010c92:	483f      	ldr	r0, [pc, #252]	@ (8010d90 <tcp_create_segment+0x12c>)
 8010c94:	f005 f95e 	bl	8015f54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010c98:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	f003 0304 	and.w	r3, r3, #4
 8010ca4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010ca6:	2003      	movs	r0, #3
 8010ca8:	f7fa ffa8 	bl	800bbfc <memp_malloc>
 8010cac:	6138      	str	r0, [r7, #16]
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d104      	bne.n	8010cbe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010cb4:	68b8      	ldr	r0, [r7, #8]
 8010cb6:	f7fb fe87 	bl	800c9c8 <pbuf_free>
    return NULL;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	e060      	b.n	8010d80 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010cc4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	68ba      	ldr	r2, [r7, #8]
 8010cd0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	891a      	ldrh	r2, [r3, #8]
 8010cd6:	7dfb      	ldrb	r3, [r7, #23]
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	d205      	bcs.n	8010cea <tcp_create_segment+0x86>
 8010cde:	4b2a      	ldr	r3, [pc, #168]	@ (8010d88 <tcp_create_segment+0x124>)
 8010ce0:	22b0      	movs	r2, #176	@ 0xb0
 8010ce2:	492d      	ldr	r1, [pc, #180]	@ (8010d98 <tcp_create_segment+0x134>)
 8010ce4:	482a      	ldr	r0, [pc, #168]	@ (8010d90 <tcp_create_segment+0x12c>)
 8010ce6:	f005 f935 	bl	8015f54 <iprintf>
  seg->len = p->tot_len - optlen;
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	891a      	ldrh	r2, [r3, #8]
 8010cee:	7dfb      	ldrb	r3, [r7, #23]
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	1ad3      	subs	r3, r2, r3
 8010cf4:	b29a      	uxth	r2, r3
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010cfa:	2114      	movs	r1, #20
 8010cfc:	68b8      	ldr	r0, [r7, #8]
 8010cfe:	f7fb fdcd 	bl	800c89c <pbuf_add_header>
 8010d02:	4603      	mov	r3, r0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d004      	beq.n	8010d12 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010d08:	6938      	ldr	r0, [r7, #16]
 8010d0a:	f7fd f8d2 	bl	800deb2 <tcp_seg_free>
    return NULL;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	e036      	b.n	8010d80 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	685a      	ldr	r2, [r3, #4]
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	8ada      	ldrh	r2, [r3, #22]
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	68dc      	ldr	r4, [r3, #12]
 8010d24:	4610      	mov	r0, r2
 8010d26:	f7fa fa39 	bl	800b19c <lwip_htons>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	8b1a      	ldrh	r2, [r3, #24]
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	68dc      	ldr	r4, [r3, #12]
 8010d36:	4610      	mov	r0, r2
 8010d38:	f7fa fa30 	bl	800b19c <lwip_htons>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	68dc      	ldr	r4, [r3, #12]
 8010d44:	6838      	ldr	r0, [r7, #0]
 8010d46:	f7fa fa3f 	bl	800b1c8 <lwip_htonl>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010d4e:	7dfb      	ldrb	r3, [r7, #23]
 8010d50:	089b      	lsrs	r3, r3, #2
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	3305      	adds	r3, #5
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	031b      	lsls	r3, r3, #12
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	79fb      	ldrb	r3, [r7, #7]
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	4313      	orrs	r3, r2
 8010d62:	b29a      	uxth	r2, r3
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	68dc      	ldr	r4, [r3, #12]
 8010d68:	4610      	mov	r0, r2
 8010d6a:	f7fa fa17 	bl	800b19c <lwip_htons>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	2200      	movs	r2, #0
 8010d78:	749a      	strb	r2, [r3, #18]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	74da      	strb	r2, [r3, #19]
  return seg;
 8010d7e:	693b      	ldr	r3, [r7, #16]
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	371c      	adds	r7, #28
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd90      	pop	{r4, r7, pc}
 8010d88:	0801ae28 	.word	0x0801ae28
 8010d8c:	0801ae5c 	.word	0x0801ae5c
 8010d90:	0801ae7c 	.word	0x0801ae7c
 8010d94:	0801aea4 	.word	0x0801aea4
 8010d98:	0801aec8 	.word	0x0801aec8

08010d9c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010d9c:	b590      	push	{r4, r7, lr}
 8010d9e:	b08b      	sub	sp, #44	@ 0x2c
 8010da0:	af02      	add	r7, sp, #8
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	460b      	mov	r3, r1
 8010da6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010da8:	2300      	movs	r3, #0
 8010daa:	61fb      	str	r3, [r7, #28]
 8010dac:	2300      	movs	r3, #0
 8010dae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010db0:	2300      	movs	r3, #0
 8010db2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d106      	bne.n	8010dc8 <tcp_split_unsent_seg+0x2c>
 8010dba:	4b95      	ldr	r3, [pc, #596]	@ (8011010 <tcp_split_unsent_seg+0x274>)
 8010dbc:	f240 324b 	movw	r2, #843	@ 0x34b
 8010dc0:	4994      	ldr	r1, [pc, #592]	@ (8011014 <tcp_split_unsent_seg+0x278>)
 8010dc2:	4895      	ldr	r0, [pc, #596]	@ (8011018 <tcp_split_unsent_seg+0x27c>)
 8010dc4:	f005 f8c6 	bl	8015f54 <iprintf>

  useg = pcb->unsent;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dcc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d102      	bne.n	8010dda <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010dd8:	e116      	b.n	8011008 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010dda:	887b      	ldrh	r3, [r7, #2]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d109      	bne.n	8010df4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010de0:	4b8b      	ldr	r3, [pc, #556]	@ (8011010 <tcp_split_unsent_seg+0x274>)
 8010de2:	f240 3253 	movw	r2, #851	@ 0x353
 8010de6:	498d      	ldr	r1, [pc, #564]	@ (801101c <tcp_split_unsent_seg+0x280>)
 8010de8:	488b      	ldr	r0, [pc, #556]	@ (8011018 <tcp_split_unsent_seg+0x27c>)
 8010dea:	f005 f8b3 	bl	8015f54 <iprintf>
    return ERR_VAL;
 8010dee:	f06f 0305 	mvn.w	r3, #5
 8010df2:	e109      	b.n	8011008 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	891b      	ldrh	r3, [r3, #8]
 8010df8:	887a      	ldrh	r2, [r7, #2]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d301      	bcc.n	8010e02 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	e102      	b.n	8011008 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e06:	887a      	ldrh	r2, [r7, #2]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d906      	bls.n	8010e1a <tcp_split_unsent_seg+0x7e>
 8010e0c:	4b80      	ldr	r3, [pc, #512]	@ (8011010 <tcp_split_unsent_seg+0x274>)
 8010e0e:	f240 325b 	movw	r2, #859	@ 0x35b
 8010e12:	4983      	ldr	r1, [pc, #524]	@ (8011020 <tcp_split_unsent_seg+0x284>)
 8010e14:	4880      	ldr	r0, [pc, #512]	@ (8011018 <tcp_split_unsent_seg+0x27c>)
 8010e16:	f005 f89d 	bl	8015f54 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	891b      	ldrh	r3, [r3, #8]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d106      	bne.n	8010e30 <tcp_split_unsent_seg+0x94>
 8010e22:	4b7b      	ldr	r3, [pc, #492]	@ (8011010 <tcp_split_unsent_seg+0x274>)
 8010e24:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010e28:	497e      	ldr	r1, [pc, #504]	@ (8011024 <tcp_split_unsent_seg+0x288>)
 8010e2a:	487b      	ldr	r0, [pc, #492]	@ (8011018 <tcp_split_unsent_seg+0x27c>)
 8010e2c:	f005 f892 	bl	8015f54 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	7a9b      	ldrb	r3, [r3, #10]
 8010e34:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010e36:	7bfb      	ldrb	r3, [r7, #15]
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	f003 0304 	and.w	r3, r3, #4
 8010e40:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	891a      	ldrh	r2, [r3, #8]
 8010e46:	887b      	ldrh	r3, [r7, #2]
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010e4c:	7bbb      	ldrb	r3, [r7, #14]
 8010e4e:	b29a      	uxth	r2, r3
 8010e50:	89bb      	ldrh	r3, [r7, #12]
 8010e52:	4413      	add	r3, r2
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	2036      	movs	r0, #54	@ 0x36
 8010e5e:	f7fb facf 	bl	800c400 <pbuf_alloc>
 8010e62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f000 80b7 	beq.w	8010fda <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	891a      	ldrh	r2, [r3, #8]
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	891b      	ldrh	r3, [r3, #8]
 8010e76:	1ad3      	subs	r3, r2, r3
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	887b      	ldrh	r3, [r7, #2]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	6858      	ldr	r0, [r3, #4]
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	685a      	ldr	r2, [r3, #4]
 8010e88:	7bbb      	ldrb	r3, [r7, #14]
 8010e8a:	18d1      	adds	r1, r2, r3
 8010e8c:	897b      	ldrh	r3, [r7, #10]
 8010e8e:	89ba      	ldrh	r2, [r7, #12]
 8010e90:	f7fb ff84 	bl	800cd9c <pbuf_copy_partial>
 8010e94:	4603      	mov	r3, r0
 8010e96:	461a      	mov	r2, r3
 8010e98:	89bb      	ldrh	r3, [r7, #12]
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	f040 809f 	bne.w	8010fde <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	899b      	ldrh	r3, [r3, #12]
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fa f977 	bl	800b19c <lwip_htons>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010eb6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010eb8:	2300      	movs	r3, #0
 8010eba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010ebc:	7efb      	ldrb	r3, [r7, #27]
 8010ebe:	f003 0308 	and.w	r3, r3, #8
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d007      	beq.n	8010ed6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010ec6:	7efb      	ldrb	r3, [r7, #27]
 8010ec8:	f023 0308 	bic.w	r3, r3, #8
 8010ecc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010ece:	7ebb      	ldrb	r3, [r7, #26]
 8010ed0:	f043 0308 	orr.w	r3, r3, #8
 8010ed4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010ed6:	7efb      	ldrb	r3, [r7, #27]
 8010ed8:	f003 0301 	and.w	r3, r3, #1
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d007      	beq.n	8010ef0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010ee0:	7efb      	ldrb	r3, [r7, #27]
 8010ee2:	f023 0301 	bic.w	r3, r3, #1
 8010ee6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010ee8:	7ebb      	ldrb	r3, [r7, #26]
 8010eea:	f043 0301 	orr.w	r3, r3, #1
 8010eee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fa f966 	bl	800b1c8 <lwip_htonl>
 8010efc:	4602      	mov	r2, r0
 8010efe:	887b      	ldrh	r3, [r7, #2]
 8010f00:	18d1      	adds	r1, r2, r3
 8010f02:	7eba      	ldrb	r2, [r7, #26]
 8010f04:	7bfb      	ldrb	r3, [r7, #15]
 8010f06:	9300      	str	r3, [sp, #0]
 8010f08:	460b      	mov	r3, r1
 8010f0a:	6939      	ldr	r1, [r7, #16]
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f7ff fea9 	bl	8010c64 <tcp_create_segment>
 8010f12:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d063      	beq.n	8010fe2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fb fdda 	bl	800cad8 <pbuf_clen>
 8010f24:	4603      	mov	r3, r0
 8010f26:	461a      	mov	r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f2e:	1a9b      	subs	r3, r3, r2
 8010f30:	b29a      	uxth	r2, r3
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	6858      	ldr	r0, [r3, #4]
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	891a      	ldrh	r2, [r3, #8]
 8010f42:	89bb      	ldrh	r3, [r7, #12]
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	4619      	mov	r1, r3
 8010f4a:	f7fb fbb7 	bl	800c6bc <pbuf_realloc>
  useg->len -= remainder;
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	891a      	ldrh	r2, [r3, #8]
 8010f52:	89bb      	ldrh	r3, [r7, #12]
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	899b      	ldrh	r3, [r3, #12]
 8010f62:	b29c      	uxth	r4, r3
 8010f64:	7efb      	ldrb	r3, [r7, #27]
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7fa f917 	bl	800b19c <lwip_htons>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	461a      	mov	r2, r3
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	68db      	ldr	r3, [r3, #12]
 8010f76:	4322      	orrs	r2, r4
 8010f78:	b292      	uxth	r2, r2
 8010f7a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7fb fda9 	bl	800cad8 <pbuf_clen>
 8010f86:	4603      	mov	r3, r0
 8010f88:	461a      	mov	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f90:	4413      	add	r3, r2
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7fb fd9a 	bl	800cad8 <pbuf_clen>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010fae:	4413      	add	r3, r2
 8010fb0:	b29a      	uxth	r2, r3
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	69fb      	ldr	r3, [r7, #28]
 8010fbe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	69fa      	ldr	r2, [r7, #28]
 8010fc4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d103      	bne.n	8010fd6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	e016      	b.n	8011008 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010fda:	bf00      	nop
 8010fdc:	e002      	b.n	8010fe4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010fde:	bf00      	nop
 8010fe0:	e000      	b.n	8010fe4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010fe2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d006      	beq.n	8010ff8 <tcp_split_unsent_seg+0x25c>
 8010fea:	4b09      	ldr	r3, [pc, #36]	@ (8011010 <tcp_split_unsent_seg+0x274>)
 8010fec:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010ff0:	490d      	ldr	r1, [pc, #52]	@ (8011028 <tcp_split_unsent_seg+0x28c>)
 8010ff2:	4809      	ldr	r0, [pc, #36]	@ (8011018 <tcp_split_unsent_seg+0x27c>)
 8010ff4:	f004 ffae 	bl	8015f54 <iprintf>
  if (p != NULL) {
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d002      	beq.n	8011004 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010ffe:	6938      	ldr	r0, [r7, #16]
 8011000:	f7fb fce2 	bl	800c9c8 <pbuf_free>
  }

  return ERR_MEM;
 8011004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011008:	4618      	mov	r0, r3
 801100a:	3724      	adds	r7, #36	@ 0x24
 801100c:	46bd      	mov	sp, r7
 801100e:	bd90      	pop	{r4, r7, pc}
 8011010:	0801ae28 	.word	0x0801ae28
 8011014:	0801b1bc 	.word	0x0801b1bc
 8011018:	0801ae7c 	.word	0x0801ae7c
 801101c:	0801b1e0 	.word	0x0801b1e0
 8011020:	0801b204 	.word	0x0801b204
 8011024:	0801b214 	.word	0x0801b214
 8011028:	0801b224 	.word	0x0801b224

0801102c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801102c:	b590      	push	{r4, r7, lr}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <tcp_send_fin+0x1c>
 801103a:	4b21      	ldr	r3, [pc, #132]	@ (80110c0 <tcp_send_fin+0x94>)
 801103c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011040:	4920      	ldr	r1, [pc, #128]	@ (80110c4 <tcp_send_fin+0x98>)
 8011042:	4821      	ldr	r0, [pc, #132]	@ (80110c8 <tcp_send_fin+0x9c>)
 8011044:	f004 ff86 	bl	8015f54 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801104c:	2b00      	cmp	r3, #0
 801104e:	d02e      	beq.n	80110ae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	e002      	b.n	801105e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1f8      	bne.n	8011058 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	899b      	ldrh	r3, [r3, #12]
 801106c:	b29b      	uxth	r3, r3
 801106e:	4618      	mov	r0, r3
 8011070:	f7fa f894 	bl	800b19c <lwip_htons>
 8011074:	4603      	mov	r3, r0
 8011076:	b2db      	uxtb	r3, r3
 8011078:	f003 0307 	and.w	r3, r3, #7
 801107c:	2b00      	cmp	r3, #0
 801107e:	d116      	bne.n	80110ae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	899b      	ldrh	r3, [r3, #12]
 8011086:	b29c      	uxth	r4, r3
 8011088:	2001      	movs	r0, #1
 801108a:	f7fa f887 	bl	800b19c <lwip_htons>
 801108e:	4603      	mov	r3, r0
 8011090:	461a      	mov	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	4322      	orrs	r2, r4
 8011098:	b292      	uxth	r2, r2
 801109a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	8b5b      	ldrh	r3, [r3, #26]
 80110a0:	f043 0320 	orr.w	r3, r3, #32
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80110aa:	2300      	movs	r3, #0
 80110ac:	e004      	b.n	80110b8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80110ae:	2101      	movs	r1, #1
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 f80b 	bl	80110cc <tcp_enqueue_flags>
 80110b6:	4603      	mov	r3, r0
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3714      	adds	r7, #20
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd90      	pop	{r4, r7, pc}
 80110c0:	0801ae28 	.word	0x0801ae28
 80110c4:	0801b230 	.word	0x0801b230
 80110c8:	0801ae7c 	.word	0x0801ae7c

080110cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b08a      	sub	sp, #40	@ 0x28
 80110d0:	af02      	add	r7, sp, #8
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	460b      	mov	r3, r1
 80110d6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80110d8:	2300      	movs	r3, #0
 80110da:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80110dc:	2300      	movs	r3, #0
 80110de:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80110e0:	78fb      	ldrb	r3, [r7, #3]
 80110e2:	f003 0303 	and.w	r3, r3, #3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d106      	bne.n	80110f8 <tcp_enqueue_flags+0x2c>
 80110ea:	4b67      	ldr	r3, [pc, #412]	@ (8011288 <tcp_enqueue_flags+0x1bc>)
 80110ec:	f240 4211 	movw	r2, #1041	@ 0x411
 80110f0:	4966      	ldr	r1, [pc, #408]	@ (801128c <tcp_enqueue_flags+0x1c0>)
 80110f2:	4867      	ldr	r0, [pc, #412]	@ (8011290 <tcp_enqueue_flags+0x1c4>)
 80110f4:	f004 ff2e 	bl	8015f54 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d106      	bne.n	801110c <tcp_enqueue_flags+0x40>
 80110fe:	4b62      	ldr	r3, [pc, #392]	@ (8011288 <tcp_enqueue_flags+0x1bc>)
 8011100:	f240 4213 	movw	r2, #1043	@ 0x413
 8011104:	4963      	ldr	r1, [pc, #396]	@ (8011294 <tcp_enqueue_flags+0x1c8>)
 8011106:	4862      	ldr	r0, [pc, #392]	@ (8011290 <tcp_enqueue_flags+0x1c4>)
 8011108:	f004 ff24 	bl	8015f54 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801110c:	78fb      	ldrb	r3, [r7, #3]
 801110e:	f003 0302 	and.w	r3, r3, #2
 8011112:	2b00      	cmp	r3, #0
 8011114:	d001      	beq.n	801111a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011116:	2301      	movs	r3, #1
 8011118:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801111a:	7ffb      	ldrb	r3, [r7, #31]
 801111c:	009b      	lsls	r3, r3, #2
 801111e:	b2db      	uxtb	r3, r3
 8011120:	f003 0304 	and.w	r3, r3, #4
 8011124:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011126:	7dfb      	ldrb	r3, [r7, #23]
 8011128:	b29b      	uxth	r3, r3
 801112a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801112e:	4619      	mov	r1, r3
 8011130:	2036      	movs	r0, #54	@ 0x36
 8011132:	f7fb f965 	bl	800c400 <pbuf_alloc>
 8011136:	6138      	str	r0, [r7, #16]
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d109      	bne.n	8011152 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	8b5b      	ldrh	r3, [r3, #26]
 8011142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011146:	b29a      	uxth	r2, r3
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801114c:	f04f 33ff 	mov.w	r3, #4294967295
 8011150:	e095      	b.n	801127e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	895a      	ldrh	r2, [r3, #10]
 8011156:	7dfb      	ldrb	r3, [r7, #23]
 8011158:	b29b      	uxth	r3, r3
 801115a:	429a      	cmp	r2, r3
 801115c:	d206      	bcs.n	801116c <tcp_enqueue_flags+0xa0>
 801115e:	4b4a      	ldr	r3, [pc, #296]	@ (8011288 <tcp_enqueue_flags+0x1bc>)
 8011160:	f240 4239 	movw	r2, #1081	@ 0x439
 8011164:	494c      	ldr	r1, [pc, #304]	@ (8011298 <tcp_enqueue_flags+0x1cc>)
 8011166:	484a      	ldr	r0, [pc, #296]	@ (8011290 <tcp_enqueue_flags+0x1c4>)
 8011168:	f004 fef4 	bl	8015f54 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011170:	78fa      	ldrb	r2, [r7, #3]
 8011172:	7ffb      	ldrb	r3, [r7, #31]
 8011174:	9300      	str	r3, [sp, #0]
 8011176:	460b      	mov	r3, r1
 8011178:	6939      	ldr	r1, [r7, #16]
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7ff fd72 	bl	8010c64 <tcp_create_segment>
 8011180:	60f8      	str	r0, [r7, #12]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d109      	bne.n	801119c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	8b5b      	ldrh	r3, [r3, #26]
 801118c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011190:	b29a      	uxth	r2, r3
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011196:	f04f 33ff 	mov.w	r3, #4294967295
 801119a:	e070      	b.n	801127e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	f003 0303 	and.w	r3, r3, #3
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d006      	beq.n	80111b6 <tcp_enqueue_flags+0xea>
 80111a8:	4b37      	ldr	r3, [pc, #220]	@ (8011288 <tcp_enqueue_flags+0x1bc>)
 80111aa:	f240 4242 	movw	r2, #1090	@ 0x442
 80111ae:	493b      	ldr	r1, [pc, #236]	@ (801129c <tcp_enqueue_flags+0x1d0>)
 80111b0:	4837      	ldr	r0, [pc, #220]	@ (8011290 <tcp_enqueue_flags+0x1c4>)
 80111b2:	f004 fecf 	bl	8015f54 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	891b      	ldrh	r3, [r3, #8]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d006      	beq.n	80111cc <tcp_enqueue_flags+0x100>
 80111be:	4b32      	ldr	r3, [pc, #200]	@ (8011288 <tcp_enqueue_flags+0x1bc>)
 80111c0:	f240 4243 	movw	r2, #1091	@ 0x443
 80111c4:	4936      	ldr	r1, [pc, #216]	@ (80112a0 <tcp_enqueue_flags+0x1d4>)
 80111c6:	4832      	ldr	r0, [pc, #200]	@ (8011290 <tcp_enqueue_flags+0x1c4>)
 80111c8:	f004 fec4 	bl	8015f54 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d103      	bne.n	80111dc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80111da:	e00d      	b.n	80111f8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111e0:	61bb      	str	r3, [r7, #24]
 80111e2:	e002      	b.n	80111ea <tcp_enqueue_flags+0x11e>
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	61bb      	str	r3, [r7, #24]
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d1f8      	bne.n	80111e4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	68fa      	ldr	r2, [r7, #12]
 80111f6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011200:	78fb      	ldrb	r3, [r7, #3]
 8011202:	f003 0302 	and.w	r3, r3, #2
 8011206:	2b00      	cmp	r3, #0
 8011208:	d104      	bne.n	8011214 <tcp_enqueue_flags+0x148>
 801120a:	78fb      	ldrb	r3, [r7, #3]
 801120c:	f003 0301 	and.w	r3, r3, #1
 8011210:	2b00      	cmp	r3, #0
 8011212:	d004      	beq.n	801121e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011218:	1c5a      	adds	r2, r3, #1
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801121e:	78fb      	ldrb	r3, [r7, #3]
 8011220:	f003 0301 	and.w	r3, r3, #1
 8011224:	2b00      	cmp	r3, #0
 8011226:	d006      	beq.n	8011236 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	8b5b      	ldrh	r3, [r3, #26]
 801122c:	f043 0320 	orr.w	r3, r3, #32
 8011230:	b29a      	uxth	r2, r3
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	4618      	mov	r0, r3
 801123c:	f7fb fc4c 	bl	800cad8 <pbuf_clen>
 8011240:	4603      	mov	r3, r0
 8011242:	461a      	mov	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801124a:	4413      	add	r3, r2
 801124c:	b29a      	uxth	r2, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00e      	beq.n	801127c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011262:	2b00      	cmp	r3, #0
 8011264:	d10a      	bne.n	801127c <tcp_enqueue_flags+0x1b0>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801126a:	2b00      	cmp	r3, #0
 801126c:	d106      	bne.n	801127c <tcp_enqueue_flags+0x1b0>
 801126e:	4b06      	ldr	r3, [pc, #24]	@ (8011288 <tcp_enqueue_flags+0x1bc>)
 8011270:	f240 4265 	movw	r2, #1125	@ 0x465
 8011274:	490b      	ldr	r1, [pc, #44]	@ (80112a4 <tcp_enqueue_flags+0x1d8>)
 8011276:	4806      	ldr	r0, [pc, #24]	@ (8011290 <tcp_enqueue_flags+0x1c4>)
 8011278:	f004 fe6c 	bl	8015f54 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801127c:	2300      	movs	r3, #0
}
 801127e:	4618      	mov	r0, r3
 8011280:	3720      	adds	r7, #32
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	0801ae28 	.word	0x0801ae28
 801128c:	0801b24c 	.word	0x0801b24c
 8011290:	0801ae7c 	.word	0x0801ae7c
 8011294:	0801b2a4 	.word	0x0801b2a4
 8011298:	0801b2c4 	.word	0x0801b2c4
 801129c:	0801b300 	.word	0x0801b300
 80112a0:	0801b318 	.word	0x0801b318
 80112a4:	0801b344 	.word	0x0801b344

080112a8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80112a8:	b5b0      	push	{r4, r5, r7, lr}
 80112aa:	b08a      	sub	sp, #40	@ 0x28
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d106      	bne.n	80112c4 <tcp_output+0x1c>
 80112b6:	4b8a      	ldr	r3, [pc, #552]	@ (80114e0 <tcp_output+0x238>)
 80112b8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80112bc:	4989      	ldr	r1, [pc, #548]	@ (80114e4 <tcp_output+0x23c>)
 80112be:	488a      	ldr	r0, [pc, #552]	@ (80114e8 <tcp_output+0x240>)
 80112c0:	f004 fe48 	bl	8015f54 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	7d1b      	ldrb	r3, [r3, #20]
 80112c8:	2b01      	cmp	r3, #1
 80112ca:	d106      	bne.n	80112da <tcp_output+0x32>
 80112cc:	4b84      	ldr	r3, [pc, #528]	@ (80114e0 <tcp_output+0x238>)
 80112ce:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80112d2:	4986      	ldr	r1, [pc, #536]	@ (80114ec <tcp_output+0x244>)
 80112d4:	4884      	ldr	r0, [pc, #528]	@ (80114e8 <tcp_output+0x240>)
 80112d6:	f004 fe3d 	bl	8015f54 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80112da:	4b85      	ldr	r3, [pc, #532]	@ (80114f0 <tcp_output+0x248>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d101      	bne.n	80112e8 <tcp_output+0x40>
    return ERR_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	e1ce      	b.n	8011686 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80112f4:	4293      	cmp	r3, r2
 80112f6:	bf28      	it	cs
 80112f8:	4613      	movcs	r3, r2
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011302:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011306:	2b00      	cmp	r3, #0
 8011308:	d10b      	bne.n	8011322 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	8b5b      	ldrh	r3, [r3, #26]
 801130e:	f003 0302 	and.w	r3, r3, #2
 8011312:	2b00      	cmp	r3, #0
 8011314:	f000 81aa 	beq.w	801166c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f000 fdcb 	bl	8011eb4 <tcp_send_empty_ack>
 801131e:	4603      	mov	r3, r0
 8011320:	e1b1      	b.n	8011686 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011322:	6879      	ldr	r1, [r7, #4]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	3304      	adds	r3, #4
 8011328:	461a      	mov	r2, r3
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f7ff fc7e 	bl	8010c2c <tcp_route>
 8011330:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d102      	bne.n	801133e <tcp_output+0x96>
    return ERR_RTE;
 8011338:	f06f 0303 	mvn.w	r3, #3
 801133c:	e1a3      	b.n	8011686 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d003      	beq.n	801134c <tcp_output+0xa4>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d111      	bne.n	8011370 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d002      	beq.n	8011358 <tcp_output+0xb0>
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	3304      	adds	r3, #4
 8011356:	e000      	b.n	801135a <tcp_output+0xb2>
 8011358:	2300      	movs	r3, #0
 801135a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d102      	bne.n	8011368 <tcp_output+0xc0>
      return ERR_RTE;
 8011362:	f06f 0303 	mvn.w	r3, #3
 8011366:	e18e      	b.n	8011686 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	681a      	ldr	r2, [r3, #0]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	4618      	mov	r0, r3
 8011378:	f7f9 ff26 	bl	800b1c8 <lwip_htonl>
 801137c:	4602      	mov	r2, r0
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011382:	1ad3      	subs	r3, r2, r3
 8011384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011386:	8912      	ldrh	r2, [r2, #8]
 8011388:	4413      	add	r3, r2
 801138a:	69ba      	ldr	r2, [r7, #24]
 801138c:	429a      	cmp	r2, r3
 801138e:	d227      	bcs.n	80113e0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011396:	461a      	mov	r2, r3
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	4293      	cmp	r3, r2
 801139c:	d114      	bne.n	80113c8 <tcp_output+0x120>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d110      	bne.n	80113c8 <tcp_output+0x120>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d10b      	bne.n	80113c8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2201      	movs	r2, #1
 80113bc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2200      	movs	r2, #0
 80113c4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	8b5b      	ldrh	r3, [r3, #26]
 80113cc:	f003 0302 	and.w	r3, r3, #2
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	f000 814d 	beq.w	8011670 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f000 fd6c 	bl	8011eb4 <tcp_send_empty_ack>
 80113dc:	4603      	mov	r3, r0
 80113de:	e152      	b.n	8011686 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113ec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80113ee:	6a3b      	ldr	r3, [r7, #32]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f000 811c 	beq.w	801162e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80113f6:	e002      	b.n	80113fe <tcp_output+0x156>
 80113f8:	6a3b      	ldr	r3, [r7, #32]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	623b      	str	r3, [r7, #32]
 80113fe:	6a3b      	ldr	r3, [r7, #32]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d1f8      	bne.n	80113f8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011406:	e112      	b.n	801162e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	899b      	ldrh	r3, [r3, #12]
 801140e:	b29b      	uxth	r3, r3
 8011410:	4618      	mov	r0, r3
 8011412:	f7f9 fec3 	bl	800b19c <lwip_htons>
 8011416:	4603      	mov	r3, r0
 8011418:	b2db      	uxtb	r3, r3
 801141a:	f003 0304 	and.w	r3, r3, #4
 801141e:	2b00      	cmp	r3, #0
 8011420:	d006      	beq.n	8011430 <tcp_output+0x188>
 8011422:	4b2f      	ldr	r3, [pc, #188]	@ (80114e0 <tcp_output+0x238>)
 8011424:	f240 5236 	movw	r2, #1334	@ 0x536
 8011428:	4932      	ldr	r1, [pc, #200]	@ (80114f4 <tcp_output+0x24c>)
 801142a:	482f      	ldr	r0, [pc, #188]	@ (80114e8 <tcp_output+0x240>)
 801142c:	f004 fd92 	bl	8015f54 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011434:	2b00      	cmp	r3, #0
 8011436:	d01f      	beq.n	8011478 <tcp_output+0x1d0>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	8b5b      	ldrh	r3, [r3, #26]
 801143c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011440:	2b00      	cmp	r3, #0
 8011442:	d119      	bne.n	8011478 <tcp_output+0x1d0>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00b      	beq.n	8011464 <tcp_output+0x1bc>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d110      	bne.n	8011478 <tcp_output+0x1d0>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801145a:	891a      	ldrh	r2, [r3, #8]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011460:	429a      	cmp	r2, r3
 8011462:	d209      	bcs.n	8011478 <tcp_output+0x1d0>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801146a:	2b00      	cmp	r3, #0
 801146c:	d004      	beq.n	8011478 <tcp_output+0x1d0>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011474:	2b08      	cmp	r3, #8
 8011476:	d901      	bls.n	801147c <tcp_output+0x1d4>
 8011478:	2301      	movs	r3, #1
 801147a:	e000      	b.n	801147e <tcp_output+0x1d6>
 801147c:	2300      	movs	r3, #0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d106      	bne.n	8011490 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	8b5b      	ldrh	r3, [r3, #26]
 8011486:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801148a:	2b00      	cmp	r3, #0
 801148c:	f000 80e4 	beq.w	8011658 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	7d1b      	ldrb	r3, [r3, #20]
 8011494:	2b02      	cmp	r3, #2
 8011496:	d00d      	beq.n	80114b4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	899b      	ldrh	r3, [r3, #12]
 801149e:	b29c      	uxth	r4, r3
 80114a0:	2010      	movs	r0, #16
 80114a2:	f7f9 fe7b 	bl	800b19c <lwip_htons>
 80114a6:	4603      	mov	r3, r0
 80114a8:	461a      	mov	r2, r3
 80114aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	4322      	orrs	r2, r4
 80114b0:	b292      	uxth	r2, r2
 80114b2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80114b4:	697a      	ldr	r2, [r7, #20]
 80114b6:	6879      	ldr	r1, [r7, #4]
 80114b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80114ba:	f000 f909 	bl	80116d0 <tcp_output_segment>
 80114be:	4603      	mov	r3, r0
 80114c0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80114c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d016      	beq.n	80114f8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	8b5b      	ldrh	r3, [r3, #26]
 80114ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	835a      	strh	r2, [r3, #26]
      return err;
 80114d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114dc:	e0d3      	b.n	8011686 <tcp_output+0x3de>
 80114de:	bf00      	nop
 80114e0:	0801ae28 	.word	0x0801ae28
 80114e4:	0801b36c 	.word	0x0801b36c
 80114e8:	0801ae7c 	.word	0x0801ae7c
 80114ec:	0801b384 	.word	0x0801b384
 80114f0:	240083d8 	.word	0x240083d8
 80114f4:	0801b3ac 	.word	0x0801b3ac
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80114f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	7d1b      	ldrb	r3, [r3, #20]
 8011504:	2b02      	cmp	r3, #2
 8011506:	d006      	beq.n	8011516 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	8b5b      	ldrh	r3, [r3, #26]
 801150c:	f023 0303 	bic.w	r3, r3, #3
 8011510:	b29a      	uxth	r2, r3
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	4618      	mov	r0, r3
 801151e:	f7f9 fe53 	bl	800b1c8 <lwip_htonl>
 8011522:	4604      	mov	r4, r0
 8011524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011526:	891b      	ldrh	r3, [r3, #8]
 8011528:	461d      	mov	r5, r3
 801152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	899b      	ldrh	r3, [r3, #12]
 8011530:	b29b      	uxth	r3, r3
 8011532:	4618      	mov	r0, r3
 8011534:	f7f9 fe32 	bl	800b19c <lwip_htons>
 8011538:	4603      	mov	r3, r0
 801153a:	b2db      	uxtb	r3, r3
 801153c:	f003 0303 	and.w	r3, r3, #3
 8011540:	2b00      	cmp	r3, #0
 8011542:	d001      	beq.n	8011548 <tcp_output+0x2a0>
 8011544:	2301      	movs	r3, #1
 8011546:	e000      	b.n	801154a <tcp_output+0x2a2>
 8011548:	2300      	movs	r3, #0
 801154a:	442b      	add	r3, r5
 801154c:	4423      	add	r3, r4
 801154e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	1ad3      	subs	r3, r2, r3
 8011558:	2b00      	cmp	r3, #0
 801155a:	da02      	bge.n	8011562 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	68ba      	ldr	r2, [r7, #8]
 8011560:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011564:	891b      	ldrh	r3, [r3, #8]
 8011566:	461c      	mov	r4, r3
 8011568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	899b      	ldrh	r3, [r3, #12]
 801156e:	b29b      	uxth	r3, r3
 8011570:	4618      	mov	r0, r3
 8011572:	f7f9 fe13 	bl	800b19c <lwip_htons>
 8011576:	4603      	mov	r3, r0
 8011578:	b2db      	uxtb	r3, r3
 801157a:	f003 0303 	and.w	r3, r3, #3
 801157e:	2b00      	cmp	r3, #0
 8011580:	d001      	beq.n	8011586 <tcp_output+0x2de>
 8011582:	2301      	movs	r3, #1
 8011584:	e000      	b.n	8011588 <tcp_output+0x2e0>
 8011586:	2300      	movs	r3, #0
 8011588:	4423      	add	r3, r4
 801158a:	2b00      	cmp	r3, #0
 801158c:	d049      	beq.n	8011622 <tcp_output+0x37a>
      seg->next = NULL;
 801158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011590:	2200      	movs	r2, #0
 8011592:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011598:	2b00      	cmp	r3, #0
 801159a:	d105      	bne.n	80115a8 <tcp_output+0x300>
        pcb->unacked = seg;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115a0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80115a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a4:	623b      	str	r3, [r7, #32]
 80115a6:	e03f      	b.n	8011628 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80115a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115aa:	68db      	ldr	r3, [r3, #12]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7f9 fe0a 	bl	800b1c8 <lwip_htonl>
 80115b4:	4604      	mov	r4, r0
 80115b6:	6a3b      	ldr	r3, [r7, #32]
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	4618      	mov	r0, r3
 80115be:	f7f9 fe03 	bl	800b1c8 <lwip_htonl>
 80115c2:	4603      	mov	r3, r0
 80115c4:	1ae3      	subs	r3, r4, r3
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	da24      	bge.n	8011614 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	3370      	adds	r3, #112	@ 0x70
 80115ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80115d0:	e002      	b.n	80115d8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80115d2:	69fb      	ldr	r3, [r7, #28]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d011      	beq.n	8011604 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7f9 fded 	bl	800b1c8 <lwip_htonl>
 80115ee:	4604      	mov	r4, r0
 80115f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7f9 fde6 	bl	800b1c8 <lwip_htonl>
 80115fc:	4603      	mov	r3, r0
 80115fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011600:	2b00      	cmp	r3, #0
 8011602:	dbe6      	blt.n	80115d2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	681a      	ldr	r2, [r3, #0]
 8011608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801160a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801160c:	69fb      	ldr	r3, [r7, #28]
 801160e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011610:	601a      	str	r2, [r3, #0]
 8011612:	e009      	b.n	8011628 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011618:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801161a:	6a3b      	ldr	r3, [r7, #32]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	623b      	str	r3, [r7, #32]
 8011620:	e002      	b.n	8011628 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011622:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011624:	f7fc fc45 	bl	800deb2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801162c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011630:	2b00      	cmp	r3, #0
 8011632:	d012      	beq.n	801165a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011636:	68db      	ldr	r3, [r3, #12]
 8011638:	685b      	ldr	r3, [r3, #4]
 801163a:	4618      	mov	r0, r3
 801163c:	f7f9 fdc4 	bl	800b1c8 <lwip_htonl>
 8011640:	4602      	mov	r2, r0
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011646:	1ad3      	subs	r3, r2, r3
 8011648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801164a:	8912      	ldrh	r2, [r2, #8]
 801164c:	4413      	add	r3, r2
  while (seg != NULL &&
 801164e:	69ba      	ldr	r2, [r7, #24]
 8011650:	429a      	cmp	r2, r3
 8011652:	f4bf aed9 	bcs.w	8011408 <tcp_output+0x160>
 8011656:	e000      	b.n	801165a <tcp_output+0x3b2>
      break;
 8011658:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801165e:	2b00      	cmp	r3, #0
 8011660:	d108      	bne.n	8011674 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2200      	movs	r2, #0
 8011666:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801166a:	e004      	b.n	8011676 <tcp_output+0x3ce>
    goto output_done;
 801166c:	bf00      	nop
 801166e:	e002      	b.n	8011676 <tcp_output+0x3ce>
    goto output_done;
 8011670:	bf00      	nop
 8011672:	e000      	b.n	8011676 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011674:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	8b5b      	ldrh	r3, [r3, #26]
 801167a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801167e:	b29a      	uxth	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3728      	adds	r7, #40	@ 0x28
 801168a:	46bd      	mov	sp, r7
 801168c:	bdb0      	pop	{r4, r5, r7, pc}
 801168e:	bf00      	nop

08011690 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d106      	bne.n	80116ac <tcp_output_segment_busy+0x1c>
 801169e:	4b09      	ldr	r3, [pc, #36]	@ (80116c4 <tcp_output_segment_busy+0x34>)
 80116a0:	f240 529a 	movw	r2, #1434	@ 0x59a
 80116a4:	4908      	ldr	r1, [pc, #32]	@ (80116c8 <tcp_output_segment_busy+0x38>)
 80116a6:	4809      	ldr	r0, [pc, #36]	@ (80116cc <tcp_output_segment_busy+0x3c>)
 80116a8:	f004 fc54 	bl	8015f54 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	7b9b      	ldrb	r3, [r3, #14]
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d001      	beq.n	80116ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80116b6:	2301      	movs	r3, #1
 80116b8:	e000      	b.n	80116bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3708      	adds	r7, #8
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	0801ae28 	.word	0x0801ae28
 80116c8:	0801b3c4 	.word	0x0801b3c4
 80116cc:	0801ae7c 	.word	0x0801ae7c

080116d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80116d0:	b5b0      	push	{r4, r5, r7, lr}
 80116d2:	b08c      	sub	sp, #48	@ 0x30
 80116d4:	af04      	add	r7, sp, #16
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d106      	bne.n	80116f0 <tcp_output_segment+0x20>
 80116e2:	4b64      	ldr	r3, [pc, #400]	@ (8011874 <tcp_output_segment+0x1a4>)
 80116e4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80116e8:	4963      	ldr	r1, [pc, #396]	@ (8011878 <tcp_output_segment+0x1a8>)
 80116ea:	4864      	ldr	r0, [pc, #400]	@ (801187c <tcp_output_segment+0x1ac>)
 80116ec:	f004 fc32 	bl	8015f54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d106      	bne.n	8011704 <tcp_output_segment+0x34>
 80116f6:	4b5f      	ldr	r3, [pc, #380]	@ (8011874 <tcp_output_segment+0x1a4>)
 80116f8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80116fc:	4960      	ldr	r1, [pc, #384]	@ (8011880 <tcp_output_segment+0x1b0>)
 80116fe:	485f      	ldr	r0, [pc, #380]	@ (801187c <tcp_output_segment+0x1ac>)
 8011700:	f004 fc28 	bl	8015f54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d106      	bne.n	8011718 <tcp_output_segment+0x48>
 801170a:	4b5a      	ldr	r3, [pc, #360]	@ (8011874 <tcp_output_segment+0x1a4>)
 801170c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8011710:	495c      	ldr	r1, [pc, #368]	@ (8011884 <tcp_output_segment+0x1b4>)
 8011712:	485a      	ldr	r0, [pc, #360]	@ (801187c <tcp_output_segment+0x1ac>)
 8011714:	f004 fc1e 	bl	8015f54 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011718:	68f8      	ldr	r0, [r7, #12]
 801171a:	f7ff ffb9 	bl	8011690 <tcp_output_segment_busy>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	d001      	beq.n	8011728 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011724:	2300      	movs	r3, #0
 8011726:	e0a1      	b.n	801186c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	68dc      	ldr	r4, [r3, #12]
 8011730:	4610      	mov	r0, r2
 8011732:	f7f9 fd49 	bl	800b1c8 <lwip_htonl>
 8011736:	4603      	mov	r3, r0
 8011738:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	68dc      	ldr	r4, [r3, #12]
 8011742:	4610      	mov	r0, r2
 8011744:	f7f9 fd2a 	bl	800b19c <lwip_htons>
 8011748:	4603      	mov	r3, r0
 801174a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011750:	68ba      	ldr	r2, [r7, #8]
 8011752:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011754:	441a      	add	r2, r3
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	3314      	adds	r3, #20
 8011760:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	7a9b      	ldrb	r3, [r3, #10]
 8011766:	f003 0301 	and.w	r3, r3, #1
 801176a:	2b00      	cmp	r3, #0
 801176c:	d015      	beq.n	801179a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	3304      	adds	r3, #4
 8011772:	461a      	mov	r2, r3
 8011774:	6879      	ldr	r1, [r7, #4]
 8011776:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801177a:	f7fc fe91 	bl	800e4a0 <tcp_eff_send_mss_netif>
 801177e:	4603      	mov	r3, r0
 8011780:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011782:	8b7b      	ldrh	r3, [r7, #26]
 8011784:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011788:	4618      	mov	r0, r3
 801178a:	f7f9 fd1d 	bl	800b1c8 <lwip_htonl>
 801178e:	4602      	mov	r2, r0
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	3304      	adds	r3, #4
 8011798:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	da02      	bge.n	80117aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2200      	movs	r2, #0
 80117a8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d10c      	bne.n	80117cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80117b2:	4b35      	ldr	r3, [pc, #212]	@ (8011888 <tcp_output_segment+0x1b8>)
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7f9 fd01 	bl	800b1c8 <lwip_htonl>
 80117c6:	4602      	mov	r2, r0
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	68da      	ldr	r2, [r3, #12]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	1ad3      	subs	r3, r2, r3
 80117d8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	8959      	ldrh	r1, [r3, #10]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	8b3a      	ldrh	r2, [r7, #24]
 80117e6:	1a8a      	subs	r2, r1, r2
 80117e8:	b292      	uxth	r2, r2
 80117ea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	8919      	ldrh	r1, [r3, #8]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	8b3a      	ldrh	r2, [r7, #24]
 80117f8:	1a8a      	subs	r2, r1, r2
 80117fa:	b292      	uxth	r2, r2
 80117fc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	68d2      	ldr	r2, [r2, #12]
 8011806:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	68db      	ldr	r3, [r3, #12]
 801180c:	2200      	movs	r2, #0
 801180e:	741a      	strb	r2, [r3, #16]
 8011810:	2200      	movs	r2, #0
 8011812:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	68da      	ldr	r2, [r3, #12]
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	7a9b      	ldrb	r3, [r3, #10]
 801181c:	f003 0301 	and.w	r3, r3, #1
 8011820:	2b00      	cmp	r3, #0
 8011822:	d001      	beq.n	8011828 <tcp_output_segment+0x158>
 8011824:	2318      	movs	r3, #24
 8011826:	e000      	b.n	801182a <tcp_output_segment+0x15a>
 8011828:	2314      	movs	r3, #20
 801182a:	4413      	add	r3, r2
 801182c:	69fa      	ldr	r2, [r7, #28]
 801182e:	429a      	cmp	r2, r3
 8011830:	d006      	beq.n	8011840 <tcp_output_segment+0x170>
 8011832:	4b10      	ldr	r3, [pc, #64]	@ (8011874 <tcp_output_segment+0x1a4>)
 8011834:	f240 621c 	movw	r2, #1564	@ 0x61c
 8011838:	4914      	ldr	r1, [pc, #80]	@ (801188c <tcp_output_segment+0x1bc>)
 801183a:	4810      	ldr	r0, [pc, #64]	@ (801187c <tcp_output_segment+0x1ac>)
 801183c:	f004 fb8a 	bl	8015f54 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	6858      	ldr	r0, [r3, #4]
 8011844:	68b9      	ldr	r1, [r7, #8]
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	1d1c      	adds	r4, r3, #4
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	7add      	ldrb	r5, [r3, #11]
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	7a9b      	ldrb	r3, [r3, #10]
 8011852:	687a      	ldr	r2, [r7, #4]
 8011854:	9202      	str	r2, [sp, #8]
 8011856:	2206      	movs	r2, #6
 8011858:	9201      	str	r2, [sp, #4]
 801185a:	9300      	str	r3, [sp, #0]
 801185c:	462b      	mov	r3, r5
 801185e:	4622      	mov	r2, r4
 8011860:	f002 fb94 	bl	8013f8c <ip4_output_if>
 8011864:	4603      	mov	r3, r0
 8011866:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011868:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801186c:	4618      	mov	r0, r3
 801186e:	3720      	adds	r7, #32
 8011870:	46bd      	mov	sp, r7
 8011872:	bdb0      	pop	{r4, r5, r7, pc}
 8011874:	0801ae28 	.word	0x0801ae28
 8011878:	0801b3ec 	.word	0x0801b3ec
 801187c:	0801ae7c 	.word	0x0801ae7c
 8011880:	0801b40c 	.word	0x0801b40c
 8011884:	0801b42c 	.word	0x0801b42c
 8011888:	2400838c 	.word	0x2400838c
 801188c:	0801b450 	.word	0x0801b450

08011890 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011890:	b5b0      	push	{r4, r5, r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d106      	bne.n	80118ac <tcp_rexmit_rto_prepare+0x1c>
 801189e:	4b31      	ldr	r3, [pc, #196]	@ (8011964 <tcp_rexmit_rto_prepare+0xd4>)
 80118a0:	f240 6263 	movw	r2, #1635	@ 0x663
 80118a4:	4930      	ldr	r1, [pc, #192]	@ (8011968 <tcp_rexmit_rto_prepare+0xd8>)
 80118a6:	4831      	ldr	r0, [pc, #196]	@ (801196c <tcp_rexmit_rto_prepare+0xdc>)
 80118a8:	f004 fb54 	bl	8015f54 <iprintf>

  if (pcb->unacked == NULL) {
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d102      	bne.n	80118ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80118b4:	f06f 0305 	mvn.w	r3, #5
 80118b8:	e050      	b.n	801195c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118be:	60fb      	str	r3, [r7, #12]
 80118c0:	e00b      	b.n	80118da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80118c2:	68f8      	ldr	r0, [r7, #12]
 80118c4:	f7ff fee4 	bl	8011690 <tcp_output_segment_busy>
 80118c8:	4603      	mov	r3, r0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d002      	beq.n	80118d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80118ce:	f06f 0305 	mvn.w	r3, #5
 80118d2:	e043      	b.n	801195c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	60fb      	str	r3, [r7, #12]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d1ef      	bne.n	80118c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80118e2:	68f8      	ldr	r0, [r7, #12]
 80118e4:	f7ff fed4 	bl	8011690 <tcp_output_segment_busy>
 80118e8:	4603      	mov	r3, r0
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d002      	beq.n	80118f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80118ee:	f06f 0305 	mvn.w	r3, #5
 80118f2:	e033      	b.n	801195c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2200      	movs	r2, #0
 8011908:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	8b5b      	ldrh	r3, [r3, #26]
 801190e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8011912:	b29a      	uxth	r2, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	4618      	mov	r0, r3
 8011920:	f7f9 fc52 	bl	800b1c8 <lwip_htonl>
 8011924:	4604      	mov	r4, r0
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	891b      	ldrh	r3, [r3, #8]
 801192a:	461d      	mov	r5, r3
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	68db      	ldr	r3, [r3, #12]
 8011930:	899b      	ldrh	r3, [r3, #12]
 8011932:	b29b      	uxth	r3, r3
 8011934:	4618      	mov	r0, r3
 8011936:	f7f9 fc31 	bl	800b19c <lwip_htons>
 801193a:	4603      	mov	r3, r0
 801193c:	b2db      	uxtb	r3, r3
 801193e:	f003 0303 	and.w	r3, r3, #3
 8011942:	2b00      	cmp	r3, #0
 8011944:	d001      	beq.n	801194a <tcp_rexmit_rto_prepare+0xba>
 8011946:	2301      	movs	r3, #1
 8011948:	e000      	b.n	801194c <tcp_rexmit_rto_prepare+0xbc>
 801194a:	2300      	movs	r3, #0
 801194c:	442b      	add	r3, r5
 801194e:	18e2      	adds	r2, r4, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801195a:	2300      	movs	r3, #0
}
 801195c:	4618      	mov	r0, r3
 801195e:	3710      	adds	r7, #16
 8011960:	46bd      	mov	sp, r7
 8011962:	bdb0      	pop	{r4, r5, r7, pc}
 8011964:	0801ae28 	.word	0x0801ae28
 8011968:	0801b464 	.word	0x0801b464
 801196c:	0801ae7c 	.word	0x0801ae7c

08011970 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d106      	bne.n	801198c <tcp_rexmit_rto_commit+0x1c>
 801197e:	4b0d      	ldr	r3, [pc, #52]	@ (80119b4 <tcp_rexmit_rto_commit+0x44>)
 8011980:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011984:	490c      	ldr	r1, [pc, #48]	@ (80119b8 <tcp_rexmit_rto_commit+0x48>)
 8011986:	480d      	ldr	r0, [pc, #52]	@ (80119bc <tcp_rexmit_rto_commit+0x4c>)
 8011988:	f004 fae4 	bl	8015f54 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011992:	2bff      	cmp	r3, #255	@ 0xff
 8011994:	d007      	beq.n	80119a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801199c:	3301      	adds	r3, #1
 801199e:	b2da      	uxtb	r2, r3
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7ff fc7e 	bl	80112a8 <tcp_output>
}
 80119ac:	bf00      	nop
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	0801ae28 	.word	0x0801ae28
 80119b8:	0801b488 	.word	0x0801b488
 80119bc:	0801ae7c 	.word	0x0801ae7c

080119c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d106      	bne.n	80119dc <tcp_rexmit_rto+0x1c>
 80119ce:	4b0a      	ldr	r3, [pc, #40]	@ (80119f8 <tcp_rexmit_rto+0x38>)
 80119d0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80119d4:	4909      	ldr	r1, [pc, #36]	@ (80119fc <tcp_rexmit_rto+0x3c>)
 80119d6:	480a      	ldr	r0, [pc, #40]	@ (8011a00 <tcp_rexmit_rto+0x40>)
 80119d8:	f004 fabc 	bl	8015f54 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7ff ff57 	bl	8011890 <tcp_rexmit_rto_prepare>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d102      	bne.n	80119ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f7ff ffc1 	bl	8011970 <tcp_rexmit_rto_commit>
  }
}
 80119ee:	bf00      	nop
 80119f0:	3708      	adds	r7, #8
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	0801ae28 	.word	0x0801ae28
 80119fc:	0801b4ac 	.word	0x0801b4ac
 8011a00:	0801ae7c 	.word	0x0801ae7c

08011a04 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011a04:	b590      	push	{r4, r7, lr}
 8011a06:	b085      	sub	sp, #20
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d106      	bne.n	8011a20 <tcp_rexmit+0x1c>
 8011a12:	4b2f      	ldr	r3, [pc, #188]	@ (8011ad0 <tcp_rexmit+0xcc>)
 8011a14:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8011a18:	492e      	ldr	r1, [pc, #184]	@ (8011ad4 <tcp_rexmit+0xd0>)
 8011a1a:	482f      	ldr	r0, [pc, #188]	@ (8011ad8 <tcp_rexmit+0xd4>)
 8011a1c:	f004 fa9a 	bl	8015f54 <iprintf>

  if (pcb->unacked == NULL) {
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d102      	bne.n	8011a2e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011a28:	f06f 0305 	mvn.w	r3, #5
 8011a2c:	e04c      	b.n	8011ac8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a32:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011a34:	68b8      	ldr	r0, [r7, #8]
 8011a36:	f7ff fe2b 	bl	8011690 <tcp_output_segment_busy>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d002      	beq.n	8011a46 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011a40:	f06f 0305 	mvn.w	r3, #5
 8011a44:	e040      	b.n	8011ac8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	336c      	adds	r3, #108	@ 0x6c
 8011a52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a54:	e002      	b.n	8011a5c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d011      	beq.n	8011a88 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	68db      	ldr	r3, [r3, #12]
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7f9 fbab 	bl	800b1c8 <lwip_htonl>
 8011a72:	4604      	mov	r4, r0
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	68db      	ldr	r3, [r3, #12]
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7f9 fba4 	bl	800b1c8 <lwip_htonl>
 8011a80:	4603      	mov	r3, r0
 8011a82:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	dbe6      	blt.n	8011a56 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	68ba      	ldr	r2, [r7, #8]
 8011a94:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d103      	bne.n	8011aa6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011aac:	2bff      	cmp	r3, #255	@ 0xff
 8011aae:	d007      	beq.n	8011ac0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	b2da      	uxtb	r2, r3
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011ac6:	2300      	movs	r3, #0
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3714      	adds	r7, #20
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd90      	pop	{r4, r7, pc}
 8011ad0:	0801ae28 	.word	0x0801ae28
 8011ad4:	0801b4c8 	.word	0x0801b4c8
 8011ad8:	0801ae7c 	.word	0x0801ae7c

08011adc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d106      	bne.n	8011af8 <tcp_rexmit_fast+0x1c>
 8011aea:	4b2a      	ldr	r3, [pc, #168]	@ (8011b94 <tcp_rexmit_fast+0xb8>)
 8011aec:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8011af0:	4929      	ldr	r1, [pc, #164]	@ (8011b98 <tcp_rexmit_fast+0xbc>)
 8011af2:	482a      	ldr	r0, [pc, #168]	@ (8011b9c <tcp_rexmit_fast+0xc0>)
 8011af4:	f004 fa2e 	bl	8015f54 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d045      	beq.n	8011b8c <tcp_rexmit_fast+0xb0>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	8b5b      	ldrh	r3, [r3, #26]
 8011b04:	f003 0304 	and.w	r3, r3, #4
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d13f      	bne.n	8011b8c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f7ff ff79 	bl	8011a04 <tcp_rexmit>
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d139      	bne.n	8011b8c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011b24:	4293      	cmp	r3, r2
 8011b26:	bf28      	it	cs
 8011b28:	4613      	movcs	r3, r2
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	da00      	bge.n	8011b32 <tcp_rexmit_fast+0x56>
 8011b30:	3301      	adds	r3, #1
 8011b32:	105b      	asrs	r3, r3, #1
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011b42:	461a      	mov	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b48:	005b      	lsls	r3, r3, #1
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d206      	bcs.n	8011b5c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b52:	005b      	lsls	r3, r3, #1
 8011b54:	b29a      	uxth	r2, r3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b66:	4619      	mov	r1, r3
 8011b68:	0049      	lsls	r1, r1, #1
 8011b6a:	440b      	add	r3, r1
 8011b6c:	b29b      	uxth	r3, r3
 8011b6e:	4413      	add	r3, r2
 8011b70:	b29a      	uxth	r2, r3
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	8b5b      	ldrh	r3, [r3, #26]
 8011b7c:	f043 0304 	orr.w	r3, r3, #4
 8011b80:	b29a      	uxth	r2, r3
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011b8c:	bf00      	nop
 8011b8e:	3708      	adds	r7, #8
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	0801ae28 	.word	0x0801ae28
 8011b98:	0801b4e0 	.word	0x0801b4e0
 8011b9c:	0801ae7c 	.word	0x0801ae7c

08011ba0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b086      	sub	sp, #24
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	607b      	str	r3, [r7, #4]
 8011baa:	460b      	mov	r3, r1
 8011bac:	817b      	strh	r3, [r7, #10]
 8011bae:	4613      	mov	r3, r2
 8011bb0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011bb2:	897a      	ldrh	r2, [r7, #10]
 8011bb4:	893b      	ldrh	r3, [r7, #8]
 8011bb6:	4413      	add	r3, r2
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	3314      	adds	r3, #20
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	2022      	movs	r0, #34	@ 0x22
 8011bc6:	f7fa fc1b 	bl	800c400 <pbuf_alloc>
 8011bca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d04d      	beq.n	8011c6e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011bd2:	897b      	ldrh	r3, [r7, #10]
 8011bd4:	3313      	adds	r3, #19
 8011bd6:	697a      	ldr	r2, [r7, #20]
 8011bd8:	8952      	ldrh	r2, [r2, #10]
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	db06      	blt.n	8011bec <tcp_output_alloc_header_common+0x4c>
 8011bde:	4b26      	ldr	r3, [pc, #152]	@ (8011c78 <tcp_output_alloc_header_common+0xd8>)
 8011be0:	f240 7223 	movw	r2, #1827	@ 0x723
 8011be4:	4925      	ldr	r1, [pc, #148]	@ (8011c7c <tcp_output_alloc_header_common+0xdc>)
 8011be6:	4826      	ldr	r0, [pc, #152]	@ (8011c80 <tcp_output_alloc_header_common+0xe0>)
 8011be8:	f004 f9b4 	bl	8015f54 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011bf2:	8c3b      	ldrh	r3, [r7, #32]
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7f9 fad1 	bl	800b19c <lwip_htons>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011c02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7f9 fac9 	bl	800b19c <lwip_htons>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	687a      	ldr	r2, [r7, #4]
 8011c16:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011c18:	68f8      	ldr	r0, [r7, #12]
 8011c1a:	f7f9 fad5 	bl	800b1c8 <lwip_htonl>
 8011c1e:	4602      	mov	r2, r0
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011c24:	897b      	ldrh	r3, [r7, #10]
 8011c26:	089b      	lsrs	r3, r3, #2
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	3305      	adds	r3, #5
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	031b      	lsls	r3, r3, #12
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7f9 faad 	bl	800b19c <lwip_htons>
 8011c42:	4603      	mov	r3, r0
 8011c44:	461a      	mov	r2, r3
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011c4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7f9 faa5 	bl	800b19c <lwip_htons>
 8011c52:	4603      	mov	r3, r0
 8011c54:	461a      	mov	r2, r3
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	741a      	strb	r2, [r3, #16]
 8011c60:	2200      	movs	r2, #0
 8011c62:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	2200      	movs	r2, #0
 8011c68:	749a      	strb	r2, [r3, #18]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011c6e:	697b      	ldr	r3, [r7, #20]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3718      	adds	r7, #24
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	0801ae28 	.word	0x0801ae28
 8011c7c:	0801b500 	.word	0x0801b500
 8011c80:	0801ae7c 	.word	0x0801ae7c

08011c84 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011c84:	b5b0      	push	{r4, r5, r7, lr}
 8011c86:	b08a      	sub	sp, #40	@ 0x28
 8011c88:	af04      	add	r7, sp, #16
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	607b      	str	r3, [r7, #4]
 8011c8e:	460b      	mov	r3, r1
 8011c90:	817b      	strh	r3, [r7, #10]
 8011c92:	4613      	mov	r3, r2
 8011c94:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d106      	bne.n	8011caa <tcp_output_alloc_header+0x26>
 8011c9c:	4b15      	ldr	r3, [pc, #84]	@ (8011cf4 <tcp_output_alloc_header+0x70>)
 8011c9e:	f240 7242 	movw	r2, #1858	@ 0x742
 8011ca2:	4915      	ldr	r1, [pc, #84]	@ (8011cf8 <tcp_output_alloc_header+0x74>)
 8011ca4:	4815      	ldr	r0, [pc, #84]	@ (8011cfc <tcp_output_alloc_header+0x78>)
 8011ca6:	f004 f955 	bl	8015f54 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	8adb      	ldrh	r3, [r3, #22]
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	8b12      	ldrh	r2, [r2, #24]
 8011cb6:	68f9      	ldr	r1, [r7, #12]
 8011cb8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8011cba:	893d      	ldrh	r5, [r7, #8]
 8011cbc:	897c      	ldrh	r4, [r7, #10]
 8011cbe:	9103      	str	r1, [sp, #12]
 8011cc0:	2110      	movs	r1, #16
 8011cc2:	9102      	str	r1, [sp, #8]
 8011cc4:	9201      	str	r2, [sp, #4]
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	462a      	mov	r2, r5
 8011ccc:	4621      	mov	r1, r4
 8011cce:	f7ff ff67 	bl	8011ba0 <tcp_output_alloc_header_common>
 8011cd2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d006      	beq.n	8011ce8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cde:	68fa      	ldr	r2, [r7, #12]
 8011ce0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011ce2:	441a      	add	r2, r3
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011ce8:	697b      	ldr	r3, [r7, #20]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3718      	adds	r7, #24
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	0801ae28 	.word	0x0801ae28
 8011cf8:	0801b530 	.word	0x0801b530
 8011cfc:	0801ae7c 	.word	0x0801ae7c

08011d00 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b088      	sub	sp, #32
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	60f8      	str	r0, [r7, #12]
 8011d08:	60b9      	str	r1, [r7, #8]
 8011d0a:	4611      	mov	r1, r2
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	460b      	mov	r3, r1
 8011d10:	71fb      	strb	r3, [r7, #7]
 8011d12:	4613      	mov	r3, r2
 8011d14:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011d16:	2300      	movs	r3, #0
 8011d18:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d106      	bne.n	8011d2e <tcp_output_fill_options+0x2e>
 8011d20:	4b12      	ldr	r3, [pc, #72]	@ (8011d6c <tcp_output_fill_options+0x6c>)
 8011d22:	f240 7256 	movw	r2, #1878	@ 0x756
 8011d26:	4912      	ldr	r1, [pc, #72]	@ (8011d70 <tcp_output_fill_options+0x70>)
 8011d28:	4812      	ldr	r0, [pc, #72]	@ (8011d74 <tcp_output_fill_options+0x74>)
 8011d2a:	f004 f913 	bl	8015f54 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	3314      	adds	r3, #20
 8011d38:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011d3a:	8bfb      	ldrh	r3, [r7, #30]
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	461a      	mov	r2, r3
 8011d40:	79fb      	ldrb	r3, [r7, #7]
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	f003 0304 	and.w	r3, r3, #4
 8011d48:	4413      	add	r3, r2
 8011d4a:	3314      	adds	r3, #20
 8011d4c:	69ba      	ldr	r2, [r7, #24]
 8011d4e:	4413      	add	r3, r2
 8011d50:	697a      	ldr	r2, [r7, #20]
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d006      	beq.n	8011d64 <tcp_output_fill_options+0x64>
 8011d56:	4b05      	ldr	r3, [pc, #20]	@ (8011d6c <tcp_output_fill_options+0x6c>)
 8011d58:	f240 7275 	movw	r2, #1909	@ 0x775
 8011d5c:	4906      	ldr	r1, [pc, #24]	@ (8011d78 <tcp_output_fill_options+0x78>)
 8011d5e:	4805      	ldr	r0, [pc, #20]	@ (8011d74 <tcp_output_fill_options+0x74>)
 8011d60:	f004 f8f8 	bl	8015f54 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011d64:	bf00      	nop
 8011d66:	3720      	adds	r7, #32
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	0801ae28 	.word	0x0801ae28
 8011d70:	0801b558 	.word	0x0801b558
 8011d74:	0801ae7c 	.word	0x0801ae7c
 8011d78:	0801b450 	.word	0x0801b450

08011d7c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b08a      	sub	sp, #40	@ 0x28
 8011d80:	af04      	add	r7, sp, #16
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	607a      	str	r2, [r7, #4]
 8011d88:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d106      	bne.n	8011d9e <tcp_output_control_segment+0x22>
 8011d90:	4b1c      	ldr	r3, [pc, #112]	@ (8011e04 <tcp_output_control_segment+0x88>)
 8011d92:	f240 7287 	movw	r2, #1927	@ 0x787
 8011d96:	491c      	ldr	r1, [pc, #112]	@ (8011e08 <tcp_output_control_segment+0x8c>)
 8011d98:	481c      	ldr	r0, [pc, #112]	@ (8011e0c <tcp_output_control_segment+0x90>)
 8011d9a:	f004 f8db 	bl	8015f54 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011d9e:	683a      	ldr	r2, [r7, #0]
 8011da0:	6879      	ldr	r1, [r7, #4]
 8011da2:	68f8      	ldr	r0, [r7, #12]
 8011da4:	f7fe ff42 	bl	8010c2c <tcp_route>
 8011da8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d102      	bne.n	8011db6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011db0:	23fc      	movs	r3, #252	@ 0xfc
 8011db2:	75fb      	strb	r3, [r7, #23]
 8011db4:	e01c      	b.n	8011df0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d006      	beq.n	8011dca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	7adb      	ldrb	r3, [r3, #11]
 8011dc0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	7a9b      	ldrb	r3, [r3, #10]
 8011dc6:	757b      	strb	r3, [r7, #21]
 8011dc8:	e003      	b.n	8011dd2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011dca:	23ff      	movs	r3, #255	@ 0xff
 8011dcc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011dd2:	7dba      	ldrb	r2, [r7, #22]
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	9302      	str	r3, [sp, #8]
 8011dd8:	2306      	movs	r3, #6
 8011dda:	9301      	str	r3, [sp, #4]
 8011ddc:	7d7b      	ldrb	r3, [r7, #21]
 8011dde:	9300      	str	r3, [sp, #0]
 8011de0:	4613      	mov	r3, r2
 8011de2:	683a      	ldr	r2, [r7, #0]
 8011de4:	6879      	ldr	r1, [r7, #4]
 8011de6:	68b8      	ldr	r0, [r7, #8]
 8011de8:	f002 f8d0 	bl	8013f8c <ip4_output_if>
 8011dec:	4603      	mov	r3, r0
 8011dee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011df0:	68b8      	ldr	r0, [r7, #8]
 8011df2:	f7fa fde9 	bl	800c9c8 <pbuf_free>
  return err;
 8011df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	3718      	adds	r7, #24
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	bf00      	nop
 8011e04:	0801ae28 	.word	0x0801ae28
 8011e08:	0801b580 	.word	0x0801b580
 8011e0c:	0801ae7c 	.word	0x0801ae7c

08011e10 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011e10:	b590      	push	{r4, r7, lr}
 8011e12:	b08b      	sub	sp, #44	@ 0x2c
 8011e14:	af04      	add	r7, sp, #16
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	607a      	str	r2, [r7, #4]
 8011e1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d106      	bne.n	8011e32 <tcp_rst+0x22>
 8011e24:	4b1f      	ldr	r3, [pc, #124]	@ (8011ea4 <tcp_rst+0x94>)
 8011e26:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011e2a:	491f      	ldr	r1, [pc, #124]	@ (8011ea8 <tcp_rst+0x98>)
 8011e2c:	481f      	ldr	r0, [pc, #124]	@ (8011eac <tcp_rst+0x9c>)
 8011e2e:	f004 f891 	bl	8015f54 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d106      	bne.n	8011e46 <tcp_rst+0x36>
 8011e38:	4b1a      	ldr	r3, [pc, #104]	@ (8011ea4 <tcp_rst+0x94>)
 8011e3a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011e3e:	491c      	ldr	r1, [pc, #112]	@ (8011eb0 <tcp_rst+0xa0>)
 8011e40:	481a      	ldr	r0, [pc, #104]	@ (8011eac <tcp_rst+0x9c>)
 8011e42:	f004 f887 	bl	8015f54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011e46:	2300      	movs	r3, #0
 8011e48:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011e4a:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011e4e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011e50:	7dfb      	ldrb	r3, [r7, #23]
 8011e52:	b29c      	uxth	r4, r3
 8011e54:	68b8      	ldr	r0, [r7, #8]
 8011e56:	f7f9 f9b7 	bl	800b1c8 <lwip_htonl>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	8abb      	ldrh	r3, [r7, #20]
 8011e5e:	9303      	str	r3, [sp, #12]
 8011e60:	2314      	movs	r3, #20
 8011e62:	9302      	str	r3, [sp, #8]
 8011e64:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011e66:	9301      	str	r3, [sp, #4]
 8011e68:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	4613      	mov	r3, r2
 8011e6e:	2200      	movs	r2, #0
 8011e70:	4621      	mov	r1, r4
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f7ff fe94 	bl	8011ba0 <tcp_output_alloc_header_common>
 8011e78:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00c      	beq.n	8011e9a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e80:	7dfb      	ldrb	r3, [r7, #23]
 8011e82:	2200      	movs	r2, #0
 8011e84:	6939      	ldr	r1, [r7, #16]
 8011e86:	68f8      	ldr	r0, [r7, #12]
 8011e88:	f7ff ff3a 	bl	8011d00 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e8e:	683a      	ldr	r2, [r7, #0]
 8011e90:	6939      	ldr	r1, [r7, #16]
 8011e92:	68f8      	ldr	r0, [r7, #12]
 8011e94:	f7ff ff72 	bl	8011d7c <tcp_output_control_segment>
 8011e98:	e000      	b.n	8011e9c <tcp_rst+0x8c>
    return;
 8011e9a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011e9c:	371c      	adds	r7, #28
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd90      	pop	{r4, r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	0801ae28 	.word	0x0801ae28
 8011ea8:	0801b5ac 	.word	0x0801b5ac
 8011eac:	0801ae7c 	.word	0x0801ae7c
 8011eb0:	0801b5c8 	.word	0x0801b5c8

08011eb4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011eb4:	b590      	push	{r4, r7, lr}
 8011eb6:	b087      	sub	sp, #28
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d106      	bne.n	8011ed8 <tcp_send_empty_ack+0x24>
 8011eca:	4b28      	ldr	r3, [pc, #160]	@ (8011f6c <tcp_send_empty_ack+0xb8>)
 8011ecc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011ed0:	4927      	ldr	r1, [pc, #156]	@ (8011f70 <tcp_send_empty_ack+0xbc>)
 8011ed2:	4828      	ldr	r0, [pc, #160]	@ (8011f74 <tcp_send_empty_ack+0xc0>)
 8011ed4:	f004 f83e 	bl	8015f54 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ed8:	7dfb      	ldrb	r3, [r7, #23]
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	f003 0304 	and.w	r3, r3, #4
 8011ee2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011ee4:	7d7b      	ldrb	r3, [r7, #21]
 8011ee6:	b29c      	uxth	r4, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011eec:	4618      	mov	r0, r3
 8011eee:	f7f9 f96b 	bl	800b1c8 <lwip_htonl>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	4621      	mov	r1, r4
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7ff fec3 	bl	8011c84 <tcp_output_alloc_header>
 8011efe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d109      	bne.n	8011f1a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	8b5b      	ldrh	r3, [r3, #26]
 8011f0a:	f043 0303 	orr.w	r3, r3, #3
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011f14:	f06f 0301 	mvn.w	r3, #1
 8011f18:	e023      	b.n	8011f62 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011f1a:	7dbb      	ldrb	r3, [r7, #22]
 8011f1c:	7dfa      	ldrb	r2, [r7, #23]
 8011f1e:	6939      	ldr	r1, [r7, #16]
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f7ff feed 	bl	8011d00 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	3304      	adds	r3, #4
 8011f2c:	6939      	ldr	r1, [r7, #16]
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f7ff ff24 	bl	8011d7c <tcp_output_control_segment>
 8011f34:	4603      	mov	r3, r0
 8011f36:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d007      	beq.n	8011f50 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	8b5b      	ldrh	r3, [r3, #26]
 8011f44:	f043 0303 	orr.w	r3, r3, #3
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	835a      	strh	r2, [r3, #26]
 8011f4e:	e006      	b.n	8011f5e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	8b5b      	ldrh	r3, [r3, #26]
 8011f54:	f023 0303 	bic.w	r3, r3, #3
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	371c      	adds	r7, #28
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd90      	pop	{r4, r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	0801ae28 	.word	0x0801ae28
 8011f70:	0801b5e4 	.word	0x0801b5e4
 8011f74:	0801ae7c 	.word	0x0801ae7c

08011f78 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011f78:	b590      	push	{r4, r7, lr}
 8011f7a:	b087      	sub	sp, #28
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f80:	2300      	movs	r3, #0
 8011f82:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d106      	bne.n	8011f98 <tcp_keepalive+0x20>
 8011f8a:	4b18      	ldr	r3, [pc, #96]	@ (8011fec <tcp_keepalive+0x74>)
 8011f8c:	f640 0224 	movw	r2, #2084	@ 0x824
 8011f90:	4917      	ldr	r1, [pc, #92]	@ (8011ff0 <tcp_keepalive+0x78>)
 8011f92:	4818      	ldr	r0, [pc, #96]	@ (8011ff4 <tcp_keepalive+0x7c>)
 8011f94:	f003 ffde 	bl	8015f54 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011f98:	7dfb      	ldrb	r3, [r7, #23]
 8011f9a:	b29c      	uxth	r4, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011fa0:	3b01      	subs	r3, #1
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7f9 f910 	bl	800b1c8 <lwip_htonl>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2200      	movs	r2, #0
 8011fac:	4621      	mov	r1, r4
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7ff fe68 	bl	8011c84 <tcp_output_alloc_header>
 8011fb4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d102      	bne.n	8011fc2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8011fc0:	e010      	b.n	8011fe4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011fc2:	7dfb      	ldrb	r3, [r7, #23]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	6939      	ldr	r1, [r7, #16]
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f7ff fe99 	bl	8011d00 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	3304      	adds	r3, #4
 8011fd4:	6939      	ldr	r1, [r7, #16]
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f7ff fed0 	bl	8011d7c <tcp_output_control_segment>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	371c      	adds	r7, #28
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd90      	pop	{r4, r7, pc}
 8011fec:	0801ae28 	.word	0x0801ae28
 8011ff0:	0801b604 	.word	0x0801b604
 8011ff4:	0801ae7c 	.word	0x0801ae7c

08011ff8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011ff8:	b590      	push	{r4, r7, lr}
 8011ffa:	b08b      	sub	sp, #44	@ 0x2c
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012000:	2300      	movs	r3, #0
 8012002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d106      	bne.n	801201a <tcp_zero_window_probe+0x22>
 801200c:	4b4c      	ldr	r3, [pc, #304]	@ (8012140 <tcp_zero_window_probe+0x148>)
 801200e:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012012:	494c      	ldr	r1, [pc, #304]	@ (8012144 <tcp_zero_window_probe+0x14c>)
 8012014:	484c      	ldr	r0, [pc, #304]	@ (8012148 <tcp_zero_window_probe+0x150>)
 8012016:	f003 ff9d 	bl	8015f54 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801201e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012020:	6a3b      	ldr	r3, [r7, #32]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d101      	bne.n	801202a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012026:	2300      	movs	r3, #0
 8012028:	e086      	b.n	8012138 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012030:	2bff      	cmp	r3, #255	@ 0xff
 8012032:	d007      	beq.n	8012044 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801203a:	3301      	adds	r3, #1
 801203c:	b2da      	uxtb	r2, r3
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012044:	6a3b      	ldr	r3, [r7, #32]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	899b      	ldrh	r3, [r3, #12]
 801204a:	b29b      	uxth	r3, r3
 801204c:	4618      	mov	r0, r3
 801204e:	f7f9 f8a5 	bl	800b19c <lwip_htons>
 8012052:	4603      	mov	r3, r0
 8012054:	b2db      	uxtb	r3, r3
 8012056:	f003 0301 	and.w	r3, r3, #1
 801205a:	2b00      	cmp	r3, #0
 801205c:	d005      	beq.n	801206a <tcp_zero_window_probe+0x72>
 801205e:	6a3b      	ldr	r3, [r7, #32]
 8012060:	891b      	ldrh	r3, [r3, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d101      	bne.n	801206a <tcp_zero_window_probe+0x72>
 8012066:	2301      	movs	r3, #1
 8012068:	e000      	b.n	801206c <tcp_zero_window_probe+0x74>
 801206a:	2300      	movs	r3, #0
 801206c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801206e:	7ffb      	ldrb	r3, [r7, #31]
 8012070:	2b00      	cmp	r3, #0
 8012072:	bf0c      	ite	eq
 8012074:	2301      	moveq	r3, #1
 8012076:	2300      	movne	r3, #0
 8012078:	b2db      	uxtb	r3, r3
 801207a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801207c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012080:	b299      	uxth	r1, r3
 8012082:	6a3b      	ldr	r3, [r7, #32]
 8012084:	68db      	ldr	r3, [r3, #12]
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	8bba      	ldrh	r2, [r7, #28]
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f7ff fdfa 	bl	8011c84 <tcp_output_alloc_header>
 8012090:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d102      	bne.n	801209e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012098:	f04f 33ff 	mov.w	r3, #4294967295
 801209c:	e04c      	b.n	8012138 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80120a4:	7ffb      	ldrb	r3, [r7, #31]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d011      	beq.n	80120ce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	899b      	ldrh	r3, [r3, #12]
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	b21b      	sxth	r3, r3
 80120b2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80120b6:	b21c      	sxth	r4, r3
 80120b8:	2011      	movs	r0, #17
 80120ba:	f7f9 f86f 	bl	800b19c <lwip_htons>
 80120be:	4603      	mov	r3, r0
 80120c0:	b21b      	sxth	r3, r3
 80120c2:	4323      	orrs	r3, r4
 80120c4:	b21b      	sxth	r3, r3
 80120c6:	b29a      	uxth	r2, r3
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	819a      	strh	r2, [r3, #12]
 80120cc:	e010      	b.n	80120f0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80120ce:	69bb      	ldr	r3, [r7, #24]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	3314      	adds	r3, #20
 80120d4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80120d6:	6a3b      	ldr	r3, [r7, #32]
 80120d8:	6858      	ldr	r0, [r3, #4]
 80120da:	6a3b      	ldr	r3, [r7, #32]
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	891a      	ldrh	r2, [r3, #8]
 80120e0:	6a3b      	ldr	r3, [r7, #32]
 80120e2:	891b      	ldrh	r3, [r3, #8]
 80120e4:	1ad3      	subs	r3, r2, r3
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	2201      	movs	r2, #1
 80120ea:	6939      	ldr	r1, [r7, #16]
 80120ec:	f7fa fe56 	bl	800cd9c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80120f0:	6a3b      	ldr	r3, [r7, #32]
 80120f2:	68db      	ldr	r3, [r3, #12]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7f9 f866 	bl	800b1c8 <lwip_htonl>
 80120fc:	4603      	mov	r3, r0
 80120fe:	3301      	adds	r3, #1
 8012100:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	1ad3      	subs	r3, r2, r3
 801210a:	2b00      	cmp	r3, #0
 801210c:	da02      	bge.n	8012114 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	68fa      	ldr	r2, [r7, #12]
 8012112:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012118:	2200      	movs	r2, #0
 801211a:	69b9      	ldr	r1, [r7, #24]
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f7ff fdef 	bl	8011d00 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012122:	687a      	ldr	r2, [r7, #4]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	3304      	adds	r3, #4
 8012128:	69b9      	ldr	r1, [r7, #24]
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7ff fe26 	bl	8011d7c <tcp_output_control_segment>
 8012130:	4603      	mov	r3, r0
 8012132:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012134:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012138:	4618      	mov	r0, r3
 801213a:	372c      	adds	r7, #44	@ 0x2c
 801213c:	46bd      	mov	sp, r7
 801213e:	bd90      	pop	{r4, r7, pc}
 8012140:	0801ae28 	.word	0x0801ae28
 8012144:	0801b620 	.word	0x0801b620
 8012148:	0801ae7c 	.word	0x0801ae7c

0801214c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012154:	f7fa ff10 	bl	800cf78 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012158:	4b0a      	ldr	r3, [pc, #40]	@ (8012184 <tcpip_tcp_timer+0x38>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d103      	bne.n	8012168 <tcpip_tcp_timer+0x1c>
 8012160:	4b09      	ldr	r3, [pc, #36]	@ (8012188 <tcpip_tcp_timer+0x3c>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d005      	beq.n	8012174 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012168:	2200      	movs	r2, #0
 801216a:	4908      	ldr	r1, [pc, #32]	@ (801218c <tcpip_tcp_timer+0x40>)
 801216c:	20fa      	movs	r0, #250	@ 0xfa
 801216e:	f000 f8f3 	bl	8012358 <sys_timeout>
 8012172:	e003      	b.n	801217c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012174:	4b06      	ldr	r3, [pc, #24]	@ (8012190 <tcpip_tcp_timer+0x44>)
 8012176:	2200      	movs	r2, #0
 8012178:	601a      	str	r2, [r3, #0]
  }
}
 801217a:	bf00      	nop
 801217c:	bf00      	nop
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	24008398 	.word	0x24008398
 8012188:	2400839c 	.word	0x2400839c
 801218c:	0801214d 	.word	0x0801214d
 8012190:	240083e4 	.word	0x240083e4

08012194 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012198:	4b0a      	ldr	r3, [pc, #40]	@ (80121c4 <tcp_timer_needed+0x30>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d10f      	bne.n	80121c0 <tcp_timer_needed+0x2c>
 80121a0:	4b09      	ldr	r3, [pc, #36]	@ (80121c8 <tcp_timer_needed+0x34>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d103      	bne.n	80121b0 <tcp_timer_needed+0x1c>
 80121a8:	4b08      	ldr	r3, [pc, #32]	@ (80121cc <tcp_timer_needed+0x38>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d007      	beq.n	80121c0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80121b0:	4b04      	ldr	r3, [pc, #16]	@ (80121c4 <tcp_timer_needed+0x30>)
 80121b2:	2201      	movs	r2, #1
 80121b4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80121b6:	2200      	movs	r2, #0
 80121b8:	4905      	ldr	r1, [pc, #20]	@ (80121d0 <tcp_timer_needed+0x3c>)
 80121ba:	20fa      	movs	r0, #250	@ 0xfa
 80121bc:	f000 f8cc 	bl	8012358 <sys_timeout>
  }
}
 80121c0:	bf00      	nop
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	240083e4 	.word	0x240083e4
 80121c8:	24008398 	.word	0x24008398
 80121cc:	2400839c 	.word	0x2400839c
 80121d0:	0801214d 	.word	0x0801214d

080121d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b086      	sub	sp, #24
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80121e0:	2006      	movs	r0, #6
 80121e2:	f7f9 fd0b 	bl	800bbfc <memp_malloc>
 80121e6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d109      	bne.n	8012202 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d151      	bne.n	8012298 <sys_timeout_abs+0xc4>
 80121f4:	4b2a      	ldr	r3, [pc, #168]	@ (80122a0 <sys_timeout_abs+0xcc>)
 80121f6:	22be      	movs	r2, #190	@ 0xbe
 80121f8:	492a      	ldr	r1, [pc, #168]	@ (80122a4 <sys_timeout_abs+0xd0>)
 80121fa:	482b      	ldr	r0, [pc, #172]	@ (80122a8 <sys_timeout_abs+0xd4>)
 80121fc:	f003 feaa 	bl	8015f54 <iprintf>
    return;
 8012200:	e04a      	b.n	8012298 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	2200      	movs	r2, #0
 8012206:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	68ba      	ldr	r2, [r7, #8]
 801220c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	68fa      	ldr	r2, [r7, #12]
 8012218:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801221a:	4b24      	ldr	r3, [pc, #144]	@ (80122ac <sys_timeout_abs+0xd8>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d103      	bne.n	801222a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012222:	4a22      	ldr	r2, [pc, #136]	@ (80122ac <sys_timeout_abs+0xd8>)
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	6013      	str	r3, [r2, #0]
    return;
 8012228:	e037      	b.n	801229a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	685a      	ldr	r2, [r3, #4]
 801222e:	4b1f      	ldr	r3, [pc, #124]	@ (80122ac <sys_timeout_abs+0xd8>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	1ad3      	subs	r3, r2, r3
 8012236:	0fdb      	lsrs	r3, r3, #31
 8012238:	f003 0301 	and.w	r3, r3, #1
 801223c:	b2db      	uxtb	r3, r3
 801223e:	2b00      	cmp	r3, #0
 8012240:	d007      	beq.n	8012252 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012242:	4b1a      	ldr	r3, [pc, #104]	@ (80122ac <sys_timeout_abs+0xd8>)
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801224a:	4a18      	ldr	r2, [pc, #96]	@ (80122ac <sys_timeout_abs+0xd8>)
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	6013      	str	r3, [r2, #0]
 8012250:	e023      	b.n	801229a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012252:	4b16      	ldr	r3, [pc, #88]	@ (80122ac <sys_timeout_abs+0xd8>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	617b      	str	r3, [r7, #20]
 8012258:	e01a      	b.n	8012290 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d00b      	beq.n	801227a <sys_timeout_abs+0xa6>
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	685a      	ldr	r2, [r3, #4]
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	1ad3      	subs	r3, r2, r3
 801226e:	0fdb      	lsrs	r3, r3, #31
 8012270:	f003 0301 	and.w	r3, r3, #1
 8012274:	b2db      	uxtb	r3, r3
 8012276:	2b00      	cmp	r3, #0
 8012278:	d007      	beq.n	801228a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	693a      	ldr	r2, [r7, #16]
 8012286:	601a      	str	r2, [r3, #0]
        break;
 8012288:	e007      	b.n	801229a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	617b      	str	r3, [r7, #20]
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d1e1      	bne.n	801225a <sys_timeout_abs+0x86>
 8012296:	e000      	b.n	801229a <sys_timeout_abs+0xc6>
    return;
 8012298:	bf00      	nop
      }
    }
  }
}
 801229a:	3718      	adds	r7, #24
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	0801b644 	.word	0x0801b644
 80122a4:	0801b678 	.word	0x0801b678
 80122a8:	0801b6b8 	.word	0x0801b6b8
 80122ac:	240083dc 	.word	0x240083dc

080122b0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b086      	sub	sp, #24
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	4798      	blx	r3

  now = sys_now();
 80122c2:	f7f8 fd4b 	bl	800ad5c <sys_now>
 80122c6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	4b0f      	ldr	r3, [pc, #60]	@ (801230c <lwip_cyclic_timer+0x5c>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4413      	add	r3, r2
 80122d2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80122d4:	68fa      	ldr	r2, [r7, #12]
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	1ad3      	subs	r3, r2, r3
 80122da:	0fdb      	lsrs	r3, r3, #31
 80122dc:	f003 0301 	and.w	r3, r3, #1
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d009      	beq.n	80122fa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	681a      	ldr	r2, [r3, #0]
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	4413      	add	r3, r2
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	4907      	ldr	r1, [pc, #28]	@ (8012310 <lwip_cyclic_timer+0x60>)
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7ff ff6e 	bl	80121d4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80122f8:	e004      	b.n	8012304 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80122fa:	687a      	ldr	r2, [r7, #4]
 80122fc:	4904      	ldr	r1, [pc, #16]	@ (8012310 <lwip_cyclic_timer+0x60>)
 80122fe:	68f8      	ldr	r0, [r7, #12]
 8012300:	f7ff ff68 	bl	80121d4 <sys_timeout_abs>
}
 8012304:	bf00      	nop
 8012306:	3718      	adds	r7, #24
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	240083e0 	.word	0x240083e0
 8012310:	080122b1 	.word	0x080122b1

08012314 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801231a:	2301      	movs	r3, #1
 801231c:	607b      	str	r3, [r7, #4]
 801231e:	e00e      	b.n	801233e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012320:	4a0b      	ldr	r2, [pc, #44]	@ (8012350 <sys_timeouts_init+0x3c>)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	00db      	lsls	r3, r3, #3
 801232c:	4a08      	ldr	r2, [pc, #32]	@ (8012350 <sys_timeouts_init+0x3c>)
 801232e:	4413      	add	r3, r2
 8012330:	461a      	mov	r2, r3
 8012332:	4908      	ldr	r1, [pc, #32]	@ (8012354 <sys_timeouts_init+0x40>)
 8012334:	f000 f810 	bl	8012358 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	3301      	adds	r3, #1
 801233c:	607b      	str	r3, [r7, #4]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2b02      	cmp	r3, #2
 8012342:	d9ed      	bls.n	8012320 <sys_timeouts_init+0xc>
  }
}
 8012344:	bf00      	nop
 8012346:	bf00      	nop
 8012348:	3708      	adds	r7, #8
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	0801c310 	.word	0x0801c310
 8012354:	080122b1 	.word	0x080122b1

08012358 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b086      	sub	sp, #24
 801235c:	af00      	add	r7, sp, #0
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801236a:	d306      	bcc.n	801237a <sys_timeout+0x22>
 801236c:	4b0a      	ldr	r3, [pc, #40]	@ (8012398 <sys_timeout+0x40>)
 801236e:	f240 1229 	movw	r2, #297	@ 0x129
 8012372:	490a      	ldr	r1, [pc, #40]	@ (801239c <sys_timeout+0x44>)
 8012374:	480a      	ldr	r0, [pc, #40]	@ (80123a0 <sys_timeout+0x48>)
 8012376:	f003 fded 	bl	8015f54 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801237a:	f7f8 fcef 	bl	800ad5c <sys_now>
 801237e:	4602      	mov	r2, r0
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	4413      	add	r3, r2
 8012384:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	68b9      	ldr	r1, [r7, #8]
 801238a:	6978      	ldr	r0, [r7, #20]
 801238c:	f7ff ff22 	bl	80121d4 <sys_timeout_abs>
#endif
}
 8012390:	bf00      	nop
 8012392:	3718      	adds	r7, #24
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	0801b644 	.word	0x0801b644
 801239c:	0801b6e0 	.word	0x0801b6e0
 80123a0:	0801b6b8 	.word	0x0801b6b8

080123a4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80123aa:	f7f8 fcd7 	bl	800ad5c <sys_now>
 80123ae:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80123b0:	4b1a      	ldr	r3, [pc, #104]	@ (801241c <sys_check_timeouts+0x78>)
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d001      	beq.n	80123be <sys_check_timeouts+0x1a>
 80123ba:	f7f9 ffcb 	bl	800c354 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80123be:	4b18      	ldr	r3, [pc, #96]	@ (8012420 <sys_check_timeouts+0x7c>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d022      	beq.n	8012410 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	68fa      	ldr	r2, [r7, #12]
 80123d0:	1ad3      	subs	r3, r2, r3
 80123d2:	0fdb      	lsrs	r3, r3, #31
 80123d4:	f003 0301 	and.w	r3, r3, #1
 80123d8:	b2db      	uxtb	r3, r3
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d11a      	bne.n	8012414 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	4a0f      	ldr	r2, [pc, #60]	@ (8012420 <sys_check_timeouts+0x7c>)
 80123e4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	689b      	ldr	r3, [r3, #8]
 80123ea:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	4a0b      	ldr	r2, [pc, #44]	@ (8012424 <sys_check_timeouts+0x80>)
 80123f8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80123fa:	68b9      	ldr	r1, [r7, #8]
 80123fc:	2006      	movs	r0, #6
 80123fe:	f7f9 fc6d 	bl	800bcdc <memp_free>
    if (handler != NULL) {
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d0d3      	beq.n	80123b0 <sys_check_timeouts+0xc>
      handler(arg);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6838      	ldr	r0, [r7, #0]
 801240c:	4798      	blx	r3
  do {
 801240e:	e7cf      	b.n	80123b0 <sys_check_timeouts+0xc>
      return;
 8012410:	bf00      	nop
 8012412:	e000      	b.n	8012416 <sys_check_timeouts+0x72>
      return;
 8012414:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012416:	3710      	adds	r7, #16
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}
 801241c:	24008389 	.word	0x24008389
 8012420:	240083dc 	.word	0x240083dc
 8012424:	240083e0 	.word	0x240083e0

08012428 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801242c:	f002 fddc 	bl	8014fe8 <rand>
 8012430:	4603      	mov	r3, r0
 8012432:	b29b      	uxth	r3, r3
 8012434:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012438:	b29b      	uxth	r3, r3
 801243a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801243e:	b29a      	uxth	r2, r3
 8012440:	4b01      	ldr	r3, [pc, #4]	@ (8012448 <udp_init+0x20>)
 8012442:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012444:	bf00      	nop
 8012446:	bd80      	pop	{r7, pc}
 8012448:	2400004c 	.word	0x2400004c

0801244c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012452:	2300      	movs	r3, #0
 8012454:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012456:	4b17      	ldr	r3, [pc, #92]	@ (80124b4 <udp_new_port+0x68>)
 8012458:	881b      	ldrh	r3, [r3, #0]
 801245a:	1c5a      	adds	r2, r3, #1
 801245c:	b291      	uxth	r1, r2
 801245e:	4a15      	ldr	r2, [pc, #84]	@ (80124b4 <udp_new_port+0x68>)
 8012460:	8011      	strh	r1, [r2, #0]
 8012462:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012466:	4293      	cmp	r3, r2
 8012468:	d103      	bne.n	8012472 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801246a:	4b12      	ldr	r3, [pc, #72]	@ (80124b4 <udp_new_port+0x68>)
 801246c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012470:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012472:	4b11      	ldr	r3, [pc, #68]	@ (80124b8 <udp_new_port+0x6c>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	603b      	str	r3, [r7, #0]
 8012478:	e011      	b.n	801249e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	8a5a      	ldrh	r2, [r3, #18]
 801247e:	4b0d      	ldr	r3, [pc, #52]	@ (80124b4 <udp_new_port+0x68>)
 8012480:	881b      	ldrh	r3, [r3, #0]
 8012482:	429a      	cmp	r2, r3
 8012484:	d108      	bne.n	8012498 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012486:	88fb      	ldrh	r3, [r7, #6]
 8012488:	3301      	adds	r3, #1
 801248a:	80fb      	strh	r3, [r7, #6]
 801248c:	88fb      	ldrh	r3, [r7, #6]
 801248e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012492:	d3e0      	bcc.n	8012456 <udp_new_port+0xa>
        return 0;
 8012494:	2300      	movs	r3, #0
 8012496:	e007      	b.n	80124a8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	603b      	str	r3, [r7, #0]
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d1ea      	bne.n	801247a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80124a4:	4b03      	ldr	r3, [pc, #12]	@ (80124b4 <udp_new_port+0x68>)
 80124a6:	881b      	ldrh	r3, [r3, #0]
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	370c      	adds	r7, #12
 80124ac:	46bd      	mov	sp, r7
 80124ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b2:	4770      	bx	lr
 80124b4:	2400004c 	.word	0x2400004c
 80124b8:	240083e8 	.word	0x240083e8

080124bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	60f8      	str	r0, [r7, #12]
 80124c4:	60b9      	str	r1, [r7, #8]
 80124c6:	4613      	mov	r3, r2
 80124c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d105      	bne.n	80124dc <udp_input_local_match+0x20>
 80124d0:	4b27      	ldr	r3, [pc, #156]	@ (8012570 <udp_input_local_match+0xb4>)
 80124d2:	2287      	movs	r2, #135	@ 0x87
 80124d4:	4927      	ldr	r1, [pc, #156]	@ (8012574 <udp_input_local_match+0xb8>)
 80124d6:	4828      	ldr	r0, [pc, #160]	@ (8012578 <udp_input_local_match+0xbc>)
 80124d8:	f003 fd3c 	bl	8015f54 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d105      	bne.n	80124ee <udp_input_local_match+0x32>
 80124e2:	4b23      	ldr	r3, [pc, #140]	@ (8012570 <udp_input_local_match+0xb4>)
 80124e4:	2288      	movs	r2, #136	@ 0x88
 80124e6:	4925      	ldr	r1, [pc, #148]	@ (801257c <udp_input_local_match+0xc0>)
 80124e8:	4823      	ldr	r0, [pc, #140]	@ (8012578 <udp_input_local_match+0xbc>)
 80124ea:	f003 fd33 	bl	8015f54 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	7a1b      	ldrb	r3, [r3, #8]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d00b      	beq.n	801250e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	7a1a      	ldrb	r2, [r3, #8]
 80124fa:	4b21      	ldr	r3, [pc, #132]	@ (8012580 <udp_input_local_match+0xc4>)
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012502:	3301      	adds	r3, #1
 8012504:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012506:	429a      	cmp	r2, r3
 8012508:	d001      	beq.n	801250e <udp_input_local_match+0x52>
    return 0;
 801250a:	2300      	movs	r3, #0
 801250c:	e02b      	b.n	8012566 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801250e:	79fb      	ldrb	r3, [r7, #7]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d018      	beq.n	8012546 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d013      	beq.n	8012542 <udp_input_local_match+0x86>
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00f      	beq.n	8012542 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012522:	4b17      	ldr	r3, [pc, #92]	@ (8012580 <udp_input_local_match+0xc4>)
 8012524:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801252a:	d00a      	beq.n	8012542 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	4b13      	ldr	r3, [pc, #76]	@ (8012580 <udp_input_local_match+0xc4>)
 8012532:	695b      	ldr	r3, [r3, #20]
 8012534:	405a      	eors	r2, r3
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	3308      	adds	r3, #8
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801253e:	2b00      	cmp	r3, #0
 8012540:	d110      	bne.n	8012564 <udp_input_local_match+0xa8>
          return 1;
 8012542:	2301      	movs	r3, #1
 8012544:	e00f      	b.n	8012566 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d009      	beq.n	8012560 <udp_input_local_match+0xa4>
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d005      	beq.n	8012560 <udp_input_local_match+0xa4>
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	681a      	ldr	r2, [r3, #0]
 8012558:	4b09      	ldr	r3, [pc, #36]	@ (8012580 <udp_input_local_match+0xc4>)
 801255a:	695b      	ldr	r3, [r3, #20]
 801255c:	429a      	cmp	r2, r3
 801255e:	d101      	bne.n	8012564 <udp_input_local_match+0xa8>
        return 1;
 8012560:	2301      	movs	r3, #1
 8012562:	e000      	b.n	8012566 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012564:	2300      	movs	r3, #0
}
 8012566:	4618      	mov	r0, r3
 8012568:	3710      	adds	r7, #16
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
 801256e:	bf00      	nop
 8012570:	0801b72c 	.word	0x0801b72c
 8012574:	0801b75c 	.word	0x0801b75c
 8012578:	0801b780 	.word	0x0801b780
 801257c:	0801b7a8 	.word	0x0801b7a8
 8012580:	24005470 	.word	0x24005470

08012584 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012584:	b590      	push	{r4, r7, lr}
 8012586:	b08d      	sub	sp, #52	@ 0x34
 8012588:	af02      	add	r7, sp, #8
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801258e:	2300      	movs	r3, #0
 8012590:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d105      	bne.n	80125a4 <udp_input+0x20>
 8012598:	4b7c      	ldr	r3, [pc, #496]	@ (801278c <udp_input+0x208>)
 801259a:	22cf      	movs	r2, #207	@ 0xcf
 801259c:	497c      	ldr	r1, [pc, #496]	@ (8012790 <udp_input+0x20c>)
 801259e:	487d      	ldr	r0, [pc, #500]	@ (8012794 <udp_input+0x210>)
 80125a0:	f003 fcd8 	bl	8015f54 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d105      	bne.n	80125b6 <udp_input+0x32>
 80125aa:	4b78      	ldr	r3, [pc, #480]	@ (801278c <udp_input+0x208>)
 80125ac:	22d0      	movs	r2, #208	@ 0xd0
 80125ae:	497a      	ldr	r1, [pc, #488]	@ (8012798 <udp_input+0x214>)
 80125b0:	4878      	ldr	r0, [pc, #480]	@ (8012794 <udp_input+0x210>)
 80125b2:	f003 fccf 	bl	8015f54 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	895b      	ldrh	r3, [r3, #10]
 80125ba:	2b07      	cmp	r3, #7
 80125bc:	d803      	bhi.n	80125c6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f7fa fa02 	bl	800c9c8 <pbuf_free>
    goto end;
 80125c4:	e0de      	b.n	8012784 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80125cc:	4b73      	ldr	r3, [pc, #460]	@ (801279c <udp_input+0x218>)
 80125ce:	695b      	ldr	r3, [r3, #20]
 80125d0:	4a72      	ldr	r2, [pc, #456]	@ (801279c <udp_input+0x218>)
 80125d2:	6812      	ldr	r2, [r2, #0]
 80125d4:	4611      	mov	r1, r2
 80125d6:	4618      	mov	r0, r3
 80125d8:	f001 fdb0 	bl	801413c <ip4_addr_isbroadcast_u32>
 80125dc:	4603      	mov	r3, r0
 80125de:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	881b      	ldrh	r3, [r3, #0]
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7f8 fdd8 	bl	800b19c <lwip_htons>
 80125ec:	4603      	mov	r3, r0
 80125ee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	885b      	ldrh	r3, [r3, #2]
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7f8 fdd0 	bl	800b19c <lwip_htons>
 80125fc:	4603      	mov	r3, r0
 80125fe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012600:	2300      	movs	r3, #0
 8012602:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8012604:	2300      	movs	r3, #0
 8012606:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012608:	2300      	movs	r3, #0
 801260a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801260c:	4b64      	ldr	r3, [pc, #400]	@ (80127a0 <udp_input+0x21c>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	627b      	str	r3, [r7, #36]	@ 0x24
 8012612:	e054      	b.n	80126be <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012616:	8a5b      	ldrh	r3, [r3, #18]
 8012618:	89fa      	ldrh	r2, [r7, #14]
 801261a:	429a      	cmp	r2, r3
 801261c:	d14a      	bne.n	80126b4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801261e:	7cfb      	ldrb	r3, [r7, #19]
 8012620:	461a      	mov	r2, r3
 8012622:	6839      	ldr	r1, [r7, #0]
 8012624:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012626:	f7ff ff49 	bl	80124bc <udp_input_local_match>
 801262a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801262c:	2b00      	cmp	r3, #0
 801262e:	d041      	beq.n	80126b4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012632:	7c1b      	ldrb	r3, [r3, #16]
 8012634:	f003 0304 	and.w	r3, r3, #4
 8012638:	2b00      	cmp	r3, #0
 801263a:	d11d      	bne.n	8012678 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d102      	bne.n	8012648 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012644:	61fb      	str	r3, [r7, #28]
 8012646:	e017      	b.n	8012678 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012648:	7cfb      	ldrb	r3, [r7, #19]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d014      	beq.n	8012678 <udp_input+0xf4>
 801264e:	4b53      	ldr	r3, [pc, #332]	@ (801279c <udp_input+0x218>)
 8012650:	695b      	ldr	r3, [r3, #20]
 8012652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012656:	d10f      	bne.n	8012678 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012658:	69fb      	ldr	r3, [r7, #28]
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	3304      	adds	r3, #4
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	429a      	cmp	r2, r3
 8012664:	d008      	beq.n	8012678 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012668:	681a      	ldr	r2, [r3, #0]
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	3304      	adds	r3, #4
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	429a      	cmp	r2, r3
 8012672:	d101      	bne.n	8012678 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012676:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801267a:	8a9b      	ldrh	r3, [r3, #20]
 801267c:	8a3a      	ldrh	r2, [r7, #16]
 801267e:	429a      	cmp	r2, r3
 8012680:	d118      	bne.n	80126b4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012684:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012686:	2b00      	cmp	r3, #0
 8012688:	d005      	beq.n	8012696 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801268c:	685a      	ldr	r2, [r3, #4]
 801268e:	4b43      	ldr	r3, [pc, #268]	@ (801279c <udp_input+0x218>)
 8012690:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012692:	429a      	cmp	r2, r3
 8012694:	d10e      	bne.n	80126b4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012696:	6a3b      	ldr	r3, [r7, #32]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d014      	beq.n	80126c6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801269c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801269e:	68da      	ldr	r2, [r3, #12]
 80126a0:	6a3b      	ldr	r3, [r7, #32]
 80126a2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80126a4:	4b3e      	ldr	r3, [pc, #248]	@ (80127a0 <udp_input+0x21c>)
 80126a6:	681a      	ldr	r2, [r3, #0]
 80126a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126aa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80126ac:	4a3c      	ldr	r2, [pc, #240]	@ (80127a0 <udp_input+0x21c>)
 80126ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80126b2:	e008      	b.n	80126c6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80126b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80126b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ba:	68db      	ldr	r3, [r3, #12]
 80126bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80126be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d1a7      	bne.n	8012614 <udp_input+0x90>
 80126c4:	e000      	b.n	80126c8 <udp_input+0x144>
        break;
 80126c6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80126c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d101      	bne.n	80126d2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80126ce:	69fb      	ldr	r3, [r7, #28]
 80126d0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80126d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d002      	beq.n	80126de <udp_input+0x15a>
    for_us = 1;
 80126d8:	2301      	movs	r3, #1
 80126da:	76fb      	strb	r3, [r7, #27]
 80126dc:	e00a      	b.n	80126f4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	3304      	adds	r3, #4
 80126e2:	681a      	ldr	r2, [r3, #0]
 80126e4:	4b2d      	ldr	r3, [pc, #180]	@ (801279c <udp_input+0x218>)
 80126e6:	695b      	ldr	r3, [r3, #20]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	bf0c      	ite	eq
 80126ec:	2301      	moveq	r3, #1
 80126ee:	2300      	movne	r3, #0
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80126f4:	7efb      	ldrb	r3, [r7, #27]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d041      	beq.n	801277e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80126fa:	2108      	movs	r1, #8
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f7fa f8dd 	bl	800c8bc <pbuf_remove_header>
 8012702:	4603      	mov	r3, r0
 8012704:	2b00      	cmp	r3, #0
 8012706:	d00a      	beq.n	801271e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012708:	4b20      	ldr	r3, [pc, #128]	@ (801278c <udp_input+0x208>)
 801270a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801270e:	4925      	ldr	r1, [pc, #148]	@ (80127a4 <udp_input+0x220>)
 8012710:	4820      	ldr	r0, [pc, #128]	@ (8012794 <udp_input+0x210>)
 8012712:	f003 fc1f 	bl	8015f54 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f7fa f956 	bl	800c9c8 <pbuf_free>
      goto end;
 801271c:	e032      	b.n	8012784 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012720:	2b00      	cmp	r3, #0
 8012722:	d012      	beq.n	801274a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012726:	699b      	ldr	r3, [r3, #24]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d00a      	beq.n	8012742 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801272e:	699c      	ldr	r4, [r3, #24]
 8012730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012732:	69d8      	ldr	r0, [r3, #28]
 8012734:	8a3b      	ldrh	r3, [r7, #16]
 8012736:	9300      	str	r3, [sp, #0]
 8012738:	4b1b      	ldr	r3, [pc, #108]	@ (80127a8 <udp_input+0x224>)
 801273a:	687a      	ldr	r2, [r7, #4]
 801273c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801273e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012740:	e021      	b.n	8012786 <udp_input+0x202>
        pbuf_free(p);
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7fa f940 	bl	800c9c8 <pbuf_free>
        goto end;
 8012748:	e01c      	b.n	8012784 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801274a:	7cfb      	ldrb	r3, [r7, #19]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d112      	bne.n	8012776 <udp_input+0x1f2>
 8012750:	4b12      	ldr	r3, [pc, #72]	@ (801279c <udp_input+0x218>)
 8012752:	695b      	ldr	r3, [r3, #20]
 8012754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012758:	2be0      	cmp	r3, #224	@ 0xe0
 801275a:	d00c      	beq.n	8012776 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801275c:	4b0f      	ldr	r3, [pc, #60]	@ (801279c <udp_input+0x218>)
 801275e:	899b      	ldrh	r3, [r3, #12]
 8012760:	3308      	adds	r3, #8
 8012762:	b29b      	uxth	r3, r3
 8012764:	b21b      	sxth	r3, r3
 8012766:	4619      	mov	r1, r3
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7fa f91a 	bl	800c9a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801276e:	2103      	movs	r1, #3
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f001 f9b9 	bl	8013ae8 <icmp_dest_unreach>
      pbuf_free(p);
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f7fa f926 	bl	800c9c8 <pbuf_free>
  return;
 801277c:	e003      	b.n	8012786 <udp_input+0x202>
    pbuf_free(p);
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f7fa f922 	bl	800c9c8 <pbuf_free>
  return;
 8012784:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012786:	372c      	adds	r7, #44	@ 0x2c
 8012788:	46bd      	mov	sp, r7
 801278a:	bd90      	pop	{r4, r7, pc}
 801278c:	0801b72c 	.word	0x0801b72c
 8012790:	0801b7d0 	.word	0x0801b7d0
 8012794:	0801b780 	.word	0x0801b780
 8012798:	0801b7e8 	.word	0x0801b7e8
 801279c:	24005470 	.word	0x24005470
 80127a0:	240083e8 	.word	0x240083e8
 80127a4:	0801b804 	.word	0x0801b804
 80127a8:	24005480 	.word	0x24005480

080127ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b086      	sub	sp, #24
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	60f8      	str	r0, [r7, #12]
 80127b4:	60b9      	str	r1, [r7, #8]
 80127b6:	4613      	mov	r3, r2
 80127b8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d101      	bne.n	80127c4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80127c0:	4b39      	ldr	r3, [pc, #228]	@ (80128a8 <udp_bind+0xfc>)
 80127c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d109      	bne.n	80127de <udp_bind+0x32>
 80127ca:	4b38      	ldr	r3, [pc, #224]	@ (80128ac <udp_bind+0x100>)
 80127cc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80127d0:	4937      	ldr	r1, [pc, #220]	@ (80128b0 <udp_bind+0x104>)
 80127d2:	4838      	ldr	r0, [pc, #224]	@ (80128b4 <udp_bind+0x108>)
 80127d4:	f003 fbbe 	bl	8015f54 <iprintf>
 80127d8:	f06f 030f 	mvn.w	r3, #15
 80127dc:	e060      	b.n	80128a0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80127de:	2300      	movs	r3, #0
 80127e0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127e2:	4b35      	ldr	r3, [pc, #212]	@ (80128b8 <udp_bind+0x10c>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	617b      	str	r3, [r7, #20]
 80127e8:	e009      	b.n	80127fe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80127ea:	68fa      	ldr	r2, [r7, #12]
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d102      	bne.n	80127f8 <udp_bind+0x4c>
      rebind = 1;
 80127f2:	2301      	movs	r3, #1
 80127f4:	74fb      	strb	r3, [r7, #19]
      break;
 80127f6:	e005      	b.n	8012804 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	617b      	str	r3, [r7, #20]
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d1f2      	bne.n	80127ea <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012804:	88fb      	ldrh	r3, [r7, #6]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d109      	bne.n	801281e <udp_bind+0x72>
    port = udp_new_port();
 801280a:	f7ff fe1f 	bl	801244c <udp_new_port>
 801280e:	4603      	mov	r3, r0
 8012810:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012812:	88fb      	ldrh	r3, [r7, #6]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d12c      	bne.n	8012872 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012818:	f06f 0307 	mvn.w	r3, #7
 801281c:	e040      	b.n	80128a0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801281e:	4b26      	ldr	r3, [pc, #152]	@ (80128b8 <udp_bind+0x10c>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	617b      	str	r3, [r7, #20]
 8012824:	e022      	b.n	801286c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012826:	68fa      	ldr	r2, [r7, #12]
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	429a      	cmp	r2, r3
 801282c:	d01b      	beq.n	8012866 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	8a5b      	ldrh	r3, [r3, #18]
 8012832:	88fa      	ldrh	r2, [r7, #6]
 8012834:	429a      	cmp	r2, r3
 8012836:	d116      	bne.n	8012866 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012840:	429a      	cmp	r2, r3
 8012842:	d00d      	beq.n	8012860 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d00a      	beq.n	8012860 <udp_bind+0xb4>
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d006      	beq.n	8012860 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012852:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012854:	2b00      	cmp	r3, #0
 8012856:	d003      	beq.n	8012860 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d102      	bne.n	8012866 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012860:	f06f 0307 	mvn.w	r3, #7
 8012864:	e01c      	b.n	80128a0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	68db      	ldr	r3, [r3, #12]
 801286a:	617b      	str	r3, [r7, #20]
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1d9      	bne.n	8012826 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012872:	68bb      	ldr	r3, [r7, #8]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d002      	beq.n	801287e <udp_bind+0xd2>
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	e000      	b.n	8012880 <udp_bind+0xd4>
 801287e:	2300      	movs	r3, #0
 8012880:	68fa      	ldr	r2, [r7, #12]
 8012882:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	88fa      	ldrh	r2, [r7, #6]
 8012888:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801288a:	7cfb      	ldrb	r3, [r7, #19]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d106      	bne.n	801289e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012890:	4b09      	ldr	r3, [pc, #36]	@ (80128b8 <udp_bind+0x10c>)
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012898:	4a07      	ldr	r2, [pc, #28]	@ (80128b8 <udp_bind+0x10c>)
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801289e:	2300      	movs	r3, #0
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3718      	adds	r7, #24
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	0801c328 	.word	0x0801c328
 80128ac:	0801b72c 	.word	0x0801b72c
 80128b0:	0801b9f4 	.word	0x0801b9f4
 80128b4:	0801b780 	.word	0x0801b780
 80128b8:	240083e8 	.word	0x240083e8

080128bc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b084      	sub	sp, #16
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d107      	bne.n	80128de <udp_recv+0x22>
 80128ce:	4b08      	ldr	r3, [pc, #32]	@ (80128f0 <udp_recv+0x34>)
 80128d0:	f240 428a 	movw	r2, #1162	@ 0x48a
 80128d4:	4907      	ldr	r1, [pc, #28]	@ (80128f4 <udp_recv+0x38>)
 80128d6:	4808      	ldr	r0, [pc, #32]	@ (80128f8 <udp_recv+0x3c>)
 80128d8:	f003 fb3c 	bl	8015f54 <iprintf>
 80128dc:	e005      	b.n	80128ea <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	68ba      	ldr	r2, [r7, #8]
 80128e2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	61da      	str	r2, [r3, #28]
}
 80128ea:	3710      	adds	r7, #16
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	0801b72c 	.word	0x0801b72c
 80128f4:	0801ba60 	.word	0x0801ba60
 80128f8:	0801b780 	.word	0x0801b780

080128fc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d107      	bne.n	801291a <udp_remove+0x1e>
 801290a:	4b19      	ldr	r3, [pc, #100]	@ (8012970 <udp_remove+0x74>)
 801290c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8012910:	4918      	ldr	r1, [pc, #96]	@ (8012974 <udp_remove+0x78>)
 8012912:	4819      	ldr	r0, [pc, #100]	@ (8012978 <udp_remove+0x7c>)
 8012914:	f003 fb1e 	bl	8015f54 <iprintf>
 8012918:	e026      	b.n	8012968 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801291a:	4b18      	ldr	r3, [pc, #96]	@ (801297c <udp_remove+0x80>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	687a      	ldr	r2, [r7, #4]
 8012920:	429a      	cmp	r2, r3
 8012922:	d105      	bne.n	8012930 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012924:	4b15      	ldr	r3, [pc, #84]	@ (801297c <udp_remove+0x80>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	4a14      	ldr	r2, [pc, #80]	@ (801297c <udp_remove+0x80>)
 801292c:	6013      	str	r3, [r2, #0]
 801292e:	e017      	b.n	8012960 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012930:	4b12      	ldr	r3, [pc, #72]	@ (801297c <udp_remove+0x80>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	60fb      	str	r3, [r7, #12]
 8012936:	e010      	b.n	801295a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d009      	beq.n	8012954 <udp_remove+0x58>
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	429a      	cmp	r2, r3
 8012948:	d104      	bne.n	8012954 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	68da      	ldr	r2, [r3, #12]
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	60da      	str	r2, [r3, #12]
        break;
 8012952:	e005      	b.n	8012960 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	60fb      	str	r3, [r7, #12]
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d1eb      	bne.n	8012938 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012960:	6879      	ldr	r1, [r7, #4]
 8012962:	2000      	movs	r0, #0
 8012964:	f7f9 f9ba 	bl	800bcdc <memp_free>
}
 8012968:	3710      	adds	r7, #16
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	0801b72c 	.word	0x0801b72c
 8012974:	0801ba78 	.word	0x0801ba78
 8012978:	0801b780 	.word	0x0801b780
 801297c:	240083e8 	.word	0x240083e8

08012980 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012986:	2000      	movs	r0, #0
 8012988:	f7f9 f938 	bl	800bbfc <memp_malloc>
 801298c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d007      	beq.n	80129a4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012994:	2220      	movs	r2, #32
 8012996:	2100      	movs	r1, #0
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f003 fc6f 	bl	801627c <memset>
    pcb->ttl = UDP_TTL;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	22ff      	movs	r2, #255	@ 0xff
 80129a2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80129a4:	687b      	ldr	r3, [r7, #4]
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3708      	adds	r7, #8
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
	...

080129b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b085      	sub	sp, #20
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d01e      	beq.n	80129fe <udp_netif_ip_addr_changed+0x4e>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d01a      	beq.n	80129fe <udp_netif_ip_addr_changed+0x4e>
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d017      	beq.n	80129fe <udp_netif_ip_addr_changed+0x4e>
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d013      	beq.n	80129fe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80129d6:	4b0d      	ldr	r3, [pc, #52]	@ (8012a0c <udp_netif_ip_addr_changed+0x5c>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	60fb      	str	r3, [r7, #12]
 80129dc:	e00c      	b.n	80129f8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d103      	bne.n	80129f2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	68db      	ldr	r3, [r3, #12]
 80129f6:	60fb      	str	r3, [r7, #12]
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d1ef      	bne.n	80129de <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80129fe:	bf00      	nop
 8012a00:	3714      	adds	r7, #20
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	240083e8 	.word	0x240083e8

08012a10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012a18:	4915      	ldr	r1, [pc, #84]	@ (8012a70 <etharp_free_entry+0x60>)
 8012a1a:	687a      	ldr	r2, [r7, #4]
 8012a1c:	4613      	mov	r3, r2
 8012a1e:	005b      	lsls	r3, r3, #1
 8012a20:	4413      	add	r3, r2
 8012a22:	00db      	lsls	r3, r3, #3
 8012a24:	440b      	add	r3, r1
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d013      	beq.n	8012a54 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012a2c:	4910      	ldr	r1, [pc, #64]	@ (8012a70 <etharp_free_entry+0x60>)
 8012a2e:	687a      	ldr	r2, [r7, #4]
 8012a30:	4613      	mov	r3, r2
 8012a32:	005b      	lsls	r3, r3, #1
 8012a34:	4413      	add	r3, r2
 8012a36:	00db      	lsls	r3, r3, #3
 8012a38:	440b      	add	r3, r1
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7f9 ffc3 	bl	800c9c8 <pbuf_free>
    arp_table[i].q = NULL;
 8012a42:	490b      	ldr	r1, [pc, #44]	@ (8012a70 <etharp_free_entry+0x60>)
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	4613      	mov	r3, r2
 8012a48:	005b      	lsls	r3, r3, #1
 8012a4a:	4413      	add	r3, r2
 8012a4c:	00db      	lsls	r3, r3, #3
 8012a4e:	440b      	add	r3, r1
 8012a50:	2200      	movs	r2, #0
 8012a52:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012a54:	4906      	ldr	r1, [pc, #24]	@ (8012a70 <etharp_free_entry+0x60>)
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	4613      	mov	r3, r2
 8012a5a:	005b      	lsls	r3, r3, #1
 8012a5c:	4413      	add	r3, r2
 8012a5e:	00db      	lsls	r3, r3, #3
 8012a60:	440b      	add	r3, r1
 8012a62:	3314      	adds	r3, #20
 8012a64:	2200      	movs	r2, #0
 8012a66:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012a68:	bf00      	nop
 8012a6a:	3708      	adds	r7, #8
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}
 8012a70:	240083ec 	.word	0x240083ec

08012a74 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	607b      	str	r3, [r7, #4]
 8012a7e:	e096      	b.n	8012bae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012a80:	494f      	ldr	r1, [pc, #316]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	4613      	mov	r3, r2
 8012a86:	005b      	lsls	r3, r3, #1
 8012a88:	4413      	add	r3, r2
 8012a8a:	00db      	lsls	r3, r3, #3
 8012a8c:	440b      	add	r3, r1
 8012a8e:	3314      	adds	r3, #20
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012a94:	78fb      	ldrb	r3, [r7, #3]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f000 8086 	beq.w	8012ba8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012a9c:	4948      	ldr	r1, [pc, #288]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012a9e:	687a      	ldr	r2, [r7, #4]
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	005b      	lsls	r3, r3, #1
 8012aa4:	4413      	add	r3, r2
 8012aa6:	00db      	lsls	r3, r3, #3
 8012aa8:	440b      	add	r3, r1
 8012aaa:	3312      	adds	r3, #18
 8012aac:	881b      	ldrh	r3, [r3, #0]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	b298      	uxth	r0, r3
 8012ab2:	4943      	ldr	r1, [pc, #268]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	4613      	mov	r3, r2
 8012ab8:	005b      	lsls	r3, r3, #1
 8012aba:	4413      	add	r3, r2
 8012abc:	00db      	lsls	r3, r3, #3
 8012abe:	440b      	add	r3, r1
 8012ac0:	3312      	adds	r3, #18
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012ac6:	493e      	ldr	r1, [pc, #248]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	4613      	mov	r3, r2
 8012acc:	005b      	lsls	r3, r3, #1
 8012ace:	4413      	add	r3, r2
 8012ad0:	00db      	lsls	r3, r3, #3
 8012ad2:	440b      	add	r3, r1
 8012ad4:	3312      	adds	r3, #18
 8012ad6:	881b      	ldrh	r3, [r3, #0]
 8012ad8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012adc:	d215      	bcs.n	8012b0a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012ade:	4938      	ldr	r1, [pc, #224]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	4613      	mov	r3, r2
 8012ae4:	005b      	lsls	r3, r3, #1
 8012ae6:	4413      	add	r3, r2
 8012ae8:	00db      	lsls	r3, r3, #3
 8012aea:	440b      	add	r3, r1
 8012aec:	3314      	adds	r3, #20
 8012aee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d10e      	bne.n	8012b12 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012af4:	4932      	ldr	r1, [pc, #200]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	4613      	mov	r3, r2
 8012afa:	005b      	lsls	r3, r3, #1
 8012afc:	4413      	add	r3, r2
 8012afe:	00db      	lsls	r3, r3, #3
 8012b00:	440b      	add	r3, r1
 8012b02:	3312      	adds	r3, #18
 8012b04:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012b06:	2b04      	cmp	r3, #4
 8012b08:	d903      	bls.n	8012b12 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f7ff ff80 	bl	8012a10 <etharp_free_entry>
 8012b10:	e04a      	b.n	8012ba8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012b12:	492b      	ldr	r1, [pc, #172]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012b14:	687a      	ldr	r2, [r7, #4]
 8012b16:	4613      	mov	r3, r2
 8012b18:	005b      	lsls	r3, r3, #1
 8012b1a:	4413      	add	r3, r2
 8012b1c:	00db      	lsls	r3, r3, #3
 8012b1e:	440b      	add	r3, r1
 8012b20:	3314      	adds	r3, #20
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	2b03      	cmp	r3, #3
 8012b26:	d10a      	bne.n	8012b3e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012b28:	4925      	ldr	r1, [pc, #148]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012b2a:	687a      	ldr	r2, [r7, #4]
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	005b      	lsls	r3, r3, #1
 8012b30:	4413      	add	r3, r2
 8012b32:	00db      	lsls	r3, r3, #3
 8012b34:	440b      	add	r3, r1
 8012b36:	3314      	adds	r3, #20
 8012b38:	2204      	movs	r2, #4
 8012b3a:	701a      	strb	r2, [r3, #0]
 8012b3c:	e034      	b.n	8012ba8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012b3e:	4920      	ldr	r1, [pc, #128]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012b40:	687a      	ldr	r2, [r7, #4]
 8012b42:	4613      	mov	r3, r2
 8012b44:	005b      	lsls	r3, r3, #1
 8012b46:	4413      	add	r3, r2
 8012b48:	00db      	lsls	r3, r3, #3
 8012b4a:	440b      	add	r3, r1
 8012b4c:	3314      	adds	r3, #20
 8012b4e:	781b      	ldrb	r3, [r3, #0]
 8012b50:	2b04      	cmp	r3, #4
 8012b52:	d10a      	bne.n	8012b6a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012b54:	491a      	ldr	r1, [pc, #104]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012b56:	687a      	ldr	r2, [r7, #4]
 8012b58:	4613      	mov	r3, r2
 8012b5a:	005b      	lsls	r3, r3, #1
 8012b5c:	4413      	add	r3, r2
 8012b5e:	00db      	lsls	r3, r3, #3
 8012b60:	440b      	add	r3, r1
 8012b62:	3314      	adds	r3, #20
 8012b64:	2202      	movs	r2, #2
 8012b66:	701a      	strb	r2, [r3, #0]
 8012b68:	e01e      	b.n	8012ba8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b6a:	4915      	ldr	r1, [pc, #84]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	4613      	mov	r3, r2
 8012b70:	005b      	lsls	r3, r3, #1
 8012b72:	4413      	add	r3, r2
 8012b74:	00db      	lsls	r3, r3, #3
 8012b76:	440b      	add	r3, r1
 8012b78:	3314      	adds	r3, #20
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	2b01      	cmp	r3, #1
 8012b7e:	d113      	bne.n	8012ba8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012b80:	490f      	ldr	r1, [pc, #60]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	4613      	mov	r3, r2
 8012b86:	005b      	lsls	r3, r3, #1
 8012b88:	4413      	add	r3, r2
 8012b8a:	00db      	lsls	r3, r3, #3
 8012b8c:	440b      	add	r3, r1
 8012b8e:	3308      	adds	r3, #8
 8012b90:	6818      	ldr	r0, [r3, #0]
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	4613      	mov	r3, r2
 8012b96:	005b      	lsls	r3, r3, #1
 8012b98:	4413      	add	r3, r2
 8012b9a:	00db      	lsls	r3, r3, #3
 8012b9c:	4a08      	ldr	r2, [pc, #32]	@ (8012bc0 <etharp_tmr+0x14c>)
 8012b9e:	4413      	add	r3, r2
 8012ba0:	3304      	adds	r3, #4
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	f000 fe6e 	bl	8013884 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	3301      	adds	r3, #1
 8012bac:	607b      	str	r3, [r7, #4]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2b09      	cmp	r3, #9
 8012bb2:	f77f af65 	ble.w	8012a80 <etharp_tmr+0xc>
      }
    }
  }
}
 8012bb6:	bf00      	nop
 8012bb8:	bf00      	nop
 8012bba:	3708      	adds	r7, #8
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	240083ec 	.word	0x240083ec

08012bc4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b08a      	sub	sp, #40	@ 0x28
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	460b      	mov	r3, r1
 8012bce:	607a      	str	r2, [r7, #4]
 8012bd0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012bd2:	230a      	movs	r3, #10
 8012bd4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012bd6:	230a      	movs	r3, #10
 8012bd8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012bda:	230a      	movs	r3, #10
 8012bdc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8012bde:	2300      	movs	r3, #0
 8012be0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012be2:	230a      	movs	r3, #10
 8012be4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012be6:	2300      	movs	r3, #0
 8012be8:	83bb      	strh	r3, [r7, #28]
 8012bea:	2300      	movs	r3, #0
 8012bec:	837b      	strh	r3, [r7, #26]
 8012bee:	2300      	movs	r3, #0
 8012bf0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	843b      	strh	r3, [r7, #32]
 8012bf6:	e0ae      	b.n	8012d56 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012bf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bfc:	49a6      	ldr	r1, [pc, #664]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012bfe:	4613      	mov	r3, r2
 8012c00:	005b      	lsls	r3, r3, #1
 8012c02:	4413      	add	r3, r2
 8012c04:	00db      	lsls	r3, r3, #3
 8012c06:	440b      	add	r3, r1
 8012c08:	3314      	adds	r3, #20
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012c0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012c12:	2b0a      	cmp	r3, #10
 8012c14:	d105      	bne.n	8012c22 <etharp_find_entry+0x5e>
 8012c16:	7dfb      	ldrb	r3, [r7, #23]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d102      	bne.n	8012c22 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012c1c:	8c3b      	ldrh	r3, [r7, #32]
 8012c1e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012c20:	e095      	b.n	8012d4e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012c22:	7dfb      	ldrb	r3, [r7, #23]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	f000 8092 	beq.w	8012d4e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012c2a:	7dfb      	ldrb	r3, [r7, #23]
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d009      	beq.n	8012c44 <etharp_find_entry+0x80>
 8012c30:	7dfb      	ldrb	r3, [r7, #23]
 8012c32:	2b01      	cmp	r3, #1
 8012c34:	d806      	bhi.n	8012c44 <etharp_find_entry+0x80>
 8012c36:	4b99      	ldr	r3, [pc, #612]	@ (8012e9c <etharp_find_entry+0x2d8>)
 8012c38:	f240 1223 	movw	r2, #291	@ 0x123
 8012c3c:	4998      	ldr	r1, [pc, #608]	@ (8012ea0 <etharp_find_entry+0x2dc>)
 8012c3e:	4899      	ldr	r0, [pc, #612]	@ (8012ea4 <etharp_find_entry+0x2e0>)
 8012c40:	f003 f988 	bl	8015f54 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d020      	beq.n	8012c8c <etharp_find_entry+0xc8>
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	6819      	ldr	r1, [r3, #0]
 8012c4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c52:	4891      	ldr	r0, [pc, #580]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012c54:	4613      	mov	r3, r2
 8012c56:	005b      	lsls	r3, r3, #1
 8012c58:	4413      	add	r3, r2
 8012c5a:	00db      	lsls	r3, r3, #3
 8012c5c:	4403      	add	r3, r0
 8012c5e:	3304      	adds	r3, #4
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	4299      	cmp	r1, r3
 8012c64:	d112      	bne.n	8012c8c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d00c      	beq.n	8012c86 <etharp_find_entry+0xc2>
 8012c6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c70:	4989      	ldr	r1, [pc, #548]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012c72:	4613      	mov	r3, r2
 8012c74:	005b      	lsls	r3, r3, #1
 8012c76:	4413      	add	r3, r2
 8012c78:	00db      	lsls	r3, r3, #3
 8012c7a:	440b      	add	r3, r1
 8012c7c:	3308      	adds	r3, #8
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	687a      	ldr	r2, [r7, #4]
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d102      	bne.n	8012c8c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012c86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c8a:	e100      	b.n	8012e8e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012c8c:	7dfb      	ldrb	r3, [r7, #23]
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d140      	bne.n	8012d14 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012c92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c96:	4980      	ldr	r1, [pc, #512]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012c98:	4613      	mov	r3, r2
 8012c9a:	005b      	lsls	r3, r3, #1
 8012c9c:	4413      	add	r3, r2
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	440b      	add	r3, r1
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d01a      	beq.n	8012cde <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012ca8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cac:	497a      	ldr	r1, [pc, #488]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012cae:	4613      	mov	r3, r2
 8012cb0:	005b      	lsls	r3, r3, #1
 8012cb2:	4413      	add	r3, r2
 8012cb4:	00db      	lsls	r3, r3, #3
 8012cb6:	440b      	add	r3, r1
 8012cb8:	3312      	adds	r3, #18
 8012cba:	881b      	ldrh	r3, [r3, #0]
 8012cbc:	8bba      	ldrh	r2, [r7, #28]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d845      	bhi.n	8012d4e <etharp_find_entry+0x18a>
            old_queue = i;
 8012cc2:	8c3b      	ldrh	r3, [r7, #32]
 8012cc4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012cc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cca:	4973      	ldr	r1, [pc, #460]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012ccc:	4613      	mov	r3, r2
 8012cce:	005b      	lsls	r3, r3, #1
 8012cd0:	4413      	add	r3, r2
 8012cd2:	00db      	lsls	r3, r3, #3
 8012cd4:	440b      	add	r3, r1
 8012cd6:	3312      	adds	r3, #18
 8012cd8:	881b      	ldrh	r3, [r3, #0]
 8012cda:	83bb      	strh	r3, [r7, #28]
 8012cdc:	e037      	b.n	8012d4e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012cde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ce2:	496d      	ldr	r1, [pc, #436]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012ce4:	4613      	mov	r3, r2
 8012ce6:	005b      	lsls	r3, r3, #1
 8012ce8:	4413      	add	r3, r2
 8012cea:	00db      	lsls	r3, r3, #3
 8012cec:	440b      	add	r3, r1
 8012cee:	3312      	adds	r3, #18
 8012cf0:	881b      	ldrh	r3, [r3, #0]
 8012cf2:	8b7a      	ldrh	r2, [r7, #26]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d82a      	bhi.n	8012d4e <etharp_find_entry+0x18a>
            old_pending = i;
 8012cf8:	8c3b      	ldrh	r3, [r7, #32]
 8012cfa:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012cfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d00:	4965      	ldr	r1, [pc, #404]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012d02:	4613      	mov	r3, r2
 8012d04:	005b      	lsls	r3, r3, #1
 8012d06:	4413      	add	r3, r2
 8012d08:	00db      	lsls	r3, r3, #3
 8012d0a:	440b      	add	r3, r1
 8012d0c:	3312      	adds	r3, #18
 8012d0e:	881b      	ldrh	r3, [r3, #0]
 8012d10:	837b      	strh	r3, [r7, #26]
 8012d12:	e01c      	b.n	8012d4e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012d14:	7dfb      	ldrb	r3, [r7, #23]
 8012d16:	2b01      	cmp	r3, #1
 8012d18:	d919      	bls.n	8012d4e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012d1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d1e:	495e      	ldr	r1, [pc, #376]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012d20:	4613      	mov	r3, r2
 8012d22:	005b      	lsls	r3, r3, #1
 8012d24:	4413      	add	r3, r2
 8012d26:	00db      	lsls	r3, r3, #3
 8012d28:	440b      	add	r3, r1
 8012d2a:	3312      	adds	r3, #18
 8012d2c:	881b      	ldrh	r3, [r3, #0]
 8012d2e:	8b3a      	ldrh	r2, [r7, #24]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d80c      	bhi.n	8012d4e <etharp_find_entry+0x18a>
            old_stable = i;
 8012d34:	8c3b      	ldrh	r3, [r7, #32]
 8012d36:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012d38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d3c:	4956      	ldr	r1, [pc, #344]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012d3e:	4613      	mov	r3, r2
 8012d40:	005b      	lsls	r3, r3, #1
 8012d42:	4413      	add	r3, r2
 8012d44:	00db      	lsls	r3, r3, #3
 8012d46:	440b      	add	r3, r1
 8012d48:	3312      	adds	r3, #18
 8012d4a:	881b      	ldrh	r3, [r3, #0]
 8012d4c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d4e:	8c3b      	ldrh	r3, [r7, #32]
 8012d50:	3301      	adds	r3, #1
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	843b      	strh	r3, [r7, #32]
 8012d56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012d5a:	2b09      	cmp	r3, #9
 8012d5c:	f77f af4c 	ble.w	8012bf8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012d60:	7afb      	ldrb	r3, [r7, #11]
 8012d62:	f003 0302 	and.w	r3, r3, #2
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d108      	bne.n	8012d7c <etharp_find_entry+0x1b8>
 8012d6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012d6e:	2b0a      	cmp	r3, #10
 8012d70:	d107      	bne.n	8012d82 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012d72:	7afb      	ldrb	r3, [r7, #11]
 8012d74:	f003 0301 	and.w	r3, r3, #1
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d102      	bne.n	8012d82 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d80:	e085      	b.n	8012e8e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012d82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012d86:	2b09      	cmp	r3, #9
 8012d88:	dc02      	bgt.n	8012d90 <etharp_find_entry+0x1cc>
    i = empty;
 8012d8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012d8c:	843b      	strh	r3, [r7, #32]
 8012d8e:	e039      	b.n	8012e04 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012d90:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012d94:	2b09      	cmp	r3, #9
 8012d96:	dc14      	bgt.n	8012dc2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012d98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012d9a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012d9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012da0:	493d      	ldr	r1, [pc, #244]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012da2:	4613      	mov	r3, r2
 8012da4:	005b      	lsls	r3, r3, #1
 8012da6:	4413      	add	r3, r2
 8012da8:	00db      	lsls	r3, r3, #3
 8012daa:	440b      	add	r3, r1
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d018      	beq.n	8012de4 <etharp_find_entry+0x220>
 8012db2:	4b3a      	ldr	r3, [pc, #232]	@ (8012e9c <etharp_find_entry+0x2d8>)
 8012db4:	f240 126d 	movw	r2, #365	@ 0x16d
 8012db8:	493b      	ldr	r1, [pc, #236]	@ (8012ea8 <etharp_find_entry+0x2e4>)
 8012dba:	483a      	ldr	r0, [pc, #232]	@ (8012ea4 <etharp_find_entry+0x2e0>)
 8012dbc:	f003 f8ca 	bl	8015f54 <iprintf>
 8012dc0:	e010      	b.n	8012de4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012dc2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012dc6:	2b09      	cmp	r3, #9
 8012dc8:	dc02      	bgt.n	8012dd0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012dca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012dcc:	843b      	strh	r3, [r7, #32]
 8012dce:	e009      	b.n	8012de4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012dd0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012dd4:	2b09      	cmp	r3, #9
 8012dd6:	dc02      	bgt.n	8012dde <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012dd8:	8bfb      	ldrh	r3, [r7, #30]
 8012dda:	843b      	strh	r3, [r7, #32]
 8012ddc:	e002      	b.n	8012de4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012dde:	f04f 33ff 	mov.w	r3, #4294967295
 8012de2:	e054      	b.n	8012e8e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012de4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012de8:	2b09      	cmp	r3, #9
 8012dea:	dd06      	ble.n	8012dfa <etharp_find_entry+0x236>
 8012dec:	4b2b      	ldr	r3, [pc, #172]	@ (8012e9c <etharp_find_entry+0x2d8>)
 8012dee:	f240 127f 	movw	r2, #383	@ 0x17f
 8012df2:	492e      	ldr	r1, [pc, #184]	@ (8012eac <etharp_find_entry+0x2e8>)
 8012df4:	482b      	ldr	r0, [pc, #172]	@ (8012ea4 <etharp_find_entry+0x2e0>)
 8012df6:	f003 f8ad 	bl	8015f54 <iprintf>
    etharp_free_entry(i);
 8012dfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7ff fe06 	bl	8012a10 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012e04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012e08:	2b09      	cmp	r3, #9
 8012e0a:	dd06      	ble.n	8012e1a <etharp_find_entry+0x256>
 8012e0c:	4b23      	ldr	r3, [pc, #140]	@ (8012e9c <etharp_find_entry+0x2d8>)
 8012e0e:	f240 1283 	movw	r2, #387	@ 0x183
 8012e12:	4926      	ldr	r1, [pc, #152]	@ (8012eac <etharp_find_entry+0x2e8>)
 8012e14:	4823      	ldr	r0, [pc, #140]	@ (8012ea4 <etharp_find_entry+0x2e0>)
 8012e16:	f003 f89d 	bl	8015f54 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012e1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e1e:	491e      	ldr	r1, [pc, #120]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012e20:	4613      	mov	r3, r2
 8012e22:	005b      	lsls	r3, r3, #1
 8012e24:	4413      	add	r3, r2
 8012e26:	00db      	lsls	r3, r3, #3
 8012e28:	440b      	add	r3, r1
 8012e2a:	3314      	adds	r3, #20
 8012e2c:	781b      	ldrb	r3, [r3, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d006      	beq.n	8012e40 <etharp_find_entry+0x27c>
 8012e32:	4b1a      	ldr	r3, [pc, #104]	@ (8012e9c <etharp_find_entry+0x2d8>)
 8012e34:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012e38:	491d      	ldr	r1, [pc, #116]	@ (8012eb0 <etharp_find_entry+0x2ec>)
 8012e3a:	481a      	ldr	r0, [pc, #104]	@ (8012ea4 <etharp_find_entry+0x2e0>)
 8012e3c:	f003 f88a 	bl	8015f54 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d00b      	beq.n	8012e5e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012e46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	6819      	ldr	r1, [r3, #0]
 8012e4e:	4812      	ldr	r0, [pc, #72]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012e50:	4613      	mov	r3, r2
 8012e52:	005b      	lsls	r3, r3, #1
 8012e54:	4413      	add	r3, r2
 8012e56:	00db      	lsls	r3, r3, #3
 8012e58:	4403      	add	r3, r0
 8012e5a:	3304      	adds	r3, #4
 8012e5c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012e5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e62:	490d      	ldr	r1, [pc, #52]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012e64:	4613      	mov	r3, r2
 8012e66:	005b      	lsls	r3, r3, #1
 8012e68:	4413      	add	r3, r2
 8012e6a:	00db      	lsls	r3, r3, #3
 8012e6c:	440b      	add	r3, r1
 8012e6e:	3312      	adds	r3, #18
 8012e70:	2200      	movs	r2, #0
 8012e72:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012e74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e78:	4907      	ldr	r1, [pc, #28]	@ (8012e98 <etharp_find_entry+0x2d4>)
 8012e7a:	4613      	mov	r3, r2
 8012e7c:	005b      	lsls	r3, r3, #1
 8012e7e:	4413      	add	r3, r2
 8012e80:	00db      	lsls	r3, r3, #3
 8012e82:	440b      	add	r3, r1
 8012e84:	3308      	adds	r3, #8
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012e8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3728      	adds	r7, #40	@ 0x28
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	240083ec 	.word	0x240083ec
 8012e9c:	0801ba90 	.word	0x0801ba90
 8012ea0:	0801bac8 	.word	0x0801bac8
 8012ea4:	0801bb08 	.word	0x0801bb08
 8012ea8:	0801bb30 	.word	0x0801bb30
 8012eac:	0801bb48 	.word	0x0801bb48
 8012eb0:	0801bb5c 	.word	0x0801bb5c

08012eb4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b088      	sub	sp, #32
 8012eb8:	af02      	add	r7, sp, #8
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
 8012ec0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012ec8:	2b06      	cmp	r3, #6
 8012eca:	d006      	beq.n	8012eda <etharp_update_arp_entry+0x26>
 8012ecc:	4b48      	ldr	r3, [pc, #288]	@ (8012ff0 <etharp_update_arp_entry+0x13c>)
 8012ece:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012ed2:	4948      	ldr	r1, [pc, #288]	@ (8012ff4 <etharp_update_arp_entry+0x140>)
 8012ed4:	4848      	ldr	r0, [pc, #288]	@ (8012ff8 <etharp_update_arp_entry+0x144>)
 8012ed6:	f003 f83d 	bl	8015f54 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d012      	beq.n	8012f06 <etharp_update_arp_entry+0x52>
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d00e      	beq.n	8012f06 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	68f9      	ldr	r1, [r7, #12]
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f001 f924 	bl	801413c <ip4_addr_isbroadcast_u32>
 8012ef4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d105      	bne.n	8012f06 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012f02:	2be0      	cmp	r3, #224	@ 0xe0
 8012f04:	d102      	bne.n	8012f0c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012f06:	f06f 030f 	mvn.w	r3, #15
 8012f0a:	e06c      	b.n	8012fe6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012f0c:	78fb      	ldrb	r3, [r7, #3]
 8012f0e:	68fa      	ldr	r2, [r7, #12]
 8012f10:	4619      	mov	r1, r3
 8012f12:	68b8      	ldr	r0, [r7, #8]
 8012f14:	f7ff fe56 	bl	8012bc4 <etharp_find_entry>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012f1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	da02      	bge.n	8012f2a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012f24:	8afb      	ldrh	r3, [r7, #22]
 8012f26:	b25b      	sxtb	r3, r3
 8012f28:	e05d      	b.n	8012fe6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012f2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f2e:	4933      	ldr	r1, [pc, #204]	@ (8012ffc <etharp_update_arp_entry+0x148>)
 8012f30:	4613      	mov	r3, r2
 8012f32:	005b      	lsls	r3, r3, #1
 8012f34:	4413      	add	r3, r2
 8012f36:	00db      	lsls	r3, r3, #3
 8012f38:	440b      	add	r3, r1
 8012f3a:	3314      	adds	r3, #20
 8012f3c:	2202      	movs	r2, #2
 8012f3e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012f40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f44:	492d      	ldr	r1, [pc, #180]	@ (8012ffc <etharp_update_arp_entry+0x148>)
 8012f46:	4613      	mov	r3, r2
 8012f48:	005b      	lsls	r3, r3, #1
 8012f4a:	4413      	add	r3, r2
 8012f4c:	00db      	lsls	r3, r3, #3
 8012f4e:	440b      	add	r3, r1
 8012f50:	3308      	adds	r3, #8
 8012f52:	68fa      	ldr	r2, [r7, #12]
 8012f54:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012f56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f5a:	4613      	mov	r3, r2
 8012f5c:	005b      	lsls	r3, r3, #1
 8012f5e:	4413      	add	r3, r2
 8012f60:	00db      	lsls	r3, r3, #3
 8012f62:	3308      	adds	r3, #8
 8012f64:	4a25      	ldr	r2, [pc, #148]	@ (8012ffc <etharp_update_arp_entry+0x148>)
 8012f66:	4413      	add	r3, r2
 8012f68:	3304      	adds	r3, #4
 8012f6a:	2206      	movs	r2, #6
 8012f6c:	6879      	ldr	r1, [r7, #4]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f003 fa15 	bl	801639e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012f74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f78:	4920      	ldr	r1, [pc, #128]	@ (8012ffc <etharp_update_arp_entry+0x148>)
 8012f7a:	4613      	mov	r3, r2
 8012f7c:	005b      	lsls	r3, r3, #1
 8012f7e:	4413      	add	r3, r2
 8012f80:	00db      	lsls	r3, r3, #3
 8012f82:	440b      	add	r3, r1
 8012f84:	3312      	adds	r3, #18
 8012f86:	2200      	movs	r2, #0
 8012f88:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012f8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f8e:	491b      	ldr	r1, [pc, #108]	@ (8012ffc <etharp_update_arp_entry+0x148>)
 8012f90:	4613      	mov	r3, r2
 8012f92:	005b      	lsls	r3, r3, #1
 8012f94:	4413      	add	r3, r2
 8012f96:	00db      	lsls	r3, r3, #3
 8012f98:	440b      	add	r3, r1
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d021      	beq.n	8012fe4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012fa0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012fa4:	4915      	ldr	r1, [pc, #84]	@ (8012ffc <etharp_update_arp_entry+0x148>)
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	005b      	lsls	r3, r3, #1
 8012faa:	4413      	add	r3, r2
 8012fac:	00db      	lsls	r3, r3, #3
 8012fae:	440b      	add	r3, r1
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012fb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012fb8:	4910      	ldr	r1, [pc, #64]	@ (8012ffc <etharp_update_arp_entry+0x148>)
 8012fba:	4613      	mov	r3, r2
 8012fbc:	005b      	lsls	r3, r3, #1
 8012fbe:	4413      	add	r3, r2
 8012fc0:	00db      	lsls	r3, r3, #3
 8012fc2:	440b      	add	r3, r1
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012fce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012fd2:	9300      	str	r3, [sp, #0]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6939      	ldr	r1, [r7, #16]
 8012fd8:	68f8      	ldr	r0, [r7, #12]
 8012fda:	f001 ffbd 	bl	8014f58 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012fde:	6938      	ldr	r0, [r7, #16]
 8012fe0:	f7f9 fcf2 	bl	800c9c8 <pbuf_free>
  }
  return ERR_OK;
 8012fe4:	2300      	movs	r3, #0
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3718      	adds	r7, #24
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	0801ba90 	.word	0x0801ba90
 8012ff4:	0801bb88 	.word	0x0801bb88
 8012ff8:	0801bb08 	.word	0x0801bb08
 8012ffc:	240083ec 	.word	0x240083ec

08013000 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013008:	2300      	movs	r3, #0
 801300a:	60fb      	str	r3, [r7, #12]
 801300c:	e01e      	b.n	801304c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801300e:	4913      	ldr	r1, [pc, #76]	@ (801305c <etharp_cleanup_netif+0x5c>)
 8013010:	68fa      	ldr	r2, [r7, #12]
 8013012:	4613      	mov	r3, r2
 8013014:	005b      	lsls	r3, r3, #1
 8013016:	4413      	add	r3, r2
 8013018:	00db      	lsls	r3, r3, #3
 801301a:	440b      	add	r3, r1
 801301c:	3314      	adds	r3, #20
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013022:	7afb      	ldrb	r3, [r7, #11]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d00e      	beq.n	8013046 <etharp_cleanup_netif+0x46>
 8013028:	490c      	ldr	r1, [pc, #48]	@ (801305c <etharp_cleanup_netif+0x5c>)
 801302a:	68fa      	ldr	r2, [r7, #12]
 801302c:	4613      	mov	r3, r2
 801302e:	005b      	lsls	r3, r3, #1
 8013030:	4413      	add	r3, r2
 8013032:	00db      	lsls	r3, r3, #3
 8013034:	440b      	add	r3, r1
 8013036:	3308      	adds	r3, #8
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	687a      	ldr	r2, [r7, #4]
 801303c:	429a      	cmp	r2, r3
 801303e:	d102      	bne.n	8013046 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013040:	68f8      	ldr	r0, [r7, #12]
 8013042:	f7ff fce5 	bl	8012a10 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	3301      	adds	r3, #1
 801304a:	60fb      	str	r3, [r7, #12]
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	2b09      	cmp	r3, #9
 8013050:	dddd      	ble.n	801300e <etharp_cleanup_netif+0xe>
    }
  }
}
 8013052:	bf00      	nop
 8013054:	bf00      	nop
 8013056:	3710      	adds	r7, #16
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}
 801305c:	240083ec 	.word	0x240083ec

08013060 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013060:	b5b0      	push	{r4, r5, r7, lr}
 8013062:	b08a      	sub	sp, #40	@ 0x28
 8013064:	af04      	add	r7, sp, #16
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d107      	bne.n	8013080 <etharp_input+0x20>
 8013070:	4b3d      	ldr	r3, [pc, #244]	@ (8013168 <etharp_input+0x108>)
 8013072:	f240 228a 	movw	r2, #650	@ 0x28a
 8013076:	493d      	ldr	r1, [pc, #244]	@ (801316c <etharp_input+0x10c>)
 8013078:	483d      	ldr	r0, [pc, #244]	@ (8013170 <etharp_input+0x110>)
 801307a:	f002 ff6b 	bl	8015f54 <iprintf>
 801307e:	e06f      	b.n	8013160 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	881b      	ldrh	r3, [r3, #0]
 801308a:	b29b      	uxth	r3, r3
 801308c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013090:	d10c      	bne.n	80130ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013096:	2b06      	cmp	r3, #6
 8013098:	d108      	bne.n	80130ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801309e:	2b04      	cmp	r3, #4
 80130a0:	d104      	bne.n	80130ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	885b      	ldrh	r3, [r3, #2]
 80130a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80130a8:	2b08      	cmp	r3, #8
 80130aa:	d003      	beq.n	80130b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f7f9 fc8b 	bl	800c9c8 <pbuf_free>
    return;
 80130b2:	e055      	b.n	8013160 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	330e      	adds	r3, #14
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	3318      	adds	r3, #24
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	3304      	adds	r3, #4
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d102      	bne.n	80130d4 <etharp_input+0x74>
    for_us = 0;
 80130ce:	2300      	movs	r3, #0
 80130d0:	75fb      	strb	r3, [r7, #23]
 80130d2:	e009      	b.n	80130e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80130d4:	68ba      	ldr	r2, [r7, #8]
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	3304      	adds	r3, #4
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	429a      	cmp	r2, r3
 80130de:	bf0c      	ite	eq
 80130e0:	2301      	moveq	r3, #1
 80130e2:	2300      	movne	r3, #0
 80130e4:	b2db      	uxtb	r3, r3
 80130e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	f103 0208 	add.w	r2, r3, #8
 80130ee:	7dfb      	ldrb	r3, [r7, #23]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d001      	beq.n	80130f8 <etharp_input+0x98>
 80130f4:	2301      	movs	r3, #1
 80130f6:	e000      	b.n	80130fa <etharp_input+0x9a>
 80130f8:	2302      	movs	r3, #2
 80130fa:	f107 010c 	add.w	r1, r7, #12
 80130fe:	6838      	ldr	r0, [r7, #0]
 8013100:	f7ff fed8 	bl	8012eb4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013104:	693b      	ldr	r3, [r7, #16]
 8013106:	88db      	ldrh	r3, [r3, #6]
 8013108:	b29b      	uxth	r3, r3
 801310a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801310e:	d003      	beq.n	8013118 <etharp_input+0xb8>
 8013110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013114:	d01e      	beq.n	8013154 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013116:	e020      	b.n	801315a <etharp_input+0xfa>
      if (for_us) {
 8013118:	7dfb      	ldrb	r3, [r7, #23]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d01c      	beq.n	8013158 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013134:	693a      	ldr	r2, [r7, #16]
 8013136:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013138:	2102      	movs	r1, #2
 801313a:	9103      	str	r1, [sp, #12]
 801313c:	f107 010c 	add.w	r1, r7, #12
 8013140:	9102      	str	r1, [sp, #8]
 8013142:	9201      	str	r2, [sp, #4]
 8013144:	9300      	str	r3, [sp, #0]
 8013146:	462b      	mov	r3, r5
 8013148:	4622      	mov	r2, r4
 801314a:	4601      	mov	r1, r0
 801314c:	6838      	ldr	r0, [r7, #0]
 801314e:	f000 faeb 	bl	8013728 <etharp_raw>
      break;
 8013152:	e001      	b.n	8013158 <etharp_input+0xf8>
      break;
 8013154:	bf00      	nop
 8013156:	e000      	b.n	801315a <etharp_input+0xfa>
      break;
 8013158:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f7f9 fc34 	bl	800c9c8 <pbuf_free>
}
 8013160:	3718      	adds	r7, #24
 8013162:	46bd      	mov	sp, r7
 8013164:	bdb0      	pop	{r4, r5, r7, pc}
 8013166:	bf00      	nop
 8013168:	0801ba90 	.word	0x0801ba90
 801316c:	0801bbe0 	.word	0x0801bbe0
 8013170:	0801bb08 	.word	0x0801bb08

08013174 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b086      	sub	sp, #24
 8013178:	af02      	add	r7, sp, #8
 801317a:	60f8      	str	r0, [r7, #12]
 801317c:	60b9      	str	r1, [r7, #8]
 801317e:	4613      	mov	r3, r2
 8013180:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013182:	79fa      	ldrb	r2, [r7, #7]
 8013184:	4944      	ldr	r1, [pc, #272]	@ (8013298 <etharp_output_to_arp_index+0x124>)
 8013186:	4613      	mov	r3, r2
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	4413      	add	r3, r2
 801318c:	00db      	lsls	r3, r3, #3
 801318e:	440b      	add	r3, r1
 8013190:	3314      	adds	r3, #20
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	2b01      	cmp	r3, #1
 8013196:	d806      	bhi.n	80131a6 <etharp_output_to_arp_index+0x32>
 8013198:	4b40      	ldr	r3, [pc, #256]	@ (801329c <etharp_output_to_arp_index+0x128>)
 801319a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801319e:	4940      	ldr	r1, [pc, #256]	@ (80132a0 <etharp_output_to_arp_index+0x12c>)
 80131a0:	4840      	ldr	r0, [pc, #256]	@ (80132a4 <etharp_output_to_arp_index+0x130>)
 80131a2:	f002 fed7 	bl	8015f54 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80131a6:	79fa      	ldrb	r2, [r7, #7]
 80131a8:	493b      	ldr	r1, [pc, #236]	@ (8013298 <etharp_output_to_arp_index+0x124>)
 80131aa:	4613      	mov	r3, r2
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	4413      	add	r3, r2
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	440b      	add	r3, r1
 80131b4:	3314      	adds	r3, #20
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	2b02      	cmp	r3, #2
 80131ba:	d153      	bne.n	8013264 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80131bc:	79fa      	ldrb	r2, [r7, #7]
 80131be:	4936      	ldr	r1, [pc, #216]	@ (8013298 <etharp_output_to_arp_index+0x124>)
 80131c0:	4613      	mov	r3, r2
 80131c2:	005b      	lsls	r3, r3, #1
 80131c4:	4413      	add	r3, r2
 80131c6:	00db      	lsls	r3, r3, #3
 80131c8:	440b      	add	r3, r1
 80131ca:	3312      	adds	r3, #18
 80131cc:	881b      	ldrh	r3, [r3, #0]
 80131ce:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80131d2:	d919      	bls.n	8013208 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80131d4:	79fa      	ldrb	r2, [r7, #7]
 80131d6:	4613      	mov	r3, r2
 80131d8:	005b      	lsls	r3, r3, #1
 80131da:	4413      	add	r3, r2
 80131dc:	00db      	lsls	r3, r3, #3
 80131de:	4a2e      	ldr	r2, [pc, #184]	@ (8013298 <etharp_output_to_arp_index+0x124>)
 80131e0:	4413      	add	r3, r2
 80131e2:	3304      	adds	r3, #4
 80131e4:	4619      	mov	r1, r3
 80131e6:	68f8      	ldr	r0, [r7, #12]
 80131e8:	f000 fb4c 	bl	8013884 <etharp_request>
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d138      	bne.n	8013264 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80131f2:	79fa      	ldrb	r2, [r7, #7]
 80131f4:	4928      	ldr	r1, [pc, #160]	@ (8013298 <etharp_output_to_arp_index+0x124>)
 80131f6:	4613      	mov	r3, r2
 80131f8:	005b      	lsls	r3, r3, #1
 80131fa:	4413      	add	r3, r2
 80131fc:	00db      	lsls	r3, r3, #3
 80131fe:	440b      	add	r3, r1
 8013200:	3314      	adds	r3, #20
 8013202:	2203      	movs	r2, #3
 8013204:	701a      	strb	r2, [r3, #0]
 8013206:	e02d      	b.n	8013264 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013208:	79fa      	ldrb	r2, [r7, #7]
 801320a:	4923      	ldr	r1, [pc, #140]	@ (8013298 <etharp_output_to_arp_index+0x124>)
 801320c:	4613      	mov	r3, r2
 801320e:	005b      	lsls	r3, r3, #1
 8013210:	4413      	add	r3, r2
 8013212:	00db      	lsls	r3, r3, #3
 8013214:	440b      	add	r3, r1
 8013216:	3312      	adds	r3, #18
 8013218:	881b      	ldrh	r3, [r3, #0]
 801321a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801321e:	d321      	bcc.n	8013264 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013220:	79fa      	ldrb	r2, [r7, #7]
 8013222:	4613      	mov	r3, r2
 8013224:	005b      	lsls	r3, r3, #1
 8013226:	4413      	add	r3, r2
 8013228:	00db      	lsls	r3, r3, #3
 801322a:	4a1b      	ldr	r2, [pc, #108]	@ (8013298 <etharp_output_to_arp_index+0x124>)
 801322c:	4413      	add	r3, r2
 801322e:	1d19      	adds	r1, r3, #4
 8013230:	79fa      	ldrb	r2, [r7, #7]
 8013232:	4613      	mov	r3, r2
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	4413      	add	r3, r2
 8013238:	00db      	lsls	r3, r3, #3
 801323a:	3308      	adds	r3, #8
 801323c:	4a16      	ldr	r2, [pc, #88]	@ (8013298 <etharp_output_to_arp_index+0x124>)
 801323e:	4413      	add	r3, r2
 8013240:	3304      	adds	r3, #4
 8013242:	461a      	mov	r2, r3
 8013244:	68f8      	ldr	r0, [r7, #12]
 8013246:	f000 fafb 	bl	8013840 <etharp_request_dst>
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	d109      	bne.n	8013264 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013250:	79fa      	ldrb	r2, [r7, #7]
 8013252:	4911      	ldr	r1, [pc, #68]	@ (8013298 <etharp_output_to_arp_index+0x124>)
 8013254:	4613      	mov	r3, r2
 8013256:	005b      	lsls	r3, r3, #1
 8013258:	4413      	add	r3, r2
 801325a:	00db      	lsls	r3, r3, #3
 801325c:	440b      	add	r3, r1
 801325e:	3314      	adds	r3, #20
 8013260:	2203      	movs	r2, #3
 8013262:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801326a:	79fa      	ldrb	r2, [r7, #7]
 801326c:	4613      	mov	r3, r2
 801326e:	005b      	lsls	r3, r3, #1
 8013270:	4413      	add	r3, r2
 8013272:	00db      	lsls	r3, r3, #3
 8013274:	3308      	adds	r3, #8
 8013276:	4a08      	ldr	r2, [pc, #32]	@ (8013298 <etharp_output_to_arp_index+0x124>)
 8013278:	4413      	add	r3, r2
 801327a:	3304      	adds	r3, #4
 801327c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013280:	9200      	str	r2, [sp, #0]
 8013282:	460a      	mov	r2, r1
 8013284:	68b9      	ldr	r1, [r7, #8]
 8013286:	68f8      	ldr	r0, [r7, #12]
 8013288:	f001 fe66 	bl	8014f58 <ethernet_output>
 801328c:	4603      	mov	r3, r0
}
 801328e:	4618      	mov	r0, r3
 8013290:	3710      	adds	r7, #16
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	240083ec 	.word	0x240083ec
 801329c:	0801ba90 	.word	0x0801ba90
 80132a0:	0801bc00 	.word	0x0801bc00
 80132a4:	0801bb08 	.word	0x0801bb08

080132a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b08a      	sub	sp, #40	@ 0x28
 80132ac:	af02      	add	r7, sp, #8
 80132ae:	60f8      	str	r0, [r7, #12]
 80132b0:	60b9      	str	r1, [r7, #8]
 80132b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d106      	bne.n	80132cc <etharp_output+0x24>
 80132be:	4b73      	ldr	r3, [pc, #460]	@ (801348c <etharp_output+0x1e4>)
 80132c0:	f240 321e 	movw	r2, #798	@ 0x31e
 80132c4:	4972      	ldr	r1, [pc, #456]	@ (8013490 <etharp_output+0x1e8>)
 80132c6:	4873      	ldr	r0, [pc, #460]	@ (8013494 <etharp_output+0x1ec>)
 80132c8:	f002 fe44 	bl	8015f54 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d106      	bne.n	80132e0 <etharp_output+0x38>
 80132d2:	4b6e      	ldr	r3, [pc, #440]	@ (801348c <etharp_output+0x1e4>)
 80132d4:	f240 321f 	movw	r2, #799	@ 0x31f
 80132d8:	496f      	ldr	r1, [pc, #444]	@ (8013498 <etharp_output+0x1f0>)
 80132da:	486e      	ldr	r0, [pc, #440]	@ (8013494 <etharp_output+0x1ec>)
 80132dc:	f002 fe3a 	bl	8015f54 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d106      	bne.n	80132f4 <etharp_output+0x4c>
 80132e6:	4b69      	ldr	r3, [pc, #420]	@ (801348c <etharp_output+0x1e4>)
 80132e8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80132ec:	496b      	ldr	r1, [pc, #428]	@ (801349c <etharp_output+0x1f4>)
 80132ee:	4869      	ldr	r0, [pc, #420]	@ (8013494 <etharp_output+0x1ec>)
 80132f0:	f002 fe30 	bl	8015f54 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	68f9      	ldr	r1, [r7, #12]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f000 ff1e 	bl	801413c <ip4_addr_isbroadcast_u32>
 8013300:	4603      	mov	r3, r0
 8013302:	2b00      	cmp	r3, #0
 8013304:	d002      	beq.n	801330c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013306:	4b66      	ldr	r3, [pc, #408]	@ (80134a0 <etharp_output+0x1f8>)
 8013308:	61fb      	str	r3, [r7, #28]
 801330a:	e0af      	b.n	801346c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013314:	2be0      	cmp	r3, #224	@ 0xe0
 8013316:	d118      	bne.n	801334a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013318:	2301      	movs	r3, #1
 801331a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801331c:	2300      	movs	r3, #0
 801331e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013320:	235e      	movs	r3, #94	@ 0x5e
 8013322:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	3301      	adds	r3, #1
 8013328:	781b      	ldrb	r3, [r3, #0]
 801332a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801332e:	b2db      	uxtb	r3, r3
 8013330:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	3302      	adds	r3, #2
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	3303      	adds	r3, #3
 801333e:	781b      	ldrb	r3, [r3, #0]
 8013340:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013342:	f107 0310 	add.w	r3, r7, #16
 8013346:	61fb      	str	r3, [r7, #28]
 8013348:	e090      	b.n	801346c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	3304      	adds	r3, #4
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	405a      	eors	r2, r3
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	3308      	adds	r3, #8
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	4013      	ands	r3, r2
 801335e:	2b00      	cmp	r3, #0
 8013360:	d012      	beq.n	8013388 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013368:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801336c:	4293      	cmp	r3, r2
 801336e:	d00b      	beq.n	8013388 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	330c      	adds	r3, #12
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d003      	beq.n	8013382 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	330c      	adds	r3, #12
 801337e:	61bb      	str	r3, [r7, #24]
 8013380:	e002      	b.n	8013388 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013382:	f06f 0303 	mvn.w	r3, #3
 8013386:	e07d      	b.n	8013484 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013388:	4b46      	ldr	r3, [pc, #280]	@ (80134a4 <etharp_output+0x1fc>)
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	4619      	mov	r1, r3
 801338e:	4a46      	ldr	r2, [pc, #280]	@ (80134a8 <etharp_output+0x200>)
 8013390:	460b      	mov	r3, r1
 8013392:	005b      	lsls	r3, r3, #1
 8013394:	440b      	add	r3, r1
 8013396:	00db      	lsls	r3, r3, #3
 8013398:	4413      	add	r3, r2
 801339a:	3314      	adds	r3, #20
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d925      	bls.n	80133ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80133a2:	4b40      	ldr	r3, [pc, #256]	@ (80134a4 <etharp_output+0x1fc>)
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	4619      	mov	r1, r3
 80133a8:	4a3f      	ldr	r2, [pc, #252]	@ (80134a8 <etharp_output+0x200>)
 80133aa:	460b      	mov	r3, r1
 80133ac:	005b      	lsls	r3, r3, #1
 80133ae:	440b      	add	r3, r1
 80133b0:	00db      	lsls	r3, r3, #3
 80133b2:	4413      	add	r3, r2
 80133b4:	3308      	adds	r3, #8
 80133b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d117      	bne.n	80133ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	681a      	ldr	r2, [r3, #0]
 80133c2:	4b38      	ldr	r3, [pc, #224]	@ (80134a4 <etharp_output+0x1fc>)
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	4618      	mov	r0, r3
 80133c8:	4937      	ldr	r1, [pc, #220]	@ (80134a8 <etharp_output+0x200>)
 80133ca:	4603      	mov	r3, r0
 80133cc:	005b      	lsls	r3, r3, #1
 80133ce:	4403      	add	r3, r0
 80133d0:	00db      	lsls	r3, r3, #3
 80133d2:	440b      	add	r3, r1
 80133d4:	3304      	adds	r3, #4
 80133d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80133d8:	429a      	cmp	r2, r3
 80133da:	d108      	bne.n	80133ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80133dc:	4b31      	ldr	r3, [pc, #196]	@ (80134a4 <etharp_output+0x1fc>)
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	461a      	mov	r2, r3
 80133e2:	68b9      	ldr	r1, [r7, #8]
 80133e4:	68f8      	ldr	r0, [r7, #12]
 80133e6:	f7ff fec5 	bl	8013174 <etharp_output_to_arp_index>
 80133ea:	4603      	mov	r3, r0
 80133ec:	e04a      	b.n	8013484 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80133ee:	2300      	movs	r3, #0
 80133f0:	75fb      	strb	r3, [r7, #23]
 80133f2:	e031      	b.n	8013458 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80133f4:	7dfa      	ldrb	r2, [r7, #23]
 80133f6:	492c      	ldr	r1, [pc, #176]	@ (80134a8 <etharp_output+0x200>)
 80133f8:	4613      	mov	r3, r2
 80133fa:	005b      	lsls	r3, r3, #1
 80133fc:	4413      	add	r3, r2
 80133fe:	00db      	lsls	r3, r3, #3
 8013400:	440b      	add	r3, r1
 8013402:	3314      	adds	r3, #20
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	2b01      	cmp	r3, #1
 8013408:	d923      	bls.n	8013452 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801340a:	7dfa      	ldrb	r2, [r7, #23]
 801340c:	4926      	ldr	r1, [pc, #152]	@ (80134a8 <etharp_output+0x200>)
 801340e:	4613      	mov	r3, r2
 8013410:	005b      	lsls	r3, r3, #1
 8013412:	4413      	add	r3, r2
 8013414:	00db      	lsls	r3, r3, #3
 8013416:	440b      	add	r3, r1
 8013418:	3308      	adds	r3, #8
 801341a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801341c:	68fa      	ldr	r2, [r7, #12]
 801341e:	429a      	cmp	r2, r3
 8013420:	d117      	bne.n	8013452 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	6819      	ldr	r1, [r3, #0]
 8013426:	7dfa      	ldrb	r2, [r7, #23]
 8013428:	481f      	ldr	r0, [pc, #124]	@ (80134a8 <etharp_output+0x200>)
 801342a:	4613      	mov	r3, r2
 801342c:	005b      	lsls	r3, r3, #1
 801342e:	4413      	add	r3, r2
 8013430:	00db      	lsls	r3, r3, #3
 8013432:	4403      	add	r3, r0
 8013434:	3304      	adds	r3, #4
 8013436:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013438:	4299      	cmp	r1, r3
 801343a:	d10a      	bne.n	8013452 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801343c:	4a19      	ldr	r2, [pc, #100]	@ (80134a4 <etharp_output+0x1fc>)
 801343e:	7dfb      	ldrb	r3, [r7, #23]
 8013440:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013442:	7dfb      	ldrb	r3, [r7, #23]
 8013444:	461a      	mov	r2, r3
 8013446:	68b9      	ldr	r1, [r7, #8]
 8013448:	68f8      	ldr	r0, [r7, #12]
 801344a:	f7ff fe93 	bl	8013174 <etharp_output_to_arp_index>
 801344e:	4603      	mov	r3, r0
 8013450:	e018      	b.n	8013484 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013452:	7dfb      	ldrb	r3, [r7, #23]
 8013454:	3301      	adds	r3, #1
 8013456:	75fb      	strb	r3, [r7, #23]
 8013458:	7dfb      	ldrb	r3, [r7, #23]
 801345a:	2b09      	cmp	r3, #9
 801345c:	d9ca      	bls.n	80133f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801345e:	68ba      	ldr	r2, [r7, #8]
 8013460:	69b9      	ldr	r1, [r7, #24]
 8013462:	68f8      	ldr	r0, [r7, #12]
 8013464:	f000 f822 	bl	80134ac <etharp_query>
 8013468:	4603      	mov	r3, r0
 801346a:	e00b      	b.n	8013484 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013472:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013476:	9300      	str	r3, [sp, #0]
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	68b9      	ldr	r1, [r7, #8]
 801347c:	68f8      	ldr	r0, [r7, #12]
 801347e:	f001 fd6b 	bl	8014f58 <ethernet_output>
 8013482:	4603      	mov	r3, r0
}
 8013484:	4618      	mov	r0, r3
 8013486:	3720      	adds	r7, #32
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}
 801348c:	0801ba90 	.word	0x0801ba90
 8013490:	0801bbe0 	.word	0x0801bbe0
 8013494:	0801bb08 	.word	0x0801bb08
 8013498:	0801bc30 	.word	0x0801bc30
 801349c:	0801bbd0 	.word	0x0801bbd0
 80134a0:	0801c32c 	.word	0x0801c32c
 80134a4:	240084dc 	.word	0x240084dc
 80134a8:	240083ec 	.word	0x240083ec

080134ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b08c      	sub	sp, #48	@ 0x30
 80134b0:	af02      	add	r7, sp, #8
 80134b2:	60f8      	str	r0, [r7, #12]
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	3326      	adds	r3, #38	@ 0x26
 80134bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80134be:	23ff      	movs	r3, #255	@ 0xff
 80134c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80134c4:	2300      	movs	r3, #0
 80134c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	68f9      	ldr	r1, [r7, #12]
 80134ce:	4618      	mov	r0, r3
 80134d0:	f000 fe34 	bl	801413c <ip4_addr_isbroadcast_u32>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d10c      	bne.n	80134f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80134e2:	2be0      	cmp	r3, #224	@ 0xe0
 80134e4:	d006      	beq.n	80134f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d003      	beq.n	80134f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d102      	bne.n	80134fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80134f4:	f06f 030f 	mvn.w	r3, #15
 80134f8:	e101      	b.n	80136fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80134fa:	68fa      	ldr	r2, [r7, #12]
 80134fc:	2101      	movs	r1, #1
 80134fe:	68b8      	ldr	r0, [r7, #8]
 8013500:	f7ff fb60 	bl	8012bc4 <etharp_find_entry>
 8013504:	4603      	mov	r3, r0
 8013506:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013508:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801350c:	2b00      	cmp	r3, #0
 801350e:	da02      	bge.n	8013516 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013510:	8a7b      	ldrh	r3, [r7, #18]
 8013512:	b25b      	sxtb	r3, r3
 8013514:	e0f3      	b.n	80136fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013516:	8a7b      	ldrh	r3, [r7, #18]
 8013518:	2b7e      	cmp	r3, #126	@ 0x7e
 801351a:	d906      	bls.n	801352a <etharp_query+0x7e>
 801351c:	4b7a      	ldr	r3, [pc, #488]	@ (8013708 <etharp_query+0x25c>)
 801351e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8013522:	497a      	ldr	r1, [pc, #488]	@ (801370c <etharp_query+0x260>)
 8013524:	487a      	ldr	r0, [pc, #488]	@ (8013710 <etharp_query+0x264>)
 8013526:	f002 fd15 	bl	8015f54 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801352a:	8a7b      	ldrh	r3, [r7, #18]
 801352c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801352e:	7c7a      	ldrb	r2, [r7, #17]
 8013530:	4978      	ldr	r1, [pc, #480]	@ (8013714 <etharp_query+0x268>)
 8013532:	4613      	mov	r3, r2
 8013534:	005b      	lsls	r3, r3, #1
 8013536:	4413      	add	r3, r2
 8013538:	00db      	lsls	r3, r3, #3
 801353a:	440b      	add	r3, r1
 801353c:	3314      	adds	r3, #20
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d115      	bne.n	8013570 <etharp_query+0xc4>
    is_new_entry = 1;
 8013544:	2301      	movs	r3, #1
 8013546:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013548:	7c7a      	ldrb	r2, [r7, #17]
 801354a:	4972      	ldr	r1, [pc, #456]	@ (8013714 <etharp_query+0x268>)
 801354c:	4613      	mov	r3, r2
 801354e:	005b      	lsls	r3, r3, #1
 8013550:	4413      	add	r3, r2
 8013552:	00db      	lsls	r3, r3, #3
 8013554:	440b      	add	r3, r1
 8013556:	3314      	adds	r3, #20
 8013558:	2201      	movs	r2, #1
 801355a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801355c:	7c7a      	ldrb	r2, [r7, #17]
 801355e:	496d      	ldr	r1, [pc, #436]	@ (8013714 <etharp_query+0x268>)
 8013560:	4613      	mov	r3, r2
 8013562:	005b      	lsls	r3, r3, #1
 8013564:	4413      	add	r3, r2
 8013566:	00db      	lsls	r3, r3, #3
 8013568:	440b      	add	r3, r1
 801356a:	3308      	adds	r3, #8
 801356c:	68fa      	ldr	r2, [r7, #12]
 801356e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013570:	7c7a      	ldrb	r2, [r7, #17]
 8013572:	4968      	ldr	r1, [pc, #416]	@ (8013714 <etharp_query+0x268>)
 8013574:	4613      	mov	r3, r2
 8013576:	005b      	lsls	r3, r3, #1
 8013578:	4413      	add	r3, r2
 801357a:	00db      	lsls	r3, r3, #3
 801357c:	440b      	add	r3, r1
 801357e:	3314      	adds	r3, #20
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	2b01      	cmp	r3, #1
 8013584:	d011      	beq.n	80135aa <etharp_query+0xfe>
 8013586:	7c7a      	ldrb	r2, [r7, #17]
 8013588:	4962      	ldr	r1, [pc, #392]	@ (8013714 <etharp_query+0x268>)
 801358a:	4613      	mov	r3, r2
 801358c:	005b      	lsls	r3, r3, #1
 801358e:	4413      	add	r3, r2
 8013590:	00db      	lsls	r3, r3, #3
 8013592:	440b      	add	r3, r1
 8013594:	3314      	adds	r3, #20
 8013596:	781b      	ldrb	r3, [r3, #0]
 8013598:	2b01      	cmp	r3, #1
 801359a:	d806      	bhi.n	80135aa <etharp_query+0xfe>
 801359c:	4b5a      	ldr	r3, [pc, #360]	@ (8013708 <etharp_query+0x25c>)
 801359e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80135a2:	495d      	ldr	r1, [pc, #372]	@ (8013718 <etharp_query+0x26c>)
 80135a4:	485a      	ldr	r0, [pc, #360]	@ (8013710 <etharp_query+0x264>)
 80135a6:	f002 fcd5 	bl	8015f54 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80135aa:	6a3b      	ldr	r3, [r7, #32]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d102      	bne.n	80135b6 <etharp_query+0x10a>
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d10c      	bne.n	80135d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80135b6:	68b9      	ldr	r1, [r7, #8]
 80135b8:	68f8      	ldr	r0, [r7, #12]
 80135ba:	f000 f963 	bl	8013884 <etharp_request>
 80135be:	4603      	mov	r3, r0
 80135c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d102      	bne.n	80135d0 <etharp_query+0x124>
      return result;
 80135ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80135ce:	e096      	b.n	80136fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d106      	bne.n	80135e4 <etharp_query+0x138>
 80135d6:	4b4c      	ldr	r3, [pc, #304]	@ (8013708 <etharp_query+0x25c>)
 80135d8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80135dc:	494f      	ldr	r1, [pc, #316]	@ (801371c <etharp_query+0x270>)
 80135de:	484c      	ldr	r0, [pc, #304]	@ (8013710 <etharp_query+0x264>)
 80135e0:	f002 fcb8 	bl	8015f54 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80135e4:	7c7a      	ldrb	r2, [r7, #17]
 80135e6:	494b      	ldr	r1, [pc, #300]	@ (8013714 <etharp_query+0x268>)
 80135e8:	4613      	mov	r3, r2
 80135ea:	005b      	lsls	r3, r3, #1
 80135ec:	4413      	add	r3, r2
 80135ee:	00db      	lsls	r3, r3, #3
 80135f0:	440b      	add	r3, r1
 80135f2:	3314      	adds	r3, #20
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	2b01      	cmp	r3, #1
 80135f8:	d917      	bls.n	801362a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80135fa:	4a49      	ldr	r2, [pc, #292]	@ (8013720 <etharp_query+0x274>)
 80135fc:	7c7b      	ldrb	r3, [r7, #17]
 80135fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013600:	7c7a      	ldrb	r2, [r7, #17]
 8013602:	4613      	mov	r3, r2
 8013604:	005b      	lsls	r3, r3, #1
 8013606:	4413      	add	r3, r2
 8013608:	00db      	lsls	r3, r3, #3
 801360a:	3308      	adds	r3, #8
 801360c:	4a41      	ldr	r2, [pc, #260]	@ (8013714 <etharp_query+0x268>)
 801360e:	4413      	add	r3, r2
 8013610:	3304      	adds	r3, #4
 8013612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013616:	9200      	str	r2, [sp, #0]
 8013618:	697a      	ldr	r2, [r7, #20]
 801361a:	6879      	ldr	r1, [r7, #4]
 801361c:	68f8      	ldr	r0, [r7, #12]
 801361e:	f001 fc9b 	bl	8014f58 <ethernet_output>
 8013622:	4603      	mov	r3, r0
 8013624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013628:	e067      	b.n	80136fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801362a:	7c7a      	ldrb	r2, [r7, #17]
 801362c:	4939      	ldr	r1, [pc, #228]	@ (8013714 <etharp_query+0x268>)
 801362e:	4613      	mov	r3, r2
 8013630:	005b      	lsls	r3, r3, #1
 8013632:	4413      	add	r3, r2
 8013634:	00db      	lsls	r3, r3, #3
 8013636:	440b      	add	r3, r1
 8013638:	3314      	adds	r3, #20
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	2b01      	cmp	r3, #1
 801363e:	d15c      	bne.n	80136fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013640:	2300      	movs	r3, #0
 8013642:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013648:	e01c      	b.n	8013684 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801364a:	69fb      	ldr	r3, [r7, #28]
 801364c:	895a      	ldrh	r2, [r3, #10]
 801364e:	69fb      	ldr	r3, [r7, #28]
 8013650:	891b      	ldrh	r3, [r3, #8]
 8013652:	429a      	cmp	r2, r3
 8013654:	d10a      	bne.n	801366c <etharp_query+0x1c0>
 8013656:	69fb      	ldr	r3, [r7, #28]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d006      	beq.n	801366c <etharp_query+0x1c0>
 801365e:	4b2a      	ldr	r3, [pc, #168]	@ (8013708 <etharp_query+0x25c>)
 8013660:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8013664:	492f      	ldr	r1, [pc, #188]	@ (8013724 <etharp_query+0x278>)
 8013666:	482a      	ldr	r0, [pc, #168]	@ (8013710 <etharp_query+0x264>)
 8013668:	f002 fc74 	bl	8015f54 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	7b1b      	ldrb	r3, [r3, #12]
 8013670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013674:	2b00      	cmp	r3, #0
 8013676:	d002      	beq.n	801367e <etharp_query+0x1d2>
        copy_needed = 1;
 8013678:	2301      	movs	r3, #1
 801367a:	61bb      	str	r3, [r7, #24]
        break;
 801367c:	e005      	b.n	801368a <etharp_query+0x1de>
      }
      p = p->next;
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013684:	69fb      	ldr	r3, [r7, #28]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d1df      	bne.n	801364a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d007      	beq.n	80136a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013690:	687a      	ldr	r2, [r7, #4]
 8013692:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8013696:	200e      	movs	r0, #14
 8013698:	f7f9 fbf2 	bl	800ce80 <pbuf_clone>
 801369c:	61f8      	str	r0, [r7, #28]
 801369e:	e004      	b.n	80136aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80136a4:	69f8      	ldr	r0, [r7, #28]
 80136a6:	f7f9 fa2f 	bl	800cb08 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d021      	beq.n	80136f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80136b0:	7c7a      	ldrb	r2, [r7, #17]
 80136b2:	4918      	ldr	r1, [pc, #96]	@ (8013714 <etharp_query+0x268>)
 80136b4:	4613      	mov	r3, r2
 80136b6:	005b      	lsls	r3, r3, #1
 80136b8:	4413      	add	r3, r2
 80136ba:	00db      	lsls	r3, r3, #3
 80136bc:	440b      	add	r3, r1
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d00a      	beq.n	80136da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80136c4:	7c7a      	ldrb	r2, [r7, #17]
 80136c6:	4913      	ldr	r1, [pc, #76]	@ (8013714 <etharp_query+0x268>)
 80136c8:	4613      	mov	r3, r2
 80136ca:	005b      	lsls	r3, r3, #1
 80136cc:	4413      	add	r3, r2
 80136ce:	00db      	lsls	r3, r3, #3
 80136d0:	440b      	add	r3, r1
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7f9 f977 	bl	800c9c8 <pbuf_free>
      }
      arp_table[i].q = p;
 80136da:	7c7a      	ldrb	r2, [r7, #17]
 80136dc:	490d      	ldr	r1, [pc, #52]	@ (8013714 <etharp_query+0x268>)
 80136de:	4613      	mov	r3, r2
 80136e0:	005b      	lsls	r3, r3, #1
 80136e2:	4413      	add	r3, r2
 80136e4:	00db      	lsls	r3, r3, #3
 80136e6:	440b      	add	r3, r1
 80136e8:	69fa      	ldr	r2, [r7, #28]
 80136ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80136ec:	2300      	movs	r3, #0
 80136ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80136f2:	e002      	b.n	80136fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80136f4:	23ff      	movs	r3, #255	@ 0xff
 80136f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80136fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80136fe:	4618      	mov	r0, r3
 8013700:	3728      	adds	r7, #40	@ 0x28
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}
 8013706:	bf00      	nop
 8013708:	0801ba90 	.word	0x0801ba90
 801370c:	0801bc3c 	.word	0x0801bc3c
 8013710:	0801bb08 	.word	0x0801bb08
 8013714:	240083ec 	.word	0x240083ec
 8013718:	0801bc4c 	.word	0x0801bc4c
 801371c:	0801bc30 	.word	0x0801bc30
 8013720:	240084dc 	.word	0x240084dc
 8013724:	0801bc74 	.word	0x0801bc74

08013728 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b08a      	sub	sp, #40	@ 0x28
 801372c:	af02      	add	r7, sp, #8
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	60b9      	str	r1, [r7, #8]
 8013732:	607a      	str	r2, [r7, #4]
 8013734:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013736:	2300      	movs	r3, #0
 8013738:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d106      	bne.n	801374e <etharp_raw+0x26>
 8013740:	4b3a      	ldr	r3, [pc, #232]	@ (801382c <etharp_raw+0x104>)
 8013742:	f240 4257 	movw	r2, #1111	@ 0x457
 8013746:	493a      	ldr	r1, [pc, #232]	@ (8013830 <etharp_raw+0x108>)
 8013748:	483a      	ldr	r0, [pc, #232]	@ (8013834 <etharp_raw+0x10c>)
 801374a:	f002 fc03 	bl	8015f54 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801374e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013752:	211c      	movs	r1, #28
 8013754:	200e      	movs	r0, #14
 8013756:	f7f8 fe53 	bl	800c400 <pbuf_alloc>
 801375a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801375c:	69bb      	ldr	r3, [r7, #24]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d102      	bne.n	8013768 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013762:	f04f 33ff 	mov.w	r3, #4294967295
 8013766:	e05d      	b.n	8013824 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013768:	69bb      	ldr	r3, [r7, #24]
 801376a:	895b      	ldrh	r3, [r3, #10]
 801376c:	2b1b      	cmp	r3, #27
 801376e:	d806      	bhi.n	801377e <etharp_raw+0x56>
 8013770:	4b2e      	ldr	r3, [pc, #184]	@ (801382c <etharp_raw+0x104>)
 8013772:	f240 4262 	movw	r2, #1122	@ 0x462
 8013776:	4930      	ldr	r1, [pc, #192]	@ (8013838 <etharp_raw+0x110>)
 8013778:	482e      	ldr	r0, [pc, #184]	@ (8013834 <etharp_raw+0x10c>)
 801377a:	f002 fbeb 	bl	8015f54 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013784:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013786:	4618      	mov	r0, r3
 8013788:	f7f7 fd08 	bl	800b19c <lwip_htons>
 801378c:	4603      	mov	r3, r0
 801378e:	461a      	mov	r2, r3
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801379a:	2b06      	cmp	r3, #6
 801379c:	d006      	beq.n	80137ac <etharp_raw+0x84>
 801379e:	4b23      	ldr	r3, [pc, #140]	@ (801382c <etharp_raw+0x104>)
 80137a0:	f240 4269 	movw	r2, #1129	@ 0x469
 80137a4:	4925      	ldr	r1, [pc, #148]	@ (801383c <etharp_raw+0x114>)
 80137a6:	4823      	ldr	r0, [pc, #140]	@ (8013834 <etharp_raw+0x10c>)
 80137a8:	f002 fbd4 	bl	8015f54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	3308      	adds	r3, #8
 80137b0:	2206      	movs	r2, #6
 80137b2:	6839      	ldr	r1, [r7, #0]
 80137b4:	4618      	mov	r0, r3
 80137b6:	f002 fdf2 	bl	801639e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	3312      	adds	r3, #18
 80137be:	2206      	movs	r2, #6
 80137c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80137c2:	4618      	mov	r0, r3
 80137c4:	f002 fdeb 	bl	801639e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80137c8:	697b      	ldr	r3, [r7, #20]
 80137ca:	330e      	adds	r3, #14
 80137cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80137ce:	6812      	ldr	r2, [r2, #0]
 80137d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	3318      	adds	r3, #24
 80137d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80137d8:	6812      	ldr	r2, [r2, #0]
 80137da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	2200      	movs	r2, #0
 80137e0:	701a      	strb	r2, [r3, #0]
 80137e2:	2200      	movs	r2, #0
 80137e4:	f042 0201 	orr.w	r2, r2, #1
 80137e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	2200      	movs	r2, #0
 80137ee:	f042 0208 	orr.w	r2, r2, #8
 80137f2:	709a      	strb	r2, [r3, #2]
 80137f4:	2200      	movs	r2, #0
 80137f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	2206      	movs	r2, #6
 80137fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	2204      	movs	r2, #4
 8013802:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013804:	f640 0306 	movw	r3, #2054	@ 0x806
 8013808:	9300      	str	r3, [sp, #0]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	68ba      	ldr	r2, [r7, #8]
 801380e:	69b9      	ldr	r1, [r7, #24]
 8013810:	68f8      	ldr	r0, [r7, #12]
 8013812:	f001 fba1 	bl	8014f58 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013816:	69b8      	ldr	r0, [r7, #24]
 8013818:	f7f9 f8d6 	bl	800c9c8 <pbuf_free>
  p = NULL;
 801381c:	2300      	movs	r3, #0
 801381e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013820:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013824:	4618      	mov	r0, r3
 8013826:	3720      	adds	r7, #32
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}
 801382c:	0801ba90 	.word	0x0801ba90
 8013830:	0801bbe0 	.word	0x0801bbe0
 8013834:	0801bb08 	.word	0x0801bb08
 8013838:	0801bc90 	.word	0x0801bc90
 801383c:	0801bcc4 	.word	0x0801bcc4

08013840 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b088      	sub	sp, #32
 8013844:	af04      	add	r7, sp, #16
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	60b9      	str	r1, [r7, #8]
 801384a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801385c:	2201      	movs	r2, #1
 801385e:	9203      	str	r2, [sp, #12]
 8013860:	68ba      	ldr	r2, [r7, #8]
 8013862:	9202      	str	r2, [sp, #8]
 8013864:	4a06      	ldr	r2, [pc, #24]	@ (8013880 <etharp_request_dst+0x40>)
 8013866:	9201      	str	r2, [sp, #4]
 8013868:	9300      	str	r3, [sp, #0]
 801386a:	4603      	mov	r3, r0
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	68f8      	ldr	r0, [r7, #12]
 8013870:	f7ff ff5a 	bl	8013728 <etharp_raw>
 8013874:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013876:	4618      	mov	r0, r3
 8013878:	3710      	adds	r7, #16
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop
 8013880:	0801c334 	.word	0x0801c334

08013884 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
 801388c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801388e:	4a05      	ldr	r2, [pc, #20]	@ (80138a4 <etharp_request+0x20>)
 8013890:	6839      	ldr	r1, [r7, #0]
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7ff ffd4 	bl	8013840 <etharp_request_dst>
 8013898:	4603      	mov	r3, r0
}
 801389a:	4618      	mov	r0, r3
 801389c:	3708      	adds	r7, #8
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	bf00      	nop
 80138a4:	0801c32c 	.word	0x0801c32c

080138a8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b08e      	sub	sp, #56	@ 0x38
 80138ac:	af04      	add	r7, sp, #16
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80138b2:	4b87      	ldr	r3, [pc, #540]	@ (8013ad0 <icmp_input+0x228>)
 80138b4:	689b      	ldr	r3, [r3, #8]
 80138b6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80138b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ba:	781b      	ldrb	r3, [r3, #0]
 80138bc:	f003 030f 	and.w	r3, r3, #15
 80138c0:	b2db      	uxtb	r3, r3
 80138c2:	009b      	lsls	r3, r3, #2
 80138c4:	b2db      	uxtb	r3, r3
 80138c6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80138c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80138ca:	2b13      	cmp	r3, #19
 80138cc:	f240 80e8 	bls.w	8013aa0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	895b      	ldrh	r3, [r3, #10]
 80138d4:	2b03      	cmp	r3, #3
 80138d6:	f240 80e5 	bls.w	8013aa4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80138e4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	f000 80d2 	beq.w	8013a92 <icmp_input+0x1ea>
 80138ee:	2b08      	cmp	r3, #8
 80138f0:	f040 80d2 	bne.w	8013a98 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80138f4:	4b77      	ldr	r3, [pc, #476]	@ (8013ad4 <icmp_input+0x22c>)
 80138f6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80138f8:	4b75      	ldr	r3, [pc, #468]	@ (8013ad0 <icmp_input+0x228>)
 80138fa:	695b      	ldr	r3, [r3, #20]
 80138fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013900:	2be0      	cmp	r3, #224	@ 0xe0
 8013902:	f000 80d6 	beq.w	8013ab2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013906:	4b72      	ldr	r3, [pc, #456]	@ (8013ad0 <icmp_input+0x228>)
 8013908:	695b      	ldr	r3, [r3, #20]
 801390a:	4a71      	ldr	r2, [pc, #452]	@ (8013ad0 <icmp_input+0x228>)
 801390c:	6812      	ldr	r2, [r2, #0]
 801390e:	4611      	mov	r1, r2
 8013910:	4618      	mov	r0, r3
 8013912:	f000 fc13 	bl	801413c <ip4_addr_isbroadcast_u32>
 8013916:	4603      	mov	r3, r0
 8013918:	2b00      	cmp	r3, #0
 801391a:	f040 80cc 	bne.w	8013ab6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	891b      	ldrh	r3, [r3, #8]
 8013922:	2b07      	cmp	r3, #7
 8013924:	f240 80c0 	bls.w	8013aa8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7f7 fcd5 	bl	800b2d8 <inet_chksum_pbuf>
 801392e:	4603      	mov	r3, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	d003      	beq.n	801393c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013934:	6878      	ldr	r0, [r7, #4]
 8013936:	f7f9 f847 	bl	800c9c8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801393a:	e0c5      	b.n	8013ac8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801393c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801393e:	330e      	adds	r3, #14
 8013940:	4619      	mov	r1, r3
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f7f8 ffaa 	bl	800c89c <pbuf_add_header>
 8013948:	4603      	mov	r3, r0
 801394a:	2b00      	cmp	r3, #0
 801394c:	d04b      	beq.n	80139e6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	891a      	ldrh	r2, [r3, #8]
 8013952:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013954:	4413      	add	r3, r2
 8013956:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	891b      	ldrh	r3, [r3, #8]
 801395c:	8b7a      	ldrh	r2, [r7, #26]
 801395e:	429a      	cmp	r2, r3
 8013960:	f0c0 80ab 	bcc.w	8013aba <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013964:	8b7b      	ldrh	r3, [r7, #26]
 8013966:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801396a:	4619      	mov	r1, r3
 801396c:	200e      	movs	r0, #14
 801396e:	f7f8 fd47 	bl	800c400 <pbuf_alloc>
 8013972:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	2b00      	cmp	r3, #0
 8013978:	f000 80a1 	beq.w	8013abe <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	895b      	ldrh	r3, [r3, #10]
 8013980:	461a      	mov	r2, r3
 8013982:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013984:	3308      	adds	r3, #8
 8013986:	429a      	cmp	r2, r3
 8013988:	d203      	bcs.n	8013992 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801398a:	6978      	ldr	r0, [r7, #20]
 801398c:	f7f9 f81c 	bl	800c9c8 <pbuf_free>
          goto icmperr;
 8013990:	e096      	b.n	8013ac0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013998:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801399a:	4618      	mov	r0, r3
 801399c:	f002 fcff 	bl	801639e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80139a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80139a2:	4619      	mov	r1, r3
 80139a4:	6978      	ldr	r0, [r7, #20]
 80139a6:	f7f8 ff89 	bl	800c8bc <pbuf_remove_header>
 80139aa:	4603      	mov	r3, r0
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d009      	beq.n	80139c4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80139b0:	4b49      	ldr	r3, [pc, #292]	@ (8013ad8 <icmp_input+0x230>)
 80139b2:	22b6      	movs	r2, #182	@ 0xb6
 80139b4:	4949      	ldr	r1, [pc, #292]	@ (8013adc <icmp_input+0x234>)
 80139b6:	484a      	ldr	r0, [pc, #296]	@ (8013ae0 <icmp_input+0x238>)
 80139b8:	f002 facc 	bl	8015f54 <iprintf>
          pbuf_free(r);
 80139bc:	6978      	ldr	r0, [r7, #20]
 80139be:	f7f9 f803 	bl	800c9c8 <pbuf_free>
          goto icmperr;
 80139c2:	e07d      	b.n	8013ac0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80139c4:	6879      	ldr	r1, [r7, #4]
 80139c6:	6978      	ldr	r0, [r7, #20]
 80139c8:	f7f9 f916 	bl	800cbf8 <pbuf_copy>
 80139cc:	4603      	mov	r3, r0
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d003      	beq.n	80139da <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80139d2:	6978      	ldr	r0, [r7, #20]
 80139d4:	f7f8 fff8 	bl	800c9c8 <pbuf_free>
          goto icmperr;
 80139d8:	e072      	b.n	8013ac0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80139da:	6878      	ldr	r0, [r7, #4]
 80139dc:	f7f8 fff4 	bl	800c9c8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	607b      	str	r3, [r7, #4]
 80139e4:	e00f      	b.n	8013a06 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80139e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80139e8:	330e      	adds	r3, #14
 80139ea:	4619      	mov	r1, r3
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f7f8 ff65 	bl	800c8bc <pbuf_remove_header>
 80139f2:	4603      	mov	r3, r0
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d006      	beq.n	8013a06 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80139f8:	4b37      	ldr	r3, [pc, #220]	@ (8013ad8 <icmp_input+0x230>)
 80139fa:	22c7      	movs	r2, #199	@ 0xc7
 80139fc:	4939      	ldr	r1, [pc, #228]	@ (8013ae4 <icmp_input+0x23c>)
 80139fe:	4838      	ldr	r0, [pc, #224]	@ (8013ae0 <icmp_input+0x238>)
 8013a00:	f002 faa8 	bl	8015f54 <iprintf>
          goto icmperr;
 8013a04:	e05c      	b.n	8013ac0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	685b      	ldr	r3, [r3, #4]
 8013a0a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013a0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013a0e:	4619      	mov	r1, r3
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f7f8 ff43 	bl	800c89c <pbuf_add_header>
 8013a16:	4603      	mov	r3, r0
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d13c      	bne.n	8013a96 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	685b      	ldr	r3, [r3, #4]
 8013a20:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013a22:	69fb      	ldr	r3, [r7, #28]
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013a2a:	4b29      	ldr	r3, [pc, #164]	@ (8013ad0 <icmp_input+0x228>)
 8013a2c:	691a      	ldr	r2, [r3, #16]
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	2200      	movs	r2, #0
 8013a36:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	885b      	ldrh	r3, [r3, #2]
 8013a3c:	b29b      	uxth	r3, r3
 8013a3e:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013a42:	4293      	cmp	r3, r2
 8013a44:	d907      	bls.n	8013a56 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	885b      	ldrh	r3, [r3, #2]
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	3309      	adds	r3, #9
 8013a4e:	b29a      	uxth	r2, r3
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	805a      	strh	r2, [r3, #2]
 8013a54:	e006      	b.n	8013a64 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013a56:	693b      	ldr	r3, [r7, #16]
 8013a58:	885b      	ldrh	r3, [r3, #2]
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	3308      	adds	r3, #8
 8013a5e:	b29a      	uxth	r2, r3
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	22ff      	movs	r2, #255	@ 0xff
 8013a68:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	729a      	strb	r2, [r3, #10]
 8013a70:	2200      	movs	r2, #0
 8013a72:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	9302      	str	r3, [sp, #8]
 8013a78:	2301      	movs	r3, #1
 8013a7a:	9301      	str	r3, [sp, #4]
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	9300      	str	r3, [sp, #0]
 8013a80:	23ff      	movs	r3, #255	@ 0xff
 8013a82:	2200      	movs	r2, #0
 8013a84:	69f9      	ldr	r1, [r7, #28]
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f000 fa80 	bl	8013f8c <ip4_output_if>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013a90:	e001      	b.n	8013a96 <icmp_input+0x1ee>
      break;
 8013a92:	bf00      	nop
 8013a94:	e000      	b.n	8013a98 <icmp_input+0x1f0>
      break;
 8013a96:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f7f8 ff95 	bl	800c9c8 <pbuf_free>
  return;
 8013a9e:	e013      	b.n	8013ac8 <icmp_input+0x220>
    goto lenerr;
 8013aa0:	bf00      	nop
 8013aa2:	e002      	b.n	8013aaa <icmp_input+0x202>
    goto lenerr;
 8013aa4:	bf00      	nop
 8013aa6:	e000      	b.n	8013aaa <icmp_input+0x202>
        goto lenerr;
 8013aa8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f7f8 ff8c 	bl	800c9c8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013ab0:	e00a      	b.n	8013ac8 <icmp_input+0x220>
        goto icmperr;
 8013ab2:	bf00      	nop
 8013ab4:	e004      	b.n	8013ac0 <icmp_input+0x218>
        goto icmperr;
 8013ab6:	bf00      	nop
 8013ab8:	e002      	b.n	8013ac0 <icmp_input+0x218>
          goto icmperr;
 8013aba:	bf00      	nop
 8013abc:	e000      	b.n	8013ac0 <icmp_input+0x218>
          goto icmperr;
 8013abe:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f7f8 ff81 	bl	800c9c8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013ac6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013ac8:	3728      	adds	r7, #40	@ 0x28
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	24005470 	.word	0x24005470
 8013ad4:	24005484 	.word	0x24005484
 8013ad8:	0801bd08 	.word	0x0801bd08
 8013adc:	0801bd40 	.word	0x0801bd40
 8013ae0:	0801bd78 	.word	0x0801bd78
 8013ae4:	0801bda0 	.word	0x0801bda0

08013ae8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	460b      	mov	r3, r1
 8013af2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013af4:	78fb      	ldrb	r3, [r7, #3]
 8013af6:	461a      	mov	r2, r3
 8013af8:	2103      	movs	r1, #3
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f000 f814 	bl	8013b28 <icmp_send_response>
}
 8013b00:	bf00      	nop
 8013b02:	3708      	adds	r7, #8
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}

08013b08 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b082      	sub	sp, #8
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	460b      	mov	r3, r1
 8013b12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013b14:	78fb      	ldrb	r3, [r7, #3]
 8013b16:	461a      	mov	r2, r3
 8013b18:	210b      	movs	r1, #11
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f000 f804 	bl	8013b28 <icmp_send_response>
}
 8013b20:	bf00      	nop
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b08c      	sub	sp, #48	@ 0x30
 8013b2c:	af04      	add	r7, sp, #16
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	460b      	mov	r3, r1
 8013b32:	70fb      	strb	r3, [r7, #3]
 8013b34:	4613      	mov	r3, r2
 8013b36:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013b38:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013b3c:	2124      	movs	r1, #36	@ 0x24
 8013b3e:	2022      	movs	r0, #34	@ 0x22
 8013b40:	f7f8 fc5e 	bl	800c400 <pbuf_alloc>
 8013b44:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d056      	beq.n	8013bfa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	895b      	ldrh	r3, [r3, #10]
 8013b50:	2b23      	cmp	r3, #35	@ 0x23
 8013b52:	d806      	bhi.n	8013b62 <icmp_send_response+0x3a>
 8013b54:	4b2b      	ldr	r3, [pc, #172]	@ (8013c04 <icmp_send_response+0xdc>)
 8013b56:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013b5a:	492b      	ldr	r1, [pc, #172]	@ (8013c08 <icmp_send_response+0xe0>)
 8013b5c:	482b      	ldr	r0, [pc, #172]	@ (8013c0c <icmp_send_response+0xe4>)
 8013b5e:	f002 f9f9 	bl	8015f54 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	78fa      	ldrb	r2, [r7, #3]
 8013b72:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	78ba      	ldrb	r2, [r7, #2]
 8013b78:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	711a      	strb	r2, [r3, #4]
 8013b80:	2200      	movs	r2, #0
 8013b82:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	2200      	movs	r2, #0
 8013b88:	719a      	strb	r2, [r3, #6]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013b8e:	69fb      	ldr	r3, [r7, #28]
 8013b90:	685b      	ldr	r3, [r3, #4]
 8013b92:	f103 0008 	add.w	r0, r3, #8
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	685b      	ldr	r3, [r3, #4]
 8013b9a:	221c      	movs	r2, #28
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	f002 fbfe 	bl	801639e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013ba2:	69bb      	ldr	r3, [r7, #24]
 8013ba4:	68db      	ldr	r3, [r3, #12]
 8013ba6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013ba8:	f107 030c 	add.w	r3, r7, #12
 8013bac:	4618      	mov	r0, r3
 8013bae:	f000 f82f 	bl	8013c10 <ip4_route>
 8013bb2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d01b      	beq.n	8013bf2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	709a      	strb	r2, [r3, #2]
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8013bc4:	69fb      	ldr	r3, [r7, #28]
 8013bc6:	895b      	ldrh	r3, [r3, #10]
 8013bc8:	4619      	mov	r1, r3
 8013bca:	6978      	ldr	r0, [r7, #20]
 8013bcc:	f7f7 fb72 	bl	800b2b4 <inet_chksum>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	461a      	mov	r2, r3
 8013bd4:	697b      	ldr	r3, [r7, #20]
 8013bd6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013bd8:	f107 020c 	add.w	r2, r7, #12
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	9302      	str	r3, [sp, #8]
 8013be0:	2301      	movs	r3, #1
 8013be2:	9301      	str	r3, [sp, #4]
 8013be4:	2300      	movs	r3, #0
 8013be6:	9300      	str	r3, [sp, #0]
 8013be8:	23ff      	movs	r3, #255	@ 0xff
 8013bea:	2100      	movs	r1, #0
 8013bec:	69f8      	ldr	r0, [r7, #28]
 8013bee:	f000 f9cd 	bl	8013f8c <ip4_output_if>
  }
  pbuf_free(q);
 8013bf2:	69f8      	ldr	r0, [r7, #28]
 8013bf4:	f7f8 fee8 	bl	800c9c8 <pbuf_free>
 8013bf8:	e000      	b.n	8013bfc <icmp_send_response+0xd4>
    return;
 8013bfa:	bf00      	nop
}
 8013bfc:	3720      	adds	r7, #32
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	0801bd08 	.word	0x0801bd08
 8013c08:	0801bdd4 	.word	0x0801bdd4
 8013c0c:	0801bd78 	.word	0x0801bd78

08013c10 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013c10:	b480      	push	{r7}
 8013c12:	b085      	sub	sp, #20
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013c18:	4b33      	ldr	r3, [pc, #204]	@ (8013ce8 <ip4_route+0xd8>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	60fb      	str	r3, [r7, #12]
 8013c1e:	e036      	b.n	8013c8e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c26:	f003 0301 	and.w	r3, r3, #1
 8013c2a:	b2db      	uxtb	r3, r3
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d02b      	beq.n	8013c88 <ip4_route+0x78>
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c36:	089b      	lsrs	r3, r3, #2
 8013c38:	f003 0301 	and.w	r3, r3, #1
 8013c3c:	b2db      	uxtb	r3, r3
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d022      	beq.n	8013c88 <ip4_route+0x78>
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	3304      	adds	r3, #4
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d01d      	beq.n	8013c88 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681a      	ldr	r2, [r3, #0]
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	3304      	adds	r3, #4
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	405a      	eors	r2, r3
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	3308      	adds	r3, #8
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	4013      	ands	r3, r2
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d101      	bne.n	8013c68 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	e038      	b.n	8013cda <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c6e:	f003 0302 	and.w	r3, r3, #2
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d108      	bne.n	8013c88 <ip4_route+0x78>
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681a      	ldr	r2, [r3, #0]
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	330c      	adds	r3, #12
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	429a      	cmp	r2, r3
 8013c82:	d101      	bne.n	8013c88 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	e028      	b.n	8013cda <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	60fb      	str	r3, [r7, #12]
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d1c5      	bne.n	8013c20 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013c94:	4b15      	ldr	r3, [pc, #84]	@ (8013cec <ip4_route+0xdc>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d01a      	beq.n	8013cd2 <ip4_route+0xc2>
 8013c9c:	4b13      	ldr	r3, [pc, #76]	@ (8013cec <ip4_route+0xdc>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013ca4:	f003 0301 	and.w	r3, r3, #1
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d012      	beq.n	8013cd2 <ip4_route+0xc2>
 8013cac:	4b0f      	ldr	r3, [pc, #60]	@ (8013cec <ip4_route+0xdc>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cb4:	f003 0304 	and.w	r3, r3, #4
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d00a      	beq.n	8013cd2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8013cec <ip4_route+0xdc>)
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	3304      	adds	r3, #4
 8013cc2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d004      	beq.n	8013cd2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	2b7f      	cmp	r3, #127	@ 0x7f
 8013cd0:	d101      	bne.n	8013cd6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	e001      	b.n	8013cda <ip4_route+0xca>
  }

  return netif_default;
 8013cd6:	4b05      	ldr	r3, [pc, #20]	@ (8013cec <ip4_route+0xdc>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3714      	adds	r7, #20
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce4:	4770      	bx	lr
 8013ce6:	bf00      	nop
 8013ce8:	24008380 	.word	0x24008380
 8013cec:	24008384 	.word	0x24008384

08013cf0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cfe:	f003 0301 	and.w	r3, r3, #1
 8013d02:	b2db      	uxtb	r3, r3
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d016      	beq.n	8013d36 <ip4_input_accept+0x46>
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	3304      	adds	r3, #4
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d011      	beq.n	8013d36 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013d12:	4b0b      	ldr	r3, [pc, #44]	@ (8013d40 <ip4_input_accept+0x50>)
 8013d14:	695a      	ldr	r2, [r3, #20]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	3304      	adds	r3, #4
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d008      	beq.n	8013d32 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013d20:	4b07      	ldr	r3, [pc, #28]	@ (8013d40 <ip4_input_accept+0x50>)
 8013d22:	695b      	ldr	r3, [r3, #20]
 8013d24:	6879      	ldr	r1, [r7, #4]
 8013d26:	4618      	mov	r0, r3
 8013d28:	f000 fa08 	bl	801413c <ip4_addr_isbroadcast_u32>
 8013d2c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d001      	beq.n	8013d36 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013d32:	2301      	movs	r3, #1
 8013d34:	e000      	b.n	8013d38 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013d36:	2300      	movs	r3, #0
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3708      	adds	r7, #8
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	24005470 	.word	0x24005470

08013d44 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b086      	sub	sp, #24
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	685b      	ldr	r3, [r3, #4]
 8013d52:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	091b      	lsrs	r3, r3, #4
 8013d5a:	b2db      	uxtb	r3, r3
 8013d5c:	2b04      	cmp	r3, #4
 8013d5e:	d004      	beq.n	8013d6a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7f8 fe31 	bl	800c9c8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013d66:	2300      	movs	r3, #0
 8013d68:	e107      	b.n	8013f7a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013d6a:	697b      	ldr	r3, [r7, #20]
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	f003 030f 	and.w	r3, r3, #15
 8013d72:	b2db      	uxtb	r3, r3
 8013d74:	009b      	lsls	r3, r3, #2
 8013d76:	b2db      	uxtb	r3, r3
 8013d78:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	885b      	ldrh	r3, [r3, #2]
 8013d7e:	b29b      	uxth	r3, r3
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7f7 fa0b 	bl	800b19c <lwip_htons>
 8013d86:	4603      	mov	r3, r0
 8013d88:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	891b      	ldrh	r3, [r3, #8]
 8013d8e:	89ba      	ldrh	r2, [r7, #12]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d204      	bcs.n	8013d9e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013d94:	89bb      	ldrh	r3, [r7, #12]
 8013d96:	4619      	mov	r1, r3
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	f7f8 fc8f 	bl	800c6bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	895b      	ldrh	r3, [r3, #10]
 8013da2:	89fa      	ldrh	r2, [r7, #14]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d807      	bhi.n	8013db8 <ip4_input+0x74>
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	891b      	ldrh	r3, [r3, #8]
 8013dac:	89ba      	ldrh	r2, [r7, #12]
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d802      	bhi.n	8013db8 <ip4_input+0x74>
 8013db2:	89fb      	ldrh	r3, [r7, #14]
 8013db4:	2b13      	cmp	r3, #19
 8013db6:	d804      	bhi.n	8013dc2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f7f8 fe05 	bl	800c9c8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	e0db      	b.n	8013f7a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	691b      	ldr	r3, [r3, #16]
 8013dc6:	4a6f      	ldr	r2, [pc, #444]	@ (8013f84 <ip4_input+0x240>)
 8013dc8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	68db      	ldr	r3, [r3, #12]
 8013dce:	4a6d      	ldr	r2, [pc, #436]	@ (8013f84 <ip4_input+0x240>)
 8013dd0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8013f84 <ip4_input+0x240>)
 8013dd4:	695b      	ldr	r3, [r3, #20]
 8013dd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013dda:	2be0      	cmp	r3, #224	@ 0xe0
 8013ddc:	d112      	bne.n	8013e04 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013de4:	f003 0301 	and.w	r3, r3, #1
 8013de8:	b2db      	uxtb	r3, r3
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d007      	beq.n	8013dfe <ip4_input+0xba>
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	3304      	adds	r3, #4
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d002      	beq.n	8013dfe <ip4_input+0xba>
      netif = inp;
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	613b      	str	r3, [r7, #16]
 8013dfc:	e02a      	b.n	8013e54 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013dfe:	2300      	movs	r3, #0
 8013e00:	613b      	str	r3, [r7, #16]
 8013e02:	e027      	b.n	8013e54 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013e04:	6838      	ldr	r0, [r7, #0]
 8013e06:	f7ff ff73 	bl	8013cf0 <ip4_input_accept>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d002      	beq.n	8013e16 <ip4_input+0xd2>
      netif = inp;
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	613b      	str	r3, [r7, #16]
 8013e14:	e01e      	b.n	8013e54 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013e16:	2300      	movs	r3, #0
 8013e18:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8013f84 <ip4_input+0x240>)
 8013e1c:	695b      	ldr	r3, [r3, #20]
 8013e1e:	b2db      	uxtb	r3, r3
 8013e20:	2b7f      	cmp	r3, #127	@ 0x7f
 8013e22:	d017      	beq.n	8013e54 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013e24:	4b58      	ldr	r3, [pc, #352]	@ (8013f88 <ip4_input+0x244>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	613b      	str	r3, [r7, #16]
 8013e2a:	e00e      	b.n	8013e4a <ip4_input+0x106>
          if (netif == inp) {
 8013e2c:	693a      	ldr	r2, [r7, #16]
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d006      	beq.n	8013e42 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013e34:	6938      	ldr	r0, [r7, #16]
 8013e36:	f7ff ff5b 	bl	8013cf0 <ip4_input_accept>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d108      	bne.n	8013e52 <ip4_input+0x10e>
 8013e40:	e000      	b.n	8013e44 <ip4_input+0x100>
            continue;
 8013e42:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013e44:	693b      	ldr	r3, [r7, #16]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	613b      	str	r3, [r7, #16]
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d1ed      	bne.n	8013e2c <ip4_input+0xe8>
 8013e50:	e000      	b.n	8013e54 <ip4_input+0x110>
            break;
 8013e52:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013e54:	4b4b      	ldr	r3, [pc, #300]	@ (8013f84 <ip4_input+0x240>)
 8013e56:	691b      	ldr	r3, [r3, #16]
 8013e58:	6839      	ldr	r1, [r7, #0]
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f000 f96e 	bl	801413c <ip4_addr_isbroadcast_u32>
 8013e60:	4603      	mov	r3, r0
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d105      	bne.n	8013e72 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013e66:	4b47      	ldr	r3, [pc, #284]	@ (8013f84 <ip4_input+0x240>)
 8013e68:	691b      	ldr	r3, [r3, #16]
 8013e6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013e6e:	2be0      	cmp	r3, #224	@ 0xe0
 8013e70:	d104      	bne.n	8013e7c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f7f8 fda8 	bl	800c9c8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	e07e      	b.n	8013f7a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d104      	bne.n	8013e8c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f7f8 fda0 	bl	800c9c8 <pbuf_free>
    return ERR_OK;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	e076      	b.n	8013f7a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	88db      	ldrh	r3, [r3, #6]
 8013e90:	b29b      	uxth	r3, r3
 8013e92:	461a      	mov	r2, r3
 8013e94:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013e98:	4013      	ands	r3, r2
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d00b      	beq.n	8013eb6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f000 fc92 	bl	80147c8 <ip4_reass>
 8013ea4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d101      	bne.n	8013eb0 <ip4_input+0x16c>
      return ERR_OK;
 8013eac:	2300      	movs	r3, #0
 8013eae:	e064      	b.n	8013f7a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	685b      	ldr	r3, [r3, #4]
 8013eb4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013eb6:	4a33      	ldr	r2, [pc, #204]	@ (8013f84 <ip4_input+0x240>)
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013ebc:	4a31      	ldr	r2, [pc, #196]	@ (8013f84 <ip4_input+0x240>)
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013ec2:	4a30      	ldr	r2, [pc, #192]	@ (8013f84 <ip4_input+0x240>)
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	f003 030f 	and.w	r3, r3, #15
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	b2db      	uxtb	r3, r3
 8013ed6:	461a      	mov	r2, r3
 8013ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8013f84 <ip4_input+0x240>)
 8013eda:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013edc:	89fb      	ldrh	r3, [r7, #14]
 8013ede:	4619      	mov	r1, r3
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f7f8 fceb 	bl	800c8bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	7a5b      	ldrb	r3, [r3, #9]
 8013eea:	2b11      	cmp	r3, #17
 8013eec:	d006      	beq.n	8013efc <ip4_input+0x1b8>
 8013eee:	2b11      	cmp	r3, #17
 8013ef0:	dc13      	bgt.n	8013f1a <ip4_input+0x1d6>
 8013ef2:	2b01      	cmp	r3, #1
 8013ef4:	d00c      	beq.n	8013f10 <ip4_input+0x1cc>
 8013ef6:	2b06      	cmp	r3, #6
 8013ef8:	d005      	beq.n	8013f06 <ip4_input+0x1c2>
 8013efa:	e00e      	b.n	8013f1a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013efc:	6839      	ldr	r1, [r7, #0]
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f7fe fb40 	bl	8012584 <udp_input>
        break;
 8013f04:	e026      	b.n	8013f54 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013f06:	6839      	ldr	r1, [r7, #0]
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f7fa fb87 	bl	800e61c <tcp_input>
        break;
 8013f0e:	e021      	b.n	8013f54 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013f10:	6839      	ldr	r1, [r7, #0]
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f7ff fcc8 	bl	80138a8 <icmp_input>
        break;
 8013f18:	e01c      	b.n	8013f54 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8013f84 <ip4_input+0x240>)
 8013f1c:	695b      	ldr	r3, [r3, #20]
 8013f1e:	6939      	ldr	r1, [r7, #16]
 8013f20:	4618      	mov	r0, r3
 8013f22:	f000 f90b 	bl	801413c <ip4_addr_isbroadcast_u32>
 8013f26:	4603      	mov	r3, r0
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d10f      	bne.n	8013f4c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013f2c:	4b15      	ldr	r3, [pc, #84]	@ (8013f84 <ip4_input+0x240>)
 8013f2e:	695b      	ldr	r3, [r3, #20]
 8013f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013f34:	2be0      	cmp	r3, #224	@ 0xe0
 8013f36:	d009      	beq.n	8013f4c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013f38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7f8 fd2f 	bl	800c9a2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013f44:	2102      	movs	r1, #2
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f7ff fdce 	bl	8013ae8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f7f8 fd3b 	bl	800c9c8 <pbuf_free>
        break;
 8013f52:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013f54:	4b0b      	ldr	r3, [pc, #44]	@ (8013f84 <ip4_input+0x240>)
 8013f56:	2200      	movs	r2, #0
 8013f58:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8013f84 <ip4_input+0x240>)
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013f60:	4b08      	ldr	r3, [pc, #32]	@ (8013f84 <ip4_input+0x240>)
 8013f62:	2200      	movs	r2, #0
 8013f64:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013f66:	4b07      	ldr	r3, [pc, #28]	@ (8013f84 <ip4_input+0x240>)
 8013f68:	2200      	movs	r2, #0
 8013f6a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013f6c:	4b05      	ldr	r3, [pc, #20]	@ (8013f84 <ip4_input+0x240>)
 8013f6e:	2200      	movs	r2, #0
 8013f70:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013f72:	4b04      	ldr	r3, [pc, #16]	@ (8013f84 <ip4_input+0x240>)
 8013f74:	2200      	movs	r2, #0
 8013f76:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013f78:	2300      	movs	r3, #0
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3718      	adds	r7, #24
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
 8013f82:	bf00      	nop
 8013f84:	24005470 	.word	0x24005470
 8013f88:	24008380 	.word	0x24008380

08013f8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b08a      	sub	sp, #40	@ 0x28
 8013f90:	af04      	add	r7, sp, #16
 8013f92:	60f8      	str	r0, [r7, #12]
 8013f94:	60b9      	str	r1, [r7, #8]
 8013f96:	607a      	str	r2, [r7, #4]
 8013f98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d009      	beq.n	8013fb8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d003      	beq.n	8013fb2 <ip4_output_if+0x26>
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d102      	bne.n	8013fb8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fb4:	3304      	adds	r3, #4
 8013fb6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013fb8:	78fa      	ldrb	r2, [r7, #3]
 8013fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fbc:	9302      	str	r3, [sp, #8]
 8013fbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013fc2:	9301      	str	r3, [sp, #4]
 8013fc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013fc8:	9300      	str	r3, [sp, #0]
 8013fca:	4613      	mov	r3, r2
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	6979      	ldr	r1, [r7, #20]
 8013fd0:	68f8      	ldr	r0, [r7, #12]
 8013fd2:	f000 f805 	bl	8013fe0 <ip4_output_if_src>
 8013fd6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3718      	adds	r7, #24
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}

08013fe0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b088      	sub	sp, #32
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	60f8      	str	r0, [r7, #12]
 8013fe8:	60b9      	str	r1, [r7, #8]
 8013fea:	607a      	str	r2, [r7, #4]
 8013fec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	7b9b      	ldrb	r3, [r3, #14]
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	d006      	beq.n	8014004 <ip4_output_if_src+0x24>
 8013ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8014124 <ip4_output_if_src+0x144>)
 8013ff8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013ffc:	494a      	ldr	r1, [pc, #296]	@ (8014128 <ip4_output_if_src+0x148>)
 8013ffe:	484b      	ldr	r0, [pc, #300]	@ (801412c <ip4_output_if_src+0x14c>)
 8014000:	f001 ffa8 	bl	8015f54 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d060      	beq.n	80140cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801400a:	2314      	movs	r3, #20
 801400c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801400e:	2114      	movs	r1, #20
 8014010:	68f8      	ldr	r0, [r7, #12]
 8014012:	f7f8 fc43 	bl	800c89c <pbuf_add_header>
 8014016:	4603      	mov	r3, r0
 8014018:	2b00      	cmp	r3, #0
 801401a:	d002      	beq.n	8014022 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801401c:	f06f 0301 	mvn.w	r3, #1
 8014020:	e07c      	b.n	801411c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	685b      	ldr	r3, [r3, #4]
 8014026:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	895b      	ldrh	r3, [r3, #10]
 801402c:	2b13      	cmp	r3, #19
 801402e:	d806      	bhi.n	801403e <ip4_output_if_src+0x5e>
 8014030:	4b3c      	ldr	r3, [pc, #240]	@ (8014124 <ip4_output_if_src+0x144>)
 8014032:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014036:	493e      	ldr	r1, [pc, #248]	@ (8014130 <ip4_output_if_src+0x150>)
 8014038:	483c      	ldr	r0, [pc, #240]	@ (801412c <ip4_output_if_src+0x14c>)
 801403a:	f001 ff8b 	bl	8015f54 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801403e:	69fb      	ldr	r3, [r7, #28]
 8014040:	78fa      	ldrb	r2, [r7, #3]
 8014042:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014044:	69fb      	ldr	r3, [r7, #28]
 8014046:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801404a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681a      	ldr	r2, [r3, #0]
 8014050:	69fb      	ldr	r3, [r7, #28]
 8014052:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014054:	8b7b      	ldrh	r3, [r7, #26]
 8014056:	089b      	lsrs	r3, r3, #2
 8014058:	b29b      	uxth	r3, r3
 801405a:	b2db      	uxtb	r3, r3
 801405c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014060:	b2da      	uxtb	r2, r3
 8014062:	69fb      	ldr	r3, [r7, #28]
 8014064:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014066:	69fb      	ldr	r3, [r7, #28]
 8014068:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801406c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	891b      	ldrh	r3, [r3, #8]
 8014072:	4618      	mov	r0, r3
 8014074:	f7f7 f892 	bl	800b19c <lwip_htons>
 8014078:	4603      	mov	r3, r0
 801407a:	461a      	mov	r2, r3
 801407c:	69fb      	ldr	r3, [r7, #28]
 801407e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014080:	69fb      	ldr	r3, [r7, #28]
 8014082:	2200      	movs	r2, #0
 8014084:	719a      	strb	r2, [r3, #6]
 8014086:	2200      	movs	r2, #0
 8014088:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801408a:	4b2a      	ldr	r3, [pc, #168]	@ (8014134 <ip4_output_if_src+0x154>)
 801408c:	881b      	ldrh	r3, [r3, #0]
 801408e:	4618      	mov	r0, r3
 8014090:	f7f7 f884 	bl	800b19c <lwip_htons>
 8014094:	4603      	mov	r3, r0
 8014096:	461a      	mov	r2, r3
 8014098:	69fb      	ldr	r3, [r7, #28]
 801409a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801409c:	4b25      	ldr	r3, [pc, #148]	@ (8014134 <ip4_output_if_src+0x154>)
 801409e:	881b      	ldrh	r3, [r3, #0]
 80140a0:	3301      	adds	r3, #1
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	4b23      	ldr	r3, [pc, #140]	@ (8014134 <ip4_output_if_src+0x154>)
 80140a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d104      	bne.n	80140b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80140ae:	4b22      	ldr	r3, [pc, #136]	@ (8014138 <ip4_output_if_src+0x158>)
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	69fb      	ldr	r3, [r7, #28]
 80140b4:	60da      	str	r2, [r3, #12]
 80140b6:	e003      	b.n	80140c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	69fb      	ldr	r3, [r7, #28]
 80140be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80140c0:	69fb      	ldr	r3, [r7, #28]
 80140c2:	2200      	movs	r2, #0
 80140c4:	729a      	strb	r2, [r3, #10]
 80140c6:	2200      	movs	r2, #0
 80140c8:	72da      	strb	r2, [r3, #11]
 80140ca:	e00f      	b.n	80140ec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	895b      	ldrh	r3, [r3, #10]
 80140d0:	2b13      	cmp	r3, #19
 80140d2:	d802      	bhi.n	80140da <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80140d4:	f06f 0301 	mvn.w	r3, #1
 80140d8:	e020      	b.n	801411c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	685b      	ldr	r3, [r3, #4]
 80140de:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80140e0:	69fb      	ldr	r3, [r7, #28]
 80140e2:	691b      	ldr	r3, [r3, #16]
 80140e4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80140e6:	f107 0314 	add.w	r3, r7, #20
 80140ea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80140ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d00c      	beq.n	801410e <ip4_output_if_src+0x12e>
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	891a      	ldrh	r2, [r3, #8]
 80140f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d906      	bls.n	801410e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014100:	687a      	ldr	r2, [r7, #4]
 8014102:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014104:	68f8      	ldr	r0, [r7, #12]
 8014106:	f000 fd53 	bl	8014bb0 <ip4_frag>
 801410a:	4603      	mov	r3, r0
 801410c:	e006      	b.n	801411c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014110:	695b      	ldr	r3, [r3, #20]
 8014112:	687a      	ldr	r2, [r7, #4]
 8014114:	68f9      	ldr	r1, [r7, #12]
 8014116:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014118:	4798      	blx	r3
 801411a:	4603      	mov	r3, r0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3720      	adds	r7, #32
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}
 8014124:	0801be00 	.word	0x0801be00
 8014128:	0801be34 	.word	0x0801be34
 801412c:	0801be40 	.word	0x0801be40
 8014130:	0801be68 	.word	0x0801be68
 8014134:	240084de 	.word	0x240084de
 8014138:	0801c328 	.word	0x0801c328

0801413c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801413c:	b480      	push	{r7}
 801413e:	b085      	sub	sp, #20
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014150:	d002      	beq.n	8014158 <ip4_addr_isbroadcast_u32+0x1c>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d101      	bne.n	801415c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014158:	2301      	movs	r3, #1
 801415a:	e02a      	b.n	80141b2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014162:	f003 0302 	and.w	r3, r3, #2
 8014166:	2b00      	cmp	r3, #0
 8014168:	d101      	bne.n	801416e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801416a:	2300      	movs	r3, #0
 801416c:	e021      	b.n	80141b2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	3304      	adds	r3, #4
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	429a      	cmp	r2, r3
 8014178:	d101      	bne.n	801417e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801417a:	2300      	movs	r3, #0
 801417c:	e019      	b.n	80141b2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801417e:	68fa      	ldr	r2, [r7, #12]
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	3304      	adds	r3, #4
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	405a      	eors	r2, r3
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	3308      	adds	r3, #8
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	4013      	ands	r3, r2
 8014190:	2b00      	cmp	r3, #0
 8014192:	d10d      	bne.n	80141b0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	3308      	adds	r3, #8
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	43da      	mvns	r2, r3
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	3308      	adds	r3, #8
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d101      	bne.n	80141b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80141ac:	2301      	movs	r3, #1
 80141ae:	e000      	b.n	80141b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80141b0:	2300      	movs	r3, #0
  }
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	3714      	adds	r7, #20
 80141b6:	46bd      	mov	sp, r7
 80141b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141bc:	4770      	bx	lr
	...

080141c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b084      	sub	sp, #16
 80141c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80141c6:	2300      	movs	r3, #0
 80141c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80141ca:	4b12      	ldr	r3, [pc, #72]	@ (8014214 <ip_reass_tmr+0x54>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80141d0:	e018      	b.n	8014204 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	7fdb      	ldrb	r3, [r3, #31]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d00b      	beq.n	80141f2 <ip_reass_tmr+0x32>
      r->timer--;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	7fdb      	ldrb	r3, [r3, #31]
 80141de:	3b01      	subs	r3, #1
 80141e0:	b2da      	uxtb	r2, r3
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	60fb      	str	r3, [r7, #12]
 80141f0:	e008      	b.n	8014204 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80141fc:	68b9      	ldr	r1, [r7, #8]
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f000 f80a 	bl	8014218 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d1e3      	bne.n	80141d2 <ip_reass_tmr+0x12>
    }
  }
}
 801420a:	bf00      	nop
 801420c:	bf00      	nop
 801420e:	3710      	adds	r7, #16
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}
 8014214:	240084e0 	.word	0x240084e0

08014218 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b088      	sub	sp, #32
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014222:	2300      	movs	r3, #0
 8014224:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014226:	683a      	ldr	r2, [r7, #0]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	429a      	cmp	r2, r3
 801422c:	d105      	bne.n	801423a <ip_reass_free_complete_datagram+0x22>
 801422e:	4b45      	ldr	r3, [pc, #276]	@ (8014344 <ip_reass_free_complete_datagram+0x12c>)
 8014230:	22ab      	movs	r2, #171	@ 0xab
 8014232:	4945      	ldr	r1, [pc, #276]	@ (8014348 <ip_reass_free_complete_datagram+0x130>)
 8014234:	4845      	ldr	r0, [pc, #276]	@ (801434c <ip_reass_free_complete_datagram+0x134>)
 8014236:	f001 fe8d 	bl	8015f54 <iprintf>
  if (prev != NULL) {
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d00a      	beq.n	8014256 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014240:	683b      	ldr	r3, [r7, #0]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	687a      	ldr	r2, [r7, #4]
 8014246:	429a      	cmp	r2, r3
 8014248:	d005      	beq.n	8014256 <ip_reass_free_complete_datagram+0x3e>
 801424a:	4b3e      	ldr	r3, [pc, #248]	@ (8014344 <ip_reass_free_complete_datagram+0x12c>)
 801424c:	22ad      	movs	r2, #173	@ 0xad
 801424e:	4940      	ldr	r1, [pc, #256]	@ (8014350 <ip_reass_free_complete_datagram+0x138>)
 8014250:	483e      	ldr	r0, [pc, #248]	@ (801434c <ip_reass_free_complete_datagram+0x134>)
 8014252:	f001 fe7f 	bl	8015f54 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	685b      	ldr	r3, [r3, #4]
 801425c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	889b      	ldrh	r3, [r3, #4]
 8014262:	b29b      	uxth	r3, r3
 8014264:	2b00      	cmp	r3, #0
 8014266:	d12a      	bne.n	80142be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	681a      	ldr	r2, [r3, #0]
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	6858      	ldr	r0, [r3, #4]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	3308      	adds	r3, #8
 801427e:	2214      	movs	r2, #20
 8014280:	4619      	mov	r1, r3
 8014282:	f002 f88c 	bl	801639e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014286:	2101      	movs	r1, #1
 8014288:	69b8      	ldr	r0, [r7, #24]
 801428a:	f7ff fc3d 	bl	8013b08 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801428e:	69b8      	ldr	r0, [r7, #24]
 8014290:	f7f8 fc22 	bl	800cad8 <pbuf_clen>
 8014294:	4603      	mov	r3, r0
 8014296:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014298:	8bfa      	ldrh	r2, [r7, #30]
 801429a:	8a7b      	ldrh	r3, [r7, #18]
 801429c:	4413      	add	r3, r2
 801429e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80142a2:	db05      	blt.n	80142b0 <ip_reass_free_complete_datagram+0x98>
 80142a4:	4b27      	ldr	r3, [pc, #156]	@ (8014344 <ip_reass_free_complete_datagram+0x12c>)
 80142a6:	22bc      	movs	r2, #188	@ 0xbc
 80142a8:	492a      	ldr	r1, [pc, #168]	@ (8014354 <ip_reass_free_complete_datagram+0x13c>)
 80142aa:	4828      	ldr	r0, [pc, #160]	@ (801434c <ip_reass_free_complete_datagram+0x134>)
 80142ac:	f001 fe52 	bl	8015f54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80142b0:	8bfa      	ldrh	r2, [r7, #30]
 80142b2:	8a7b      	ldrh	r3, [r7, #18]
 80142b4:	4413      	add	r3, r2
 80142b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80142b8:	69b8      	ldr	r0, [r7, #24]
 80142ba:	f7f8 fb85 	bl	800c9c8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	685b      	ldr	r3, [r3, #4]
 80142c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80142c4:	e01f      	b.n	8014306 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80142c6:	69bb      	ldr	r3, [r7, #24]
 80142c8:	685b      	ldr	r3, [r3, #4]
 80142ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80142d6:	68f8      	ldr	r0, [r7, #12]
 80142d8:	f7f8 fbfe 	bl	800cad8 <pbuf_clen>
 80142dc:	4603      	mov	r3, r0
 80142de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80142e0:	8bfa      	ldrh	r2, [r7, #30]
 80142e2:	8a7b      	ldrh	r3, [r7, #18]
 80142e4:	4413      	add	r3, r2
 80142e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80142ea:	db05      	blt.n	80142f8 <ip_reass_free_complete_datagram+0xe0>
 80142ec:	4b15      	ldr	r3, [pc, #84]	@ (8014344 <ip_reass_free_complete_datagram+0x12c>)
 80142ee:	22cc      	movs	r2, #204	@ 0xcc
 80142f0:	4918      	ldr	r1, [pc, #96]	@ (8014354 <ip_reass_free_complete_datagram+0x13c>)
 80142f2:	4816      	ldr	r0, [pc, #88]	@ (801434c <ip_reass_free_complete_datagram+0x134>)
 80142f4:	f001 fe2e 	bl	8015f54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80142f8:	8bfa      	ldrh	r2, [r7, #30]
 80142fa:	8a7b      	ldrh	r3, [r7, #18]
 80142fc:	4413      	add	r3, r2
 80142fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014300:	68f8      	ldr	r0, [r7, #12]
 8014302:	f7f8 fb61 	bl	800c9c8 <pbuf_free>
  while (p != NULL) {
 8014306:	69bb      	ldr	r3, [r7, #24]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d1dc      	bne.n	80142c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801430c:	6839      	ldr	r1, [r7, #0]
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f000 f8c2 	bl	8014498 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014314:	4b10      	ldr	r3, [pc, #64]	@ (8014358 <ip_reass_free_complete_datagram+0x140>)
 8014316:	881b      	ldrh	r3, [r3, #0]
 8014318:	8bfa      	ldrh	r2, [r7, #30]
 801431a:	429a      	cmp	r2, r3
 801431c:	d905      	bls.n	801432a <ip_reass_free_complete_datagram+0x112>
 801431e:	4b09      	ldr	r3, [pc, #36]	@ (8014344 <ip_reass_free_complete_datagram+0x12c>)
 8014320:	22d2      	movs	r2, #210	@ 0xd2
 8014322:	490e      	ldr	r1, [pc, #56]	@ (801435c <ip_reass_free_complete_datagram+0x144>)
 8014324:	4809      	ldr	r0, [pc, #36]	@ (801434c <ip_reass_free_complete_datagram+0x134>)
 8014326:	f001 fe15 	bl	8015f54 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801432a:	4b0b      	ldr	r3, [pc, #44]	@ (8014358 <ip_reass_free_complete_datagram+0x140>)
 801432c:	881a      	ldrh	r2, [r3, #0]
 801432e:	8bfb      	ldrh	r3, [r7, #30]
 8014330:	1ad3      	subs	r3, r2, r3
 8014332:	b29a      	uxth	r2, r3
 8014334:	4b08      	ldr	r3, [pc, #32]	@ (8014358 <ip_reass_free_complete_datagram+0x140>)
 8014336:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014338:	8bfb      	ldrh	r3, [r7, #30]
}
 801433a:	4618      	mov	r0, r3
 801433c:	3720      	adds	r7, #32
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
 8014342:	bf00      	nop
 8014344:	0801be98 	.word	0x0801be98
 8014348:	0801bed4 	.word	0x0801bed4
 801434c:	0801bee0 	.word	0x0801bee0
 8014350:	0801bf08 	.word	0x0801bf08
 8014354:	0801bf1c 	.word	0x0801bf1c
 8014358:	240084e4 	.word	0x240084e4
 801435c:	0801bf3c 	.word	0x0801bf3c

08014360 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b08a      	sub	sp, #40	@ 0x28
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
 8014368:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801436a:	2300      	movs	r3, #0
 801436c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801436e:	2300      	movs	r3, #0
 8014370:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014372:	2300      	movs	r3, #0
 8014374:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014376:	2300      	movs	r3, #0
 8014378:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801437a:	2300      	movs	r3, #0
 801437c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801437e:	4b28      	ldr	r3, [pc, #160]	@ (8014420 <ip_reass_remove_oldest_datagram+0xc0>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014384:	e030      	b.n	80143e8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014388:	695a      	ldr	r2, [r3, #20]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	68db      	ldr	r3, [r3, #12]
 801438e:	429a      	cmp	r2, r3
 8014390:	d10c      	bne.n	80143ac <ip_reass_remove_oldest_datagram+0x4c>
 8014392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014394:	699a      	ldr	r2, [r3, #24]
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	691b      	ldr	r3, [r3, #16]
 801439a:	429a      	cmp	r2, r3
 801439c:	d106      	bne.n	80143ac <ip_reass_remove_oldest_datagram+0x4c>
 801439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143a0:	899a      	ldrh	r2, [r3, #12]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	889b      	ldrh	r3, [r3, #4]
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	429a      	cmp	r2, r3
 80143aa:	d014      	beq.n	80143d6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	3301      	adds	r3, #1
 80143b0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80143b2:	6a3b      	ldr	r3, [r7, #32]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d104      	bne.n	80143c2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80143b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143ba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	61bb      	str	r3, [r7, #24]
 80143c0:	e009      	b.n	80143d6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80143c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143c4:	7fda      	ldrb	r2, [r3, #31]
 80143c6:	6a3b      	ldr	r3, [r7, #32]
 80143c8:	7fdb      	ldrb	r3, [r3, #31]
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d803      	bhi.n	80143d6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80143ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143d0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80143d2:	69fb      	ldr	r3, [r7, #28]
 80143d4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80143d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d001      	beq.n	80143e2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80143de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143e0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80143e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80143e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d1cb      	bne.n	8014386 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80143ee:	6a3b      	ldr	r3, [r7, #32]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d008      	beq.n	8014406 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80143f4:	69b9      	ldr	r1, [r7, #24]
 80143f6:	6a38      	ldr	r0, [r7, #32]
 80143f8:	f7ff ff0e 	bl	8014218 <ip_reass_free_complete_datagram>
 80143fc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80143fe:	697a      	ldr	r2, [r7, #20]
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	4413      	add	r3, r2
 8014404:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014406:	697a      	ldr	r2, [r7, #20]
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	429a      	cmp	r2, r3
 801440c:	da02      	bge.n	8014414 <ip_reass_remove_oldest_datagram+0xb4>
 801440e:	693b      	ldr	r3, [r7, #16]
 8014410:	2b01      	cmp	r3, #1
 8014412:	dcac      	bgt.n	801436e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014414:	697b      	ldr	r3, [r7, #20]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3728      	adds	r7, #40	@ 0x28
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
 801441e:	bf00      	nop
 8014420:	240084e0 	.word	0x240084e0

08014424 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b084      	sub	sp, #16
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801442e:	2004      	movs	r0, #4
 8014430:	f7f7 fbe4 	bl	800bbfc <memp_malloc>
 8014434:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d110      	bne.n	801445e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801443c:	6839      	ldr	r1, [r7, #0]
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f7ff ff8e 	bl	8014360 <ip_reass_remove_oldest_datagram>
 8014444:	4602      	mov	r2, r0
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	4293      	cmp	r3, r2
 801444a:	dc03      	bgt.n	8014454 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801444c:	2004      	movs	r0, #4
 801444e:	f7f7 fbd5 	bl	800bbfc <memp_malloc>
 8014452:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d101      	bne.n	801445e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801445a:	2300      	movs	r3, #0
 801445c:	e016      	b.n	801448c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801445e:	2220      	movs	r2, #32
 8014460:	2100      	movs	r1, #0
 8014462:	68f8      	ldr	r0, [r7, #12]
 8014464:	f001 ff0a 	bl	801627c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	220f      	movs	r2, #15
 801446c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801446e:	4b09      	ldr	r3, [pc, #36]	@ (8014494 <ip_reass_enqueue_new_datagram+0x70>)
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014476:	4a07      	ldr	r2, [pc, #28]	@ (8014494 <ip_reass_enqueue_new_datagram+0x70>)
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	3308      	adds	r3, #8
 8014480:	2214      	movs	r2, #20
 8014482:	6879      	ldr	r1, [r7, #4]
 8014484:	4618      	mov	r0, r3
 8014486:	f001 ff8a 	bl	801639e <memcpy>
  return ipr;
 801448a:	68fb      	ldr	r3, [r7, #12]
}
 801448c:	4618      	mov	r0, r3
 801448e:	3710      	adds	r7, #16
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}
 8014494:	240084e0 	.word	0x240084e0

08014498 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b082      	sub	sp, #8
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80144a2:	4b10      	ldr	r3, [pc, #64]	@ (80144e4 <ip_reass_dequeue_datagram+0x4c>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	687a      	ldr	r2, [r7, #4]
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d104      	bne.n	80144b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	4a0c      	ldr	r2, [pc, #48]	@ (80144e4 <ip_reass_dequeue_datagram+0x4c>)
 80144b2:	6013      	str	r3, [r2, #0]
 80144b4:	e00d      	b.n	80144d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d106      	bne.n	80144ca <ip_reass_dequeue_datagram+0x32>
 80144bc:	4b0a      	ldr	r3, [pc, #40]	@ (80144e8 <ip_reass_dequeue_datagram+0x50>)
 80144be:	f240 1245 	movw	r2, #325	@ 0x145
 80144c2:	490a      	ldr	r1, [pc, #40]	@ (80144ec <ip_reass_dequeue_datagram+0x54>)
 80144c4:	480a      	ldr	r0, [pc, #40]	@ (80144f0 <ip_reass_dequeue_datagram+0x58>)
 80144c6:	f001 fd45 	bl	8015f54 <iprintf>
    prev->next = ipr->next;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681a      	ldr	r2, [r3, #0]
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80144d2:	6879      	ldr	r1, [r7, #4]
 80144d4:	2004      	movs	r0, #4
 80144d6:	f7f7 fc01 	bl	800bcdc <memp_free>
}
 80144da:	bf00      	nop
 80144dc:	3708      	adds	r7, #8
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}
 80144e2:	bf00      	nop
 80144e4:	240084e0 	.word	0x240084e0
 80144e8:	0801be98 	.word	0x0801be98
 80144ec:	0801bf60 	.word	0x0801bf60
 80144f0:	0801bee0 	.word	0x0801bee0

080144f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b08c      	sub	sp, #48	@ 0x30
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	60f8      	str	r0, [r7, #12]
 80144fc:	60b9      	str	r1, [r7, #8]
 80144fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014500:	2300      	movs	r3, #0
 8014502:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014504:	2301      	movs	r3, #1
 8014506:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	685b      	ldr	r3, [r3, #4]
 801450c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801450e:	69fb      	ldr	r3, [r7, #28]
 8014510:	885b      	ldrh	r3, [r3, #2]
 8014512:	b29b      	uxth	r3, r3
 8014514:	4618      	mov	r0, r3
 8014516:	f7f6 fe41 	bl	800b19c <lwip_htons>
 801451a:	4603      	mov	r3, r0
 801451c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801451e:	69fb      	ldr	r3, [r7, #28]
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	f003 030f 	and.w	r3, r3, #15
 8014526:	b2db      	uxtb	r3, r3
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801452c:	7e7b      	ldrb	r3, [r7, #25]
 801452e:	b29b      	uxth	r3, r3
 8014530:	8b7a      	ldrh	r2, [r7, #26]
 8014532:	429a      	cmp	r2, r3
 8014534:	d202      	bcs.n	801453c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014536:	f04f 33ff 	mov.w	r3, #4294967295
 801453a:	e135      	b.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801453c:	7e7b      	ldrb	r3, [r7, #25]
 801453e:	b29b      	uxth	r3, r3
 8014540:	8b7a      	ldrh	r2, [r7, #26]
 8014542:	1ad3      	subs	r3, r2, r3
 8014544:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014546:	69fb      	ldr	r3, [r7, #28]
 8014548:	88db      	ldrh	r3, [r3, #6]
 801454a:	b29b      	uxth	r3, r3
 801454c:	4618      	mov	r0, r3
 801454e:	f7f6 fe25 	bl	800b19c <lwip_htons>
 8014552:	4603      	mov	r3, r0
 8014554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014558:	b29b      	uxth	r3, r3
 801455a:	00db      	lsls	r3, r3, #3
 801455c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	685b      	ldr	r3, [r3, #4]
 8014562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8014564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014566:	2200      	movs	r2, #0
 8014568:	701a      	strb	r2, [r3, #0]
 801456a:	2200      	movs	r2, #0
 801456c:	705a      	strb	r2, [r3, #1]
 801456e:	2200      	movs	r2, #0
 8014570:	709a      	strb	r2, [r3, #2]
 8014572:	2200      	movs	r2, #0
 8014574:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014578:	8afa      	ldrh	r2, [r7, #22]
 801457a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801457c:	8afa      	ldrh	r2, [r7, #22]
 801457e:	8b7b      	ldrh	r3, [r7, #26]
 8014580:	4413      	add	r3, r2
 8014582:	b29a      	uxth	r2, r3
 8014584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014586:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801458a:	88db      	ldrh	r3, [r3, #6]
 801458c:	b29b      	uxth	r3, r3
 801458e:	8afa      	ldrh	r2, [r7, #22]
 8014590:	429a      	cmp	r2, r3
 8014592:	d902      	bls.n	801459a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014594:	f04f 33ff 	mov.w	r3, #4294967295
 8014598:	e106      	b.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	685b      	ldr	r3, [r3, #4]
 801459e:	627b      	str	r3, [r7, #36]	@ 0x24
 80145a0:	e068      	b.n	8014674 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80145a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80145a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145aa:	889b      	ldrh	r3, [r3, #4]
 80145ac:	b29a      	uxth	r2, r3
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	889b      	ldrh	r3, [r3, #4]
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d235      	bcs.n	8014624 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80145b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80145be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d020      	beq.n	8014606 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80145c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145c6:	889b      	ldrh	r3, [r3, #4]
 80145c8:	b29a      	uxth	r2, r3
 80145ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145cc:	88db      	ldrh	r3, [r3, #6]
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d307      	bcc.n	80145e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80145d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145d6:	88db      	ldrh	r3, [r3, #6]
 80145d8:	b29a      	uxth	r2, r3
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	889b      	ldrh	r3, [r3, #4]
 80145de:	b29b      	uxth	r3, r3
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d902      	bls.n	80145ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145e4:	f04f 33ff 	mov.w	r3, #4294967295
 80145e8:	e0de      	b.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80145ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ec:	68ba      	ldr	r2, [r7, #8]
 80145ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80145f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145f2:	88db      	ldrh	r3, [r3, #6]
 80145f4:	b29a      	uxth	r2, r3
 80145f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145f8:	889b      	ldrh	r3, [r3, #4]
 80145fa:	b29b      	uxth	r3, r3
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d03d      	beq.n	801467c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014600:	2300      	movs	r3, #0
 8014602:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014604:	e03a      	b.n	801467c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014608:	88db      	ldrh	r3, [r3, #6]
 801460a:	b29a      	uxth	r2, r3
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	889b      	ldrh	r3, [r3, #4]
 8014610:	b29b      	uxth	r3, r3
 8014612:	429a      	cmp	r2, r3
 8014614:	d902      	bls.n	801461c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014616:	f04f 33ff 	mov.w	r3, #4294967295
 801461a:	e0c5      	b.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	68ba      	ldr	r2, [r7, #8]
 8014620:	605a      	str	r2, [r3, #4]
      break;
 8014622:	e02b      	b.n	801467c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014626:	889b      	ldrh	r3, [r3, #4]
 8014628:	b29a      	uxth	r2, r3
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	889b      	ldrh	r3, [r3, #4]
 801462e:	b29b      	uxth	r3, r3
 8014630:	429a      	cmp	r2, r3
 8014632:	d102      	bne.n	801463a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014634:	f04f 33ff 	mov.w	r3, #4294967295
 8014638:	e0b6      	b.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801463c:	889b      	ldrh	r3, [r3, #4]
 801463e:	b29a      	uxth	r2, r3
 8014640:	693b      	ldr	r3, [r7, #16]
 8014642:	88db      	ldrh	r3, [r3, #6]
 8014644:	b29b      	uxth	r3, r3
 8014646:	429a      	cmp	r2, r3
 8014648:	d202      	bcs.n	8014650 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801464a:	f04f 33ff 	mov.w	r3, #4294967295
 801464e:	e0ab      	b.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014652:	2b00      	cmp	r3, #0
 8014654:	d009      	beq.n	801466a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014658:	88db      	ldrh	r3, [r3, #6]
 801465a:	b29a      	uxth	r2, r3
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	889b      	ldrh	r3, [r3, #4]
 8014660:	b29b      	uxth	r3, r3
 8014662:	429a      	cmp	r2, r3
 8014664:	d001      	beq.n	801466a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014666:	2300      	movs	r3, #0
 8014668:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8014674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014676:	2b00      	cmp	r3, #0
 8014678:	d193      	bne.n	80145a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801467a:	e000      	b.n	801467e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801467c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014680:	2b00      	cmp	r3, #0
 8014682:	d12d      	bne.n	80146e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014686:	2b00      	cmp	r3, #0
 8014688:	d01c      	beq.n	80146c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801468c:	88db      	ldrh	r3, [r3, #6]
 801468e:	b29a      	uxth	r2, r3
 8014690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014692:	889b      	ldrh	r3, [r3, #4]
 8014694:	b29b      	uxth	r3, r3
 8014696:	429a      	cmp	r2, r3
 8014698:	d906      	bls.n	80146a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801469a:	4b45      	ldr	r3, [pc, #276]	@ (80147b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801469c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80146a0:	4944      	ldr	r1, [pc, #272]	@ (80147b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80146a2:	4845      	ldr	r0, [pc, #276]	@ (80147b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80146a4:	f001 fc56 	bl	8015f54 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80146a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146aa:	68ba      	ldr	r2, [r7, #8]
 80146ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80146ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146b0:	88db      	ldrh	r3, [r3, #6]
 80146b2:	b29a      	uxth	r2, r3
 80146b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b6:	889b      	ldrh	r3, [r3, #4]
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	429a      	cmp	r2, r3
 80146bc:	d010      	beq.n	80146e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80146be:	2300      	movs	r3, #0
 80146c0:	623b      	str	r3, [r7, #32]
 80146c2:	e00d      	b.n	80146e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d006      	beq.n	80146da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80146cc:	4b38      	ldr	r3, [pc, #224]	@ (80147b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80146ce:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80146d2:	493a      	ldr	r1, [pc, #232]	@ (80147bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80146d4:	4838      	ldr	r0, [pc, #224]	@ (80147b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80146d6:	f001 fc3d 	bl	8015f54 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	68ba      	ldr	r2, [r7, #8]
 80146de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d105      	bne.n	80146f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	7f9b      	ldrb	r3, [r3, #30]
 80146ea:	f003 0301 	and.w	r3, r3, #1
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d059      	beq.n	80147a6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80146f2:	6a3b      	ldr	r3, [r7, #32]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d04f      	beq.n	8014798 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d006      	beq.n	801470e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	685b      	ldr	r3, [r3, #4]
 8014706:	889b      	ldrh	r3, [r3, #4]
 8014708:	b29b      	uxth	r3, r3
 801470a:	2b00      	cmp	r3, #0
 801470c:	d002      	beq.n	8014714 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801470e:	2300      	movs	r3, #0
 8014710:	623b      	str	r3, [r7, #32]
 8014712:	e041      	b.n	8014798 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014716:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8014718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801471e:	e012      	b.n	8014746 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8014726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014728:	88db      	ldrh	r3, [r3, #6]
 801472a:	b29a      	uxth	r2, r3
 801472c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801472e:	889b      	ldrh	r3, [r3, #4]
 8014730:	b29b      	uxth	r3, r3
 8014732:	429a      	cmp	r2, r3
 8014734:	d002      	beq.n	801473c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014736:	2300      	movs	r3, #0
 8014738:	623b      	str	r3, [r7, #32]
            break;
 801473a:	e007      	b.n	801474c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801473e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014748:	2b00      	cmp	r3, #0
 801474a:	d1e9      	bne.n	8014720 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801474c:	6a3b      	ldr	r3, [r7, #32]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d022      	beq.n	8014798 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	685b      	ldr	r3, [r3, #4]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d106      	bne.n	8014768 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801475a:	4b15      	ldr	r3, [pc, #84]	@ (80147b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801475c:	f240 12df 	movw	r2, #479	@ 0x1df
 8014760:	4917      	ldr	r1, [pc, #92]	@ (80147c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014762:	4815      	ldr	r0, [pc, #84]	@ (80147b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014764:	f001 fbf6 	bl	8015f54 <iprintf>
          LWIP_ASSERT("sanity check",
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014770:	429a      	cmp	r2, r3
 8014772:	d106      	bne.n	8014782 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014774:	4b0e      	ldr	r3, [pc, #56]	@ (80147b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014776:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801477a:	4911      	ldr	r1, [pc, #68]	@ (80147c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801477c:	480e      	ldr	r0, [pc, #56]	@ (80147b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801477e:	f001 fbe9 	bl	8015f54 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d006      	beq.n	8014798 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801478a:	4b09      	ldr	r3, [pc, #36]	@ (80147b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801478c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8014790:	490c      	ldr	r1, [pc, #48]	@ (80147c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014792:	4809      	ldr	r0, [pc, #36]	@ (80147b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014794:	f001 fbde 	bl	8015f54 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014798:	6a3b      	ldr	r3, [r7, #32]
 801479a:	2b00      	cmp	r3, #0
 801479c:	bf14      	ite	ne
 801479e:	2301      	movne	r3, #1
 80147a0:	2300      	moveq	r3, #0
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	e000      	b.n	80147a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80147a6:	2300      	movs	r3, #0
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3730      	adds	r7, #48	@ 0x30
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	0801be98 	.word	0x0801be98
 80147b4:	0801bf7c 	.word	0x0801bf7c
 80147b8:	0801bee0 	.word	0x0801bee0
 80147bc:	0801bf9c 	.word	0x0801bf9c
 80147c0:	0801bfd4 	.word	0x0801bfd4
 80147c4:	0801bfe4 	.word	0x0801bfe4

080147c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b08e      	sub	sp, #56	@ 0x38
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80147d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	f003 030f 	and.w	r3, r3, #15
 80147de:	b2db      	uxtb	r3, r3
 80147e0:	009b      	lsls	r3, r3, #2
 80147e2:	b2db      	uxtb	r3, r3
 80147e4:	2b14      	cmp	r3, #20
 80147e6:	f040 8171 	bne.w	8014acc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80147ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147ec:	88db      	ldrh	r3, [r3, #6]
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7f6 fcd3 	bl	800b19c <lwip_htons>
 80147f6:	4603      	mov	r3, r0
 80147f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80147fc:	b29b      	uxth	r3, r3
 80147fe:	00db      	lsls	r3, r3, #3
 8014800:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014804:	885b      	ldrh	r3, [r3, #2]
 8014806:	b29b      	uxth	r3, r3
 8014808:	4618      	mov	r0, r3
 801480a:	f7f6 fcc7 	bl	800b19c <lwip_htons>
 801480e:	4603      	mov	r3, r0
 8014810:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014814:	781b      	ldrb	r3, [r3, #0]
 8014816:	f003 030f 	and.w	r3, r3, #15
 801481a:	b2db      	uxtb	r3, r3
 801481c:	009b      	lsls	r3, r3, #2
 801481e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8014822:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014826:	b29b      	uxth	r3, r3
 8014828:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801482a:	429a      	cmp	r2, r3
 801482c:	f0c0 8150 	bcc.w	8014ad0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014830:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014834:	b29b      	uxth	r3, r3
 8014836:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014838:	1ad3      	subs	r3, r2, r3
 801483a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7f8 f94b 	bl	800cad8 <pbuf_clen>
 8014842:	4603      	mov	r3, r0
 8014844:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014846:	4b8c      	ldr	r3, [pc, #560]	@ (8014a78 <ip4_reass+0x2b0>)
 8014848:	881b      	ldrh	r3, [r3, #0]
 801484a:	461a      	mov	r2, r3
 801484c:	8c3b      	ldrh	r3, [r7, #32]
 801484e:	4413      	add	r3, r2
 8014850:	2b0a      	cmp	r3, #10
 8014852:	dd10      	ble.n	8014876 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014854:	8c3b      	ldrh	r3, [r7, #32]
 8014856:	4619      	mov	r1, r3
 8014858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801485a:	f7ff fd81 	bl	8014360 <ip_reass_remove_oldest_datagram>
 801485e:	4603      	mov	r3, r0
 8014860:	2b00      	cmp	r3, #0
 8014862:	f000 8137 	beq.w	8014ad4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014866:	4b84      	ldr	r3, [pc, #528]	@ (8014a78 <ip4_reass+0x2b0>)
 8014868:	881b      	ldrh	r3, [r3, #0]
 801486a:	461a      	mov	r2, r3
 801486c:	8c3b      	ldrh	r3, [r7, #32]
 801486e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014870:	2b0a      	cmp	r3, #10
 8014872:	f300 812f 	bgt.w	8014ad4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014876:	4b81      	ldr	r3, [pc, #516]	@ (8014a7c <ip4_reass+0x2b4>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	633b      	str	r3, [r7, #48]	@ 0x30
 801487c:	e015      	b.n	80148aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014880:	695a      	ldr	r2, [r3, #20]
 8014882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014884:	68db      	ldr	r3, [r3, #12]
 8014886:	429a      	cmp	r2, r3
 8014888:	d10c      	bne.n	80148a4 <ip4_reass+0xdc>
 801488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801488c:	699a      	ldr	r2, [r3, #24]
 801488e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014890:	691b      	ldr	r3, [r3, #16]
 8014892:	429a      	cmp	r2, r3
 8014894:	d106      	bne.n	80148a4 <ip4_reass+0xdc>
 8014896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014898:	899a      	ldrh	r2, [r3, #12]
 801489a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801489c:	889b      	ldrh	r3, [r3, #4]
 801489e:	b29b      	uxth	r3, r3
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d006      	beq.n	80148b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80148a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80148aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d1e6      	bne.n	801487e <ip4_reass+0xb6>
 80148b0:	e000      	b.n	80148b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80148b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80148b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d109      	bne.n	80148ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80148ba:	8c3b      	ldrh	r3, [r7, #32]
 80148bc:	4619      	mov	r1, r3
 80148be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80148c0:	f7ff fdb0 	bl	8014424 <ip_reass_enqueue_new_datagram>
 80148c4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80148c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d11c      	bne.n	8014906 <ip4_reass+0x13e>
      goto nullreturn;
 80148cc:	e105      	b.n	8014ada <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80148ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148d0:	88db      	ldrh	r3, [r3, #6]
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7f6 fc61 	bl	800b19c <lwip_htons>
 80148da:	4603      	mov	r3, r0
 80148dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d110      	bne.n	8014906 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80148e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148e6:	89db      	ldrh	r3, [r3, #14]
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7f6 fc57 	bl	800b19c <lwip_htons>
 80148ee:	4603      	mov	r3, r0
 80148f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d006      	beq.n	8014906 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80148f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148fa:	3308      	adds	r3, #8
 80148fc:	2214      	movs	r2, #20
 80148fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014900:	4618      	mov	r0, r3
 8014902:	f001 fd4c 	bl	801639e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014908:	88db      	ldrh	r3, [r3, #6]
 801490a:	b29b      	uxth	r3, r3
 801490c:	f003 0320 	and.w	r3, r3, #32
 8014910:	2b00      	cmp	r3, #0
 8014912:	bf0c      	ite	eq
 8014914:	2301      	moveq	r3, #1
 8014916:	2300      	movne	r3, #0
 8014918:	b2db      	uxtb	r3, r3
 801491a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801491c:	69fb      	ldr	r3, [r7, #28]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d00e      	beq.n	8014940 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014922:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014924:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014926:	4413      	add	r3, r2
 8014928:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801492a:	8b7a      	ldrh	r2, [r7, #26]
 801492c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801492e:	429a      	cmp	r2, r3
 8014930:	f0c0 80a0 	bcc.w	8014a74 <ip4_reass+0x2ac>
 8014934:	8b7b      	ldrh	r3, [r7, #26]
 8014936:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801493a:	4293      	cmp	r3, r2
 801493c:	f200 809a 	bhi.w	8014a74 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014940:	69fa      	ldr	r2, [r7, #28]
 8014942:	6879      	ldr	r1, [r7, #4]
 8014944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014946:	f7ff fdd5 	bl	80144f4 <ip_reass_chain_frag_into_datagram_and_validate>
 801494a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801494c:	697b      	ldr	r3, [r7, #20]
 801494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014952:	f000 809b 	beq.w	8014a8c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014956:	4b48      	ldr	r3, [pc, #288]	@ (8014a78 <ip4_reass+0x2b0>)
 8014958:	881a      	ldrh	r2, [r3, #0]
 801495a:	8c3b      	ldrh	r3, [r7, #32]
 801495c:	4413      	add	r3, r2
 801495e:	b29a      	uxth	r2, r3
 8014960:	4b45      	ldr	r3, [pc, #276]	@ (8014a78 <ip4_reass+0x2b0>)
 8014962:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d00d      	beq.n	8014986 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801496a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801496c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801496e:	4413      	add	r3, r2
 8014970:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014974:	8a7a      	ldrh	r2, [r7, #18]
 8014976:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801497a:	7f9b      	ldrb	r3, [r3, #30]
 801497c:	f043 0301 	orr.w	r3, r3, #1
 8014980:	b2da      	uxtb	r2, r3
 8014982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014984:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	2b01      	cmp	r3, #1
 801498a:	d171      	bne.n	8014a70 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801498e:	8b9b      	ldrh	r3, [r3, #28]
 8014990:	3314      	adds	r3, #20
 8014992:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a0:	685b      	ldr	r3, [r3, #4]
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80149a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a8:	3308      	adds	r3, #8
 80149aa:	2214      	movs	r2, #20
 80149ac:	4619      	mov	r1, r3
 80149ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149b0:	f001 fcf5 	bl	801639e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80149b4:	8a3b      	ldrh	r3, [r7, #16]
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7f6 fbf0 	bl	800b19c <lwip_htons>
 80149bc:	4603      	mov	r3, r0
 80149be:	461a      	mov	r2, r3
 80149c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80149c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c6:	2200      	movs	r2, #0
 80149c8:	719a      	strb	r2, [r3, #6]
 80149ca:	2200      	movs	r2, #0
 80149cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80149ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149d0:	2200      	movs	r2, #0
 80149d2:	729a      	strb	r2, [r3, #10]
 80149d4:	2200      	movs	r2, #0
 80149d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80149d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149da:	685b      	ldr	r3, [r3, #4]
 80149dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80149de:	e00d      	b.n	80149fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80149e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149e2:	685b      	ldr	r3, [r3, #4]
 80149e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80149e6:	2114      	movs	r1, #20
 80149e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80149ea:	f7f7 ff67 	bl	800c8bc <pbuf_remove_header>
      pbuf_cat(p, r);
 80149ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f7f8 f8ab 	bl	800cb4c <pbuf_cat>
      r = iprh->next_pbuf;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80149fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d1ee      	bne.n	80149e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014a02:	4b1e      	ldr	r3, [pc, #120]	@ (8014a7c <ip4_reass+0x2b4>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d102      	bne.n	8014a12 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014a10:	e010      	b.n	8014a34 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014a12:	4b1a      	ldr	r3, [pc, #104]	@ (8014a7c <ip4_reass+0x2b4>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014a18:	e007      	b.n	8014a2a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d006      	beq.n	8014a32 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d1f4      	bne.n	8014a1a <ip4_reass+0x252>
 8014a30:	e000      	b.n	8014a34 <ip4_reass+0x26c>
          break;
 8014a32:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014a34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a38:	f7ff fd2e 	bl	8014498 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f7f8 f84b 	bl	800cad8 <pbuf_clen>
 8014a42:	4603      	mov	r3, r0
 8014a44:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014a46:	4b0c      	ldr	r3, [pc, #48]	@ (8014a78 <ip4_reass+0x2b0>)
 8014a48:	881b      	ldrh	r3, [r3, #0]
 8014a4a:	8c3a      	ldrh	r2, [r7, #32]
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d906      	bls.n	8014a5e <ip4_reass+0x296>
 8014a50:	4b0b      	ldr	r3, [pc, #44]	@ (8014a80 <ip4_reass+0x2b8>)
 8014a52:	f240 229b 	movw	r2, #667	@ 0x29b
 8014a56:	490b      	ldr	r1, [pc, #44]	@ (8014a84 <ip4_reass+0x2bc>)
 8014a58:	480b      	ldr	r0, [pc, #44]	@ (8014a88 <ip4_reass+0x2c0>)
 8014a5a:	f001 fa7b 	bl	8015f54 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014a5e:	4b06      	ldr	r3, [pc, #24]	@ (8014a78 <ip4_reass+0x2b0>)
 8014a60:	881a      	ldrh	r2, [r3, #0]
 8014a62:	8c3b      	ldrh	r3, [r7, #32]
 8014a64:	1ad3      	subs	r3, r2, r3
 8014a66:	b29a      	uxth	r2, r3
 8014a68:	4b03      	ldr	r3, [pc, #12]	@ (8014a78 <ip4_reass+0x2b0>)
 8014a6a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	e038      	b.n	8014ae2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014a70:	2300      	movs	r3, #0
 8014a72:	e036      	b.n	8014ae2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014a74:	bf00      	nop
 8014a76:	e00a      	b.n	8014a8e <ip4_reass+0x2c6>
 8014a78:	240084e4 	.word	0x240084e4
 8014a7c:	240084e0 	.word	0x240084e0
 8014a80:	0801be98 	.word	0x0801be98
 8014a84:	0801c008 	.word	0x0801c008
 8014a88:	0801bee0 	.word	0x0801bee0
    goto nullreturn_ipr;
 8014a8c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d106      	bne.n	8014aa2 <ip4_reass+0x2da>
 8014a94:	4b15      	ldr	r3, [pc, #84]	@ (8014aec <ip4_reass+0x324>)
 8014a96:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8014a9a:	4915      	ldr	r1, [pc, #84]	@ (8014af0 <ip4_reass+0x328>)
 8014a9c:	4815      	ldr	r0, [pc, #84]	@ (8014af4 <ip4_reass+0x32c>)
 8014a9e:	f001 fa59 	bl	8015f54 <iprintf>
  if (ipr->p == NULL) {
 8014aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aa4:	685b      	ldr	r3, [r3, #4]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d116      	bne.n	8014ad8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014aaa:	4b13      	ldr	r3, [pc, #76]	@ (8014af8 <ip4_reass+0x330>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d006      	beq.n	8014ac2 <ip4_reass+0x2fa>
 8014ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8014aec <ip4_reass+0x324>)
 8014ab6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014aba:	4910      	ldr	r1, [pc, #64]	@ (8014afc <ip4_reass+0x334>)
 8014abc:	480d      	ldr	r0, [pc, #52]	@ (8014af4 <ip4_reass+0x32c>)
 8014abe:	f001 fa49 	bl	8015f54 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014ac2:	2100      	movs	r1, #0
 8014ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ac6:	f7ff fce7 	bl	8014498 <ip_reass_dequeue_datagram>
 8014aca:	e006      	b.n	8014ada <ip4_reass+0x312>
    goto nullreturn;
 8014acc:	bf00      	nop
 8014ace:	e004      	b.n	8014ada <ip4_reass+0x312>
    goto nullreturn;
 8014ad0:	bf00      	nop
 8014ad2:	e002      	b.n	8014ada <ip4_reass+0x312>
      goto nullreturn;
 8014ad4:	bf00      	nop
 8014ad6:	e000      	b.n	8014ada <ip4_reass+0x312>
  }

nullreturn:
 8014ad8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f7f7 ff74 	bl	800c9c8 <pbuf_free>
  return NULL;
 8014ae0:	2300      	movs	r3, #0
}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	3738      	adds	r7, #56	@ 0x38
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	0801be98 	.word	0x0801be98
 8014af0:	0801c024 	.word	0x0801c024
 8014af4:	0801bee0 	.word	0x0801bee0
 8014af8:	240084e0 	.word	0x240084e0
 8014afc:	0801c030 	.word	0x0801c030

08014b00 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014b04:	2005      	movs	r0, #5
 8014b06:	f7f7 f879 	bl	800bbfc <memp_malloc>
 8014b0a:	4603      	mov	r3, r0
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d106      	bne.n	8014b2c <ip_frag_free_pbuf_custom_ref+0x1c>
 8014b1e:	4b07      	ldr	r3, [pc, #28]	@ (8014b3c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014b20:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8014b24:	4906      	ldr	r1, [pc, #24]	@ (8014b40 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014b26:	4807      	ldr	r0, [pc, #28]	@ (8014b44 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014b28:	f001 fa14 	bl	8015f54 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014b2c:	6879      	ldr	r1, [r7, #4]
 8014b2e:	2005      	movs	r0, #5
 8014b30:	f7f7 f8d4 	bl	800bcdc <memp_free>
}
 8014b34:	bf00      	nop
 8014b36:	3708      	adds	r7, #8
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}
 8014b3c:	0801be98 	.word	0x0801be98
 8014b40:	0801c050 	.word	0x0801c050
 8014b44:	0801bee0 	.word	0x0801bee0

08014b48 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b084      	sub	sp, #16
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d106      	bne.n	8014b68 <ipfrag_free_pbuf_custom+0x20>
 8014b5a:	4b11      	ldr	r3, [pc, #68]	@ (8014ba0 <ipfrag_free_pbuf_custom+0x58>)
 8014b5c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014b60:	4910      	ldr	r1, [pc, #64]	@ (8014ba4 <ipfrag_free_pbuf_custom+0x5c>)
 8014b62:	4811      	ldr	r0, [pc, #68]	@ (8014ba8 <ipfrag_free_pbuf_custom+0x60>)
 8014b64:	f001 f9f6 	bl	8015f54 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014b68:	68fa      	ldr	r2, [r7, #12]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d006      	beq.n	8014b7e <ipfrag_free_pbuf_custom+0x36>
 8014b70:	4b0b      	ldr	r3, [pc, #44]	@ (8014ba0 <ipfrag_free_pbuf_custom+0x58>)
 8014b72:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8014b76:	490d      	ldr	r1, [pc, #52]	@ (8014bac <ipfrag_free_pbuf_custom+0x64>)
 8014b78:	480b      	ldr	r0, [pc, #44]	@ (8014ba8 <ipfrag_free_pbuf_custom+0x60>)
 8014b7a:	f001 f9eb 	bl	8015f54 <iprintf>
  if (pcr->original != NULL) {
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	695b      	ldr	r3, [r3, #20]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d004      	beq.n	8014b90 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	695b      	ldr	r3, [r3, #20]
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f7f7 ff1c 	bl	800c9c8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014b90:	68f8      	ldr	r0, [r7, #12]
 8014b92:	f7ff ffbd 	bl	8014b10 <ip_frag_free_pbuf_custom_ref>
}
 8014b96:	bf00      	nop
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	0801be98 	.word	0x0801be98
 8014ba4:	0801c05c 	.word	0x0801c05c
 8014ba8:	0801bee0 	.word	0x0801bee0
 8014bac:	0801c068 	.word	0x0801c068

08014bb0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b094      	sub	sp, #80	@ 0x50
 8014bb4:	af02      	add	r7, sp, #8
 8014bb6:	60f8      	str	r0, [r7, #12]
 8014bb8:	60b9      	str	r1, [r7, #8]
 8014bba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014bc6:	3b14      	subs	r3, #20
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	da00      	bge.n	8014bce <ip4_frag+0x1e>
 8014bcc:	3307      	adds	r3, #7
 8014bce:	10db      	asrs	r3, r3, #3
 8014bd0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014bd2:	2314      	movs	r3, #20
 8014bd4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	685b      	ldr	r3, [r3, #4]
 8014bda:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8014bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bde:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be2:	781b      	ldrb	r3, [r3, #0]
 8014be4:	f003 030f 	and.w	r3, r3, #15
 8014be8:	b2db      	uxtb	r3, r3
 8014bea:	009b      	lsls	r3, r3, #2
 8014bec:	b2db      	uxtb	r3, r3
 8014bee:	2b14      	cmp	r3, #20
 8014bf0:	d002      	beq.n	8014bf8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014bf2:	f06f 0305 	mvn.w	r3, #5
 8014bf6:	e110      	b.n	8014e1a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	895b      	ldrh	r3, [r3, #10]
 8014bfc:	2b13      	cmp	r3, #19
 8014bfe:	d809      	bhi.n	8014c14 <ip4_frag+0x64>
 8014c00:	4b88      	ldr	r3, [pc, #544]	@ (8014e24 <ip4_frag+0x274>)
 8014c02:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8014c06:	4988      	ldr	r1, [pc, #544]	@ (8014e28 <ip4_frag+0x278>)
 8014c08:	4888      	ldr	r0, [pc, #544]	@ (8014e2c <ip4_frag+0x27c>)
 8014c0a:	f001 f9a3 	bl	8015f54 <iprintf>
 8014c0e:	f06f 0305 	mvn.w	r3, #5
 8014c12:	e102      	b.n	8014e1a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c16:	88db      	ldrh	r3, [r3, #6]
 8014c18:	b29b      	uxth	r3, r3
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7f6 fabe 	bl	800b19c <lwip_htons>
 8014c20:	4603      	mov	r3, r0
 8014c22:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8014c24:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014c26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014c2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014c2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014c34:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	891b      	ldrh	r3, [r3, #8]
 8014c3a:	3b14      	subs	r3, #20
 8014c3c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014c40:	e0e1      	b.n	8014e06 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014c42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014c44:	00db      	lsls	r3, r3, #3
 8014c46:	b29b      	uxth	r3, r3
 8014c48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014c4c:	4293      	cmp	r3, r2
 8014c4e:	bf28      	it	cs
 8014c50:	4613      	movcs	r3, r2
 8014c52:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014c54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014c58:	2114      	movs	r1, #20
 8014c5a:	200e      	movs	r0, #14
 8014c5c:	f7f7 fbd0 	bl	800c400 <pbuf_alloc>
 8014c60:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8014c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	f000 80d5 	beq.w	8014e14 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c6c:	895b      	ldrh	r3, [r3, #10]
 8014c6e:	2b13      	cmp	r3, #19
 8014c70:	d806      	bhi.n	8014c80 <ip4_frag+0xd0>
 8014c72:	4b6c      	ldr	r3, [pc, #432]	@ (8014e24 <ip4_frag+0x274>)
 8014c74:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014c78:	496d      	ldr	r1, [pc, #436]	@ (8014e30 <ip4_frag+0x280>)
 8014c7a:	486c      	ldr	r0, [pc, #432]	@ (8014e2c <ip4_frag+0x27c>)
 8014c7c:	f001 f96a 	bl	8015f54 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	2214      	movs	r2, #20
 8014c86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f001 fb88 	bl	801639e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8014c94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014c96:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8014c9a:	e064      	b.n	8014d66 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	895a      	ldrh	r2, [r3, #10]
 8014ca0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014ca2:	1ad3      	subs	r3, r2, r3
 8014ca4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	895b      	ldrh	r3, [r3, #10]
 8014caa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d906      	bls.n	8014cbe <ip4_frag+0x10e>
 8014cb0:	4b5c      	ldr	r3, [pc, #368]	@ (8014e24 <ip4_frag+0x274>)
 8014cb2:	f240 322d 	movw	r2, #813	@ 0x32d
 8014cb6:	495f      	ldr	r1, [pc, #380]	@ (8014e34 <ip4_frag+0x284>)
 8014cb8:	485c      	ldr	r0, [pc, #368]	@ (8014e2c <ip4_frag+0x27c>)
 8014cba:	f001 f94b 	bl	8015f54 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014cbe:	8bfa      	ldrh	r2, [r7, #30]
 8014cc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014cc4:	4293      	cmp	r3, r2
 8014cc6:	bf28      	it	cs
 8014cc8:	4613      	movcs	r3, r2
 8014cca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014cce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d105      	bne.n	8014ce2 <ip4_frag+0x132>
        poff = 0;
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	60fb      	str	r3, [r7, #12]
        continue;
 8014ce0:	e041      	b.n	8014d66 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014ce2:	f7ff ff0d 	bl	8014b00 <ip_frag_alloc_pbuf_custom_ref>
 8014ce6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014ce8:	69bb      	ldr	r3, [r7, #24]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d103      	bne.n	8014cf6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014cee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014cf0:	f7f7 fe6a 	bl	800c9c8 <pbuf_free>
        goto memerr;
 8014cf4:	e08f      	b.n	8014e16 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014cf6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014cfc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014cfe:	4413      	add	r3, r2
 8014d00:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014d04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014d08:	9201      	str	r2, [sp, #4]
 8014d0a:	9300      	str	r3, [sp, #0]
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	2241      	movs	r2, #65	@ 0x41
 8014d10:	2000      	movs	r0, #0
 8014d12:	f7f7 fc9f 	bl	800c654 <pbuf_alloced_custom>
 8014d16:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d106      	bne.n	8014d2c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014d1e:	69b8      	ldr	r0, [r7, #24]
 8014d20:	f7ff fef6 	bl	8014b10 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014d24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014d26:	f7f7 fe4f 	bl	800c9c8 <pbuf_free>
        goto memerr;
 8014d2a:	e074      	b.n	8014e16 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014d2c:	68f8      	ldr	r0, [r7, #12]
 8014d2e:	f7f7 feeb 	bl	800cb08 <pbuf_ref>
      pcr->original = p;
 8014d32:	69bb      	ldr	r3, [r7, #24]
 8014d34:	68fa      	ldr	r2, [r7, #12]
 8014d36:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014d38:	69bb      	ldr	r3, [r7, #24]
 8014d3a:	4a3f      	ldr	r2, [pc, #252]	@ (8014e38 <ip4_frag+0x288>)
 8014d3c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014d3e:	6979      	ldr	r1, [r7, #20]
 8014d40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014d42:	f7f7 ff03 	bl	800cb4c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014d46:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014d4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014d4e:	1ad3      	subs	r3, r2, r3
 8014d50:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014d54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d004      	beq.n	8014d66 <ip4_frag+0x1b6>
        poff = 0;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014d66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d196      	bne.n	8014c9c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014d6e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014d70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014d74:	4413      	add	r3, r2
 8014d76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014d7c:	f1a3 0213 	sub.w	r2, r3, #19
 8014d80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014d84:	429a      	cmp	r2, r3
 8014d86:	bfcc      	ite	gt
 8014d88:	2301      	movgt	r3, #1
 8014d8a:	2300      	movle	r3, #0
 8014d8c:	b2db      	uxtb	r3, r3
 8014d8e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014d90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014d98:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014d9a:	6a3b      	ldr	r3, [r7, #32]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d002      	beq.n	8014da6 <ip4_frag+0x1f6>
 8014da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d003      	beq.n	8014dae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014da6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014da8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014dac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014dae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7f6 f9f3 	bl	800b19c <lwip_htons>
 8014db6:	4603      	mov	r3, r0
 8014db8:	461a      	mov	r2, r3
 8014dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dbc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014dbe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014dc0:	3314      	adds	r3, #20
 8014dc2:	b29b      	uxth	r3, r3
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7f6 f9e9 	bl	800b19c <lwip_htons>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	461a      	mov	r2, r3
 8014dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	729a      	strb	r2, [r3, #10]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014ddc:	68bb      	ldr	r3, [r7, #8]
 8014dde:	695b      	ldr	r3, [r3, #20]
 8014de0:	687a      	ldr	r2, [r7, #4]
 8014de2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014de4:	68b8      	ldr	r0, [r7, #8]
 8014de6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014de8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014dea:	f7f7 fded 	bl	800c9c8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014dee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014df2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014df4:	1ad3      	subs	r3, r2, r3
 8014df6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014dfa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014dfe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014e00:	4413      	add	r3, r2
 8014e02:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014e06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	f47f af19 	bne.w	8014c42 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014e10:	2300      	movs	r3, #0
 8014e12:	e002      	b.n	8014e1a <ip4_frag+0x26a>
      goto memerr;
 8014e14:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3748      	adds	r7, #72	@ 0x48
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
 8014e22:	bf00      	nop
 8014e24:	0801be98 	.word	0x0801be98
 8014e28:	0801c074 	.word	0x0801c074
 8014e2c:	0801bee0 	.word	0x0801bee0
 8014e30:	0801c090 	.word	0x0801c090
 8014e34:	0801c0b0 	.word	0x0801c0b0
 8014e38:	08014b49 	.word	0x08014b49

08014e3c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b086      	sub	sp, #24
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
 8014e44:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014e46:	230e      	movs	r3, #14
 8014e48:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	895b      	ldrh	r3, [r3, #10]
 8014e4e:	2b0e      	cmp	r3, #14
 8014e50:	d96e      	bls.n	8014f30 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	7bdb      	ldrb	r3, [r3, #15]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d106      	bne.n	8014e68 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014e60:	3301      	adds	r3, #1
 8014e62:	b2da      	uxtb	r2, r3
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	685b      	ldr	r3, [r3, #4]
 8014e6c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	7b1a      	ldrb	r2, [r3, #12]
 8014e72:	7b5b      	ldrb	r3, [r3, #13]
 8014e74:	021b      	lsls	r3, r3, #8
 8014e76:	4313      	orrs	r3, r2
 8014e78:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	f003 0301 	and.w	r3, r3, #1
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d023      	beq.n	8014ece <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	781b      	ldrb	r3, [r3, #0]
 8014e8a:	2b01      	cmp	r3, #1
 8014e8c:	d10f      	bne.n	8014eae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014e8e:	693b      	ldr	r3, [r7, #16]
 8014e90:	785b      	ldrb	r3, [r3, #1]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d11b      	bne.n	8014ece <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014e96:	693b      	ldr	r3, [r7, #16]
 8014e98:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014e9a:	2b5e      	cmp	r3, #94	@ 0x5e
 8014e9c:	d117      	bne.n	8014ece <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	7b5b      	ldrb	r3, [r3, #13]
 8014ea2:	f043 0310 	orr.w	r3, r3, #16
 8014ea6:	b2da      	uxtb	r2, r3
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	735a      	strb	r2, [r3, #13]
 8014eac:	e00f      	b.n	8014ece <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	2206      	movs	r2, #6
 8014eb2:	4928      	ldr	r1, [pc, #160]	@ (8014f54 <ethernet_input+0x118>)
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f001 f9b7 	bl	8016228 <memcmp>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d106      	bne.n	8014ece <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	7b5b      	ldrb	r3, [r3, #13]
 8014ec4:	f043 0308 	orr.w	r3, r3, #8
 8014ec8:	b2da      	uxtb	r2, r3
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014ece:	89fb      	ldrh	r3, [r7, #14]
 8014ed0:	2b08      	cmp	r3, #8
 8014ed2:	d003      	beq.n	8014edc <ethernet_input+0xa0>
 8014ed4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014ed8:	d014      	beq.n	8014f04 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014eda:	e032      	b.n	8014f42 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014ee2:	f003 0308 	and.w	r3, r3, #8
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d024      	beq.n	8014f34 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014eea:	8afb      	ldrh	r3, [r7, #22]
 8014eec:	4619      	mov	r1, r3
 8014eee:	6878      	ldr	r0, [r7, #4]
 8014ef0:	f7f7 fce4 	bl	800c8bc <pbuf_remove_header>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d11e      	bne.n	8014f38 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014efa:	6839      	ldr	r1, [r7, #0]
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f7fe ff21 	bl	8013d44 <ip4_input>
      break;
 8014f02:	e013      	b.n	8014f2c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014f0a:	f003 0308 	and.w	r3, r3, #8
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d014      	beq.n	8014f3c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014f12:	8afb      	ldrh	r3, [r7, #22]
 8014f14:	4619      	mov	r1, r3
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f7f7 fcd0 	bl	800c8bc <pbuf_remove_header>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d10e      	bne.n	8014f40 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014f22:	6839      	ldr	r1, [r7, #0]
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f7fe f89b 	bl	8013060 <etharp_input>
      break;
 8014f2a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	e00c      	b.n	8014f4a <ethernet_input+0x10e>
    goto free_and_return;
 8014f30:	bf00      	nop
 8014f32:	e006      	b.n	8014f42 <ethernet_input+0x106>
        goto free_and_return;
 8014f34:	bf00      	nop
 8014f36:	e004      	b.n	8014f42 <ethernet_input+0x106>
        goto free_and_return;
 8014f38:	bf00      	nop
 8014f3a:	e002      	b.n	8014f42 <ethernet_input+0x106>
        goto free_and_return;
 8014f3c:	bf00      	nop
 8014f3e:	e000      	b.n	8014f42 <ethernet_input+0x106>
        goto free_and_return;
 8014f40:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f7f7 fd40 	bl	800c9c8 <pbuf_free>
  return ERR_OK;
 8014f48:	2300      	movs	r3, #0
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3718      	adds	r7, #24
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	0801c32c 	.word	0x0801c32c

08014f58 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b086      	sub	sp, #24
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	60f8      	str	r0, [r7, #12]
 8014f60:	60b9      	str	r1, [r7, #8]
 8014f62:	607a      	str	r2, [r7, #4]
 8014f64:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014f66:	8c3b      	ldrh	r3, [r7, #32]
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7f6 f917 	bl	800b19c <lwip_htons>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014f72:	210e      	movs	r1, #14
 8014f74:	68b8      	ldr	r0, [r7, #8]
 8014f76:	f7f7 fc91 	bl	800c89c <pbuf_add_header>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d125      	bne.n	8014fcc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014f86:	693b      	ldr	r3, [r7, #16]
 8014f88:	8afa      	ldrh	r2, [r7, #22]
 8014f8a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	2206      	movs	r2, #6
 8014f90:	6839      	ldr	r1, [r7, #0]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f001 fa03 	bl	801639e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	3306      	adds	r3, #6
 8014f9c:	2206      	movs	r2, #6
 8014f9e:	6879      	ldr	r1, [r7, #4]
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f001 f9fc 	bl	801639e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014fac:	2b06      	cmp	r3, #6
 8014fae:	d006      	beq.n	8014fbe <ethernet_output+0x66>
 8014fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8014fdc <ethernet_output+0x84>)
 8014fb2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014fb6:	490a      	ldr	r1, [pc, #40]	@ (8014fe0 <ethernet_output+0x88>)
 8014fb8:	480a      	ldr	r0, [pc, #40]	@ (8014fe4 <ethernet_output+0x8c>)
 8014fba:	f000 ffcb 	bl	8015f54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	699b      	ldr	r3, [r3, #24]
 8014fc2:	68b9      	ldr	r1, [r7, #8]
 8014fc4:	68f8      	ldr	r0, [r7, #12]
 8014fc6:	4798      	blx	r3
 8014fc8:	4603      	mov	r3, r0
 8014fca:	e002      	b.n	8014fd2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014fcc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014fce:	f06f 0301 	mvn.w	r3, #1
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	3718      	adds	r7, #24
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	0801c0c0 	.word	0x0801c0c0
 8014fe0:	0801c0f8 	.word	0x0801c0f8
 8014fe4:	0801c12c 	.word	0x0801c12c

08014fe8 <rand>:
 8014fe8:	4b16      	ldr	r3, [pc, #88]	@ (8015044 <rand+0x5c>)
 8014fea:	b510      	push	{r4, lr}
 8014fec:	681c      	ldr	r4, [r3, #0]
 8014fee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ff0:	b9b3      	cbnz	r3, 8015020 <rand+0x38>
 8014ff2:	2018      	movs	r0, #24
 8014ff4:	f002 f838 	bl	8017068 <malloc>
 8014ff8:	4602      	mov	r2, r0
 8014ffa:	6320      	str	r0, [r4, #48]	@ 0x30
 8014ffc:	b920      	cbnz	r0, 8015008 <rand+0x20>
 8014ffe:	4b12      	ldr	r3, [pc, #72]	@ (8015048 <rand+0x60>)
 8015000:	4812      	ldr	r0, [pc, #72]	@ (801504c <rand+0x64>)
 8015002:	2152      	movs	r1, #82	@ 0x52
 8015004:	f001 f9e0 	bl	80163c8 <__assert_func>
 8015008:	4911      	ldr	r1, [pc, #68]	@ (8015050 <rand+0x68>)
 801500a:	4b12      	ldr	r3, [pc, #72]	@ (8015054 <rand+0x6c>)
 801500c:	e9c0 1300 	strd	r1, r3, [r0]
 8015010:	4b11      	ldr	r3, [pc, #68]	@ (8015058 <rand+0x70>)
 8015012:	6083      	str	r3, [r0, #8]
 8015014:	230b      	movs	r3, #11
 8015016:	8183      	strh	r3, [r0, #12]
 8015018:	2100      	movs	r1, #0
 801501a:	2001      	movs	r0, #1
 801501c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015020:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015022:	480e      	ldr	r0, [pc, #56]	@ (801505c <rand+0x74>)
 8015024:	690b      	ldr	r3, [r1, #16]
 8015026:	694c      	ldr	r4, [r1, #20]
 8015028:	4a0d      	ldr	r2, [pc, #52]	@ (8015060 <rand+0x78>)
 801502a:	4358      	muls	r0, r3
 801502c:	fb02 0004 	mla	r0, r2, r4, r0
 8015030:	fba3 3202 	umull	r3, r2, r3, r2
 8015034:	3301      	adds	r3, #1
 8015036:	eb40 0002 	adc.w	r0, r0, r2
 801503a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801503e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015042:	bd10      	pop	{r4, pc}
 8015044:	2400005c 	.word	0x2400005c
 8015048:	0801c33a 	.word	0x0801c33a
 801504c:	0801c351 	.word	0x0801c351
 8015050:	abcd330e 	.word	0xabcd330e
 8015054:	e66d1234 	.word	0xe66d1234
 8015058:	0005deec 	.word	0x0005deec
 801505c:	5851f42d 	.word	0x5851f42d
 8015060:	4c957f2d 	.word	0x4c957f2d

08015064 <_strtol_l.isra.0>:
 8015064:	2b24      	cmp	r3, #36	@ 0x24
 8015066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801506a:	4686      	mov	lr, r0
 801506c:	4690      	mov	r8, r2
 801506e:	d801      	bhi.n	8015074 <_strtol_l.isra.0+0x10>
 8015070:	2b01      	cmp	r3, #1
 8015072:	d106      	bne.n	8015082 <_strtol_l.isra.0+0x1e>
 8015074:	f001 f966 	bl	8016344 <__errno>
 8015078:	2316      	movs	r3, #22
 801507a:	6003      	str	r3, [r0, #0]
 801507c:	2000      	movs	r0, #0
 801507e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015082:	4834      	ldr	r0, [pc, #208]	@ (8015154 <_strtol_l.isra.0+0xf0>)
 8015084:	460d      	mov	r5, r1
 8015086:	462a      	mov	r2, r5
 8015088:	f815 4b01 	ldrb.w	r4, [r5], #1
 801508c:	5d06      	ldrb	r6, [r0, r4]
 801508e:	f016 0608 	ands.w	r6, r6, #8
 8015092:	d1f8      	bne.n	8015086 <_strtol_l.isra.0+0x22>
 8015094:	2c2d      	cmp	r4, #45	@ 0x2d
 8015096:	d110      	bne.n	80150ba <_strtol_l.isra.0+0x56>
 8015098:	782c      	ldrb	r4, [r5, #0]
 801509a:	2601      	movs	r6, #1
 801509c:	1c95      	adds	r5, r2, #2
 801509e:	f033 0210 	bics.w	r2, r3, #16
 80150a2:	d115      	bne.n	80150d0 <_strtol_l.isra.0+0x6c>
 80150a4:	2c30      	cmp	r4, #48	@ 0x30
 80150a6:	d10d      	bne.n	80150c4 <_strtol_l.isra.0+0x60>
 80150a8:	782a      	ldrb	r2, [r5, #0]
 80150aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80150ae:	2a58      	cmp	r2, #88	@ 0x58
 80150b0:	d108      	bne.n	80150c4 <_strtol_l.isra.0+0x60>
 80150b2:	786c      	ldrb	r4, [r5, #1]
 80150b4:	3502      	adds	r5, #2
 80150b6:	2310      	movs	r3, #16
 80150b8:	e00a      	b.n	80150d0 <_strtol_l.isra.0+0x6c>
 80150ba:	2c2b      	cmp	r4, #43	@ 0x2b
 80150bc:	bf04      	itt	eq
 80150be:	782c      	ldrbeq	r4, [r5, #0]
 80150c0:	1c95      	addeq	r5, r2, #2
 80150c2:	e7ec      	b.n	801509e <_strtol_l.isra.0+0x3a>
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d1f6      	bne.n	80150b6 <_strtol_l.isra.0+0x52>
 80150c8:	2c30      	cmp	r4, #48	@ 0x30
 80150ca:	bf14      	ite	ne
 80150cc:	230a      	movne	r3, #10
 80150ce:	2308      	moveq	r3, #8
 80150d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80150d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80150d8:	2200      	movs	r2, #0
 80150da:	fbbc f9f3 	udiv	r9, ip, r3
 80150de:	4610      	mov	r0, r2
 80150e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80150e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80150e8:	2f09      	cmp	r7, #9
 80150ea:	d80f      	bhi.n	801510c <_strtol_l.isra.0+0xa8>
 80150ec:	463c      	mov	r4, r7
 80150ee:	42a3      	cmp	r3, r4
 80150f0:	dd1b      	ble.n	801512a <_strtol_l.isra.0+0xc6>
 80150f2:	1c57      	adds	r7, r2, #1
 80150f4:	d007      	beq.n	8015106 <_strtol_l.isra.0+0xa2>
 80150f6:	4581      	cmp	r9, r0
 80150f8:	d314      	bcc.n	8015124 <_strtol_l.isra.0+0xc0>
 80150fa:	d101      	bne.n	8015100 <_strtol_l.isra.0+0x9c>
 80150fc:	45a2      	cmp	sl, r4
 80150fe:	db11      	blt.n	8015124 <_strtol_l.isra.0+0xc0>
 8015100:	fb00 4003 	mla	r0, r0, r3, r4
 8015104:	2201      	movs	r2, #1
 8015106:	f815 4b01 	ldrb.w	r4, [r5], #1
 801510a:	e7eb      	b.n	80150e4 <_strtol_l.isra.0+0x80>
 801510c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015110:	2f19      	cmp	r7, #25
 8015112:	d801      	bhi.n	8015118 <_strtol_l.isra.0+0xb4>
 8015114:	3c37      	subs	r4, #55	@ 0x37
 8015116:	e7ea      	b.n	80150ee <_strtol_l.isra.0+0x8a>
 8015118:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801511c:	2f19      	cmp	r7, #25
 801511e:	d804      	bhi.n	801512a <_strtol_l.isra.0+0xc6>
 8015120:	3c57      	subs	r4, #87	@ 0x57
 8015122:	e7e4      	b.n	80150ee <_strtol_l.isra.0+0x8a>
 8015124:	f04f 32ff 	mov.w	r2, #4294967295
 8015128:	e7ed      	b.n	8015106 <_strtol_l.isra.0+0xa2>
 801512a:	1c53      	adds	r3, r2, #1
 801512c:	d108      	bne.n	8015140 <_strtol_l.isra.0+0xdc>
 801512e:	2322      	movs	r3, #34	@ 0x22
 8015130:	f8ce 3000 	str.w	r3, [lr]
 8015134:	4660      	mov	r0, ip
 8015136:	f1b8 0f00 	cmp.w	r8, #0
 801513a:	d0a0      	beq.n	801507e <_strtol_l.isra.0+0x1a>
 801513c:	1e69      	subs	r1, r5, #1
 801513e:	e006      	b.n	801514e <_strtol_l.isra.0+0xea>
 8015140:	b106      	cbz	r6, 8015144 <_strtol_l.isra.0+0xe0>
 8015142:	4240      	negs	r0, r0
 8015144:	f1b8 0f00 	cmp.w	r8, #0
 8015148:	d099      	beq.n	801507e <_strtol_l.isra.0+0x1a>
 801514a:	2a00      	cmp	r2, #0
 801514c:	d1f6      	bne.n	801513c <_strtol_l.isra.0+0xd8>
 801514e:	f8c8 1000 	str.w	r1, [r8]
 8015152:	e794      	b.n	801507e <_strtol_l.isra.0+0x1a>
 8015154:	0801c569 	.word	0x0801c569

08015158 <_strtol_r>:
 8015158:	f7ff bf84 	b.w	8015064 <_strtol_l.isra.0>

0801515c <__cvt>:
 801515c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801515e:	ed2d 8b02 	vpush	{d8}
 8015162:	eeb0 8b40 	vmov.f64	d8, d0
 8015166:	b085      	sub	sp, #20
 8015168:	4617      	mov	r7, r2
 801516a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801516c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801516e:	ee18 2a90 	vmov	r2, s17
 8015172:	f025 0520 	bic.w	r5, r5, #32
 8015176:	2a00      	cmp	r2, #0
 8015178:	bfb6      	itet	lt
 801517a:	222d      	movlt	r2, #45	@ 0x2d
 801517c:	2200      	movge	r2, #0
 801517e:	eeb1 8b40 	vneglt.f64	d8, d0
 8015182:	2d46      	cmp	r5, #70	@ 0x46
 8015184:	460c      	mov	r4, r1
 8015186:	701a      	strb	r2, [r3, #0]
 8015188:	d004      	beq.n	8015194 <__cvt+0x38>
 801518a:	2d45      	cmp	r5, #69	@ 0x45
 801518c:	d100      	bne.n	8015190 <__cvt+0x34>
 801518e:	3401      	adds	r4, #1
 8015190:	2102      	movs	r1, #2
 8015192:	e000      	b.n	8015196 <__cvt+0x3a>
 8015194:	2103      	movs	r1, #3
 8015196:	ab03      	add	r3, sp, #12
 8015198:	9301      	str	r3, [sp, #4]
 801519a:	ab02      	add	r3, sp, #8
 801519c:	9300      	str	r3, [sp, #0]
 801519e:	4622      	mov	r2, r4
 80151a0:	4633      	mov	r3, r6
 80151a2:	eeb0 0b48 	vmov.f64	d0, d8
 80151a6:	f001 f9b7 	bl	8016518 <_dtoa_r>
 80151aa:	2d47      	cmp	r5, #71	@ 0x47
 80151ac:	d114      	bne.n	80151d8 <__cvt+0x7c>
 80151ae:	07fb      	lsls	r3, r7, #31
 80151b0:	d50a      	bpl.n	80151c8 <__cvt+0x6c>
 80151b2:	1902      	adds	r2, r0, r4
 80151b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80151b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151bc:	bf08      	it	eq
 80151be:	9203      	streq	r2, [sp, #12]
 80151c0:	2130      	movs	r1, #48	@ 0x30
 80151c2:	9b03      	ldr	r3, [sp, #12]
 80151c4:	4293      	cmp	r3, r2
 80151c6:	d319      	bcc.n	80151fc <__cvt+0xa0>
 80151c8:	9b03      	ldr	r3, [sp, #12]
 80151ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80151cc:	1a1b      	subs	r3, r3, r0
 80151ce:	6013      	str	r3, [r2, #0]
 80151d0:	b005      	add	sp, #20
 80151d2:	ecbd 8b02 	vpop	{d8}
 80151d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151d8:	2d46      	cmp	r5, #70	@ 0x46
 80151da:	eb00 0204 	add.w	r2, r0, r4
 80151de:	d1e9      	bne.n	80151b4 <__cvt+0x58>
 80151e0:	7803      	ldrb	r3, [r0, #0]
 80151e2:	2b30      	cmp	r3, #48	@ 0x30
 80151e4:	d107      	bne.n	80151f6 <__cvt+0x9a>
 80151e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80151ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ee:	bf1c      	itt	ne
 80151f0:	f1c4 0401 	rsbne	r4, r4, #1
 80151f4:	6034      	strne	r4, [r6, #0]
 80151f6:	6833      	ldr	r3, [r6, #0]
 80151f8:	441a      	add	r2, r3
 80151fa:	e7db      	b.n	80151b4 <__cvt+0x58>
 80151fc:	1c5c      	adds	r4, r3, #1
 80151fe:	9403      	str	r4, [sp, #12]
 8015200:	7019      	strb	r1, [r3, #0]
 8015202:	e7de      	b.n	80151c2 <__cvt+0x66>

08015204 <__exponent>:
 8015204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015206:	2900      	cmp	r1, #0
 8015208:	bfba      	itte	lt
 801520a:	4249      	neglt	r1, r1
 801520c:	232d      	movlt	r3, #45	@ 0x2d
 801520e:	232b      	movge	r3, #43	@ 0x2b
 8015210:	2909      	cmp	r1, #9
 8015212:	7002      	strb	r2, [r0, #0]
 8015214:	7043      	strb	r3, [r0, #1]
 8015216:	dd29      	ble.n	801526c <__exponent+0x68>
 8015218:	f10d 0307 	add.w	r3, sp, #7
 801521c:	461d      	mov	r5, r3
 801521e:	270a      	movs	r7, #10
 8015220:	461a      	mov	r2, r3
 8015222:	fbb1 f6f7 	udiv	r6, r1, r7
 8015226:	fb07 1416 	mls	r4, r7, r6, r1
 801522a:	3430      	adds	r4, #48	@ 0x30
 801522c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8015230:	460c      	mov	r4, r1
 8015232:	2c63      	cmp	r4, #99	@ 0x63
 8015234:	f103 33ff 	add.w	r3, r3, #4294967295
 8015238:	4631      	mov	r1, r6
 801523a:	dcf1      	bgt.n	8015220 <__exponent+0x1c>
 801523c:	3130      	adds	r1, #48	@ 0x30
 801523e:	1e94      	subs	r4, r2, #2
 8015240:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015244:	1c41      	adds	r1, r0, #1
 8015246:	4623      	mov	r3, r4
 8015248:	42ab      	cmp	r3, r5
 801524a:	d30a      	bcc.n	8015262 <__exponent+0x5e>
 801524c:	f10d 0309 	add.w	r3, sp, #9
 8015250:	1a9b      	subs	r3, r3, r2
 8015252:	42ac      	cmp	r4, r5
 8015254:	bf88      	it	hi
 8015256:	2300      	movhi	r3, #0
 8015258:	3302      	adds	r3, #2
 801525a:	4403      	add	r3, r0
 801525c:	1a18      	subs	r0, r3, r0
 801525e:	b003      	add	sp, #12
 8015260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015262:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015266:	f801 6f01 	strb.w	r6, [r1, #1]!
 801526a:	e7ed      	b.n	8015248 <__exponent+0x44>
 801526c:	2330      	movs	r3, #48	@ 0x30
 801526e:	3130      	adds	r1, #48	@ 0x30
 8015270:	7083      	strb	r3, [r0, #2]
 8015272:	70c1      	strb	r1, [r0, #3]
 8015274:	1d03      	adds	r3, r0, #4
 8015276:	e7f1      	b.n	801525c <__exponent+0x58>

08015278 <_printf_float>:
 8015278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801527c:	b08d      	sub	sp, #52	@ 0x34
 801527e:	460c      	mov	r4, r1
 8015280:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8015284:	4616      	mov	r6, r2
 8015286:	461f      	mov	r7, r3
 8015288:	4605      	mov	r5, r0
 801528a:	f001 f811 	bl	80162b0 <_localeconv_r>
 801528e:	f8d0 b000 	ldr.w	fp, [r0]
 8015292:	4658      	mov	r0, fp
 8015294:	f7eb f88c 	bl	80003b0 <strlen>
 8015298:	2300      	movs	r3, #0
 801529a:	930a      	str	r3, [sp, #40]	@ 0x28
 801529c:	f8d8 3000 	ldr.w	r3, [r8]
 80152a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80152a4:	6822      	ldr	r2, [r4, #0]
 80152a6:	9005      	str	r0, [sp, #20]
 80152a8:	3307      	adds	r3, #7
 80152aa:	f023 0307 	bic.w	r3, r3, #7
 80152ae:	f103 0108 	add.w	r1, r3, #8
 80152b2:	f8c8 1000 	str.w	r1, [r8]
 80152b6:	ed93 0b00 	vldr	d0, [r3]
 80152ba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8015518 <_printf_float+0x2a0>
 80152be:	eeb0 7bc0 	vabs.f64	d7, d0
 80152c2:	eeb4 7b46 	vcmp.f64	d7, d6
 80152c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80152ce:	dd24      	ble.n	801531a <_printf_float+0xa2>
 80152d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80152d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d8:	d502      	bpl.n	80152e0 <_printf_float+0x68>
 80152da:	232d      	movs	r3, #45	@ 0x2d
 80152dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80152e0:	498f      	ldr	r1, [pc, #572]	@ (8015520 <_printf_float+0x2a8>)
 80152e2:	4b90      	ldr	r3, [pc, #576]	@ (8015524 <_printf_float+0x2ac>)
 80152e4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80152e8:	bf8c      	ite	hi
 80152ea:	4688      	movhi	r8, r1
 80152ec:	4698      	movls	r8, r3
 80152ee:	f022 0204 	bic.w	r2, r2, #4
 80152f2:	2303      	movs	r3, #3
 80152f4:	6123      	str	r3, [r4, #16]
 80152f6:	6022      	str	r2, [r4, #0]
 80152f8:	f04f 0a00 	mov.w	sl, #0
 80152fc:	9700      	str	r7, [sp, #0]
 80152fe:	4633      	mov	r3, r6
 8015300:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015302:	4621      	mov	r1, r4
 8015304:	4628      	mov	r0, r5
 8015306:	f000 f9d1 	bl	80156ac <_printf_common>
 801530a:	3001      	adds	r0, #1
 801530c:	f040 8089 	bne.w	8015422 <_printf_float+0x1aa>
 8015310:	f04f 30ff 	mov.w	r0, #4294967295
 8015314:	b00d      	add	sp, #52	@ 0x34
 8015316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801531a:	eeb4 0b40 	vcmp.f64	d0, d0
 801531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015322:	d709      	bvc.n	8015338 <_printf_float+0xc0>
 8015324:	ee10 3a90 	vmov	r3, s1
 8015328:	2b00      	cmp	r3, #0
 801532a:	bfbc      	itt	lt
 801532c:	232d      	movlt	r3, #45	@ 0x2d
 801532e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8015332:	497d      	ldr	r1, [pc, #500]	@ (8015528 <_printf_float+0x2b0>)
 8015334:	4b7d      	ldr	r3, [pc, #500]	@ (801552c <_printf_float+0x2b4>)
 8015336:	e7d5      	b.n	80152e4 <_printf_float+0x6c>
 8015338:	6863      	ldr	r3, [r4, #4]
 801533a:	1c59      	adds	r1, r3, #1
 801533c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8015340:	d139      	bne.n	80153b6 <_printf_float+0x13e>
 8015342:	2306      	movs	r3, #6
 8015344:	6063      	str	r3, [r4, #4]
 8015346:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801534a:	2300      	movs	r3, #0
 801534c:	6022      	str	r2, [r4, #0]
 801534e:	9303      	str	r3, [sp, #12]
 8015350:	ab0a      	add	r3, sp, #40	@ 0x28
 8015352:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8015356:	ab09      	add	r3, sp, #36	@ 0x24
 8015358:	9300      	str	r3, [sp, #0]
 801535a:	6861      	ldr	r1, [r4, #4]
 801535c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8015360:	4628      	mov	r0, r5
 8015362:	f7ff fefb 	bl	801515c <__cvt>
 8015366:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801536a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801536c:	4680      	mov	r8, r0
 801536e:	d129      	bne.n	80153c4 <_printf_float+0x14c>
 8015370:	1cc8      	adds	r0, r1, #3
 8015372:	db02      	blt.n	801537a <_printf_float+0x102>
 8015374:	6863      	ldr	r3, [r4, #4]
 8015376:	4299      	cmp	r1, r3
 8015378:	dd41      	ble.n	80153fe <_printf_float+0x186>
 801537a:	f1a9 0902 	sub.w	r9, r9, #2
 801537e:	fa5f f989 	uxtb.w	r9, r9
 8015382:	3901      	subs	r1, #1
 8015384:	464a      	mov	r2, r9
 8015386:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801538a:	9109      	str	r1, [sp, #36]	@ 0x24
 801538c:	f7ff ff3a 	bl	8015204 <__exponent>
 8015390:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015392:	1813      	adds	r3, r2, r0
 8015394:	2a01      	cmp	r2, #1
 8015396:	4682      	mov	sl, r0
 8015398:	6123      	str	r3, [r4, #16]
 801539a:	dc02      	bgt.n	80153a2 <_printf_float+0x12a>
 801539c:	6822      	ldr	r2, [r4, #0]
 801539e:	07d2      	lsls	r2, r2, #31
 80153a0:	d501      	bpl.n	80153a6 <_printf_float+0x12e>
 80153a2:	3301      	adds	r3, #1
 80153a4:	6123      	str	r3, [r4, #16]
 80153a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d0a6      	beq.n	80152fc <_printf_float+0x84>
 80153ae:	232d      	movs	r3, #45	@ 0x2d
 80153b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80153b4:	e7a2      	b.n	80152fc <_printf_float+0x84>
 80153b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80153ba:	d1c4      	bne.n	8015346 <_printf_float+0xce>
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d1c2      	bne.n	8015346 <_printf_float+0xce>
 80153c0:	2301      	movs	r3, #1
 80153c2:	e7bf      	b.n	8015344 <_printf_float+0xcc>
 80153c4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80153c8:	d9db      	bls.n	8015382 <_printf_float+0x10a>
 80153ca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80153ce:	d118      	bne.n	8015402 <_printf_float+0x18a>
 80153d0:	2900      	cmp	r1, #0
 80153d2:	6863      	ldr	r3, [r4, #4]
 80153d4:	dd0b      	ble.n	80153ee <_printf_float+0x176>
 80153d6:	6121      	str	r1, [r4, #16]
 80153d8:	b913      	cbnz	r3, 80153e0 <_printf_float+0x168>
 80153da:	6822      	ldr	r2, [r4, #0]
 80153dc:	07d0      	lsls	r0, r2, #31
 80153de:	d502      	bpl.n	80153e6 <_printf_float+0x16e>
 80153e0:	3301      	adds	r3, #1
 80153e2:	440b      	add	r3, r1
 80153e4:	6123      	str	r3, [r4, #16]
 80153e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80153e8:	f04f 0a00 	mov.w	sl, #0
 80153ec:	e7db      	b.n	80153a6 <_printf_float+0x12e>
 80153ee:	b913      	cbnz	r3, 80153f6 <_printf_float+0x17e>
 80153f0:	6822      	ldr	r2, [r4, #0]
 80153f2:	07d2      	lsls	r2, r2, #31
 80153f4:	d501      	bpl.n	80153fa <_printf_float+0x182>
 80153f6:	3302      	adds	r3, #2
 80153f8:	e7f4      	b.n	80153e4 <_printf_float+0x16c>
 80153fa:	2301      	movs	r3, #1
 80153fc:	e7f2      	b.n	80153e4 <_printf_float+0x16c>
 80153fe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8015402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015404:	4299      	cmp	r1, r3
 8015406:	db05      	blt.n	8015414 <_printf_float+0x19c>
 8015408:	6823      	ldr	r3, [r4, #0]
 801540a:	6121      	str	r1, [r4, #16]
 801540c:	07d8      	lsls	r0, r3, #31
 801540e:	d5ea      	bpl.n	80153e6 <_printf_float+0x16e>
 8015410:	1c4b      	adds	r3, r1, #1
 8015412:	e7e7      	b.n	80153e4 <_printf_float+0x16c>
 8015414:	2900      	cmp	r1, #0
 8015416:	bfd4      	ite	le
 8015418:	f1c1 0202 	rsble	r2, r1, #2
 801541c:	2201      	movgt	r2, #1
 801541e:	4413      	add	r3, r2
 8015420:	e7e0      	b.n	80153e4 <_printf_float+0x16c>
 8015422:	6823      	ldr	r3, [r4, #0]
 8015424:	055a      	lsls	r2, r3, #21
 8015426:	d407      	bmi.n	8015438 <_printf_float+0x1c0>
 8015428:	6923      	ldr	r3, [r4, #16]
 801542a:	4642      	mov	r2, r8
 801542c:	4631      	mov	r1, r6
 801542e:	4628      	mov	r0, r5
 8015430:	47b8      	blx	r7
 8015432:	3001      	adds	r0, #1
 8015434:	d12a      	bne.n	801548c <_printf_float+0x214>
 8015436:	e76b      	b.n	8015310 <_printf_float+0x98>
 8015438:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801543c:	f240 80e0 	bls.w	8015600 <_printf_float+0x388>
 8015440:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015444:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544c:	d133      	bne.n	80154b6 <_printf_float+0x23e>
 801544e:	4a38      	ldr	r2, [pc, #224]	@ (8015530 <_printf_float+0x2b8>)
 8015450:	2301      	movs	r3, #1
 8015452:	4631      	mov	r1, r6
 8015454:	4628      	mov	r0, r5
 8015456:	47b8      	blx	r7
 8015458:	3001      	adds	r0, #1
 801545a:	f43f af59 	beq.w	8015310 <_printf_float+0x98>
 801545e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8015462:	4543      	cmp	r3, r8
 8015464:	db02      	blt.n	801546c <_printf_float+0x1f4>
 8015466:	6823      	ldr	r3, [r4, #0]
 8015468:	07d8      	lsls	r0, r3, #31
 801546a:	d50f      	bpl.n	801548c <_printf_float+0x214>
 801546c:	9b05      	ldr	r3, [sp, #20]
 801546e:	465a      	mov	r2, fp
 8015470:	4631      	mov	r1, r6
 8015472:	4628      	mov	r0, r5
 8015474:	47b8      	blx	r7
 8015476:	3001      	adds	r0, #1
 8015478:	f43f af4a 	beq.w	8015310 <_printf_float+0x98>
 801547c:	f04f 0900 	mov.w	r9, #0
 8015480:	f108 38ff 	add.w	r8, r8, #4294967295
 8015484:	f104 0a1a 	add.w	sl, r4, #26
 8015488:	45c8      	cmp	r8, r9
 801548a:	dc09      	bgt.n	80154a0 <_printf_float+0x228>
 801548c:	6823      	ldr	r3, [r4, #0]
 801548e:	079b      	lsls	r3, r3, #30
 8015490:	f100 8107 	bmi.w	80156a2 <_printf_float+0x42a>
 8015494:	68e0      	ldr	r0, [r4, #12]
 8015496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015498:	4298      	cmp	r0, r3
 801549a:	bfb8      	it	lt
 801549c:	4618      	movlt	r0, r3
 801549e:	e739      	b.n	8015314 <_printf_float+0x9c>
 80154a0:	2301      	movs	r3, #1
 80154a2:	4652      	mov	r2, sl
 80154a4:	4631      	mov	r1, r6
 80154a6:	4628      	mov	r0, r5
 80154a8:	47b8      	blx	r7
 80154aa:	3001      	adds	r0, #1
 80154ac:	f43f af30 	beq.w	8015310 <_printf_float+0x98>
 80154b0:	f109 0901 	add.w	r9, r9, #1
 80154b4:	e7e8      	b.n	8015488 <_printf_float+0x210>
 80154b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	dc3b      	bgt.n	8015534 <_printf_float+0x2bc>
 80154bc:	4a1c      	ldr	r2, [pc, #112]	@ (8015530 <_printf_float+0x2b8>)
 80154be:	2301      	movs	r3, #1
 80154c0:	4631      	mov	r1, r6
 80154c2:	4628      	mov	r0, r5
 80154c4:	47b8      	blx	r7
 80154c6:	3001      	adds	r0, #1
 80154c8:	f43f af22 	beq.w	8015310 <_printf_float+0x98>
 80154cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80154d0:	ea59 0303 	orrs.w	r3, r9, r3
 80154d4:	d102      	bne.n	80154dc <_printf_float+0x264>
 80154d6:	6823      	ldr	r3, [r4, #0]
 80154d8:	07d9      	lsls	r1, r3, #31
 80154da:	d5d7      	bpl.n	801548c <_printf_float+0x214>
 80154dc:	9b05      	ldr	r3, [sp, #20]
 80154de:	465a      	mov	r2, fp
 80154e0:	4631      	mov	r1, r6
 80154e2:	4628      	mov	r0, r5
 80154e4:	47b8      	blx	r7
 80154e6:	3001      	adds	r0, #1
 80154e8:	f43f af12 	beq.w	8015310 <_printf_float+0x98>
 80154ec:	f04f 0a00 	mov.w	sl, #0
 80154f0:	f104 0b1a 	add.w	fp, r4, #26
 80154f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154f6:	425b      	negs	r3, r3
 80154f8:	4553      	cmp	r3, sl
 80154fa:	dc01      	bgt.n	8015500 <_printf_float+0x288>
 80154fc:	464b      	mov	r3, r9
 80154fe:	e794      	b.n	801542a <_printf_float+0x1b2>
 8015500:	2301      	movs	r3, #1
 8015502:	465a      	mov	r2, fp
 8015504:	4631      	mov	r1, r6
 8015506:	4628      	mov	r0, r5
 8015508:	47b8      	blx	r7
 801550a:	3001      	adds	r0, #1
 801550c:	f43f af00 	beq.w	8015310 <_printf_float+0x98>
 8015510:	f10a 0a01 	add.w	sl, sl, #1
 8015514:	e7ee      	b.n	80154f4 <_printf_float+0x27c>
 8015516:	bf00      	nop
 8015518:	ffffffff 	.word	0xffffffff
 801551c:	7fefffff 	.word	0x7fefffff
 8015520:	0801c3ad 	.word	0x0801c3ad
 8015524:	0801c3a9 	.word	0x0801c3a9
 8015528:	0801c3b5 	.word	0x0801c3b5
 801552c:	0801c3b1 	.word	0x0801c3b1
 8015530:	0801c3b9 	.word	0x0801c3b9
 8015534:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015536:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801553a:	4553      	cmp	r3, sl
 801553c:	bfa8      	it	ge
 801553e:	4653      	movge	r3, sl
 8015540:	2b00      	cmp	r3, #0
 8015542:	4699      	mov	r9, r3
 8015544:	dc37      	bgt.n	80155b6 <_printf_float+0x33e>
 8015546:	2300      	movs	r3, #0
 8015548:	9307      	str	r3, [sp, #28]
 801554a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801554e:	f104 021a 	add.w	r2, r4, #26
 8015552:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015554:	9907      	ldr	r1, [sp, #28]
 8015556:	9306      	str	r3, [sp, #24]
 8015558:	eba3 0309 	sub.w	r3, r3, r9
 801555c:	428b      	cmp	r3, r1
 801555e:	dc31      	bgt.n	80155c4 <_printf_float+0x34c>
 8015560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015562:	459a      	cmp	sl, r3
 8015564:	dc3b      	bgt.n	80155de <_printf_float+0x366>
 8015566:	6823      	ldr	r3, [r4, #0]
 8015568:	07da      	lsls	r2, r3, #31
 801556a:	d438      	bmi.n	80155de <_printf_float+0x366>
 801556c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801556e:	ebaa 0903 	sub.w	r9, sl, r3
 8015572:	9b06      	ldr	r3, [sp, #24]
 8015574:	ebaa 0303 	sub.w	r3, sl, r3
 8015578:	4599      	cmp	r9, r3
 801557a:	bfa8      	it	ge
 801557c:	4699      	movge	r9, r3
 801557e:	f1b9 0f00 	cmp.w	r9, #0
 8015582:	dc34      	bgt.n	80155ee <_printf_float+0x376>
 8015584:	f04f 0800 	mov.w	r8, #0
 8015588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801558c:	f104 0b1a 	add.w	fp, r4, #26
 8015590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015592:	ebaa 0303 	sub.w	r3, sl, r3
 8015596:	eba3 0309 	sub.w	r3, r3, r9
 801559a:	4543      	cmp	r3, r8
 801559c:	f77f af76 	ble.w	801548c <_printf_float+0x214>
 80155a0:	2301      	movs	r3, #1
 80155a2:	465a      	mov	r2, fp
 80155a4:	4631      	mov	r1, r6
 80155a6:	4628      	mov	r0, r5
 80155a8:	47b8      	blx	r7
 80155aa:	3001      	adds	r0, #1
 80155ac:	f43f aeb0 	beq.w	8015310 <_printf_float+0x98>
 80155b0:	f108 0801 	add.w	r8, r8, #1
 80155b4:	e7ec      	b.n	8015590 <_printf_float+0x318>
 80155b6:	4642      	mov	r2, r8
 80155b8:	4631      	mov	r1, r6
 80155ba:	4628      	mov	r0, r5
 80155bc:	47b8      	blx	r7
 80155be:	3001      	adds	r0, #1
 80155c0:	d1c1      	bne.n	8015546 <_printf_float+0x2ce>
 80155c2:	e6a5      	b.n	8015310 <_printf_float+0x98>
 80155c4:	2301      	movs	r3, #1
 80155c6:	4631      	mov	r1, r6
 80155c8:	4628      	mov	r0, r5
 80155ca:	9206      	str	r2, [sp, #24]
 80155cc:	47b8      	blx	r7
 80155ce:	3001      	adds	r0, #1
 80155d0:	f43f ae9e 	beq.w	8015310 <_printf_float+0x98>
 80155d4:	9b07      	ldr	r3, [sp, #28]
 80155d6:	9a06      	ldr	r2, [sp, #24]
 80155d8:	3301      	adds	r3, #1
 80155da:	9307      	str	r3, [sp, #28]
 80155dc:	e7b9      	b.n	8015552 <_printf_float+0x2da>
 80155de:	9b05      	ldr	r3, [sp, #20]
 80155e0:	465a      	mov	r2, fp
 80155e2:	4631      	mov	r1, r6
 80155e4:	4628      	mov	r0, r5
 80155e6:	47b8      	blx	r7
 80155e8:	3001      	adds	r0, #1
 80155ea:	d1bf      	bne.n	801556c <_printf_float+0x2f4>
 80155ec:	e690      	b.n	8015310 <_printf_float+0x98>
 80155ee:	9a06      	ldr	r2, [sp, #24]
 80155f0:	464b      	mov	r3, r9
 80155f2:	4442      	add	r2, r8
 80155f4:	4631      	mov	r1, r6
 80155f6:	4628      	mov	r0, r5
 80155f8:	47b8      	blx	r7
 80155fa:	3001      	adds	r0, #1
 80155fc:	d1c2      	bne.n	8015584 <_printf_float+0x30c>
 80155fe:	e687      	b.n	8015310 <_printf_float+0x98>
 8015600:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8015604:	f1b9 0f01 	cmp.w	r9, #1
 8015608:	dc01      	bgt.n	801560e <_printf_float+0x396>
 801560a:	07db      	lsls	r3, r3, #31
 801560c:	d536      	bpl.n	801567c <_printf_float+0x404>
 801560e:	2301      	movs	r3, #1
 8015610:	4642      	mov	r2, r8
 8015612:	4631      	mov	r1, r6
 8015614:	4628      	mov	r0, r5
 8015616:	47b8      	blx	r7
 8015618:	3001      	adds	r0, #1
 801561a:	f43f ae79 	beq.w	8015310 <_printf_float+0x98>
 801561e:	9b05      	ldr	r3, [sp, #20]
 8015620:	465a      	mov	r2, fp
 8015622:	4631      	mov	r1, r6
 8015624:	4628      	mov	r0, r5
 8015626:	47b8      	blx	r7
 8015628:	3001      	adds	r0, #1
 801562a:	f43f ae71 	beq.w	8015310 <_printf_float+0x98>
 801562e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015632:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801563a:	f109 39ff 	add.w	r9, r9, #4294967295
 801563e:	d018      	beq.n	8015672 <_printf_float+0x3fa>
 8015640:	464b      	mov	r3, r9
 8015642:	f108 0201 	add.w	r2, r8, #1
 8015646:	4631      	mov	r1, r6
 8015648:	4628      	mov	r0, r5
 801564a:	47b8      	blx	r7
 801564c:	3001      	adds	r0, #1
 801564e:	d10c      	bne.n	801566a <_printf_float+0x3f2>
 8015650:	e65e      	b.n	8015310 <_printf_float+0x98>
 8015652:	2301      	movs	r3, #1
 8015654:	465a      	mov	r2, fp
 8015656:	4631      	mov	r1, r6
 8015658:	4628      	mov	r0, r5
 801565a:	47b8      	blx	r7
 801565c:	3001      	adds	r0, #1
 801565e:	f43f ae57 	beq.w	8015310 <_printf_float+0x98>
 8015662:	f108 0801 	add.w	r8, r8, #1
 8015666:	45c8      	cmp	r8, r9
 8015668:	dbf3      	blt.n	8015652 <_printf_float+0x3da>
 801566a:	4653      	mov	r3, sl
 801566c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015670:	e6dc      	b.n	801542c <_printf_float+0x1b4>
 8015672:	f04f 0800 	mov.w	r8, #0
 8015676:	f104 0b1a 	add.w	fp, r4, #26
 801567a:	e7f4      	b.n	8015666 <_printf_float+0x3ee>
 801567c:	2301      	movs	r3, #1
 801567e:	4642      	mov	r2, r8
 8015680:	e7e1      	b.n	8015646 <_printf_float+0x3ce>
 8015682:	2301      	movs	r3, #1
 8015684:	464a      	mov	r2, r9
 8015686:	4631      	mov	r1, r6
 8015688:	4628      	mov	r0, r5
 801568a:	47b8      	blx	r7
 801568c:	3001      	adds	r0, #1
 801568e:	f43f ae3f 	beq.w	8015310 <_printf_float+0x98>
 8015692:	f108 0801 	add.w	r8, r8, #1
 8015696:	68e3      	ldr	r3, [r4, #12]
 8015698:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801569a:	1a5b      	subs	r3, r3, r1
 801569c:	4543      	cmp	r3, r8
 801569e:	dcf0      	bgt.n	8015682 <_printf_float+0x40a>
 80156a0:	e6f8      	b.n	8015494 <_printf_float+0x21c>
 80156a2:	f04f 0800 	mov.w	r8, #0
 80156a6:	f104 0919 	add.w	r9, r4, #25
 80156aa:	e7f4      	b.n	8015696 <_printf_float+0x41e>

080156ac <_printf_common>:
 80156ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156b0:	4616      	mov	r6, r2
 80156b2:	4698      	mov	r8, r3
 80156b4:	688a      	ldr	r2, [r1, #8]
 80156b6:	690b      	ldr	r3, [r1, #16]
 80156b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80156bc:	4293      	cmp	r3, r2
 80156be:	bfb8      	it	lt
 80156c0:	4613      	movlt	r3, r2
 80156c2:	6033      	str	r3, [r6, #0]
 80156c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80156c8:	4607      	mov	r7, r0
 80156ca:	460c      	mov	r4, r1
 80156cc:	b10a      	cbz	r2, 80156d2 <_printf_common+0x26>
 80156ce:	3301      	adds	r3, #1
 80156d0:	6033      	str	r3, [r6, #0]
 80156d2:	6823      	ldr	r3, [r4, #0]
 80156d4:	0699      	lsls	r1, r3, #26
 80156d6:	bf42      	ittt	mi
 80156d8:	6833      	ldrmi	r3, [r6, #0]
 80156da:	3302      	addmi	r3, #2
 80156dc:	6033      	strmi	r3, [r6, #0]
 80156de:	6825      	ldr	r5, [r4, #0]
 80156e0:	f015 0506 	ands.w	r5, r5, #6
 80156e4:	d106      	bne.n	80156f4 <_printf_common+0x48>
 80156e6:	f104 0a19 	add.w	sl, r4, #25
 80156ea:	68e3      	ldr	r3, [r4, #12]
 80156ec:	6832      	ldr	r2, [r6, #0]
 80156ee:	1a9b      	subs	r3, r3, r2
 80156f0:	42ab      	cmp	r3, r5
 80156f2:	dc26      	bgt.n	8015742 <_printf_common+0x96>
 80156f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80156f8:	6822      	ldr	r2, [r4, #0]
 80156fa:	3b00      	subs	r3, #0
 80156fc:	bf18      	it	ne
 80156fe:	2301      	movne	r3, #1
 8015700:	0692      	lsls	r2, r2, #26
 8015702:	d42b      	bmi.n	801575c <_printf_common+0xb0>
 8015704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015708:	4641      	mov	r1, r8
 801570a:	4638      	mov	r0, r7
 801570c:	47c8      	blx	r9
 801570e:	3001      	adds	r0, #1
 8015710:	d01e      	beq.n	8015750 <_printf_common+0xa4>
 8015712:	6823      	ldr	r3, [r4, #0]
 8015714:	6922      	ldr	r2, [r4, #16]
 8015716:	f003 0306 	and.w	r3, r3, #6
 801571a:	2b04      	cmp	r3, #4
 801571c:	bf02      	ittt	eq
 801571e:	68e5      	ldreq	r5, [r4, #12]
 8015720:	6833      	ldreq	r3, [r6, #0]
 8015722:	1aed      	subeq	r5, r5, r3
 8015724:	68a3      	ldr	r3, [r4, #8]
 8015726:	bf0c      	ite	eq
 8015728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801572c:	2500      	movne	r5, #0
 801572e:	4293      	cmp	r3, r2
 8015730:	bfc4      	itt	gt
 8015732:	1a9b      	subgt	r3, r3, r2
 8015734:	18ed      	addgt	r5, r5, r3
 8015736:	2600      	movs	r6, #0
 8015738:	341a      	adds	r4, #26
 801573a:	42b5      	cmp	r5, r6
 801573c:	d11a      	bne.n	8015774 <_printf_common+0xc8>
 801573e:	2000      	movs	r0, #0
 8015740:	e008      	b.n	8015754 <_printf_common+0xa8>
 8015742:	2301      	movs	r3, #1
 8015744:	4652      	mov	r2, sl
 8015746:	4641      	mov	r1, r8
 8015748:	4638      	mov	r0, r7
 801574a:	47c8      	blx	r9
 801574c:	3001      	adds	r0, #1
 801574e:	d103      	bne.n	8015758 <_printf_common+0xac>
 8015750:	f04f 30ff 	mov.w	r0, #4294967295
 8015754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015758:	3501      	adds	r5, #1
 801575a:	e7c6      	b.n	80156ea <_printf_common+0x3e>
 801575c:	18e1      	adds	r1, r4, r3
 801575e:	1c5a      	adds	r2, r3, #1
 8015760:	2030      	movs	r0, #48	@ 0x30
 8015762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015766:	4422      	add	r2, r4
 8015768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801576c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015770:	3302      	adds	r3, #2
 8015772:	e7c7      	b.n	8015704 <_printf_common+0x58>
 8015774:	2301      	movs	r3, #1
 8015776:	4622      	mov	r2, r4
 8015778:	4641      	mov	r1, r8
 801577a:	4638      	mov	r0, r7
 801577c:	47c8      	blx	r9
 801577e:	3001      	adds	r0, #1
 8015780:	d0e6      	beq.n	8015750 <_printf_common+0xa4>
 8015782:	3601      	adds	r6, #1
 8015784:	e7d9      	b.n	801573a <_printf_common+0x8e>
	...

08015788 <_printf_i>:
 8015788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801578c:	7e0f      	ldrb	r7, [r1, #24]
 801578e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015790:	2f78      	cmp	r7, #120	@ 0x78
 8015792:	4691      	mov	r9, r2
 8015794:	4680      	mov	r8, r0
 8015796:	460c      	mov	r4, r1
 8015798:	469a      	mov	sl, r3
 801579a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801579e:	d807      	bhi.n	80157b0 <_printf_i+0x28>
 80157a0:	2f62      	cmp	r7, #98	@ 0x62
 80157a2:	d80a      	bhi.n	80157ba <_printf_i+0x32>
 80157a4:	2f00      	cmp	r7, #0
 80157a6:	f000 80d1 	beq.w	801594c <_printf_i+0x1c4>
 80157aa:	2f58      	cmp	r7, #88	@ 0x58
 80157ac:	f000 80b8 	beq.w	8015920 <_printf_i+0x198>
 80157b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80157b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80157b8:	e03a      	b.n	8015830 <_printf_i+0xa8>
 80157ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80157be:	2b15      	cmp	r3, #21
 80157c0:	d8f6      	bhi.n	80157b0 <_printf_i+0x28>
 80157c2:	a101      	add	r1, pc, #4	@ (adr r1, 80157c8 <_printf_i+0x40>)
 80157c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80157c8:	08015821 	.word	0x08015821
 80157cc:	08015835 	.word	0x08015835
 80157d0:	080157b1 	.word	0x080157b1
 80157d4:	080157b1 	.word	0x080157b1
 80157d8:	080157b1 	.word	0x080157b1
 80157dc:	080157b1 	.word	0x080157b1
 80157e0:	08015835 	.word	0x08015835
 80157e4:	080157b1 	.word	0x080157b1
 80157e8:	080157b1 	.word	0x080157b1
 80157ec:	080157b1 	.word	0x080157b1
 80157f0:	080157b1 	.word	0x080157b1
 80157f4:	08015933 	.word	0x08015933
 80157f8:	0801585f 	.word	0x0801585f
 80157fc:	080158ed 	.word	0x080158ed
 8015800:	080157b1 	.word	0x080157b1
 8015804:	080157b1 	.word	0x080157b1
 8015808:	08015955 	.word	0x08015955
 801580c:	080157b1 	.word	0x080157b1
 8015810:	0801585f 	.word	0x0801585f
 8015814:	080157b1 	.word	0x080157b1
 8015818:	080157b1 	.word	0x080157b1
 801581c:	080158f5 	.word	0x080158f5
 8015820:	6833      	ldr	r3, [r6, #0]
 8015822:	1d1a      	adds	r2, r3, #4
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	6032      	str	r2, [r6, #0]
 8015828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801582c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015830:	2301      	movs	r3, #1
 8015832:	e09c      	b.n	801596e <_printf_i+0x1e6>
 8015834:	6833      	ldr	r3, [r6, #0]
 8015836:	6820      	ldr	r0, [r4, #0]
 8015838:	1d19      	adds	r1, r3, #4
 801583a:	6031      	str	r1, [r6, #0]
 801583c:	0606      	lsls	r6, r0, #24
 801583e:	d501      	bpl.n	8015844 <_printf_i+0xbc>
 8015840:	681d      	ldr	r5, [r3, #0]
 8015842:	e003      	b.n	801584c <_printf_i+0xc4>
 8015844:	0645      	lsls	r5, r0, #25
 8015846:	d5fb      	bpl.n	8015840 <_printf_i+0xb8>
 8015848:	f9b3 5000 	ldrsh.w	r5, [r3]
 801584c:	2d00      	cmp	r5, #0
 801584e:	da03      	bge.n	8015858 <_printf_i+0xd0>
 8015850:	232d      	movs	r3, #45	@ 0x2d
 8015852:	426d      	negs	r5, r5
 8015854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015858:	4858      	ldr	r0, [pc, #352]	@ (80159bc <_printf_i+0x234>)
 801585a:	230a      	movs	r3, #10
 801585c:	e011      	b.n	8015882 <_printf_i+0xfa>
 801585e:	6821      	ldr	r1, [r4, #0]
 8015860:	6833      	ldr	r3, [r6, #0]
 8015862:	0608      	lsls	r0, r1, #24
 8015864:	f853 5b04 	ldr.w	r5, [r3], #4
 8015868:	d402      	bmi.n	8015870 <_printf_i+0xe8>
 801586a:	0649      	lsls	r1, r1, #25
 801586c:	bf48      	it	mi
 801586e:	b2ad      	uxthmi	r5, r5
 8015870:	2f6f      	cmp	r7, #111	@ 0x6f
 8015872:	4852      	ldr	r0, [pc, #328]	@ (80159bc <_printf_i+0x234>)
 8015874:	6033      	str	r3, [r6, #0]
 8015876:	bf14      	ite	ne
 8015878:	230a      	movne	r3, #10
 801587a:	2308      	moveq	r3, #8
 801587c:	2100      	movs	r1, #0
 801587e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015882:	6866      	ldr	r6, [r4, #4]
 8015884:	60a6      	str	r6, [r4, #8]
 8015886:	2e00      	cmp	r6, #0
 8015888:	db05      	blt.n	8015896 <_printf_i+0x10e>
 801588a:	6821      	ldr	r1, [r4, #0]
 801588c:	432e      	orrs	r6, r5
 801588e:	f021 0104 	bic.w	r1, r1, #4
 8015892:	6021      	str	r1, [r4, #0]
 8015894:	d04b      	beq.n	801592e <_printf_i+0x1a6>
 8015896:	4616      	mov	r6, r2
 8015898:	fbb5 f1f3 	udiv	r1, r5, r3
 801589c:	fb03 5711 	mls	r7, r3, r1, r5
 80158a0:	5dc7      	ldrb	r7, [r0, r7]
 80158a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80158a6:	462f      	mov	r7, r5
 80158a8:	42bb      	cmp	r3, r7
 80158aa:	460d      	mov	r5, r1
 80158ac:	d9f4      	bls.n	8015898 <_printf_i+0x110>
 80158ae:	2b08      	cmp	r3, #8
 80158b0:	d10b      	bne.n	80158ca <_printf_i+0x142>
 80158b2:	6823      	ldr	r3, [r4, #0]
 80158b4:	07df      	lsls	r7, r3, #31
 80158b6:	d508      	bpl.n	80158ca <_printf_i+0x142>
 80158b8:	6923      	ldr	r3, [r4, #16]
 80158ba:	6861      	ldr	r1, [r4, #4]
 80158bc:	4299      	cmp	r1, r3
 80158be:	bfde      	ittt	le
 80158c0:	2330      	movle	r3, #48	@ 0x30
 80158c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80158c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80158ca:	1b92      	subs	r2, r2, r6
 80158cc:	6122      	str	r2, [r4, #16]
 80158ce:	f8cd a000 	str.w	sl, [sp]
 80158d2:	464b      	mov	r3, r9
 80158d4:	aa03      	add	r2, sp, #12
 80158d6:	4621      	mov	r1, r4
 80158d8:	4640      	mov	r0, r8
 80158da:	f7ff fee7 	bl	80156ac <_printf_common>
 80158de:	3001      	adds	r0, #1
 80158e0:	d14a      	bne.n	8015978 <_printf_i+0x1f0>
 80158e2:	f04f 30ff 	mov.w	r0, #4294967295
 80158e6:	b004      	add	sp, #16
 80158e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158ec:	6823      	ldr	r3, [r4, #0]
 80158ee:	f043 0320 	orr.w	r3, r3, #32
 80158f2:	6023      	str	r3, [r4, #0]
 80158f4:	4832      	ldr	r0, [pc, #200]	@ (80159c0 <_printf_i+0x238>)
 80158f6:	2778      	movs	r7, #120	@ 0x78
 80158f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80158fc:	6823      	ldr	r3, [r4, #0]
 80158fe:	6831      	ldr	r1, [r6, #0]
 8015900:	061f      	lsls	r7, r3, #24
 8015902:	f851 5b04 	ldr.w	r5, [r1], #4
 8015906:	d402      	bmi.n	801590e <_printf_i+0x186>
 8015908:	065f      	lsls	r7, r3, #25
 801590a:	bf48      	it	mi
 801590c:	b2ad      	uxthmi	r5, r5
 801590e:	6031      	str	r1, [r6, #0]
 8015910:	07d9      	lsls	r1, r3, #31
 8015912:	bf44      	itt	mi
 8015914:	f043 0320 	orrmi.w	r3, r3, #32
 8015918:	6023      	strmi	r3, [r4, #0]
 801591a:	b11d      	cbz	r5, 8015924 <_printf_i+0x19c>
 801591c:	2310      	movs	r3, #16
 801591e:	e7ad      	b.n	801587c <_printf_i+0xf4>
 8015920:	4826      	ldr	r0, [pc, #152]	@ (80159bc <_printf_i+0x234>)
 8015922:	e7e9      	b.n	80158f8 <_printf_i+0x170>
 8015924:	6823      	ldr	r3, [r4, #0]
 8015926:	f023 0320 	bic.w	r3, r3, #32
 801592a:	6023      	str	r3, [r4, #0]
 801592c:	e7f6      	b.n	801591c <_printf_i+0x194>
 801592e:	4616      	mov	r6, r2
 8015930:	e7bd      	b.n	80158ae <_printf_i+0x126>
 8015932:	6833      	ldr	r3, [r6, #0]
 8015934:	6825      	ldr	r5, [r4, #0]
 8015936:	6961      	ldr	r1, [r4, #20]
 8015938:	1d18      	adds	r0, r3, #4
 801593a:	6030      	str	r0, [r6, #0]
 801593c:	062e      	lsls	r6, r5, #24
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	d501      	bpl.n	8015946 <_printf_i+0x1be>
 8015942:	6019      	str	r1, [r3, #0]
 8015944:	e002      	b.n	801594c <_printf_i+0x1c4>
 8015946:	0668      	lsls	r0, r5, #25
 8015948:	d5fb      	bpl.n	8015942 <_printf_i+0x1ba>
 801594a:	8019      	strh	r1, [r3, #0]
 801594c:	2300      	movs	r3, #0
 801594e:	6123      	str	r3, [r4, #16]
 8015950:	4616      	mov	r6, r2
 8015952:	e7bc      	b.n	80158ce <_printf_i+0x146>
 8015954:	6833      	ldr	r3, [r6, #0]
 8015956:	1d1a      	adds	r2, r3, #4
 8015958:	6032      	str	r2, [r6, #0]
 801595a:	681e      	ldr	r6, [r3, #0]
 801595c:	6862      	ldr	r2, [r4, #4]
 801595e:	2100      	movs	r1, #0
 8015960:	4630      	mov	r0, r6
 8015962:	f7ea fcd5 	bl	8000310 <memchr>
 8015966:	b108      	cbz	r0, 801596c <_printf_i+0x1e4>
 8015968:	1b80      	subs	r0, r0, r6
 801596a:	6060      	str	r0, [r4, #4]
 801596c:	6863      	ldr	r3, [r4, #4]
 801596e:	6123      	str	r3, [r4, #16]
 8015970:	2300      	movs	r3, #0
 8015972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015976:	e7aa      	b.n	80158ce <_printf_i+0x146>
 8015978:	6923      	ldr	r3, [r4, #16]
 801597a:	4632      	mov	r2, r6
 801597c:	4649      	mov	r1, r9
 801597e:	4640      	mov	r0, r8
 8015980:	47d0      	blx	sl
 8015982:	3001      	adds	r0, #1
 8015984:	d0ad      	beq.n	80158e2 <_printf_i+0x15a>
 8015986:	6823      	ldr	r3, [r4, #0]
 8015988:	079b      	lsls	r3, r3, #30
 801598a:	d413      	bmi.n	80159b4 <_printf_i+0x22c>
 801598c:	68e0      	ldr	r0, [r4, #12]
 801598e:	9b03      	ldr	r3, [sp, #12]
 8015990:	4298      	cmp	r0, r3
 8015992:	bfb8      	it	lt
 8015994:	4618      	movlt	r0, r3
 8015996:	e7a6      	b.n	80158e6 <_printf_i+0x15e>
 8015998:	2301      	movs	r3, #1
 801599a:	4632      	mov	r2, r6
 801599c:	4649      	mov	r1, r9
 801599e:	4640      	mov	r0, r8
 80159a0:	47d0      	blx	sl
 80159a2:	3001      	adds	r0, #1
 80159a4:	d09d      	beq.n	80158e2 <_printf_i+0x15a>
 80159a6:	3501      	adds	r5, #1
 80159a8:	68e3      	ldr	r3, [r4, #12]
 80159aa:	9903      	ldr	r1, [sp, #12]
 80159ac:	1a5b      	subs	r3, r3, r1
 80159ae:	42ab      	cmp	r3, r5
 80159b0:	dcf2      	bgt.n	8015998 <_printf_i+0x210>
 80159b2:	e7eb      	b.n	801598c <_printf_i+0x204>
 80159b4:	2500      	movs	r5, #0
 80159b6:	f104 0619 	add.w	r6, r4, #25
 80159ba:	e7f5      	b.n	80159a8 <_printf_i+0x220>
 80159bc:	0801c3bb 	.word	0x0801c3bb
 80159c0:	0801c3cc 	.word	0x0801c3cc

080159c4 <_scanf_float>:
 80159c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159c8:	b087      	sub	sp, #28
 80159ca:	4691      	mov	r9, r2
 80159cc:	9303      	str	r3, [sp, #12]
 80159ce:	688b      	ldr	r3, [r1, #8]
 80159d0:	1e5a      	subs	r2, r3, #1
 80159d2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80159d6:	bf81      	itttt	hi
 80159d8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80159dc:	eb03 0b05 	addhi.w	fp, r3, r5
 80159e0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80159e4:	608b      	strhi	r3, [r1, #8]
 80159e6:	680b      	ldr	r3, [r1, #0]
 80159e8:	460a      	mov	r2, r1
 80159ea:	f04f 0500 	mov.w	r5, #0
 80159ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80159f2:	f842 3b1c 	str.w	r3, [r2], #28
 80159f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80159fa:	4680      	mov	r8, r0
 80159fc:	460c      	mov	r4, r1
 80159fe:	bf98      	it	ls
 8015a00:	f04f 0b00 	movls.w	fp, #0
 8015a04:	9201      	str	r2, [sp, #4]
 8015a06:	4616      	mov	r6, r2
 8015a08:	46aa      	mov	sl, r5
 8015a0a:	462f      	mov	r7, r5
 8015a0c:	9502      	str	r5, [sp, #8]
 8015a0e:	68a2      	ldr	r2, [r4, #8]
 8015a10:	b15a      	cbz	r2, 8015a2a <_scanf_float+0x66>
 8015a12:	f8d9 3000 	ldr.w	r3, [r9]
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	2b4e      	cmp	r3, #78	@ 0x4e
 8015a1a:	d863      	bhi.n	8015ae4 <_scanf_float+0x120>
 8015a1c:	2b40      	cmp	r3, #64	@ 0x40
 8015a1e:	d83b      	bhi.n	8015a98 <_scanf_float+0xd4>
 8015a20:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8015a24:	b2c8      	uxtb	r0, r1
 8015a26:	280e      	cmp	r0, #14
 8015a28:	d939      	bls.n	8015a9e <_scanf_float+0xda>
 8015a2a:	b11f      	cbz	r7, 8015a34 <_scanf_float+0x70>
 8015a2c:	6823      	ldr	r3, [r4, #0]
 8015a2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015a32:	6023      	str	r3, [r4, #0]
 8015a34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015a38:	f1ba 0f01 	cmp.w	sl, #1
 8015a3c:	f200 8114 	bhi.w	8015c68 <_scanf_float+0x2a4>
 8015a40:	9b01      	ldr	r3, [sp, #4]
 8015a42:	429e      	cmp	r6, r3
 8015a44:	f200 8105 	bhi.w	8015c52 <_scanf_float+0x28e>
 8015a48:	2001      	movs	r0, #1
 8015a4a:	b007      	add	sp, #28
 8015a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a50:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8015a54:	2a0d      	cmp	r2, #13
 8015a56:	d8e8      	bhi.n	8015a2a <_scanf_float+0x66>
 8015a58:	a101      	add	r1, pc, #4	@ (adr r1, 8015a60 <_scanf_float+0x9c>)
 8015a5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015a5e:	bf00      	nop
 8015a60:	08015ba9 	.word	0x08015ba9
 8015a64:	08015a2b 	.word	0x08015a2b
 8015a68:	08015a2b 	.word	0x08015a2b
 8015a6c:	08015a2b 	.word	0x08015a2b
 8015a70:	08015c05 	.word	0x08015c05
 8015a74:	08015bdf 	.word	0x08015bdf
 8015a78:	08015a2b 	.word	0x08015a2b
 8015a7c:	08015a2b 	.word	0x08015a2b
 8015a80:	08015bb7 	.word	0x08015bb7
 8015a84:	08015a2b 	.word	0x08015a2b
 8015a88:	08015a2b 	.word	0x08015a2b
 8015a8c:	08015a2b 	.word	0x08015a2b
 8015a90:	08015a2b 	.word	0x08015a2b
 8015a94:	08015b73 	.word	0x08015b73
 8015a98:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8015a9c:	e7da      	b.n	8015a54 <_scanf_float+0x90>
 8015a9e:	290e      	cmp	r1, #14
 8015aa0:	d8c3      	bhi.n	8015a2a <_scanf_float+0x66>
 8015aa2:	a001      	add	r0, pc, #4	@ (adr r0, 8015aa8 <_scanf_float+0xe4>)
 8015aa4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015aa8:	08015b63 	.word	0x08015b63
 8015aac:	08015a2b 	.word	0x08015a2b
 8015ab0:	08015b63 	.word	0x08015b63
 8015ab4:	08015bf3 	.word	0x08015bf3
 8015ab8:	08015a2b 	.word	0x08015a2b
 8015abc:	08015b05 	.word	0x08015b05
 8015ac0:	08015b49 	.word	0x08015b49
 8015ac4:	08015b49 	.word	0x08015b49
 8015ac8:	08015b49 	.word	0x08015b49
 8015acc:	08015b49 	.word	0x08015b49
 8015ad0:	08015b49 	.word	0x08015b49
 8015ad4:	08015b49 	.word	0x08015b49
 8015ad8:	08015b49 	.word	0x08015b49
 8015adc:	08015b49 	.word	0x08015b49
 8015ae0:	08015b49 	.word	0x08015b49
 8015ae4:	2b6e      	cmp	r3, #110	@ 0x6e
 8015ae6:	d809      	bhi.n	8015afc <_scanf_float+0x138>
 8015ae8:	2b60      	cmp	r3, #96	@ 0x60
 8015aea:	d8b1      	bhi.n	8015a50 <_scanf_float+0x8c>
 8015aec:	2b54      	cmp	r3, #84	@ 0x54
 8015aee:	d07b      	beq.n	8015be8 <_scanf_float+0x224>
 8015af0:	2b59      	cmp	r3, #89	@ 0x59
 8015af2:	d19a      	bne.n	8015a2a <_scanf_float+0x66>
 8015af4:	2d07      	cmp	r5, #7
 8015af6:	d198      	bne.n	8015a2a <_scanf_float+0x66>
 8015af8:	2508      	movs	r5, #8
 8015afa:	e02f      	b.n	8015b5c <_scanf_float+0x198>
 8015afc:	2b74      	cmp	r3, #116	@ 0x74
 8015afe:	d073      	beq.n	8015be8 <_scanf_float+0x224>
 8015b00:	2b79      	cmp	r3, #121	@ 0x79
 8015b02:	e7f6      	b.n	8015af2 <_scanf_float+0x12e>
 8015b04:	6821      	ldr	r1, [r4, #0]
 8015b06:	05c8      	lsls	r0, r1, #23
 8015b08:	d51e      	bpl.n	8015b48 <_scanf_float+0x184>
 8015b0a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8015b0e:	6021      	str	r1, [r4, #0]
 8015b10:	3701      	adds	r7, #1
 8015b12:	f1bb 0f00 	cmp.w	fp, #0
 8015b16:	d003      	beq.n	8015b20 <_scanf_float+0x15c>
 8015b18:	3201      	adds	r2, #1
 8015b1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015b1e:	60a2      	str	r2, [r4, #8]
 8015b20:	68a3      	ldr	r3, [r4, #8]
 8015b22:	3b01      	subs	r3, #1
 8015b24:	60a3      	str	r3, [r4, #8]
 8015b26:	6923      	ldr	r3, [r4, #16]
 8015b28:	3301      	adds	r3, #1
 8015b2a:	6123      	str	r3, [r4, #16]
 8015b2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015b30:	3b01      	subs	r3, #1
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	f8c9 3004 	str.w	r3, [r9, #4]
 8015b38:	f340 8082 	ble.w	8015c40 <_scanf_float+0x27c>
 8015b3c:	f8d9 3000 	ldr.w	r3, [r9]
 8015b40:	3301      	adds	r3, #1
 8015b42:	f8c9 3000 	str.w	r3, [r9]
 8015b46:	e762      	b.n	8015a0e <_scanf_float+0x4a>
 8015b48:	eb1a 0105 	adds.w	r1, sl, r5
 8015b4c:	f47f af6d 	bne.w	8015a2a <_scanf_float+0x66>
 8015b50:	6822      	ldr	r2, [r4, #0]
 8015b52:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8015b56:	6022      	str	r2, [r4, #0]
 8015b58:	460d      	mov	r5, r1
 8015b5a:	468a      	mov	sl, r1
 8015b5c:	f806 3b01 	strb.w	r3, [r6], #1
 8015b60:	e7de      	b.n	8015b20 <_scanf_float+0x15c>
 8015b62:	6822      	ldr	r2, [r4, #0]
 8015b64:	0610      	lsls	r0, r2, #24
 8015b66:	f57f af60 	bpl.w	8015a2a <_scanf_float+0x66>
 8015b6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8015b6e:	6022      	str	r2, [r4, #0]
 8015b70:	e7f4      	b.n	8015b5c <_scanf_float+0x198>
 8015b72:	f1ba 0f00 	cmp.w	sl, #0
 8015b76:	d10c      	bne.n	8015b92 <_scanf_float+0x1ce>
 8015b78:	b977      	cbnz	r7, 8015b98 <_scanf_float+0x1d4>
 8015b7a:	6822      	ldr	r2, [r4, #0]
 8015b7c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8015b80:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8015b84:	d108      	bne.n	8015b98 <_scanf_float+0x1d4>
 8015b86:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015b8a:	6022      	str	r2, [r4, #0]
 8015b8c:	f04f 0a01 	mov.w	sl, #1
 8015b90:	e7e4      	b.n	8015b5c <_scanf_float+0x198>
 8015b92:	f1ba 0f02 	cmp.w	sl, #2
 8015b96:	d050      	beq.n	8015c3a <_scanf_float+0x276>
 8015b98:	2d01      	cmp	r5, #1
 8015b9a:	d002      	beq.n	8015ba2 <_scanf_float+0x1de>
 8015b9c:	2d04      	cmp	r5, #4
 8015b9e:	f47f af44 	bne.w	8015a2a <_scanf_float+0x66>
 8015ba2:	3501      	adds	r5, #1
 8015ba4:	b2ed      	uxtb	r5, r5
 8015ba6:	e7d9      	b.n	8015b5c <_scanf_float+0x198>
 8015ba8:	f1ba 0f01 	cmp.w	sl, #1
 8015bac:	f47f af3d 	bne.w	8015a2a <_scanf_float+0x66>
 8015bb0:	f04f 0a02 	mov.w	sl, #2
 8015bb4:	e7d2      	b.n	8015b5c <_scanf_float+0x198>
 8015bb6:	b975      	cbnz	r5, 8015bd6 <_scanf_float+0x212>
 8015bb8:	2f00      	cmp	r7, #0
 8015bba:	f47f af37 	bne.w	8015a2c <_scanf_float+0x68>
 8015bbe:	6822      	ldr	r2, [r4, #0]
 8015bc0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8015bc4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8015bc8:	f040 80fc 	bne.w	8015dc4 <_scanf_float+0x400>
 8015bcc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015bd0:	6022      	str	r2, [r4, #0]
 8015bd2:	2501      	movs	r5, #1
 8015bd4:	e7c2      	b.n	8015b5c <_scanf_float+0x198>
 8015bd6:	2d03      	cmp	r5, #3
 8015bd8:	d0e3      	beq.n	8015ba2 <_scanf_float+0x1de>
 8015bda:	2d05      	cmp	r5, #5
 8015bdc:	e7df      	b.n	8015b9e <_scanf_float+0x1da>
 8015bde:	2d02      	cmp	r5, #2
 8015be0:	f47f af23 	bne.w	8015a2a <_scanf_float+0x66>
 8015be4:	2503      	movs	r5, #3
 8015be6:	e7b9      	b.n	8015b5c <_scanf_float+0x198>
 8015be8:	2d06      	cmp	r5, #6
 8015bea:	f47f af1e 	bne.w	8015a2a <_scanf_float+0x66>
 8015bee:	2507      	movs	r5, #7
 8015bf0:	e7b4      	b.n	8015b5c <_scanf_float+0x198>
 8015bf2:	6822      	ldr	r2, [r4, #0]
 8015bf4:	0591      	lsls	r1, r2, #22
 8015bf6:	f57f af18 	bpl.w	8015a2a <_scanf_float+0x66>
 8015bfa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8015bfe:	6022      	str	r2, [r4, #0]
 8015c00:	9702      	str	r7, [sp, #8]
 8015c02:	e7ab      	b.n	8015b5c <_scanf_float+0x198>
 8015c04:	6822      	ldr	r2, [r4, #0]
 8015c06:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8015c0a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015c0e:	d005      	beq.n	8015c1c <_scanf_float+0x258>
 8015c10:	0550      	lsls	r0, r2, #21
 8015c12:	f57f af0a 	bpl.w	8015a2a <_scanf_float+0x66>
 8015c16:	2f00      	cmp	r7, #0
 8015c18:	f000 80d4 	beq.w	8015dc4 <_scanf_float+0x400>
 8015c1c:	0591      	lsls	r1, r2, #22
 8015c1e:	bf58      	it	pl
 8015c20:	9902      	ldrpl	r1, [sp, #8]
 8015c22:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015c26:	bf58      	it	pl
 8015c28:	1a79      	subpl	r1, r7, r1
 8015c2a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8015c2e:	bf58      	it	pl
 8015c30:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015c34:	6022      	str	r2, [r4, #0]
 8015c36:	2700      	movs	r7, #0
 8015c38:	e790      	b.n	8015b5c <_scanf_float+0x198>
 8015c3a:	f04f 0a03 	mov.w	sl, #3
 8015c3e:	e78d      	b.n	8015b5c <_scanf_float+0x198>
 8015c40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015c44:	4649      	mov	r1, r9
 8015c46:	4640      	mov	r0, r8
 8015c48:	4798      	blx	r3
 8015c4a:	2800      	cmp	r0, #0
 8015c4c:	f43f aedf 	beq.w	8015a0e <_scanf_float+0x4a>
 8015c50:	e6eb      	b.n	8015a2a <_scanf_float+0x66>
 8015c52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015c56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015c5a:	464a      	mov	r2, r9
 8015c5c:	4640      	mov	r0, r8
 8015c5e:	4798      	blx	r3
 8015c60:	6923      	ldr	r3, [r4, #16]
 8015c62:	3b01      	subs	r3, #1
 8015c64:	6123      	str	r3, [r4, #16]
 8015c66:	e6eb      	b.n	8015a40 <_scanf_float+0x7c>
 8015c68:	1e6b      	subs	r3, r5, #1
 8015c6a:	2b06      	cmp	r3, #6
 8015c6c:	d824      	bhi.n	8015cb8 <_scanf_float+0x2f4>
 8015c6e:	2d02      	cmp	r5, #2
 8015c70:	d836      	bhi.n	8015ce0 <_scanf_float+0x31c>
 8015c72:	9b01      	ldr	r3, [sp, #4]
 8015c74:	429e      	cmp	r6, r3
 8015c76:	f67f aee7 	bls.w	8015a48 <_scanf_float+0x84>
 8015c7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015c7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015c82:	464a      	mov	r2, r9
 8015c84:	4640      	mov	r0, r8
 8015c86:	4798      	blx	r3
 8015c88:	6923      	ldr	r3, [r4, #16]
 8015c8a:	3b01      	subs	r3, #1
 8015c8c:	6123      	str	r3, [r4, #16]
 8015c8e:	e7f0      	b.n	8015c72 <_scanf_float+0x2ae>
 8015c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015c94:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8015c98:	464a      	mov	r2, r9
 8015c9a:	4640      	mov	r0, r8
 8015c9c:	4798      	blx	r3
 8015c9e:	6923      	ldr	r3, [r4, #16]
 8015ca0:	3b01      	subs	r3, #1
 8015ca2:	6123      	str	r3, [r4, #16]
 8015ca4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015ca8:	fa5f fa8a 	uxtb.w	sl, sl
 8015cac:	f1ba 0f02 	cmp.w	sl, #2
 8015cb0:	d1ee      	bne.n	8015c90 <_scanf_float+0x2cc>
 8015cb2:	3d03      	subs	r5, #3
 8015cb4:	b2ed      	uxtb	r5, r5
 8015cb6:	1b76      	subs	r6, r6, r5
 8015cb8:	6823      	ldr	r3, [r4, #0]
 8015cba:	05da      	lsls	r2, r3, #23
 8015cbc:	d530      	bpl.n	8015d20 <_scanf_float+0x35c>
 8015cbe:	055b      	lsls	r3, r3, #21
 8015cc0:	d511      	bpl.n	8015ce6 <_scanf_float+0x322>
 8015cc2:	9b01      	ldr	r3, [sp, #4]
 8015cc4:	429e      	cmp	r6, r3
 8015cc6:	f67f aebf 	bls.w	8015a48 <_scanf_float+0x84>
 8015cca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015cce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015cd2:	464a      	mov	r2, r9
 8015cd4:	4640      	mov	r0, r8
 8015cd6:	4798      	blx	r3
 8015cd8:	6923      	ldr	r3, [r4, #16]
 8015cda:	3b01      	subs	r3, #1
 8015cdc:	6123      	str	r3, [r4, #16]
 8015cde:	e7f0      	b.n	8015cc2 <_scanf_float+0x2fe>
 8015ce0:	46aa      	mov	sl, r5
 8015ce2:	46b3      	mov	fp, r6
 8015ce4:	e7de      	b.n	8015ca4 <_scanf_float+0x2e0>
 8015ce6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015cea:	6923      	ldr	r3, [r4, #16]
 8015cec:	2965      	cmp	r1, #101	@ 0x65
 8015cee:	f103 33ff 	add.w	r3, r3, #4294967295
 8015cf2:	f106 35ff 	add.w	r5, r6, #4294967295
 8015cf6:	6123      	str	r3, [r4, #16]
 8015cf8:	d00c      	beq.n	8015d14 <_scanf_float+0x350>
 8015cfa:	2945      	cmp	r1, #69	@ 0x45
 8015cfc:	d00a      	beq.n	8015d14 <_scanf_float+0x350>
 8015cfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015d02:	464a      	mov	r2, r9
 8015d04:	4640      	mov	r0, r8
 8015d06:	4798      	blx	r3
 8015d08:	6923      	ldr	r3, [r4, #16]
 8015d0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015d0e:	3b01      	subs	r3, #1
 8015d10:	1eb5      	subs	r5, r6, #2
 8015d12:	6123      	str	r3, [r4, #16]
 8015d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015d18:	464a      	mov	r2, r9
 8015d1a:	4640      	mov	r0, r8
 8015d1c:	4798      	blx	r3
 8015d1e:	462e      	mov	r6, r5
 8015d20:	6822      	ldr	r2, [r4, #0]
 8015d22:	f012 0210 	ands.w	r2, r2, #16
 8015d26:	d001      	beq.n	8015d2c <_scanf_float+0x368>
 8015d28:	2000      	movs	r0, #0
 8015d2a:	e68e      	b.n	8015a4a <_scanf_float+0x86>
 8015d2c:	7032      	strb	r2, [r6, #0]
 8015d2e:	6823      	ldr	r3, [r4, #0]
 8015d30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8015d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015d38:	d123      	bne.n	8015d82 <_scanf_float+0x3be>
 8015d3a:	9b02      	ldr	r3, [sp, #8]
 8015d3c:	429f      	cmp	r7, r3
 8015d3e:	d00a      	beq.n	8015d56 <_scanf_float+0x392>
 8015d40:	1bda      	subs	r2, r3, r7
 8015d42:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8015d46:	429e      	cmp	r6, r3
 8015d48:	bf28      	it	cs
 8015d4a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8015d4e:	491e      	ldr	r1, [pc, #120]	@ (8015dc8 <_scanf_float+0x404>)
 8015d50:	4630      	mov	r0, r6
 8015d52:	f000 f96f 	bl	8016034 <siprintf>
 8015d56:	9901      	ldr	r1, [sp, #4]
 8015d58:	2200      	movs	r2, #0
 8015d5a:	4640      	mov	r0, r8
 8015d5c:	f002 fc96 	bl	801868c <_strtod_r>
 8015d60:	9b03      	ldr	r3, [sp, #12]
 8015d62:	6821      	ldr	r1, [r4, #0]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	f011 0f02 	tst.w	r1, #2
 8015d6a:	f103 0204 	add.w	r2, r3, #4
 8015d6e:	d015      	beq.n	8015d9c <_scanf_float+0x3d8>
 8015d70:	9903      	ldr	r1, [sp, #12]
 8015d72:	600a      	str	r2, [r1, #0]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	ed83 0b00 	vstr	d0, [r3]
 8015d7a:	68e3      	ldr	r3, [r4, #12]
 8015d7c:	3301      	adds	r3, #1
 8015d7e:	60e3      	str	r3, [r4, #12]
 8015d80:	e7d2      	b.n	8015d28 <_scanf_float+0x364>
 8015d82:	9b04      	ldr	r3, [sp, #16]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d0e6      	beq.n	8015d56 <_scanf_float+0x392>
 8015d88:	9905      	ldr	r1, [sp, #20]
 8015d8a:	230a      	movs	r3, #10
 8015d8c:	3101      	adds	r1, #1
 8015d8e:	4640      	mov	r0, r8
 8015d90:	f7ff f9e2 	bl	8015158 <_strtol_r>
 8015d94:	9b04      	ldr	r3, [sp, #16]
 8015d96:	9e05      	ldr	r6, [sp, #20]
 8015d98:	1ac2      	subs	r2, r0, r3
 8015d9a:	e7d2      	b.n	8015d42 <_scanf_float+0x37e>
 8015d9c:	f011 0f04 	tst.w	r1, #4
 8015da0:	9903      	ldr	r1, [sp, #12]
 8015da2:	600a      	str	r2, [r1, #0]
 8015da4:	d1e6      	bne.n	8015d74 <_scanf_float+0x3b0>
 8015da6:	eeb4 0b40 	vcmp.f64	d0, d0
 8015daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dae:	681d      	ldr	r5, [r3, #0]
 8015db0:	d705      	bvc.n	8015dbe <_scanf_float+0x3fa>
 8015db2:	4806      	ldr	r0, [pc, #24]	@ (8015dcc <_scanf_float+0x408>)
 8015db4:	f000 fb02 	bl	80163bc <nanf>
 8015db8:	ed85 0a00 	vstr	s0, [r5]
 8015dbc:	e7dd      	b.n	8015d7a <_scanf_float+0x3b6>
 8015dbe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015dc2:	e7f9      	b.n	8015db8 <_scanf_float+0x3f4>
 8015dc4:	2700      	movs	r7, #0
 8015dc6:	e635      	b.n	8015a34 <_scanf_float+0x70>
 8015dc8:	0801c3dd 	.word	0x0801c3dd
 8015dcc:	0801c41d 	.word	0x0801c41d

08015dd0 <std>:
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	b510      	push	{r4, lr}
 8015dd4:	4604      	mov	r4, r0
 8015dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8015dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015dde:	6083      	str	r3, [r0, #8]
 8015de0:	8181      	strh	r1, [r0, #12]
 8015de2:	6643      	str	r3, [r0, #100]	@ 0x64
 8015de4:	81c2      	strh	r2, [r0, #14]
 8015de6:	6183      	str	r3, [r0, #24]
 8015de8:	4619      	mov	r1, r3
 8015dea:	2208      	movs	r2, #8
 8015dec:	305c      	adds	r0, #92	@ 0x5c
 8015dee:	f000 fa45 	bl	801627c <memset>
 8015df2:	4b0d      	ldr	r3, [pc, #52]	@ (8015e28 <std+0x58>)
 8015df4:	6263      	str	r3, [r4, #36]	@ 0x24
 8015df6:	4b0d      	ldr	r3, [pc, #52]	@ (8015e2c <std+0x5c>)
 8015df8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8015e30 <std+0x60>)
 8015dfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8015e34 <std+0x64>)
 8015e00:	6323      	str	r3, [r4, #48]	@ 0x30
 8015e02:	4b0d      	ldr	r3, [pc, #52]	@ (8015e38 <std+0x68>)
 8015e04:	6224      	str	r4, [r4, #32]
 8015e06:	429c      	cmp	r4, r3
 8015e08:	d006      	beq.n	8015e18 <std+0x48>
 8015e0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015e0e:	4294      	cmp	r4, r2
 8015e10:	d002      	beq.n	8015e18 <std+0x48>
 8015e12:	33d0      	adds	r3, #208	@ 0xd0
 8015e14:	429c      	cmp	r4, r3
 8015e16:	d105      	bne.n	8015e24 <std+0x54>
 8015e18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e20:	f000 baba 	b.w	8016398 <__retarget_lock_init_recursive>
 8015e24:	bd10      	pop	{r4, pc}
 8015e26:	bf00      	nop
 8015e28:	08016079 	.word	0x08016079
 8015e2c:	0801609b 	.word	0x0801609b
 8015e30:	080160d3 	.word	0x080160d3
 8015e34:	080160f7 	.word	0x080160f7
 8015e38:	240084e8 	.word	0x240084e8

08015e3c <stdio_exit_handler>:
 8015e3c:	4a02      	ldr	r2, [pc, #8]	@ (8015e48 <stdio_exit_handler+0xc>)
 8015e3e:	4903      	ldr	r1, [pc, #12]	@ (8015e4c <stdio_exit_handler+0x10>)
 8015e40:	4803      	ldr	r0, [pc, #12]	@ (8015e50 <stdio_exit_handler+0x14>)
 8015e42:	f000 b869 	b.w	8015f18 <_fwalk_sglue>
 8015e46:	bf00      	nop
 8015e48:	24000050 	.word	0x24000050
 8015e4c:	08018cd5 	.word	0x08018cd5
 8015e50:	24000060 	.word	0x24000060

08015e54 <cleanup_stdio>:
 8015e54:	6841      	ldr	r1, [r0, #4]
 8015e56:	4b0c      	ldr	r3, [pc, #48]	@ (8015e88 <cleanup_stdio+0x34>)
 8015e58:	4299      	cmp	r1, r3
 8015e5a:	b510      	push	{r4, lr}
 8015e5c:	4604      	mov	r4, r0
 8015e5e:	d001      	beq.n	8015e64 <cleanup_stdio+0x10>
 8015e60:	f002 ff38 	bl	8018cd4 <_fflush_r>
 8015e64:	68a1      	ldr	r1, [r4, #8]
 8015e66:	4b09      	ldr	r3, [pc, #36]	@ (8015e8c <cleanup_stdio+0x38>)
 8015e68:	4299      	cmp	r1, r3
 8015e6a:	d002      	beq.n	8015e72 <cleanup_stdio+0x1e>
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	f002 ff31 	bl	8018cd4 <_fflush_r>
 8015e72:	68e1      	ldr	r1, [r4, #12]
 8015e74:	4b06      	ldr	r3, [pc, #24]	@ (8015e90 <cleanup_stdio+0x3c>)
 8015e76:	4299      	cmp	r1, r3
 8015e78:	d004      	beq.n	8015e84 <cleanup_stdio+0x30>
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e80:	f002 bf28 	b.w	8018cd4 <_fflush_r>
 8015e84:	bd10      	pop	{r4, pc}
 8015e86:	bf00      	nop
 8015e88:	240084e8 	.word	0x240084e8
 8015e8c:	24008550 	.word	0x24008550
 8015e90:	240085b8 	.word	0x240085b8

08015e94 <global_stdio_init.part.0>:
 8015e94:	b510      	push	{r4, lr}
 8015e96:	4b0b      	ldr	r3, [pc, #44]	@ (8015ec4 <global_stdio_init.part.0+0x30>)
 8015e98:	4c0b      	ldr	r4, [pc, #44]	@ (8015ec8 <global_stdio_init.part.0+0x34>)
 8015e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8015ecc <global_stdio_init.part.0+0x38>)
 8015e9c:	601a      	str	r2, [r3, #0]
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	2104      	movs	r1, #4
 8015ea4:	f7ff ff94 	bl	8015dd0 <std>
 8015ea8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015eac:	2201      	movs	r2, #1
 8015eae:	2109      	movs	r1, #9
 8015eb0:	f7ff ff8e 	bl	8015dd0 <std>
 8015eb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015eb8:	2202      	movs	r2, #2
 8015eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ebe:	2112      	movs	r1, #18
 8015ec0:	f7ff bf86 	b.w	8015dd0 <std>
 8015ec4:	24008620 	.word	0x24008620
 8015ec8:	240084e8 	.word	0x240084e8
 8015ecc:	08015e3d 	.word	0x08015e3d

08015ed0 <__sfp_lock_acquire>:
 8015ed0:	4801      	ldr	r0, [pc, #4]	@ (8015ed8 <__sfp_lock_acquire+0x8>)
 8015ed2:	f000 ba62 	b.w	801639a <__retarget_lock_acquire_recursive>
 8015ed6:	bf00      	nop
 8015ed8:	24008629 	.word	0x24008629

08015edc <__sfp_lock_release>:
 8015edc:	4801      	ldr	r0, [pc, #4]	@ (8015ee4 <__sfp_lock_release+0x8>)
 8015ede:	f000 ba5d 	b.w	801639c <__retarget_lock_release_recursive>
 8015ee2:	bf00      	nop
 8015ee4:	24008629 	.word	0x24008629

08015ee8 <__sinit>:
 8015ee8:	b510      	push	{r4, lr}
 8015eea:	4604      	mov	r4, r0
 8015eec:	f7ff fff0 	bl	8015ed0 <__sfp_lock_acquire>
 8015ef0:	6a23      	ldr	r3, [r4, #32]
 8015ef2:	b11b      	cbz	r3, 8015efc <__sinit+0x14>
 8015ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ef8:	f7ff bff0 	b.w	8015edc <__sfp_lock_release>
 8015efc:	4b04      	ldr	r3, [pc, #16]	@ (8015f10 <__sinit+0x28>)
 8015efe:	6223      	str	r3, [r4, #32]
 8015f00:	4b04      	ldr	r3, [pc, #16]	@ (8015f14 <__sinit+0x2c>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d1f5      	bne.n	8015ef4 <__sinit+0xc>
 8015f08:	f7ff ffc4 	bl	8015e94 <global_stdio_init.part.0>
 8015f0c:	e7f2      	b.n	8015ef4 <__sinit+0xc>
 8015f0e:	bf00      	nop
 8015f10:	08015e55 	.word	0x08015e55
 8015f14:	24008620 	.word	0x24008620

08015f18 <_fwalk_sglue>:
 8015f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f1c:	4607      	mov	r7, r0
 8015f1e:	4688      	mov	r8, r1
 8015f20:	4614      	mov	r4, r2
 8015f22:	2600      	movs	r6, #0
 8015f24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015f28:	f1b9 0901 	subs.w	r9, r9, #1
 8015f2c:	d505      	bpl.n	8015f3a <_fwalk_sglue+0x22>
 8015f2e:	6824      	ldr	r4, [r4, #0]
 8015f30:	2c00      	cmp	r4, #0
 8015f32:	d1f7      	bne.n	8015f24 <_fwalk_sglue+0xc>
 8015f34:	4630      	mov	r0, r6
 8015f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f3a:	89ab      	ldrh	r3, [r5, #12]
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	d907      	bls.n	8015f50 <_fwalk_sglue+0x38>
 8015f40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015f44:	3301      	adds	r3, #1
 8015f46:	d003      	beq.n	8015f50 <_fwalk_sglue+0x38>
 8015f48:	4629      	mov	r1, r5
 8015f4a:	4638      	mov	r0, r7
 8015f4c:	47c0      	blx	r8
 8015f4e:	4306      	orrs	r6, r0
 8015f50:	3568      	adds	r5, #104	@ 0x68
 8015f52:	e7e9      	b.n	8015f28 <_fwalk_sglue+0x10>

08015f54 <iprintf>:
 8015f54:	b40f      	push	{r0, r1, r2, r3}
 8015f56:	b507      	push	{r0, r1, r2, lr}
 8015f58:	4906      	ldr	r1, [pc, #24]	@ (8015f74 <iprintf+0x20>)
 8015f5a:	ab04      	add	r3, sp, #16
 8015f5c:	6808      	ldr	r0, [r1, #0]
 8015f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f62:	6881      	ldr	r1, [r0, #8]
 8015f64:	9301      	str	r3, [sp, #4]
 8015f66:	f002 fd19 	bl	801899c <_vfiprintf_r>
 8015f6a:	b003      	add	sp, #12
 8015f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f70:	b004      	add	sp, #16
 8015f72:	4770      	bx	lr
 8015f74:	2400005c 	.word	0x2400005c

08015f78 <_puts_r>:
 8015f78:	6a03      	ldr	r3, [r0, #32]
 8015f7a:	b570      	push	{r4, r5, r6, lr}
 8015f7c:	6884      	ldr	r4, [r0, #8]
 8015f7e:	4605      	mov	r5, r0
 8015f80:	460e      	mov	r6, r1
 8015f82:	b90b      	cbnz	r3, 8015f88 <_puts_r+0x10>
 8015f84:	f7ff ffb0 	bl	8015ee8 <__sinit>
 8015f88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015f8a:	07db      	lsls	r3, r3, #31
 8015f8c:	d405      	bmi.n	8015f9a <_puts_r+0x22>
 8015f8e:	89a3      	ldrh	r3, [r4, #12]
 8015f90:	0598      	lsls	r0, r3, #22
 8015f92:	d402      	bmi.n	8015f9a <_puts_r+0x22>
 8015f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015f96:	f000 fa00 	bl	801639a <__retarget_lock_acquire_recursive>
 8015f9a:	89a3      	ldrh	r3, [r4, #12]
 8015f9c:	0719      	lsls	r1, r3, #28
 8015f9e:	d502      	bpl.n	8015fa6 <_puts_r+0x2e>
 8015fa0:	6923      	ldr	r3, [r4, #16]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d135      	bne.n	8016012 <_puts_r+0x9a>
 8015fa6:	4621      	mov	r1, r4
 8015fa8:	4628      	mov	r0, r5
 8015faa:	f000 f8e7 	bl	801617c <__swsetup_r>
 8015fae:	b380      	cbz	r0, 8016012 <_puts_r+0x9a>
 8015fb0:	f04f 35ff 	mov.w	r5, #4294967295
 8015fb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015fb6:	07da      	lsls	r2, r3, #31
 8015fb8:	d405      	bmi.n	8015fc6 <_puts_r+0x4e>
 8015fba:	89a3      	ldrh	r3, [r4, #12]
 8015fbc:	059b      	lsls	r3, r3, #22
 8015fbe:	d402      	bmi.n	8015fc6 <_puts_r+0x4e>
 8015fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015fc2:	f000 f9eb 	bl	801639c <__retarget_lock_release_recursive>
 8015fc6:	4628      	mov	r0, r5
 8015fc8:	bd70      	pop	{r4, r5, r6, pc}
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	da04      	bge.n	8015fd8 <_puts_r+0x60>
 8015fce:	69a2      	ldr	r2, [r4, #24]
 8015fd0:	429a      	cmp	r2, r3
 8015fd2:	dc17      	bgt.n	8016004 <_puts_r+0x8c>
 8015fd4:	290a      	cmp	r1, #10
 8015fd6:	d015      	beq.n	8016004 <_puts_r+0x8c>
 8015fd8:	6823      	ldr	r3, [r4, #0]
 8015fda:	1c5a      	adds	r2, r3, #1
 8015fdc:	6022      	str	r2, [r4, #0]
 8015fde:	7019      	strb	r1, [r3, #0]
 8015fe0:	68a3      	ldr	r3, [r4, #8]
 8015fe2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015fe6:	3b01      	subs	r3, #1
 8015fe8:	60a3      	str	r3, [r4, #8]
 8015fea:	2900      	cmp	r1, #0
 8015fec:	d1ed      	bne.n	8015fca <_puts_r+0x52>
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	da11      	bge.n	8016016 <_puts_r+0x9e>
 8015ff2:	4622      	mov	r2, r4
 8015ff4:	210a      	movs	r1, #10
 8015ff6:	4628      	mov	r0, r5
 8015ff8:	f000 f881 	bl	80160fe <__swbuf_r>
 8015ffc:	3001      	adds	r0, #1
 8015ffe:	d0d7      	beq.n	8015fb0 <_puts_r+0x38>
 8016000:	250a      	movs	r5, #10
 8016002:	e7d7      	b.n	8015fb4 <_puts_r+0x3c>
 8016004:	4622      	mov	r2, r4
 8016006:	4628      	mov	r0, r5
 8016008:	f000 f879 	bl	80160fe <__swbuf_r>
 801600c:	3001      	adds	r0, #1
 801600e:	d1e7      	bne.n	8015fe0 <_puts_r+0x68>
 8016010:	e7ce      	b.n	8015fb0 <_puts_r+0x38>
 8016012:	3e01      	subs	r6, #1
 8016014:	e7e4      	b.n	8015fe0 <_puts_r+0x68>
 8016016:	6823      	ldr	r3, [r4, #0]
 8016018:	1c5a      	adds	r2, r3, #1
 801601a:	6022      	str	r2, [r4, #0]
 801601c:	220a      	movs	r2, #10
 801601e:	701a      	strb	r2, [r3, #0]
 8016020:	e7ee      	b.n	8016000 <_puts_r+0x88>
	...

08016024 <puts>:
 8016024:	4b02      	ldr	r3, [pc, #8]	@ (8016030 <puts+0xc>)
 8016026:	4601      	mov	r1, r0
 8016028:	6818      	ldr	r0, [r3, #0]
 801602a:	f7ff bfa5 	b.w	8015f78 <_puts_r>
 801602e:	bf00      	nop
 8016030:	2400005c 	.word	0x2400005c

08016034 <siprintf>:
 8016034:	b40e      	push	{r1, r2, r3}
 8016036:	b510      	push	{r4, lr}
 8016038:	b09d      	sub	sp, #116	@ 0x74
 801603a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801603c:	9002      	str	r0, [sp, #8]
 801603e:	9006      	str	r0, [sp, #24]
 8016040:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016044:	480a      	ldr	r0, [pc, #40]	@ (8016070 <siprintf+0x3c>)
 8016046:	9107      	str	r1, [sp, #28]
 8016048:	9104      	str	r1, [sp, #16]
 801604a:	490a      	ldr	r1, [pc, #40]	@ (8016074 <siprintf+0x40>)
 801604c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016050:	9105      	str	r1, [sp, #20]
 8016052:	2400      	movs	r4, #0
 8016054:	a902      	add	r1, sp, #8
 8016056:	6800      	ldr	r0, [r0, #0]
 8016058:	9301      	str	r3, [sp, #4]
 801605a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801605c:	f002 fb78 	bl	8018750 <_svfiprintf_r>
 8016060:	9b02      	ldr	r3, [sp, #8]
 8016062:	701c      	strb	r4, [r3, #0]
 8016064:	b01d      	add	sp, #116	@ 0x74
 8016066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801606a:	b003      	add	sp, #12
 801606c:	4770      	bx	lr
 801606e:	bf00      	nop
 8016070:	2400005c 	.word	0x2400005c
 8016074:	ffff0208 	.word	0xffff0208

08016078 <__sread>:
 8016078:	b510      	push	{r4, lr}
 801607a:	460c      	mov	r4, r1
 801607c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016080:	f000 f93c 	bl	80162fc <_read_r>
 8016084:	2800      	cmp	r0, #0
 8016086:	bfab      	itete	ge
 8016088:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801608a:	89a3      	ldrhlt	r3, [r4, #12]
 801608c:	181b      	addge	r3, r3, r0
 801608e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016092:	bfac      	ite	ge
 8016094:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016096:	81a3      	strhlt	r3, [r4, #12]
 8016098:	bd10      	pop	{r4, pc}

0801609a <__swrite>:
 801609a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801609e:	461f      	mov	r7, r3
 80160a0:	898b      	ldrh	r3, [r1, #12]
 80160a2:	05db      	lsls	r3, r3, #23
 80160a4:	4605      	mov	r5, r0
 80160a6:	460c      	mov	r4, r1
 80160a8:	4616      	mov	r6, r2
 80160aa:	d505      	bpl.n	80160b8 <__swrite+0x1e>
 80160ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160b0:	2302      	movs	r3, #2
 80160b2:	2200      	movs	r2, #0
 80160b4:	f000 f910 	bl	80162d8 <_lseek_r>
 80160b8:	89a3      	ldrh	r3, [r4, #12]
 80160ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80160be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80160c2:	81a3      	strh	r3, [r4, #12]
 80160c4:	4632      	mov	r2, r6
 80160c6:	463b      	mov	r3, r7
 80160c8:	4628      	mov	r0, r5
 80160ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160ce:	f000 b927 	b.w	8016320 <_write_r>

080160d2 <__sseek>:
 80160d2:	b510      	push	{r4, lr}
 80160d4:	460c      	mov	r4, r1
 80160d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160da:	f000 f8fd 	bl	80162d8 <_lseek_r>
 80160de:	1c43      	adds	r3, r0, #1
 80160e0:	89a3      	ldrh	r3, [r4, #12]
 80160e2:	bf15      	itete	ne
 80160e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80160e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80160ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80160ee:	81a3      	strheq	r3, [r4, #12]
 80160f0:	bf18      	it	ne
 80160f2:	81a3      	strhne	r3, [r4, #12]
 80160f4:	bd10      	pop	{r4, pc}

080160f6 <__sclose>:
 80160f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160fa:	f000 b8dd 	b.w	80162b8 <_close_r>

080160fe <__swbuf_r>:
 80160fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016100:	460e      	mov	r6, r1
 8016102:	4614      	mov	r4, r2
 8016104:	4605      	mov	r5, r0
 8016106:	b118      	cbz	r0, 8016110 <__swbuf_r+0x12>
 8016108:	6a03      	ldr	r3, [r0, #32]
 801610a:	b90b      	cbnz	r3, 8016110 <__swbuf_r+0x12>
 801610c:	f7ff feec 	bl	8015ee8 <__sinit>
 8016110:	69a3      	ldr	r3, [r4, #24]
 8016112:	60a3      	str	r3, [r4, #8]
 8016114:	89a3      	ldrh	r3, [r4, #12]
 8016116:	071a      	lsls	r2, r3, #28
 8016118:	d501      	bpl.n	801611e <__swbuf_r+0x20>
 801611a:	6923      	ldr	r3, [r4, #16]
 801611c:	b943      	cbnz	r3, 8016130 <__swbuf_r+0x32>
 801611e:	4621      	mov	r1, r4
 8016120:	4628      	mov	r0, r5
 8016122:	f000 f82b 	bl	801617c <__swsetup_r>
 8016126:	b118      	cbz	r0, 8016130 <__swbuf_r+0x32>
 8016128:	f04f 37ff 	mov.w	r7, #4294967295
 801612c:	4638      	mov	r0, r7
 801612e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016130:	6823      	ldr	r3, [r4, #0]
 8016132:	6922      	ldr	r2, [r4, #16]
 8016134:	1a98      	subs	r0, r3, r2
 8016136:	6963      	ldr	r3, [r4, #20]
 8016138:	b2f6      	uxtb	r6, r6
 801613a:	4283      	cmp	r3, r0
 801613c:	4637      	mov	r7, r6
 801613e:	dc05      	bgt.n	801614c <__swbuf_r+0x4e>
 8016140:	4621      	mov	r1, r4
 8016142:	4628      	mov	r0, r5
 8016144:	f002 fdc6 	bl	8018cd4 <_fflush_r>
 8016148:	2800      	cmp	r0, #0
 801614a:	d1ed      	bne.n	8016128 <__swbuf_r+0x2a>
 801614c:	68a3      	ldr	r3, [r4, #8]
 801614e:	3b01      	subs	r3, #1
 8016150:	60a3      	str	r3, [r4, #8]
 8016152:	6823      	ldr	r3, [r4, #0]
 8016154:	1c5a      	adds	r2, r3, #1
 8016156:	6022      	str	r2, [r4, #0]
 8016158:	701e      	strb	r6, [r3, #0]
 801615a:	6962      	ldr	r2, [r4, #20]
 801615c:	1c43      	adds	r3, r0, #1
 801615e:	429a      	cmp	r2, r3
 8016160:	d004      	beq.n	801616c <__swbuf_r+0x6e>
 8016162:	89a3      	ldrh	r3, [r4, #12]
 8016164:	07db      	lsls	r3, r3, #31
 8016166:	d5e1      	bpl.n	801612c <__swbuf_r+0x2e>
 8016168:	2e0a      	cmp	r6, #10
 801616a:	d1df      	bne.n	801612c <__swbuf_r+0x2e>
 801616c:	4621      	mov	r1, r4
 801616e:	4628      	mov	r0, r5
 8016170:	f002 fdb0 	bl	8018cd4 <_fflush_r>
 8016174:	2800      	cmp	r0, #0
 8016176:	d0d9      	beq.n	801612c <__swbuf_r+0x2e>
 8016178:	e7d6      	b.n	8016128 <__swbuf_r+0x2a>
	...

0801617c <__swsetup_r>:
 801617c:	b538      	push	{r3, r4, r5, lr}
 801617e:	4b29      	ldr	r3, [pc, #164]	@ (8016224 <__swsetup_r+0xa8>)
 8016180:	4605      	mov	r5, r0
 8016182:	6818      	ldr	r0, [r3, #0]
 8016184:	460c      	mov	r4, r1
 8016186:	b118      	cbz	r0, 8016190 <__swsetup_r+0x14>
 8016188:	6a03      	ldr	r3, [r0, #32]
 801618a:	b90b      	cbnz	r3, 8016190 <__swsetup_r+0x14>
 801618c:	f7ff feac 	bl	8015ee8 <__sinit>
 8016190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016194:	0719      	lsls	r1, r3, #28
 8016196:	d422      	bmi.n	80161de <__swsetup_r+0x62>
 8016198:	06da      	lsls	r2, r3, #27
 801619a:	d407      	bmi.n	80161ac <__swsetup_r+0x30>
 801619c:	2209      	movs	r2, #9
 801619e:	602a      	str	r2, [r5, #0]
 80161a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80161a4:	81a3      	strh	r3, [r4, #12]
 80161a6:	f04f 30ff 	mov.w	r0, #4294967295
 80161aa:	e033      	b.n	8016214 <__swsetup_r+0x98>
 80161ac:	0758      	lsls	r0, r3, #29
 80161ae:	d512      	bpl.n	80161d6 <__swsetup_r+0x5a>
 80161b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80161b2:	b141      	cbz	r1, 80161c6 <__swsetup_r+0x4a>
 80161b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80161b8:	4299      	cmp	r1, r3
 80161ba:	d002      	beq.n	80161c2 <__swsetup_r+0x46>
 80161bc:	4628      	mov	r0, r5
 80161be:	f000 ff09 	bl	8016fd4 <_free_r>
 80161c2:	2300      	movs	r3, #0
 80161c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80161c6:	89a3      	ldrh	r3, [r4, #12]
 80161c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80161cc:	81a3      	strh	r3, [r4, #12]
 80161ce:	2300      	movs	r3, #0
 80161d0:	6063      	str	r3, [r4, #4]
 80161d2:	6923      	ldr	r3, [r4, #16]
 80161d4:	6023      	str	r3, [r4, #0]
 80161d6:	89a3      	ldrh	r3, [r4, #12]
 80161d8:	f043 0308 	orr.w	r3, r3, #8
 80161dc:	81a3      	strh	r3, [r4, #12]
 80161de:	6923      	ldr	r3, [r4, #16]
 80161e0:	b94b      	cbnz	r3, 80161f6 <__swsetup_r+0x7a>
 80161e2:	89a3      	ldrh	r3, [r4, #12]
 80161e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80161e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80161ec:	d003      	beq.n	80161f6 <__swsetup_r+0x7a>
 80161ee:	4621      	mov	r1, r4
 80161f0:	4628      	mov	r0, r5
 80161f2:	f002 fdcf 	bl	8018d94 <__smakebuf_r>
 80161f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161fa:	f013 0201 	ands.w	r2, r3, #1
 80161fe:	d00a      	beq.n	8016216 <__swsetup_r+0x9a>
 8016200:	2200      	movs	r2, #0
 8016202:	60a2      	str	r2, [r4, #8]
 8016204:	6962      	ldr	r2, [r4, #20]
 8016206:	4252      	negs	r2, r2
 8016208:	61a2      	str	r2, [r4, #24]
 801620a:	6922      	ldr	r2, [r4, #16]
 801620c:	b942      	cbnz	r2, 8016220 <__swsetup_r+0xa4>
 801620e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016212:	d1c5      	bne.n	80161a0 <__swsetup_r+0x24>
 8016214:	bd38      	pop	{r3, r4, r5, pc}
 8016216:	0799      	lsls	r1, r3, #30
 8016218:	bf58      	it	pl
 801621a:	6962      	ldrpl	r2, [r4, #20]
 801621c:	60a2      	str	r2, [r4, #8]
 801621e:	e7f4      	b.n	801620a <__swsetup_r+0x8e>
 8016220:	2000      	movs	r0, #0
 8016222:	e7f7      	b.n	8016214 <__swsetup_r+0x98>
 8016224:	2400005c 	.word	0x2400005c

08016228 <memcmp>:
 8016228:	b510      	push	{r4, lr}
 801622a:	3901      	subs	r1, #1
 801622c:	4402      	add	r2, r0
 801622e:	4290      	cmp	r0, r2
 8016230:	d101      	bne.n	8016236 <memcmp+0xe>
 8016232:	2000      	movs	r0, #0
 8016234:	e005      	b.n	8016242 <memcmp+0x1a>
 8016236:	7803      	ldrb	r3, [r0, #0]
 8016238:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801623c:	42a3      	cmp	r3, r4
 801623e:	d001      	beq.n	8016244 <memcmp+0x1c>
 8016240:	1b18      	subs	r0, r3, r4
 8016242:	bd10      	pop	{r4, pc}
 8016244:	3001      	adds	r0, #1
 8016246:	e7f2      	b.n	801622e <memcmp+0x6>

08016248 <memmove>:
 8016248:	4288      	cmp	r0, r1
 801624a:	b510      	push	{r4, lr}
 801624c:	eb01 0402 	add.w	r4, r1, r2
 8016250:	d902      	bls.n	8016258 <memmove+0x10>
 8016252:	4284      	cmp	r4, r0
 8016254:	4623      	mov	r3, r4
 8016256:	d807      	bhi.n	8016268 <memmove+0x20>
 8016258:	1e43      	subs	r3, r0, #1
 801625a:	42a1      	cmp	r1, r4
 801625c:	d008      	beq.n	8016270 <memmove+0x28>
 801625e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016262:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016266:	e7f8      	b.n	801625a <memmove+0x12>
 8016268:	4402      	add	r2, r0
 801626a:	4601      	mov	r1, r0
 801626c:	428a      	cmp	r2, r1
 801626e:	d100      	bne.n	8016272 <memmove+0x2a>
 8016270:	bd10      	pop	{r4, pc}
 8016272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801627a:	e7f7      	b.n	801626c <memmove+0x24>

0801627c <memset>:
 801627c:	4402      	add	r2, r0
 801627e:	4603      	mov	r3, r0
 8016280:	4293      	cmp	r3, r2
 8016282:	d100      	bne.n	8016286 <memset+0xa>
 8016284:	4770      	bx	lr
 8016286:	f803 1b01 	strb.w	r1, [r3], #1
 801628a:	e7f9      	b.n	8016280 <memset+0x4>

0801628c <strncmp>:
 801628c:	b510      	push	{r4, lr}
 801628e:	b16a      	cbz	r2, 80162ac <strncmp+0x20>
 8016290:	3901      	subs	r1, #1
 8016292:	1884      	adds	r4, r0, r2
 8016294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016298:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801629c:	429a      	cmp	r2, r3
 801629e:	d103      	bne.n	80162a8 <strncmp+0x1c>
 80162a0:	42a0      	cmp	r0, r4
 80162a2:	d001      	beq.n	80162a8 <strncmp+0x1c>
 80162a4:	2a00      	cmp	r2, #0
 80162a6:	d1f5      	bne.n	8016294 <strncmp+0x8>
 80162a8:	1ad0      	subs	r0, r2, r3
 80162aa:	bd10      	pop	{r4, pc}
 80162ac:	4610      	mov	r0, r2
 80162ae:	e7fc      	b.n	80162aa <strncmp+0x1e>

080162b0 <_localeconv_r>:
 80162b0:	4800      	ldr	r0, [pc, #0]	@ (80162b4 <_localeconv_r+0x4>)
 80162b2:	4770      	bx	lr
 80162b4:	2400019c 	.word	0x2400019c

080162b8 <_close_r>:
 80162b8:	b538      	push	{r3, r4, r5, lr}
 80162ba:	4d06      	ldr	r5, [pc, #24]	@ (80162d4 <_close_r+0x1c>)
 80162bc:	2300      	movs	r3, #0
 80162be:	4604      	mov	r4, r0
 80162c0:	4608      	mov	r0, r1
 80162c2:	602b      	str	r3, [r5, #0]
 80162c4:	f7eb ff4c 	bl	8002160 <_close>
 80162c8:	1c43      	adds	r3, r0, #1
 80162ca:	d102      	bne.n	80162d2 <_close_r+0x1a>
 80162cc:	682b      	ldr	r3, [r5, #0]
 80162ce:	b103      	cbz	r3, 80162d2 <_close_r+0x1a>
 80162d0:	6023      	str	r3, [r4, #0]
 80162d2:	bd38      	pop	{r3, r4, r5, pc}
 80162d4:	24008624 	.word	0x24008624

080162d8 <_lseek_r>:
 80162d8:	b538      	push	{r3, r4, r5, lr}
 80162da:	4d07      	ldr	r5, [pc, #28]	@ (80162f8 <_lseek_r+0x20>)
 80162dc:	4604      	mov	r4, r0
 80162de:	4608      	mov	r0, r1
 80162e0:	4611      	mov	r1, r2
 80162e2:	2200      	movs	r2, #0
 80162e4:	602a      	str	r2, [r5, #0]
 80162e6:	461a      	mov	r2, r3
 80162e8:	f7eb ff61 	bl	80021ae <_lseek>
 80162ec:	1c43      	adds	r3, r0, #1
 80162ee:	d102      	bne.n	80162f6 <_lseek_r+0x1e>
 80162f0:	682b      	ldr	r3, [r5, #0]
 80162f2:	b103      	cbz	r3, 80162f6 <_lseek_r+0x1e>
 80162f4:	6023      	str	r3, [r4, #0]
 80162f6:	bd38      	pop	{r3, r4, r5, pc}
 80162f8:	24008624 	.word	0x24008624

080162fc <_read_r>:
 80162fc:	b538      	push	{r3, r4, r5, lr}
 80162fe:	4d07      	ldr	r5, [pc, #28]	@ (801631c <_read_r+0x20>)
 8016300:	4604      	mov	r4, r0
 8016302:	4608      	mov	r0, r1
 8016304:	4611      	mov	r1, r2
 8016306:	2200      	movs	r2, #0
 8016308:	602a      	str	r2, [r5, #0]
 801630a:	461a      	mov	r2, r3
 801630c:	f7eb feef 	bl	80020ee <_read>
 8016310:	1c43      	adds	r3, r0, #1
 8016312:	d102      	bne.n	801631a <_read_r+0x1e>
 8016314:	682b      	ldr	r3, [r5, #0]
 8016316:	b103      	cbz	r3, 801631a <_read_r+0x1e>
 8016318:	6023      	str	r3, [r4, #0]
 801631a:	bd38      	pop	{r3, r4, r5, pc}
 801631c:	24008624 	.word	0x24008624

08016320 <_write_r>:
 8016320:	b538      	push	{r3, r4, r5, lr}
 8016322:	4d07      	ldr	r5, [pc, #28]	@ (8016340 <_write_r+0x20>)
 8016324:	4604      	mov	r4, r0
 8016326:	4608      	mov	r0, r1
 8016328:	4611      	mov	r1, r2
 801632a:	2200      	movs	r2, #0
 801632c:	602a      	str	r2, [r5, #0]
 801632e:	461a      	mov	r2, r3
 8016330:	f7eb fefa 	bl	8002128 <_write>
 8016334:	1c43      	adds	r3, r0, #1
 8016336:	d102      	bne.n	801633e <_write_r+0x1e>
 8016338:	682b      	ldr	r3, [r5, #0]
 801633a:	b103      	cbz	r3, 801633e <_write_r+0x1e>
 801633c:	6023      	str	r3, [r4, #0]
 801633e:	bd38      	pop	{r3, r4, r5, pc}
 8016340:	24008624 	.word	0x24008624

08016344 <__errno>:
 8016344:	4b01      	ldr	r3, [pc, #4]	@ (801634c <__errno+0x8>)
 8016346:	6818      	ldr	r0, [r3, #0]
 8016348:	4770      	bx	lr
 801634a:	bf00      	nop
 801634c:	2400005c 	.word	0x2400005c

08016350 <__libc_init_array>:
 8016350:	b570      	push	{r4, r5, r6, lr}
 8016352:	4d0d      	ldr	r5, [pc, #52]	@ (8016388 <__libc_init_array+0x38>)
 8016354:	4c0d      	ldr	r4, [pc, #52]	@ (801638c <__libc_init_array+0x3c>)
 8016356:	1b64      	subs	r4, r4, r5
 8016358:	10a4      	asrs	r4, r4, #2
 801635a:	2600      	movs	r6, #0
 801635c:	42a6      	cmp	r6, r4
 801635e:	d109      	bne.n	8016374 <__libc_init_array+0x24>
 8016360:	4d0b      	ldr	r5, [pc, #44]	@ (8016390 <__libc_init_array+0x40>)
 8016362:	4c0c      	ldr	r4, [pc, #48]	@ (8016394 <__libc_init_array+0x44>)
 8016364:	f003 f978 	bl	8019658 <_init>
 8016368:	1b64      	subs	r4, r4, r5
 801636a:	10a4      	asrs	r4, r4, #2
 801636c:	2600      	movs	r6, #0
 801636e:	42a6      	cmp	r6, r4
 8016370:	d105      	bne.n	801637e <__libc_init_array+0x2e>
 8016372:	bd70      	pop	{r4, r5, r6, pc}
 8016374:	f855 3b04 	ldr.w	r3, [r5], #4
 8016378:	4798      	blx	r3
 801637a:	3601      	adds	r6, #1
 801637c:	e7ee      	b.n	801635c <__libc_init_array+0xc>
 801637e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016382:	4798      	blx	r3
 8016384:	3601      	adds	r6, #1
 8016386:	e7f2      	b.n	801636e <__libc_init_array+0x1e>
 8016388:	0801c7c0 	.word	0x0801c7c0
 801638c:	0801c7c0 	.word	0x0801c7c0
 8016390:	0801c7c0 	.word	0x0801c7c0
 8016394:	0801c7c4 	.word	0x0801c7c4

08016398 <__retarget_lock_init_recursive>:
 8016398:	4770      	bx	lr

0801639a <__retarget_lock_acquire_recursive>:
 801639a:	4770      	bx	lr

0801639c <__retarget_lock_release_recursive>:
 801639c:	4770      	bx	lr

0801639e <memcpy>:
 801639e:	440a      	add	r2, r1
 80163a0:	4291      	cmp	r1, r2
 80163a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80163a6:	d100      	bne.n	80163aa <memcpy+0xc>
 80163a8:	4770      	bx	lr
 80163aa:	b510      	push	{r4, lr}
 80163ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80163b4:	4291      	cmp	r1, r2
 80163b6:	d1f9      	bne.n	80163ac <memcpy+0xe>
 80163b8:	bd10      	pop	{r4, pc}
	...

080163bc <nanf>:
 80163bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80163c4 <nanf+0x8>
 80163c0:	4770      	bx	lr
 80163c2:	bf00      	nop
 80163c4:	7fc00000 	.word	0x7fc00000

080163c8 <__assert_func>:
 80163c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80163ca:	4614      	mov	r4, r2
 80163cc:	461a      	mov	r2, r3
 80163ce:	4b09      	ldr	r3, [pc, #36]	@ (80163f4 <__assert_func+0x2c>)
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	4605      	mov	r5, r0
 80163d4:	68d8      	ldr	r0, [r3, #12]
 80163d6:	b14c      	cbz	r4, 80163ec <__assert_func+0x24>
 80163d8:	4b07      	ldr	r3, [pc, #28]	@ (80163f8 <__assert_func+0x30>)
 80163da:	9100      	str	r1, [sp, #0]
 80163dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80163e0:	4906      	ldr	r1, [pc, #24]	@ (80163fc <__assert_func+0x34>)
 80163e2:	462b      	mov	r3, r5
 80163e4:	f002 fc9e 	bl	8018d24 <fiprintf>
 80163e8:	f002 fd4a 	bl	8018e80 <abort>
 80163ec:	4b04      	ldr	r3, [pc, #16]	@ (8016400 <__assert_func+0x38>)
 80163ee:	461c      	mov	r4, r3
 80163f0:	e7f3      	b.n	80163da <__assert_func+0x12>
 80163f2:	bf00      	nop
 80163f4:	2400005c 	.word	0x2400005c
 80163f8:	0801c3e2 	.word	0x0801c3e2
 80163fc:	0801c3ef 	.word	0x0801c3ef
 8016400:	0801c41d 	.word	0x0801c41d

08016404 <quorem>:
 8016404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016408:	6903      	ldr	r3, [r0, #16]
 801640a:	690c      	ldr	r4, [r1, #16]
 801640c:	42a3      	cmp	r3, r4
 801640e:	4607      	mov	r7, r0
 8016410:	db7e      	blt.n	8016510 <quorem+0x10c>
 8016412:	3c01      	subs	r4, #1
 8016414:	f101 0814 	add.w	r8, r1, #20
 8016418:	00a3      	lsls	r3, r4, #2
 801641a:	f100 0514 	add.w	r5, r0, #20
 801641e:	9300      	str	r3, [sp, #0]
 8016420:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016424:	9301      	str	r3, [sp, #4]
 8016426:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801642a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801642e:	3301      	adds	r3, #1
 8016430:	429a      	cmp	r2, r3
 8016432:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016436:	fbb2 f6f3 	udiv	r6, r2, r3
 801643a:	d32e      	bcc.n	801649a <quorem+0x96>
 801643c:	f04f 0a00 	mov.w	sl, #0
 8016440:	46c4      	mov	ip, r8
 8016442:	46ae      	mov	lr, r5
 8016444:	46d3      	mov	fp, sl
 8016446:	f85c 3b04 	ldr.w	r3, [ip], #4
 801644a:	b298      	uxth	r0, r3
 801644c:	fb06 a000 	mla	r0, r6, r0, sl
 8016450:	0c02      	lsrs	r2, r0, #16
 8016452:	0c1b      	lsrs	r3, r3, #16
 8016454:	fb06 2303 	mla	r3, r6, r3, r2
 8016458:	f8de 2000 	ldr.w	r2, [lr]
 801645c:	b280      	uxth	r0, r0
 801645e:	b292      	uxth	r2, r2
 8016460:	1a12      	subs	r2, r2, r0
 8016462:	445a      	add	r2, fp
 8016464:	f8de 0000 	ldr.w	r0, [lr]
 8016468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801646c:	b29b      	uxth	r3, r3
 801646e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8016472:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016476:	b292      	uxth	r2, r2
 8016478:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801647c:	45e1      	cmp	r9, ip
 801647e:	f84e 2b04 	str.w	r2, [lr], #4
 8016482:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016486:	d2de      	bcs.n	8016446 <quorem+0x42>
 8016488:	9b00      	ldr	r3, [sp, #0]
 801648a:	58eb      	ldr	r3, [r5, r3]
 801648c:	b92b      	cbnz	r3, 801649a <quorem+0x96>
 801648e:	9b01      	ldr	r3, [sp, #4]
 8016490:	3b04      	subs	r3, #4
 8016492:	429d      	cmp	r5, r3
 8016494:	461a      	mov	r2, r3
 8016496:	d32f      	bcc.n	80164f8 <quorem+0xf4>
 8016498:	613c      	str	r4, [r7, #16]
 801649a:	4638      	mov	r0, r7
 801649c:	f001 f956 	bl	801774c <__mcmp>
 80164a0:	2800      	cmp	r0, #0
 80164a2:	db25      	blt.n	80164f0 <quorem+0xec>
 80164a4:	4629      	mov	r1, r5
 80164a6:	2000      	movs	r0, #0
 80164a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80164ac:	f8d1 c000 	ldr.w	ip, [r1]
 80164b0:	fa1f fe82 	uxth.w	lr, r2
 80164b4:	fa1f f38c 	uxth.w	r3, ip
 80164b8:	eba3 030e 	sub.w	r3, r3, lr
 80164bc:	4403      	add	r3, r0
 80164be:	0c12      	lsrs	r2, r2, #16
 80164c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80164c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80164ce:	45c1      	cmp	r9, r8
 80164d0:	f841 3b04 	str.w	r3, [r1], #4
 80164d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80164d8:	d2e6      	bcs.n	80164a8 <quorem+0xa4>
 80164da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80164de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80164e2:	b922      	cbnz	r2, 80164ee <quorem+0xea>
 80164e4:	3b04      	subs	r3, #4
 80164e6:	429d      	cmp	r5, r3
 80164e8:	461a      	mov	r2, r3
 80164ea:	d30b      	bcc.n	8016504 <quorem+0x100>
 80164ec:	613c      	str	r4, [r7, #16]
 80164ee:	3601      	adds	r6, #1
 80164f0:	4630      	mov	r0, r6
 80164f2:	b003      	add	sp, #12
 80164f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164f8:	6812      	ldr	r2, [r2, #0]
 80164fa:	3b04      	subs	r3, #4
 80164fc:	2a00      	cmp	r2, #0
 80164fe:	d1cb      	bne.n	8016498 <quorem+0x94>
 8016500:	3c01      	subs	r4, #1
 8016502:	e7c6      	b.n	8016492 <quorem+0x8e>
 8016504:	6812      	ldr	r2, [r2, #0]
 8016506:	3b04      	subs	r3, #4
 8016508:	2a00      	cmp	r2, #0
 801650a:	d1ef      	bne.n	80164ec <quorem+0xe8>
 801650c:	3c01      	subs	r4, #1
 801650e:	e7ea      	b.n	80164e6 <quorem+0xe2>
 8016510:	2000      	movs	r0, #0
 8016512:	e7ee      	b.n	80164f2 <quorem+0xee>
 8016514:	0000      	movs	r0, r0
	...

08016518 <_dtoa_r>:
 8016518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801651c:	ed2d 8b02 	vpush	{d8}
 8016520:	69c7      	ldr	r7, [r0, #28]
 8016522:	b091      	sub	sp, #68	@ 0x44
 8016524:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016528:	ec55 4b10 	vmov	r4, r5, d0
 801652c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801652e:	9107      	str	r1, [sp, #28]
 8016530:	4681      	mov	r9, r0
 8016532:	9209      	str	r2, [sp, #36]	@ 0x24
 8016534:	930d      	str	r3, [sp, #52]	@ 0x34
 8016536:	b97f      	cbnz	r7, 8016558 <_dtoa_r+0x40>
 8016538:	2010      	movs	r0, #16
 801653a:	f000 fd95 	bl	8017068 <malloc>
 801653e:	4602      	mov	r2, r0
 8016540:	f8c9 001c 	str.w	r0, [r9, #28]
 8016544:	b920      	cbnz	r0, 8016550 <_dtoa_r+0x38>
 8016546:	4ba0      	ldr	r3, [pc, #640]	@ (80167c8 <_dtoa_r+0x2b0>)
 8016548:	21ef      	movs	r1, #239	@ 0xef
 801654a:	48a0      	ldr	r0, [pc, #640]	@ (80167cc <_dtoa_r+0x2b4>)
 801654c:	f7ff ff3c 	bl	80163c8 <__assert_func>
 8016550:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016554:	6007      	str	r7, [r0, #0]
 8016556:	60c7      	str	r7, [r0, #12]
 8016558:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801655c:	6819      	ldr	r1, [r3, #0]
 801655e:	b159      	cbz	r1, 8016578 <_dtoa_r+0x60>
 8016560:	685a      	ldr	r2, [r3, #4]
 8016562:	604a      	str	r2, [r1, #4]
 8016564:	2301      	movs	r3, #1
 8016566:	4093      	lsls	r3, r2
 8016568:	608b      	str	r3, [r1, #8]
 801656a:	4648      	mov	r0, r9
 801656c:	f000 fe72 	bl	8017254 <_Bfree>
 8016570:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016574:	2200      	movs	r2, #0
 8016576:	601a      	str	r2, [r3, #0]
 8016578:	1e2b      	subs	r3, r5, #0
 801657a:	bfbb      	ittet	lt
 801657c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016580:	9303      	strlt	r3, [sp, #12]
 8016582:	2300      	movge	r3, #0
 8016584:	2201      	movlt	r2, #1
 8016586:	bfac      	ite	ge
 8016588:	6033      	strge	r3, [r6, #0]
 801658a:	6032      	strlt	r2, [r6, #0]
 801658c:	4b90      	ldr	r3, [pc, #576]	@ (80167d0 <_dtoa_r+0x2b8>)
 801658e:	9e03      	ldr	r6, [sp, #12]
 8016590:	43b3      	bics	r3, r6
 8016592:	d110      	bne.n	80165b6 <_dtoa_r+0x9e>
 8016594:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016596:	f242 730f 	movw	r3, #9999	@ 0x270f
 801659a:	6013      	str	r3, [r2, #0]
 801659c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80165a0:	4323      	orrs	r3, r4
 80165a2:	f000 84e6 	beq.w	8016f72 <_dtoa_r+0xa5a>
 80165a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80165a8:	4f8a      	ldr	r7, [pc, #552]	@ (80167d4 <_dtoa_r+0x2bc>)
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	f000 84e8 	beq.w	8016f80 <_dtoa_r+0xa68>
 80165b0:	1cfb      	adds	r3, r7, #3
 80165b2:	f000 bce3 	b.w	8016f7c <_dtoa_r+0xa64>
 80165b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80165ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80165be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165c2:	d10a      	bne.n	80165da <_dtoa_r+0xc2>
 80165c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80165c6:	2301      	movs	r3, #1
 80165c8:	6013      	str	r3, [r2, #0]
 80165ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80165cc:	b113      	cbz	r3, 80165d4 <_dtoa_r+0xbc>
 80165ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80165d0:	4b81      	ldr	r3, [pc, #516]	@ (80167d8 <_dtoa_r+0x2c0>)
 80165d2:	6013      	str	r3, [r2, #0]
 80165d4:	4f81      	ldr	r7, [pc, #516]	@ (80167dc <_dtoa_r+0x2c4>)
 80165d6:	f000 bcd3 	b.w	8016f80 <_dtoa_r+0xa68>
 80165da:	aa0e      	add	r2, sp, #56	@ 0x38
 80165dc:	a90f      	add	r1, sp, #60	@ 0x3c
 80165de:	4648      	mov	r0, r9
 80165e0:	eeb0 0b48 	vmov.f64	d0, d8
 80165e4:	f001 f9d2 	bl	801798c <__d2b>
 80165e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80165ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80165ee:	9001      	str	r0, [sp, #4]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d045      	beq.n	8016680 <_dtoa_r+0x168>
 80165f4:	eeb0 7b48 	vmov.f64	d7, d8
 80165f8:	ee18 1a90 	vmov	r1, s17
 80165fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016600:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8016604:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8016608:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801660c:	2500      	movs	r5, #0
 801660e:	ee07 1a90 	vmov	s15, r1
 8016612:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8016616:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80167b0 <_dtoa_r+0x298>
 801661a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801661e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80167b8 <_dtoa_r+0x2a0>
 8016622:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016626:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80167c0 <_dtoa_r+0x2a8>
 801662a:	ee07 3a90 	vmov	s15, r3
 801662e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8016632:	eeb0 7b46 	vmov.f64	d7, d6
 8016636:	eea4 7b05 	vfma.f64	d7, d4, d5
 801663a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801663e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8016642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016646:	ee16 8a90 	vmov	r8, s13
 801664a:	d508      	bpl.n	801665e <_dtoa_r+0x146>
 801664c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016650:	eeb4 6b47 	vcmp.f64	d6, d7
 8016654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016658:	bf18      	it	ne
 801665a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801665e:	f1b8 0f16 	cmp.w	r8, #22
 8016662:	d82b      	bhi.n	80166bc <_dtoa_r+0x1a4>
 8016664:	495e      	ldr	r1, [pc, #376]	@ (80167e0 <_dtoa_r+0x2c8>)
 8016666:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801666a:	ed91 7b00 	vldr	d7, [r1]
 801666e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016676:	d501      	bpl.n	801667c <_dtoa_r+0x164>
 8016678:	f108 38ff 	add.w	r8, r8, #4294967295
 801667c:	2100      	movs	r1, #0
 801667e:	e01e      	b.n	80166be <_dtoa_r+0x1a6>
 8016680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016682:	4413      	add	r3, r2
 8016684:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8016688:	2920      	cmp	r1, #32
 801668a:	bfc1      	itttt	gt
 801668c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8016690:	408e      	lslgt	r6, r1
 8016692:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8016696:	fa24 f101 	lsrgt.w	r1, r4, r1
 801669a:	bfd6      	itet	le
 801669c:	f1c1 0120 	rsble	r1, r1, #32
 80166a0:	4331      	orrgt	r1, r6
 80166a2:	fa04 f101 	lslle.w	r1, r4, r1
 80166a6:	ee07 1a90 	vmov	s15, r1
 80166aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80166ae:	3b01      	subs	r3, #1
 80166b0:	ee17 1a90 	vmov	r1, s15
 80166b4:	2501      	movs	r5, #1
 80166b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80166ba:	e7a8      	b.n	801660e <_dtoa_r+0xf6>
 80166bc:	2101      	movs	r1, #1
 80166be:	1ad2      	subs	r2, r2, r3
 80166c0:	1e53      	subs	r3, r2, #1
 80166c2:	9306      	str	r3, [sp, #24]
 80166c4:	bf45      	ittet	mi
 80166c6:	f1c2 0301 	rsbmi	r3, r2, #1
 80166ca:	9304      	strmi	r3, [sp, #16]
 80166cc:	2300      	movpl	r3, #0
 80166ce:	2300      	movmi	r3, #0
 80166d0:	bf4c      	ite	mi
 80166d2:	9306      	strmi	r3, [sp, #24]
 80166d4:	9304      	strpl	r3, [sp, #16]
 80166d6:	f1b8 0f00 	cmp.w	r8, #0
 80166da:	910c      	str	r1, [sp, #48]	@ 0x30
 80166dc:	db18      	blt.n	8016710 <_dtoa_r+0x1f8>
 80166de:	9b06      	ldr	r3, [sp, #24]
 80166e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80166e4:	4443      	add	r3, r8
 80166e6:	9306      	str	r3, [sp, #24]
 80166e8:	2300      	movs	r3, #0
 80166ea:	9a07      	ldr	r2, [sp, #28]
 80166ec:	2a09      	cmp	r2, #9
 80166ee:	d845      	bhi.n	801677c <_dtoa_r+0x264>
 80166f0:	2a05      	cmp	r2, #5
 80166f2:	bfc4      	itt	gt
 80166f4:	3a04      	subgt	r2, #4
 80166f6:	9207      	strgt	r2, [sp, #28]
 80166f8:	9a07      	ldr	r2, [sp, #28]
 80166fa:	f1a2 0202 	sub.w	r2, r2, #2
 80166fe:	bfcc      	ite	gt
 8016700:	2400      	movgt	r4, #0
 8016702:	2401      	movle	r4, #1
 8016704:	2a03      	cmp	r2, #3
 8016706:	d844      	bhi.n	8016792 <_dtoa_r+0x27a>
 8016708:	e8df f002 	tbb	[pc, r2]
 801670c:	0b173634 	.word	0x0b173634
 8016710:	9b04      	ldr	r3, [sp, #16]
 8016712:	2200      	movs	r2, #0
 8016714:	eba3 0308 	sub.w	r3, r3, r8
 8016718:	9304      	str	r3, [sp, #16]
 801671a:	920a      	str	r2, [sp, #40]	@ 0x28
 801671c:	f1c8 0300 	rsb	r3, r8, #0
 8016720:	e7e3      	b.n	80166ea <_dtoa_r+0x1d2>
 8016722:	2201      	movs	r2, #1
 8016724:	9208      	str	r2, [sp, #32]
 8016726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016728:	eb08 0b02 	add.w	fp, r8, r2
 801672c:	f10b 0a01 	add.w	sl, fp, #1
 8016730:	4652      	mov	r2, sl
 8016732:	2a01      	cmp	r2, #1
 8016734:	bfb8      	it	lt
 8016736:	2201      	movlt	r2, #1
 8016738:	e006      	b.n	8016748 <_dtoa_r+0x230>
 801673a:	2201      	movs	r2, #1
 801673c:	9208      	str	r2, [sp, #32]
 801673e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016740:	2a00      	cmp	r2, #0
 8016742:	dd29      	ble.n	8016798 <_dtoa_r+0x280>
 8016744:	4693      	mov	fp, r2
 8016746:	4692      	mov	sl, r2
 8016748:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801674c:	2100      	movs	r1, #0
 801674e:	2004      	movs	r0, #4
 8016750:	f100 0614 	add.w	r6, r0, #20
 8016754:	4296      	cmp	r6, r2
 8016756:	d926      	bls.n	80167a6 <_dtoa_r+0x28e>
 8016758:	6079      	str	r1, [r7, #4]
 801675a:	4648      	mov	r0, r9
 801675c:	9305      	str	r3, [sp, #20]
 801675e:	f000 fd39 	bl	80171d4 <_Balloc>
 8016762:	9b05      	ldr	r3, [sp, #20]
 8016764:	4607      	mov	r7, r0
 8016766:	2800      	cmp	r0, #0
 8016768:	d13e      	bne.n	80167e8 <_dtoa_r+0x2d0>
 801676a:	4b1e      	ldr	r3, [pc, #120]	@ (80167e4 <_dtoa_r+0x2cc>)
 801676c:	4602      	mov	r2, r0
 801676e:	f240 11af 	movw	r1, #431	@ 0x1af
 8016772:	e6ea      	b.n	801654a <_dtoa_r+0x32>
 8016774:	2200      	movs	r2, #0
 8016776:	e7e1      	b.n	801673c <_dtoa_r+0x224>
 8016778:	2200      	movs	r2, #0
 801677a:	e7d3      	b.n	8016724 <_dtoa_r+0x20c>
 801677c:	2401      	movs	r4, #1
 801677e:	2200      	movs	r2, #0
 8016780:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8016784:	f04f 3bff 	mov.w	fp, #4294967295
 8016788:	2100      	movs	r1, #0
 801678a:	46da      	mov	sl, fp
 801678c:	2212      	movs	r2, #18
 801678e:	9109      	str	r1, [sp, #36]	@ 0x24
 8016790:	e7da      	b.n	8016748 <_dtoa_r+0x230>
 8016792:	2201      	movs	r2, #1
 8016794:	9208      	str	r2, [sp, #32]
 8016796:	e7f5      	b.n	8016784 <_dtoa_r+0x26c>
 8016798:	f04f 0b01 	mov.w	fp, #1
 801679c:	46da      	mov	sl, fp
 801679e:	465a      	mov	r2, fp
 80167a0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80167a4:	e7d0      	b.n	8016748 <_dtoa_r+0x230>
 80167a6:	3101      	adds	r1, #1
 80167a8:	0040      	lsls	r0, r0, #1
 80167aa:	e7d1      	b.n	8016750 <_dtoa_r+0x238>
 80167ac:	f3af 8000 	nop.w
 80167b0:	636f4361 	.word	0x636f4361
 80167b4:	3fd287a7 	.word	0x3fd287a7
 80167b8:	8b60c8b3 	.word	0x8b60c8b3
 80167bc:	3fc68a28 	.word	0x3fc68a28
 80167c0:	509f79fb 	.word	0x509f79fb
 80167c4:	3fd34413 	.word	0x3fd34413
 80167c8:	0801c33a 	.word	0x0801c33a
 80167cc:	0801c42b 	.word	0x0801c42b
 80167d0:	7ff00000 	.word	0x7ff00000
 80167d4:	0801c427 	.word	0x0801c427
 80167d8:	0801c3ba 	.word	0x0801c3ba
 80167dc:	0801c3b9 	.word	0x0801c3b9
 80167e0:	0801c6a0 	.word	0x0801c6a0
 80167e4:	0801c483 	.word	0x0801c483
 80167e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80167ec:	f1ba 0f0e 	cmp.w	sl, #14
 80167f0:	6010      	str	r0, [r2, #0]
 80167f2:	d86e      	bhi.n	80168d2 <_dtoa_r+0x3ba>
 80167f4:	2c00      	cmp	r4, #0
 80167f6:	d06c      	beq.n	80168d2 <_dtoa_r+0x3ba>
 80167f8:	f1b8 0f00 	cmp.w	r8, #0
 80167fc:	f340 80b4 	ble.w	8016968 <_dtoa_r+0x450>
 8016800:	4ac8      	ldr	r2, [pc, #800]	@ (8016b24 <_dtoa_r+0x60c>)
 8016802:	f008 010f 	and.w	r1, r8, #15
 8016806:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801680a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801680e:	ed92 7b00 	vldr	d7, [r2]
 8016812:	ea4f 1128 	mov.w	r1, r8, asr #4
 8016816:	f000 809b 	beq.w	8016950 <_dtoa_r+0x438>
 801681a:	4ac3      	ldr	r2, [pc, #780]	@ (8016b28 <_dtoa_r+0x610>)
 801681c:	ed92 6b08 	vldr	d6, [r2, #32]
 8016820:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8016824:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016828:	f001 010f 	and.w	r1, r1, #15
 801682c:	2203      	movs	r2, #3
 801682e:	48be      	ldr	r0, [pc, #760]	@ (8016b28 <_dtoa_r+0x610>)
 8016830:	2900      	cmp	r1, #0
 8016832:	f040 808f 	bne.w	8016954 <_dtoa_r+0x43c>
 8016836:	ed9d 6b02 	vldr	d6, [sp, #8]
 801683a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801683e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016842:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016844:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016848:	2900      	cmp	r1, #0
 801684a:	f000 80b3 	beq.w	80169b4 <_dtoa_r+0x49c>
 801684e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8016852:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801685a:	f140 80ab 	bpl.w	80169b4 <_dtoa_r+0x49c>
 801685e:	f1ba 0f00 	cmp.w	sl, #0
 8016862:	f000 80a7 	beq.w	80169b4 <_dtoa_r+0x49c>
 8016866:	f1bb 0f00 	cmp.w	fp, #0
 801686a:	dd30      	ble.n	80168ce <_dtoa_r+0x3b6>
 801686c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8016870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016874:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016878:	f108 31ff 	add.w	r1, r8, #4294967295
 801687c:	9105      	str	r1, [sp, #20]
 801687e:	3201      	adds	r2, #1
 8016880:	465c      	mov	r4, fp
 8016882:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016886:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801688a:	ee07 2a90 	vmov	s15, r2
 801688e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016892:	eea7 5b06 	vfma.f64	d5, d7, d6
 8016896:	ee15 2a90 	vmov	r2, s11
 801689a:	ec51 0b15 	vmov	r0, r1, d5
 801689e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80168a2:	2c00      	cmp	r4, #0
 80168a4:	f040 808a 	bne.w	80169bc <_dtoa_r+0x4a4>
 80168a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80168ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80168b0:	ec41 0b17 	vmov	d7, r0, r1
 80168b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80168b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168bc:	f300 826a 	bgt.w	8016d94 <_dtoa_r+0x87c>
 80168c0:	eeb1 7b47 	vneg.f64	d7, d7
 80168c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80168c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168cc:	d423      	bmi.n	8016916 <_dtoa_r+0x3fe>
 80168ce:	ed8d 8b02 	vstr	d8, [sp, #8]
 80168d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80168d4:	2a00      	cmp	r2, #0
 80168d6:	f2c0 8129 	blt.w	8016b2c <_dtoa_r+0x614>
 80168da:	f1b8 0f0e 	cmp.w	r8, #14
 80168de:	f300 8125 	bgt.w	8016b2c <_dtoa_r+0x614>
 80168e2:	4b90      	ldr	r3, [pc, #576]	@ (8016b24 <_dtoa_r+0x60c>)
 80168e4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80168e8:	ed93 6b00 	vldr	d6, [r3]
 80168ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	f280 80c8 	bge.w	8016a84 <_dtoa_r+0x56c>
 80168f4:	f1ba 0f00 	cmp.w	sl, #0
 80168f8:	f300 80c4 	bgt.w	8016a84 <_dtoa_r+0x56c>
 80168fc:	d10b      	bne.n	8016916 <_dtoa_r+0x3fe>
 80168fe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016902:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016906:	ed9d 7b02 	vldr	d7, [sp, #8]
 801690a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801690e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016912:	f2c0 823c 	blt.w	8016d8e <_dtoa_r+0x876>
 8016916:	2400      	movs	r4, #0
 8016918:	4625      	mov	r5, r4
 801691a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801691c:	43db      	mvns	r3, r3
 801691e:	9305      	str	r3, [sp, #20]
 8016920:	463e      	mov	r6, r7
 8016922:	f04f 0800 	mov.w	r8, #0
 8016926:	4621      	mov	r1, r4
 8016928:	4648      	mov	r0, r9
 801692a:	f000 fc93 	bl	8017254 <_Bfree>
 801692e:	2d00      	cmp	r5, #0
 8016930:	f000 80a2 	beq.w	8016a78 <_dtoa_r+0x560>
 8016934:	f1b8 0f00 	cmp.w	r8, #0
 8016938:	d005      	beq.n	8016946 <_dtoa_r+0x42e>
 801693a:	45a8      	cmp	r8, r5
 801693c:	d003      	beq.n	8016946 <_dtoa_r+0x42e>
 801693e:	4641      	mov	r1, r8
 8016940:	4648      	mov	r0, r9
 8016942:	f000 fc87 	bl	8017254 <_Bfree>
 8016946:	4629      	mov	r1, r5
 8016948:	4648      	mov	r0, r9
 801694a:	f000 fc83 	bl	8017254 <_Bfree>
 801694e:	e093      	b.n	8016a78 <_dtoa_r+0x560>
 8016950:	2202      	movs	r2, #2
 8016952:	e76c      	b.n	801682e <_dtoa_r+0x316>
 8016954:	07cc      	lsls	r4, r1, #31
 8016956:	d504      	bpl.n	8016962 <_dtoa_r+0x44a>
 8016958:	ed90 6b00 	vldr	d6, [r0]
 801695c:	3201      	adds	r2, #1
 801695e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016962:	1049      	asrs	r1, r1, #1
 8016964:	3008      	adds	r0, #8
 8016966:	e763      	b.n	8016830 <_dtoa_r+0x318>
 8016968:	d022      	beq.n	80169b0 <_dtoa_r+0x498>
 801696a:	f1c8 0100 	rsb	r1, r8, #0
 801696e:	4a6d      	ldr	r2, [pc, #436]	@ (8016b24 <_dtoa_r+0x60c>)
 8016970:	f001 000f 	and.w	r0, r1, #15
 8016974:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016978:	ed92 7b00 	vldr	d7, [r2]
 801697c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8016980:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016984:	4868      	ldr	r0, [pc, #416]	@ (8016b28 <_dtoa_r+0x610>)
 8016986:	1109      	asrs	r1, r1, #4
 8016988:	2400      	movs	r4, #0
 801698a:	2202      	movs	r2, #2
 801698c:	b929      	cbnz	r1, 801699a <_dtoa_r+0x482>
 801698e:	2c00      	cmp	r4, #0
 8016990:	f43f af57 	beq.w	8016842 <_dtoa_r+0x32a>
 8016994:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016998:	e753      	b.n	8016842 <_dtoa_r+0x32a>
 801699a:	07ce      	lsls	r6, r1, #31
 801699c:	d505      	bpl.n	80169aa <_dtoa_r+0x492>
 801699e:	ed90 6b00 	vldr	d6, [r0]
 80169a2:	3201      	adds	r2, #1
 80169a4:	2401      	movs	r4, #1
 80169a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80169aa:	1049      	asrs	r1, r1, #1
 80169ac:	3008      	adds	r0, #8
 80169ae:	e7ed      	b.n	801698c <_dtoa_r+0x474>
 80169b0:	2202      	movs	r2, #2
 80169b2:	e746      	b.n	8016842 <_dtoa_r+0x32a>
 80169b4:	f8cd 8014 	str.w	r8, [sp, #20]
 80169b8:	4654      	mov	r4, sl
 80169ba:	e762      	b.n	8016882 <_dtoa_r+0x36a>
 80169bc:	4a59      	ldr	r2, [pc, #356]	@ (8016b24 <_dtoa_r+0x60c>)
 80169be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80169c2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80169c6:	9a08      	ldr	r2, [sp, #32]
 80169c8:	ec41 0b17 	vmov	d7, r0, r1
 80169cc:	443c      	add	r4, r7
 80169ce:	b34a      	cbz	r2, 8016a24 <_dtoa_r+0x50c>
 80169d0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80169d4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80169d8:	463e      	mov	r6, r7
 80169da:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80169de:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80169e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80169e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80169ea:	ee14 2a90 	vmov	r2, s9
 80169ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80169f2:	3230      	adds	r2, #48	@ 0x30
 80169f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80169f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80169fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a00:	f806 2b01 	strb.w	r2, [r6], #1
 8016a04:	d438      	bmi.n	8016a78 <_dtoa_r+0x560>
 8016a06:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016a0a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a12:	d46e      	bmi.n	8016af2 <_dtoa_r+0x5da>
 8016a14:	42a6      	cmp	r6, r4
 8016a16:	f43f af5a 	beq.w	80168ce <_dtoa_r+0x3b6>
 8016a1a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8016a1e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016a22:	e7e0      	b.n	80169e6 <_dtoa_r+0x4ce>
 8016a24:	4621      	mov	r1, r4
 8016a26:	463e      	mov	r6, r7
 8016a28:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016a2c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016a30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016a34:	ee14 2a90 	vmov	r2, s9
 8016a38:	3230      	adds	r2, #48	@ 0x30
 8016a3a:	f806 2b01 	strb.w	r2, [r6], #1
 8016a3e:	42a6      	cmp	r6, r4
 8016a40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016a44:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016a48:	d119      	bne.n	8016a7e <_dtoa_r+0x566>
 8016a4a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8016a4e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016a52:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a5a:	dc4a      	bgt.n	8016af2 <_dtoa_r+0x5da>
 8016a5c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016a60:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8016a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a68:	f57f af31 	bpl.w	80168ce <_dtoa_r+0x3b6>
 8016a6c:	460e      	mov	r6, r1
 8016a6e:	3901      	subs	r1, #1
 8016a70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016a74:	2b30      	cmp	r3, #48	@ 0x30
 8016a76:	d0f9      	beq.n	8016a6c <_dtoa_r+0x554>
 8016a78:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016a7c:	e027      	b.n	8016ace <_dtoa_r+0x5b6>
 8016a7e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016a82:	e7d5      	b.n	8016a30 <_dtoa_r+0x518>
 8016a84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016a88:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8016a8c:	463e      	mov	r6, r7
 8016a8e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8016a92:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8016a96:	ee15 3a10 	vmov	r3, s10
 8016a9a:	3330      	adds	r3, #48	@ 0x30
 8016a9c:	f806 3b01 	strb.w	r3, [r6], #1
 8016aa0:	1bf3      	subs	r3, r6, r7
 8016aa2:	459a      	cmp	sl, r3
 8016aa4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016aa8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8016aac:	d132      	bne.n	8016b14 <_dtoa_r+0x5fc>
 8016aae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016ab2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aba:	dc18      	bgt.n	8016aee <_dtoa_r+0x5d6>
 8016abc:	eeb4 7b46 	vcmp.f64	d7, d6
 8016ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ac4:	d103      	bne.n	8016ace <_dtoa_r+0x5b6>
 8016ac6:	ee15 3a10 	vmov	r3, s10
 8016aca:	07db      	lsls	r3, r3, #31
 8016acc:	d40f      	bmi.n	8016aee <_dtoa_r+0x5d6>
 8016ace:	9901      	ldr	r1, [sp, #4]
 8016ad0:	4648      	mov	r0, r9
 8016ad2:	f000 fbbf 	bl	8017254 <_Bfree>
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016ada:	7033      	strb	r3, [r6, #0]
 8016adc:	f108 0301 	add.w	r3, r8, #1
 8016ae0:	6013      	str	r3, [r2, #0]
 8016ae2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	f000 824b 	beq.w	8016f80 <_dtoa_r+0xa68>
 8016aea:	601e      	str	r6, [r3, #0]
 8016aec:	e248      	b.n	8016f80 <_dtoa_r+0xa68>
 8016aee:	f8cd 8014 	str.w	r8, [sp, #20]
 8016af2:	4633      	mov	r3, r6
 8016af4:	461e      	mov	r6, r3
 8016af6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016afa:	2a39      	cmp	r2, #57	@ 0x39
 8016afc:	d106      	bne.n	8016b0c <_dtoa_r+0x5f4>
 8016afe:	429f      	cmp	r7, r3
 8016b00:	d1f8      	bne.n	8016af4 <_dtoa_r+0x5dc>
 8016b02:	9a05      	ldr	r2, [sp, #20]
 8016b04:	3201      	adds	r2, #1
 8016b06:	9205      	str	r2, [sp, #20]
 8016b08:	2230      	movs	r2, #48	@ 0x30
 8016b0a:	703a      	strb	r2, [r7, #0]
 8016b0c:	781a      	ldrb	r2, [r3, #0]
 8016b0e:	3201      	adds	r2, #1
 8016b10:	701a      	strb	r2, [r3, #0]
 8016b12:	e7b1      	b.n	8016a78 <_dtoa_r+0x560>
 8016b14:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016b18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b20:	d1b5      	bne.n	8016a8e <_dtoa_r+0x576>
 8016b22:	e7d4      	b.n	8016ace <_dtoa_r+0x5b6>
 8016b24:	0801c6a0 	.word	0x0801c6a0
 8016b28:	0801c678 	.word	0x0801c678
 8016b2c:	9908      	ldr	r1, [sp, #32]
 8016b2e:	2900      	cmp	r1, #0
 8016b30:	f000 80e9 	beq.w	8016d06 <_dtoa_r+0x7ee>
 8016b34:	9907      	ldr	r1, [sp, #28]
 8016b36:	2901      	cmp	r1, #1
 8016b38:	f300 80cb 	bgt.w	8016cd2 <_dtoa_r+0x7ba>
 8016b3c:	2d00      	cmp	r5, #0
 8016b3e:	f000 80c4 	beq.w	8016cca <_dtoa_r+0x7b2>
 8016b42:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016b46:	9e04      	ldr	r6, [sp, #16]
 8016b48:	461c      	mov	r4, r3
 8016b4a:	9305      	str	r3, [sp, #20]
 8016b4c:	9b04      	ldr	r3, [sp, #16]
 8016b4e:	4413      	add	r3, r2
 8016b50:	9304      	str	r3, [sp, #16]
 8016b52:	9b06      	ldr	r3, [sp, #24]
 8016b54:	2101      	movs	r1, #1
 8016b56:	4413      	add	r3, r2
 8016b58:	4648      	mov	r0, r9
 8016b5a:	9306      	str	r3, [sp, #24]
 8016b5c:	f000 fc78 	bl	8017450 <__i2b>
 8016b60:	9b05      	ldr	r3, [sp, #20]
 8016b62:	4605      	mov	r5, r0
 8016b64:	b166      	cbz	r6, 8016b80 <_dtoa_r+0x668>
 8016b66:	9a06      	ldr	r2, [sp, #24]
 8016b68:	2a00      	cmp	r2, #0
 8016b6a:	dd09      	ble.n	8016b80 <_dtoa_r+0x668>
 8016b6c:	42b2      	cmp	r2, r6
 8016b6e:	9904      	ldr	r1, [sp, #16]
 8016b70:	bfa8      	it	ge
 8016b72:	4632      	movge	r2, r6
 8016b74:	1a89      	subs	r1, r1, r2
 8016b76:	9104      	str	r1, [sp, #16]
 8016b78:	9906      	ldr	r1, [sp, #24]
 8016b7a:	1ab6      	subs	r6, r6, r2
 8016b7c:	1a8a      	subs	r2, r1, r2
 8016b7e:	9206      	str	r2, [sp, #24]
 8016b80:	b30b      	cbz	r3, 8016bc6 <_dtoa_r+0x6ae>
 8016b82:	9a08      	ldr	r2, [sp, #32]
 8016b84:	2a00      	cmp	r2, #0
 8016b86:	f000 80c5 	beq.w	8016d14 <_dtoa_r+0x7fc>
 8016b8a:	2c00      	cmp	r4, #0
 8016b8c:	f000 80bf 	beq.w	8016d0e <_dtoa_r+0x7f6>
 8016b90:	4629      	mov	r1, r5
 8016b92:	4622      	mov	r2, r4
 8016b94:	4648      	mov	r0, r9
 8016b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016b98:	f000 fd12 	bl	80175c0 <__pow5mult>
 8016b9c:	9a01      	ldr	r2, [sp, #4]
 8016b9e:	4601      	mov	r1, r0
 8016ba0:	4605      	mov	r5, r0
 8016ba2:	4648      	mov	r0, r9
 8016ba4:	f000 fc6a 	bl	801747c <__multiply>
 8016ba8:	9901      	ldr	r1, [sp, #4]
 8016baa:	9005      	str	r0, [sp, #20]
 8016bac:	4648      	mov	r0, r9
 8016bae:	f000 fb51 	bl	8017254 <_Bfree>
 8016bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016bb4:	1b1b      	subs	r3, r3, r4
 8016bb6:	f000 80b0 	beq.w	8016d1a <_dtoa_r+0x802>
 8016bba:	9905      	ldr	r1, [sp, #20]
 8016bbc:	461a      	mov	r2, r3
 8016bbe:	4648      	mov	r0, r9
 8016bc0:	f000 fcfe 	bl	80175c0 <__pow5mult>
 8016bc4:	9001      	str	r0, [sp, #4]
 8016bc6:	2101      	movs	r1, #1
 8016bc8:	4648      	mov	r0, r9
 8016bca:	f000 fc41 	bl	8017450 <__i2b>
 8016bce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016bd0:	4604      	mov	r4, r0
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	f000 81da 	beq.w	8016f8c <_dtoa_r+0xa74>
 8016bd8:	461a      	mov	r2, r3
 8016bda:	4601      	mov	r1, r0
 8016bdc:	4648      	mov	r0, r9
 8016bde:	f000 fcef 	bl	80175c0 <__pow5mult>
 8016be2:	9b07      	ldr	r3, [sp, #28]
 8016be4:	2b01      	cmp	r3, #1
 8016be6:	4604      	mov	r4, r0
 8016be8:	f300 80a0 	bgt.w	8016d2c <_dtoa_r+0x814>
 8016bec:	9b02      	ldr	r3, [sp, #8]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	f040 8096 	bne.w	8016d20 <_dtoa_r+0x808>
 8016bf4:	9b03      	ldr	r3, [sp, #12]
 8016bf6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016bfa:	2a00      	cmp	r2, #0
 8016bfc:	f040 8092 	bne.w	8016d24 <_dtoa_r+0x80c>
 8016c00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016c04:	0d12      	lsrs	r2, r2, #20
 8016c06:	0512      	lsls	r2, r2, #20
 8016c08:	2a00      	cmp	r2, #0
 8016c0a:	f000 808d 	beq.w	8016d28 <_dtoa_r+0x810>
 8016c0e:	9b04      	ldr	r3, [sp, #16]
 8016c10:	3301      	adds	r3, #1
 8016c12:	9304      	str	r3, [sp, #16]
 8016c14:	9b06      	ldr	r3, [sp, #24]
 8016c16:	3301      	adds	r3, #1
 8016c18:	9306      	str	r3, [sp, #24]
 8016c1a:	2301      	movs	r3, #1
 8016c1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	f000 81b9 	beq.w	8016f98 <_dtoa_r+0xa80>
 8016c26:	6922      	ldr	r2, [r4, #16]
 8016c28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016c2c:	6910      	ldr	r0, [r2, #16]
 8016c2e:	f000 fbc3 	bl	80173b8 <__hi0bits>
 8016c32:	f1c0 0020 	rsb	r0, r0, #32
 8016c36:	9b06      	ldr	r3, [sp, #24]
 8016c38:	4418      	add	r0, r3
 8016c3a:	f010 001f 	ands.w	r0, r0, #31
 8016c3e:	f000 8081 	beq.w	8016d44 <_dtoa_r+0x82c>
 8016c42:	f1c0 0220 	rsb	r2, r0, #32
 8016c46:	2a04      	cmp	r2, #4
 8016c48:	dd73      	ble.n	8016d32 <_dtoa_r+0x81a>
 8016c4a:	9b04      	ldr	r3, [sp, #16]
 8016c4c:	f1c0 001c 	rsb	r0, r0, #28
 8016c50:	4403      	add	r3, r0
 8016c52:	9304      	str	r3, [sp, #16]
 8016c54:	9b06      	ldr	r3, [sp, #24]
 8016c56:	4406      	add	r6, r0
 8016c58:	4403      	add	r3, r0
 8016c5a:	9306      	str	r3, [sp, #24]
 8016c5c:	9b04      	ldr	r3, [sp, #16]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	dd05      	ble.n	8016c6e <_dtoa_r+0x756>
 8016c62:	9901      	ldr	r1, [sp, #4]
 8016c64:	461a      	mov	r2, r3
 8016c66:	4648      	mov	r0, r9
 8016c68:	f000 fd04 	bl	8017674 <__lshift>
 8016c6c:	9001      	str	r0, [sp, #4]
 8016c6e:	9b06      	ldr	r3, [sp, #24]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	dd05      	ble.n	8016c80 <_dtoa_r+0x768>
 8016c74:	4621      	mov	r1, r4
 8016c76:	461a      	mov	r2, r3
 8016c78:	4648      	mov	r0, r9
 8016c7a:	f000 fcfb 	bl	8017674 <__lshift>
 8016c7e:	4604      	mov	r4, r0
 8016c80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d060      	beq.n	8016d48 <_dtoa_r+0x830>
 8016c86:	9801      	ldr	r0, [sp, #4]
 8016c88:	4621      	mov	r1, r4
 8016c8a:	f000 fd5f 	bl	801774c <__mcmp>
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	da5a      	bge.n	8016d48 <_dtoa_r+0x830>
 8016c92:	f108 33ff 	add.w	r3, r8, #4294967295
 8016c96:	9305      	str	r3, [sp, #20]
 8016c98:	9901      	ldr	r1, [sp, #4]
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	220a      	movs	r2, #10
 8016c9e:	4648      	mov	r0, r9
 8016ca0:	f000 fafa 	bl	8017298 <__multadd>
 8016ca4:	9b08      	ldr	r3, [sp, #32]
 8016ca6:	9001      	str	r0, [sp, #4]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	f000 8177 	beq.w	8016f9c <_dtoa_r+0xa84>
 8016cae:	4629      	mov	r1, r5
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	220a      	movs	r2, #10
 8016cb4:	4648      	mov	r0, r9
 8016cb6:	f000 faef 	bl	8017298 <__multadd>
 8016cba:	f1bb 0f00 	cmp.w	fp, #0
 8016cbe:	4605      	mov	r5, r0
 8016cc0:	dc6e      	bgt.n	8016da0 <_dtoa_r+0x888>
 8016cc2:	9b07      	ldr	r3, [sp, #28]
 8016cc4:	2b02      	cmp	r3, #2
 8016cc6:	dc48      	bgt.n	8016d5a <_dtoa_r+0x842>
 8016cc8:	e06a      	b.n	8016da0 <_dtoa_r+0x888>
 8016cca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016ccc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016cd0:	e739      	b.n	8016b46 <_dtoa_r+0x62e>
 8016cd2:	f10a 34ff 	add.w	r4, sl, #4294967295
 8016cd6:	42a3      	cmp	r3, r4
 8016cd8:	db07      	blt.n	8016cea <_dtoa_r+0x7d2>
 8016cda:	f1ba 0f00 	cmp.w	sl, #0
 8016cde:	eba3 0404 	sub.w	r4, r3, r4
 8016ce2:	db0b      	blt.n	8016cfc <_dtoa_r+0x7e4>
 8016ce4:	9e04      	ldr	r6, [sp, #16]
 8016ce6:	4652      	mov	r2, sl
 8016ce8:	e72f      	b.n	8016b4a <_dtoa_r+0x632>
 8016cea:	1ae2      	subs	r2, r4, r3
 8016cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016cee:	9e04      	ldr	r6, [sp, #16]
 8016cf0:	4413      	add	r3, r2
 8016cf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8016cf4:	4652      	mov	r2, sl
 8016cf6:	4623      	mov	r3, r4
 8016cf8:	2400      	movs	r4, #0
 8016cfa:	e726      	b.n	8016b4a <_dtoa_r+0x632>
 8016cfc:	9a04      	ldr	r2, [sp, #16]
 8016cfe:	eba2 060a 	sub.w	r6, r2, sl
 8016d02:	2200      	movs	r2, #0
 8016d04:	e721      	b.n	8016b4a <_dtoa_r+0x632>
 8016d06:	9e04      	ldr	r6, [sp, #16]
 8016d08:	9d08      	ldr	r5, [sp, #32]
 8016d0a:	461c      	mov	r4, r3
 8016d0c:	e72a      	b.n	8016b64 <_dtoa_r+0x64c>
 8016d0e:	9a01      	ldr	r2, [sp, #4]
 8016d10:	9205      	str	r2, [sp, #20]
 8016d12:	e752      	b.n	8016bba <_dtoa_r+0x6a2>
 8016d14:	9901      	ldr	r1, [sp, #4]
 8016d16:	461a      	mov	r2, r3
 8016d18:	e751      	b.n	8016bbe <_dtoa_r+0x6a6>
 8016d1a:	9b05      	ldr	r3, [sp, #20]
 8016d1c:	9301      	str	r3, [sp, #4]
 8016d1e:	e752      	b.n	8016bc6 <_dtoa_r+0x6ae>
 8016d20:	2300      	movs	r3, #0
 8016d22:	e77b      	b.n	8016c1c <_dtoa_r+0x704>
 8016d24:	9b02      	ldr	r3, [sp, #8]
 8016d26:	e779      	b.n	8016c1c <_dtoa_r+0x704>
 8016d28:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016d2a:	e778      	b.n	8016c1e <_dtoa_r+0x706>
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016d30:	e779      	b.n	8016c26 <_dtoa_r+0x70e>
 8016d32:	d093      	beq.n	8016c5c <_dtoa_r+0x744>
 8016d34:	9b04      	ldr	r3, [sp, #16]
 8016d36:	321c      	adds	r2, #28
 8016d38:	4413      	add	r3, r2
 8016d3a:	9304      	str	r3, [sp, #16]
 8016d3c:	9b06      	ldr	r3, [sp, #24]
 8016d3e:	4416      	add	r6, r2
 8016d40:	4413      	add	r3, r2
 8016d42:	e78a      	b.n	8016c5a <_dtoa_r+0x742>
 8016d44:	4602      	mov	r2, r0
 8016d46:	e7f5      	b.n	8016d34 <_dtoa_r+0x81c>
 8016d48:	f1ba 0f00 	cmp.w	sl, #0
 8016d4c:	f8cd 8014 	str.w	r8, [sp, #20]
 8016d50:	46d3      	mov	fp, sl
 8016d52:	dc21      	bgt.n	8016d98 <_dtoa_r+0x880>
 8016d54:	9b07      	ldr	r3, [sp, #28]
 8016d56:	2b02      	cmp	r3, #2
 8016d58:	dd1e      	ble.n	8016d98 <_dtoa_r+0x880>
 8016d5a:	f1bb 0f00 	cmp.w	fp, #0
 8016d5e:	f47f addc 	bne.w	801691a <_dtoa_r+0x402>
 8016d62:	4621      	mov	r1, r4
 8016d64:	465b      	mov	r3, fp
 8016d66:	2205      	movs	r2, #5
 8016d68:	4648      	mov	r0, r9
 8016d6a:	f000 fa95 	bl	8017298 <__multadd>
 8016d6e:	4601      	mov	r1, r0
 8016d70:	4604      	mov	r4, r0
 8016d72:	9801      	ldr	r0, [sp, #4]
 8016d74:	f000 fcea 	bl	801774c <__mcmp>
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	f77f adce 	ble.w	801691a <_dtoa_r+0x402>
 8016d7e:	463e      	mov	r6, r7
 8016d80:	2331      	movs	r3, #49	@ 0x31
 8016d82:	f806 3b01 	strb.w	r3, [r6], #1
 8016d86:	9b05      	ldr	r3, [sp, #20]
 8016d88:	3301      	adds	r3, #1
 8016d8a:	9305      	str	r3, [sp, #20]
 8016d8c:	e5c9      	b.n	8016922 <_dtoa_r+0x40a>
 8016d8e:	f8cd 8014 	str.w	r8, [sp, #20]
 8016d92:	4654      	mov	r4, sl
 8016d94:	4625      	mov	r5, r4
 8016d96:	e7f2      	b.n	8016d7e <_dtoa_r+0x866>
 8016d98:	9b08      	ldr	r3, [sp, #32]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f000 8102 	beq.w	8016fa4 <_dtoa_r+0xa8c>
 8016da0:	2e00      	cmp	r6, #0
 8016da2:	dd05      	ble.n	8016db0 <_dtoa_r+0x898>
 8016da4:	4629      	mov	r1, r5
 8016da6:	4632      	mov	r2, r6
 8016da8:	4648      	mov	r0, r9
 8016daa:	f000 fc63 	bl	8017674 <__lshift>
 8016dae:	4605      	mov	r5, r0
 8016db0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d058      	beq.n	8016e68 <_dtoa_r+0x950>
 8016db6:	6869      	ldr	r1, [r5, #4]
 8016db8:	4648      	mov	r0, r9
 8016dba:	f000 fa0b 	bl	80171d4 <_Balloc>
 8016dbe:	4606      	mov	r6, r0
 8016dc0:	b928      	cbnz	r0, 8016dce <_dtoa_r+0x8b6>
 8016dc2:	4b82      	ldr	r3, [pc, #520]	@ (8016fcc <_dtoa_r+0xab4>)
 8016dc4:	4602      	mov	r2, r0
 8016dc6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016dca:	f7ff bbbe 	b.w	801654a <_dtoa_r+0x32>
 8016dce:	692a      	ldr	r2, [r5, #16]
 8016dd0:	3202      	adds	r2, #2
 8016dd2:	0092      	lsls	r2, r2, #2
 8016dd4:	f105 010c 	add.w	r1, r5, #12
 8016dd8:	300c      	adds	r0, #12
 8016dda:	f7ff fae0 	bl	801639e <memcpy>
 8016dde:	2201      	movs	r2, #1
 8016de0:	4631      	mov	r1, r6
 8016de2:	4648      	mov	r0, r9
 8016de4:	f000 fc46 	bl	8017674 <__lshift>
 8016de8:	1c7b      	adds	r3, r7, #1
 8016dea:	9304      	str	r3, [sp, #16]
 8016dec:	eb07 030b 	add.w	r3, r7, fp
 8016df0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016df2:	9b02      	ldr	r3, [sp, #8]
 8016df4:	f003 0301 	and.w	r3, r3, #1
 8016df8:	46a8      	mov	r8, r5
 8016dfa:	9308      	str	r3, [sp, #32]
 8016dfc:	4605      	mov	r5, r0
 8016dfe:	9b04      	ldr	r3, [sp, #16]
 8016e00:	9801      	ldr	r0, [sp, #4]
 8016e02:	4621      	mov	r1, r4
 8016e04:	f103 3bff 	add.w	fp, r3, #4294967295
 8016e08:	f7ff fafc 	bl	8016404 <quorem>
 8016e0c:	4641      	mov	r1, r8
 8016e0e:	9002      	str	r0, [sp, #8]
 8016e10:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016e14:	9801      	ldr	r0, [sp, #4]
 8016e16:	f000 fc99 	bl	801774c <__mcmp>
 8016e1a:	462a      	mov	r2, r5
 8016e1c:	9006      	str	r0, [sp, #24]
 8016e1e:	4621      	mov	r1, r4
 8016e20:	4648      	mov	r0, r9
 8016e22:	f000 fcaf 	bl	8017784 <__mdiff>
 8016e26:	68c2      	ldr	r2, [r0, #12]
 8016e28:	4606      	mov	r6, r0
 8016e2a:	b9fa      	cbnz	r2, 8016e6c <_dtoa_r+0x954>
 8016e2c:	4601      	mov	r1, r0
 8016e2e:	9801      	ldr	r0, [sp, #4]
 8016e30:	f000 fc8c 	bl	801774c <__mcmp>
 8016e34:	4602      	mov	r2, r0
 8016e36:	4631      	mov	r1, r6
 8016e38:	4648      	mov	r0, r9
 8016e3a:	920a      	str	r2, [sp, #40]	@ 0x28
 8016e3c:	f000 fa0a 	bl	8017254 <_Bfree>
 8016e40:	9b07      	ldr	r3, [sp, #28]
 8016e42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016e44:	9e04      	ldr	r6, [sp, #16]
 8016e46:	ea42 0103 	orr.w	r1, r2, r3
 8016e4a:	9b08      	ldr	r3, [sp, #32]
 8016e4c:	4319      	orrs	r1, r3
 8016e4e:	d10f      	bne.n	8016e70 <_dtoa_r+0x958>
 8016e50:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016e54:	d028      	beq.n	8016ea8 <_dtoa_r+0x990>
 8016e56:	9b06      	ldr	r3, [sp, #24]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	dd02      	ble.n	8016e62 <_dtoa_r+0x94a>
 8016e5c:	9b02      	ldr	r3, [sp, #8]
 8016e5e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8016e62:	f88b a000 	strb.w	sl, [fp]
 8016e66:	e55e      	b.n	8016926 <_dtoa_r+0x40e>
 8016e68:	4628      	mov	r0, r5
 8016e6a:	e7bd      	b.n	8016de8 <_dtoa_r+0x8d0>
 8016e6c:	2201      	movs	r2, #1
 8016e6e:	e7e2      	b.n	8016e36 <_dtoa_r+0x91e>
 8016e70:	9b06      	ldr	r3, [sp, #24]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	db04      	blt.n	8016e80 <_dtoa_r+0x968>
 8016e76:	9907      	ldr	r1, [sp, #28]
 8016e78:	430b      	orrs	r3, r1
 8016e7a:	9908      	ldr	r1, [sp, #32]
 8016e7c:	430b      	orrs	r3, r1
 8016e7e:	d120      	bne.n	8016ec2 <_dtoa_r+0x9aa>
 8016e80:	2a00      	cmp	r2, #0
 8016e82:	ddee      	ble.n	8016e62 <_dtoa_r+0x94a>
 8016e84:	9901      	ldr	r1, [sp, #4]
 8016e86:	2201      	movs	r2, #1
 8016e88:	4648      	mov	r0, r9
 8016e8a:	f000 fbf3 	bl	8017674 <__lshift>
 8016e8e:	4621      	mov	r1, r4
 8016e90:	9001      	str	r0, [sp, #4]
 8016e92:	f000 fc5b 	bl	801774c <__mcmp>
 8016e96:	2800      	cmp	r0, #0
 8016e98:	dc03      	bgt.n	8016ea2 <_dtoa_r+0x98a>
 8016e9a:	d1e2      	bne.n	8016e62 <_dtoa_r+0x94a>
 8016e9c:	f01a 0f01 	tst.w	sl, #1
 8016ea0:	d0df      	beq.n	8016e62 <_dtoa_r+0x94a>
 8016ea2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016ea6:	d1d9      	bne.n	8016e5c <_dtoa_r+0x944>
 8016ea8:	2339      	movs	r3, #57	@ 0x39
 8016eaa:	f88b 3000 	strb.w	r3, [fp]
 8016eae:	4633      	mov	r3, r6
 8016eb0:	461e      	mov	r6, r3
 8016eb2:	3b01      	subs	r3, #1
 8016eb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016eb8:	2a39      	cmp	r2, #57	@ 0x39
 8016eba:	d052      	beq.n	8016f62 <_dtoa_r+0xa4a>
 8016ebc:	3201      	adds	r2, #1
 8016ebe:	701a      	strb	r2, [r3, #0]
 8016ec0:	e531      	b.n	8016926 <_dtoa_r+0x40e>
 8016ec2:	2a00      	cmp	r2, #0
 8016ec4:	dd07      	ble.n	8016ed6 <_dtoa_r+0x9be>
 8016ec6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016eca:	d0ed      	beq.n	8016ea8 <_dtoa_r+0x990>
 8016ecc:	f10a 0301 	add.w	r3, sl, #1
 8016ed0:	f88b 3000 	strb.w	r3, [fp]
 8016ed4:	e527      	b.n	8016926 <_dtoa_r+0x40e>
 8016ed6:	9b04      	ldr	r3, [sp, #16]
 8016ed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016eda:	f803 ac01 	strb.w	sl, [r3, #-1]
 8016ede:	4293      	cmp	r3, r2
 8016ee0:	d029      	beq.n	8016f36 <_dtoa_r+0xa1e>
 8016ee2:	9901      	ldr	r1, [sp, #4]
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	220a      	movs	r2, #10
 8016ee8:	4648      	mov	r0, r9
 8016eea:	f000 f9d5 	bl	8017298 <__multadd>
 8016eee:	45a8      	cmp	r8, r5
 8016ef0:	9001      	str	r0, [sp, #4]
 8016ef2:	f04f 0300 	mov.w	r3, #0
 8016ef6:	f04f 020a 	mov.w	r2, #10
 8016efa:	4641      	mov	r1, r8
 8016efc:	4648      	mov	r0, r9
 8016efe:	d107      	bne.n	8016f10 <_dtoa_r+0x9f8>
 8016f00:	f000 f9ca 	bl	8017298 <__multadd>
 8016f04:	4680      	mov	r8, r0
 8016f06:	4605      	mov	r5, r0
 8016f08:	9b04      	ldr	r3, [sp, #16]
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	9304      	str	r3, [sp, #16]
 8016f0e:	e776      	b.n	8016dfe <_dtoa_r+0x8e6>
 8016f10:	f000 f9c2 	bl	8017298 <__multadd>
 8016f14:	4629      	mov	r1, r5
 8016f16:	4680      	mov	r8, r0
 8016f18:	2300      	movs	r3, #0
 8016f1a:	220a      	movs	r2, #10
 8016f1c:	4648      	mov	r0, r9
 8016f1e:	f000 f9bb 	bl	8017298 <__multadd>
 8016f22:	4605      	mov	r5, r0
 8016f24:	e7f0      	b.n	8016f08 <_dtoa_r+0x9f0>
 8016f26:	f1bb 0f00 	cmp.w	fp, #0
 8016f2a:	bfcc      	ite	gt
 8016f2c:	465e      	movgt	r6, fp
 8016f2e:	2601      	movle	r6, #1
 8016f30:	443e      	add	r6, r7
 8016f32:	f04f 0800 	mov.w	r8, #0
 8016f36:	9901      	ldr	r1, [sp, #4]
 8016f38:	2201      	movs	r2, #1
 8016f3a:	4648      	mov	r0, r9
 8016f3c:	f000 fb9a 	bl	8017674 <__lshift>
 8016f40:	4621      	mov	r1, r4
 8016f42:	9001      	str	r0, [sp, #4]
 8016f44:	f000 fc02 	bl	801774c <__mcmp>
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	dcb0      	bgt.n	8016eae <_dtoa_r+0x996>
 8016f4c:	d102      	bne.n	8016f54 <_dtoa_r+0xa3c>
 8016f4e:	f01a 0f01 	tst.w	sl, #1
 8016f52:	d1ac      	bne.n	8016eae <_dtoa_r+0x996>
 8016f54:	4633      	mov	r3, r6
 8016f56:	461e      	mov	r6, r3
 8016f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016f5c:	2a30      	cmp	r2, #48	@ 0x30
 8016f5e:	d0fa      	beq.n	8016f56 <_dtoa_r+0xa3e>
 8016f60:	e4e1      	b.n	8016926 <_dtoa_r+0x40e>
 8016f62:	429f      	cmp	r7, r3
 8016f64:	d1a4      	bne.n	8016eb0 <_dtoa_r+0x998>
 8016f66:	9b05      	ldr	r3, [sp, #20]
 8016f68:	3301      	adds	r3, #1
 8016f6a:	9305      	str	r3, [sp, #20]
 8016f6c:	2331      	movs	r3, #49	@ 0x31
 8016f6e:	703b      	strb	r3, [r7, #0]
 8016f70:	e4d9      	b.n	8016926 <_dtoa_r+0x40e>
 8016f72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016f74:	4f16      	ldr	r7, [pc, #88]	@ (8016fd0 <_dtoa_r+0xab8>)
 8016f76:	b11b      	cbz	r3, 8016f80 <_dtoa_r+0xa68>
 8016f78:	f107 0308 	add.w	r3, r7, #8
 8016f7c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016f7e:	6013      	str	r3, [r2, #0]
 8016f80:	4638      	mov	r0, r7
 8016f82:	b011      	add	sp, #68	@ 0x44
 8016f84:	ecbd 8b02 	vpop	{d8}
 8016f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f8c:	9b07      	ldr	r3, [sp, #28]
 8016f8e:	2b01      	cmp	r3, #1
 8016f90:	f77f ae2c 	ble.w	8016bec <_dtoa_r+0x6d4>
 8016f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016f98:	2001      	movs	r0, #1
 8016f9a:	e64c      	b.n	8016c36 <_dtoa_r+0x71e>
 8016f9c:	f1bb 0f00 	cmp.w	fp, #0
 8016fa0:	f77f aed8 	ble.w	8016d54 <_dtoa_r+0x83c>
 8016fa4:	463e      	mov	r6, r7
 8016fa6:	9801      	ldr	r0, [sp, #4]
 8016fa8:	4621      	mov	r1, r4
 8016faa:	f7ff fa2b 	bl	8016404 <quorem>
 8016fae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016fb2:	f806 ab01 	strb.w	sl, [r6], #1
 8016fb6:	1bf2      	subs	r2, r6, r7
 8016fb8:	4593      	cmp	fp, r2
 8016fba:	ddb4      	ble.n	8016f26 <_dtoa_r+0xa0e>
 8016fbc:	9901      	ldr	r1, [sp, #4]
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	220a      	movs	r2, #10
 8016fc2:	4648      	mov	r0, r9
 8016fc4:	f000 f968 	bl	8017298 <__multadd>
 8016fc8:	9001      	str	r0, [sp, #4]
 8016fca:	e7ec      	b.n	8016fa6 <_dtoa_r+0xa8e>
 8016fcc:	0801c483 	.word	0x0801c483
 8016fd0:	0801c41e 	.word	0x0801c41e

08016fd4 <_free_r>:
 8016fd4:	b538      	push	{r3, r4, r5, lr}
 8016fd6:	4605      	mov	r5, r0
 8016fd8:	2900      	cmp	r1, #0
 8016fda:	d041      	beq.n	8017060 <_free_r+0x8c>
 8016fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fe0:	1f0c      	subs	r4, r1, #4
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	bfb8      	it	lt
 8016fe6:	18e4      	addlt	r4, r4, r3
 8016fe8:	f000 f8e8 	bl	80171bc <__malloc_lock>
 8016fec:	4a1d      	ldr	r2, [pc, #116]	@ (8017064 <_free_r+0x90>)
 8016fee:	6813      	ldr	r3, [r2, #0]
 8016ff0:	b933      	cbnz	r3, 8017000 <_free_r+0x2c>
 8016ff2:	6063      	str	r3, [r4, #4]
 8016ff4:	6014      	str	r4, [r2, #0]
 8016ff6:	4628      	mov	r0, r5
 8016ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ffc:	f000 b8e4 	b.w	80171c8 <__malloc_unlock>
 8017000:	42a3      	cmp	r3, r4
 8017002:	d908      	bls.n	8017016 <_free_r+0x42>
 8017004:	6820      	ldr	r0, [r4, #0]
 8017006:	1821      	adds	r1, r4, r0
 8017008:	428b      	cmp	r3, r1
 801700a:	bf01      	itttt	eq
 801700c:	6819      	ldreq	r1, [r3, #0]
 801700e:	685b      	ldreq	r3, [r3, #4]
 8017010:	1809      	addeq	r1, r1, r0
 8017012:	6021      	streq	r1, [r4, #0]
 8017014:	e7ed      	b.n	8016ff2 <_free_r+0x1e>
 8017016:	461a      	mov	r2, r3
 8017018:	685b      	ldr	r3, [r3, #4]
 801701a:	b10b      	cbz	r3, 8017020 <_free_r+0x4c>
 801701c:	42a3      	cmp	r3, r4
 801701e:	d9fa      	bls.n	8017016 <_free_r+0x42>
 8017020:	6811      	ldr	r1, [r2, #0]
 8017022:	1850      	adds	r0, r2, r1
 8017024:	42a0      	cmp	r0, r4
 8017026:	d10b      	bne.n	8017040 <_free_r+0x6c>
 8017028:	6820      	ldr	r0, [r4, #0]
 801702a:	4401      	add	r1, r0
 801702c:	1850      	adds	r0, r2, r1
 801702e:	4283      	cmp	r3, r0
 8017030:	6011      	str	r1, [r2, #0]
 8017032:	d1e0      	bne.n	8016ff6 <_free_r+0x22>
 8017034:	6818      	ldr	r0, [r3, #0]
 8017036:	685b      	ldr	r3, [r3, #4]
 8017038:	6053      	str	r3, [r2, #4]
 801703a:	4408      	add	r0, r1
 801703c:	6010      	str	r0, [r2, #0]
 801703e:	e7da      	b.n	8016ff6 <_free_r+0x22>
 8017040:	d902      	bls.n	8017048 <_free_r+0x74>
 8017042:	230c      	movs	r3, #12
 8017044:	602b      	str	r3, [r5, #0]
 8017046:	e7d6      	b.n	8016ff6 <_free_r+0x22>
 8017048:	6820      	ldr	r0, [r4, #0]
 801704a:	1821      	adds	r1, r4, r0
 801704c:	428b      	cmp	r3, r1
 801704e:	bf04      	itt	eq
 8017050:	6819      	ldreq	r1, [r3, #0]
 8017052:	685b      	ldreq	r3, [r3, #4]
 8017054:	6063      	str	r3, [r4, #4]
 8017056:	bf04      	itt	eq
 8017058:	1809      	addeq	r1, r1, r0
 801705a:	6021      	streq	r1, [r4, #0]
 801705c:	6054      	str	r4, [r2, #4]
 801705e:	e7ca      	b.n	8016ff6 <_free_r+0x22>
 8017060:	bd38      	pop	{r3, r4, r5, pc}
 8017062:	bf00      	nop
 8017064:	24008630 	.word	0x24008630

08017068 <malloc>:
 8017068:	4b02      	ldr	r3, [pc, #8]	@ (8017074 <malloc+0xc>)
 801706a:	4601      	mov	r1, r0
 801706c:	6818      	ldr	r0, [r3, #0]
 801706e:	f000 b825 	b.w	80170bc <_malloc_r>
 8017072:	bf00      	nop
 8017074:	2400005c 	.word	0x2400005c

08017078 <sbrk_aligned>:
 8017078:	b570      	push	{r4, r5, r6, lr}
 801707a:	4e0f      	ldr	r6, [pc, #60]	@ (80170b8 <sbrk_aligned+0x40>)
 801707c:	460c      	mov	r4, r1
 801707e:	6831      	ldr	r1, [r6, #0]
 8017080:	4605      	mov	r5, r0
 8017082:	b911      	cbnz	r1, 801708a <sbrk_aligned+0x12>
 8017084:	f001 fee4 	bl	8018e50 <_sbrk_r>
 8017088:	6030      	str	r0, [r6, #0]
 801708a:	4621      	mov	r1, r4
 801708c:	4628      	mov	r0, r5
 801708e:	f001 fedf 	bl	8018e50 <_sbrk_r>
 8017092:	1c43      	adds	r3, r0, #1
 8017094:	d103      	bne.n	801709e <sbrk_aligned+0x26>
 8017096:	f04f 34ff 	mov.w	r4, #4294967295
 801709a:	4620      	mov	r0, r4
 801709c:	bd70      	pop	{r4, r5, r6, pc}
 801709e:	1cc4      	adds	r4, r0, #3
 80170a0:	f024 0403 	bic.w	r4, r4, #3
 80170a4:	42a0      	cmp	r0, r4
 80170a6:	d0f8      	beq.n	801709a <sbrk_aligned+0x22>
 80170a8:	1a21      	subs	r1, r4, r0
 80170aa:	4628      	mov	r0, r5
 80170ac:	f001 fed0 	bl	8018e50 <_sbrk_r>
 80170b0:	3001      	adds	r0, #1
 80170b2:	d1f2      	bne.n	801709a <sbrk_aligned+0x22>
 80170b4:	e7ef      	b.n	8017096 <sbrk_aligned+0x1e>
 80170b6:	bf00      	nop
 80170b8:	2400862c 	.word	0x2400862c

080170bc <_malloc_r>:
 80170bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170c0:	1ccd      	adds	r5, r1, #3
 80170c2:	f025 0503 	bic.w	r5, r5, #3
 80170c6:	3508      	adds	r5, #8
 80170c8:	2d0c      	cmp	r5, #12
 80170ca:	bf38      	it	cc
 80170cc:	250c      	movcc	r5, #12
 80170ce:	2d00      	cmp	r5, #0
 80170d0:	4606      	mov	r6, r0
 80170d2:	db01      	blt.n	80170d8 <_malloc_r+0x1c>
 80170d4:	42a9      	cmp	r1, r5
 80170d6:	d904      	bls.n	80170e2 <_malloc_r+0x26>
 80170d8:	230c      	movs	r3, #12
 80170da:	6033      	str	r3, [r6, #0]
 80170dc:	2000      	movs	r0, #0
 80170de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80171b8 <_malloc_r+0xfc>
 80170e6:	f000 f869 	bl	80171bc <__malloc_lock>
 80170ea:	f8d8 3000 	ldr.w	r3, [r8]
 80170ee:	461c      	mov	r4, r3
 80170f0:	bb44      	cbnz	r4, 8017144 <_malloc_r+0x88>
 80170f2:	4629      	mov	r1, r5
 80170f4:	4630      	mov	r0, r6
 80170f6:	f7ff ffbf 	bl	8017078 <sbrk_aligned>
 80170fa:	1c43      	adds	r3, r0, #1
 80170fc:	4604      	mov	r4, r0
 80170fe:	d158      	bne.n	80171b2 <_malloc_r+0xf6>
 8017100:	f8d8 4000 	ldr.w	r4, [r8]
 8017104:	4627      	mov	r7, r4
 8017106:	2f00      	cmp	r7, #0
 8017108:	d143      	bne.n	8017192 <_malloc_r+0xd6>
 801710a:	2c00      	cmp	r4, #0
 801710c:	d04b      	beq.n	80171a6 <_malloc_r+0xea>
 801710e:	6823      	ldr	r3, [r4, #0]
 8017110:	4639      	mov	r1, r7
 8017112:	4630      	mov	r0, r6
 8017114:	eb04 0903 	add.w	r9, r4, r3
 8017118:	f001 fe9a 	bl	8018e50 <_sbrk_r>
 801711c:	4581      	cmp	r9, r0
 801711e:	d142      	bne.n	80171a6 <_malloc_r+0xea>
 8017120:	6821      	ldr	r1, [r4, #0]
 8017122:	1a6d      	subs	r5, r5, r1
 8017124:	4629      	mov	r1, r5
 8017126:	4630      	mov	r0, r6
 8017128:	f7ff ffa6 	bl	8017078 <sbrk_aligned>
 801712c:	3001      	adds	r0, #1
 801712e:	d03a      	beq.n	80171a6 <_malloc_r+0xea>
 8017130:	6823      	ldr	r3, [r4, #0]
 8017132:	442b      	add	r3, r5
 8017134:	6023      	str	r3, [r4, #0]
 8017136:	f8d8 3000 	ldr.w	r3, [r8]
 801713a:	685a      	ldr	r2, [r3, #4]
 801713c:	bb62      	cbnz	r2, 8017198 <_malloc_r+0xdc>
 801713e:	f8c8 7000 	str.w	r7, [r8]
 8017142:	e00f      	b.n	8017164 <_malloc_r+0xa8>
 8017144:	6822      	ldr	r2, [r4, #0]
 8017146:	1b52      	subs	r2, r2, r5
 8017148:	d420      	bmi.n	801718c <_malloc_r+0xd0>
 801714a:	2a0b      	cmp	r2, #11
 801714c:	d917      	bls.n	801717e <_malloc_r+0xc2>
 801714e:	1961      	adds	r1, r4, r5
 8017150:	42a3      	cmp	r3, r4
 8017152:	6025      	str	r5, [r4, #0]
 8017154:	bf18      	it	ne
 8017156:	6059      	strne	r1, [r3, #4]
 8017158:	6863      	ldr	r3, [r4, #4]
 801715a:	bf08      	it	eq
 801715c:	f8c8 1000 	streq.w	r1, [r8]
 8017160:	5162      	str	r2, [r4, r5]
 8017162:	604b      	str	r3, [r1, #4]
 8017164:	4630      	mov	r0, r6
 8017166:	f000 f82f 	bl	80171c8 <__malloc_unlock>
 801716a:	f104 000b 	add.w	r0, r4, #11
 801716e:	1d23      	adds	r3, r4, #4
 8017170:	f020 0007 	bic.w	r0, r0, #7
 8017174:	1ac2      	subs	r2, r0, r3
 8017176:	bf1c      	itt	ne
 8017178:	1a1b      	subne	r3, r3, r0
 801717a:	50a3      	strne	r3, [r4, r2]
 801717c:	e7af      	b.n	80170de <_malloc_r+0x22>
 801717e:	6862      	ldr	r2, [r4, #4]
 8017180:	42a3      	cmp	r3, r4
 8017182:	bf0c      	ite	eq
 8017184:	f8c8 2000 	streq.w	r2, [r8]
 8017188:	605a      	strne	r2, [r3, #4]
 801718a:	e7eb      	b.n	8017164 <_malloc_r+0xa8>
 801718c:	4623      	mov	r3, r4
 801718e:	6864      	ldr	r4, [r4, #4]
 8017190:	e7ae      	b.n	80170f0 <_malloc_r+0x34>
 8017192:	463c      	mov	r4, r7
 8017194:	687f      	ldr	r7, [r7, #4]
 8017196:	e7b6      	b.n	8017106 <_malloc_r+0x4a>
 8017198:	461a      	mov	r2, r3
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	42a3      	cmp	r3, r4
 801719e:	d1fb      	bne.n	8017198 <_malloc_r+0xdc>
 80171a0:	2300      	movs	r3, #0
 80171a2:	6053      	str	r3, [r2, #4]
 80171a4:	e7de      	b.n	8017164 <_malloc_r+0xa8>
 80171a6:	230c      	movs	r3, #12
 80171a8:	6033      	str	r3, [r6, #0]
 80171aa:	4630      	mov	r0, r6
 80171ac:	f000 f80c 	bl	80171c8 <__malloc_unlock>
 80171b0:	e794      	b.n	80170dc <_malloc_r+0x20>
 80171b2:	6005      	str	r5, [r0, #0]
 80171b4:	e7d6      	b.n	8017164 <_malloc_r+0xa8>
 80171b6:	bf00      	nop
 80171b8:	24008630 	.word	0x24008630

080171bc <__malloc_lock>:
 80171bc:	4801      	ldr	r0, [pc, #4]	@ (80171c4 <__malloc_lock+0x8>)
 80171be:	f7ff b8ec 	b.w	801639a <__retarget_lock_acquire_recursive>
 80171c2:	bf00      	nop
 80171c4:	24008628 	.word	0x24008628

080171c8 <__malloc_unlock>:
 80171c8:	4801      	ldr	r0, [pc, #4]	@ (80171d0 <__malloc_unlock+0x8>)
 80171ca:	f7ff b8e7 	b.w	801639c <__retarget_lock_release_recursive>
 80171ce:	bf00      	nop
 80171d0:	24008628 	.word	0x24008628

080171d4 <_Balloc>:
 80171d4:	b570      	push	{r4, r5, r6, lr}
 80171d6:	69c6      	ldr	r6, [r0, #28]
 80171d8:	4604      	mov	r4, r0
 80171da:	460d      	mov	r5, r1
 80171dc:	b976      	cbnz	r6, 80171fc <_Balloc+0x28>
 80171de:	2010      	movs	r0, #16
 80171e0:	f7ff ff42 	bl	8017068 <malloc>
 80171e4:	4602      	mov	r2, r0
 80171e6:	61e0      	str	r0, [r4, #28]
 80171e8:	b920      	cbnz	r0, 80171f4 <_Balloc+0x20>
 80171ea:	4b18      	ldr	r3, [pc, #96]	@ (801724c <_Balloc+0x78>)
 80171ec:	4818      	ldr	r0, [pc, #96]	@ (8017250 <_Balloc+0x7c>)
 80171ee:	216b      	movs	r1, #107	@ 0x6b
 80171f0:	f7ff f8ea 	bl	80163c8 <__assert_func>
 80171f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80171f8:	6006      	str	r6, [r0, #0]
 80171fa:	60c6      	str	r6, [r0, #12]
 80171fc:	69e6      	ldr	r6, [r4, #28]
 80171fe:	68f3      	ldr	r3, [r6, #12]
 8017200:	b183      	cbz	r3, 8017224 <_Balloc+0x50>
 8017202:	69e3      	ldr	r3, [r4, #28]
 8017204:	68db      	ldr	r3, [r3, #12]
 8017206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801720a:	b9b8      	cbnz	r0, 801723c <_Balloc+0x68>
 801720c:	2101      	movs	r1, #1
 801720e:	fa01 f605 	lsl.w	r6, r1, r5
 8017212:	1d72      	adds	r2, r6, #5
 8017214:	0092      	lsls	r2, r2, #2
 8017216:	4620      	mov	r0, r4
 8017218:	f001 fe39 	bl	8018e8e <_calloc_r>
 801721c:	b160      	cbz	r0, 8017238 <_Balloc+0x64>
 801721e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017222:	e00e      	b.n	8017242 <_Balloc+0x6e>
 8017224:	2221      	movs	r2, #33	@ 0x21
 8017226:	2104      	movs	r1, #4
 8017228:	4620      	mov	r0, r4
 801722a:	f001 fe30 	bl	8018e8e <_calloc_r>
 801722e:	69e3      	ldr	r3, [r4, #28]
 8017230:	60f0      	str	r0, [r6, #12]
 8017232:	68db      	ldr	r3, [r3, #12]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d1e4      	bne.n	8017202 <_Balloc+0x2e>
 8017238:	2000      	movs	r0, #0
 801723a:	bd70      	pop	{r4, r5, r6, pc}
 801723c:	6802      	ldr	r2, [r0, #0]
 801723e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017242:	2300      	movs	r3, #0
 8017244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017248:	e7f7      	b.n	801723a <_Balloc+0x66>
 801724a:	bf00      	nop
 801724c:	0801c33a 	.word	0x0801c33a
 8017250:	0801c494 	.word	0x0801c494

08017254 <_Bfree>:
 8017254:	b570      	push	{r4, r5, r6, lr}
 8017256:	69c6      	ldr	r6, [r0, #28]
 8017258:	4605      	mov	r5, r0
 801725a:	460c      	mov	r4, r1
 801725c:	b976      	cbnz	r6, 801727c <_Bfree+0x28>
 801725e:	2010      	movs	r0, #16
 8017260:	f7ff ff02 	bl	8017068 <malloc>
 8017264:	4602      	mov	r2, r0
 8017266:	61e8      	str	r0, [r5, #28]
 8017268:	b920      	cbnz	r0, 8017274 <_Bfree+0x20>
 801726a:	4b09      	ldr	r3, [pc, #36]	@ (8017290 <_Bfree+0x3c>)
 801726c:	4809      	ldr	r0, [pc, #36]	@ (8017294 <_Bfree+0x40>)
 801726e:	218f      	movs	r1, #143	@ 0x8f
 8017270:	f7ff f8aa 	bl	80163c8 <__assert_func>
 8017274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017278:	6006      	str	r6, [r0, #0]
 801727a:	60c6      	str	r6, [r0, #12]
 801727c:	b13c      	cbz	r4, 801728e <_Bfree+0x3a>
 801727e:	69eb      	ldr	r3, [r5, #28]
 8017280:	6862      	ldr	r2, [r4, #4]
 8017282:	68db      	ldr	r3, [r3, #12]
 8017284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017288:	6021      	str	r1, [r4, #0]
 801728a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801728e:	bd70      	pop	{r4, r5, r6, pc}
 8017290:	0801c33a 	.word	0x0801c33a
 8017294:	0801c494 	.word	0x0801c494

08017298 <__multadd>:
 8017298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801729c:	690d      	ldr	r5, [r1, #16]
 801729e:	4607      	mov	r7, r0
 80172a0:	460c      	mov	r4, r1
 80172a2:	461e      	mov	r6, r3
 80172a4:	f101 0c14 	add.w	ip, r1, #20
 80172a8:	2000      	movs	r0, #0
 80172aa:	f8dc 3000 	ldr.w	r3, [ip]
 80172ae:	b299      	uxth	r1, r3
 80172b0:	fb02 6101 	mla	r1, r2, r1, r6
 80172b4:	0c1e      	lsrs	r6, r3, #16
 80172b6:	0c0b      	lsrs	r3, r1, #16
 80172b8:	fb02 3306 	mla	r3, r2, r6, r3
 80172bc:	b289      	uxth	r1, r1
 80172be:	3001      	adds	r0, #1
 80172c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80172c4:	4285      	cmp	r5, r0
 80172c6:	f84c 1b04 	str.w	r1, [ip], #4
 80172ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80172ce:	dcec      	bgt.n	80172aa <__multadd+0x12>
 80172d0:	b30e      	cbz	r6, 8017316 <__multadd+0x7e>
 80172d2:	68a3      	ldr	r3, [r4, #8]
 80172d4:	42ab      	cmp	r3, r5
 80172d6:	dc19      	bgt.n	801730c <__multadd+0x74>
 80172d8:	6861      	ldr	r1, [r4, #4]
 80172da:	4638      	mov	r0, r7
 80172dc:	3101      	adds	r1, #1
 80172de:	f7ff ff79 	bl	80171d4 <_Balloc>
 80172e2:	4680      	mov	r8, r0
 80172e4:	b928      	cbnz	r0, 80172f2 <__multadd+0x5a>
 80172e6:	4602      	mov	r2, r0
 80172e8:	4b0c      	ldr	r3, [pc, #48]	@ (801731c <__multadd+0x84>)
 80172ea:	480d      	ldr	r0, [pc, #52]	@ (8017320 <__multadd+0x88>)
 80172ec:	21ba      	movs	r1, #186	@ 0xba
 80172ee:	f7ff f86b 	bl	80163c8 <__assert_func>
 80172f2:	6922      	ldr	r2, [r4, #16]
 80172f4:	3202      	adds	r2, #2
 80172f6:	f104 010c 	add.w	r1, r4, #12
 80172fa:	0092      	lsls	r2, r2, #2
 80172fc:	300c      	adds	r0, #12
 80172fe:	f7ff f84e 	bl	801639e <memcpy>
 8017302:	4621      	mov	r1, r4
 8017304:	4638      	mov	r0, r7
 8017306:	f7ff ffa5 	bl	8017254 <_Bfree>
 801730a:	4644      	mov	r4, r8
 801730c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017310:	3501      	adds	r5, #1
 8017312:	615e      	str	r6, [r3, #20]
 8017314:	6125      	str	r5, [r4, #16]
 8017316:	4620      	mov	r0, r4
 8017318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801731c:	0801c483 	.word	0x0801c483
 8017320:	0801c494 	.word	0x0801c494

08017324 <__s2b>:
 8017324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017328:	460c      	mov	r4, r1
 801732a:	4615      	mov	r5, r2
 801732c:	461f      	mov	r7, r3
 801732e:	2209      	movs	r2, #9
 8017330:	3308      	adds	r3, #8
 8017332:	4606      	mov	r6, r0
 8017334:	fb93 f3f2 	sdiv	r3, r3, r2
 8017338:	2100      	movs	r1, #0
 801733a:	2201      	movs	r2, #1
 801733c:	429a      	cmp	r2, r3
 801733e:	db09      	blt.n	8017354 <__s2b+0x30>
 8017340:	4630      	mov	r0, r6
 8017342:	f7ff ff47 	bl	80171d4 <_Balloc>
 8017346:	b940      	cbnz	r0, 801735a <__s2b+0x36>
 8017348:	4602      	mov	r2, r0
 801734a:	4b19      	ldr	r3, [pc, #100]	@ (80173b0 <__s2b+0x8c>)
 801734c:	4819      	ldr	r0, [pc, #100]	@ (80173b4 <__s2b+0x90>)
 801734e:	21d3      	movs	r1, #211	@ 0xd3
 8017350:	f7ff f83a 	bl	80163c8 <__assert_func>
 8017354:	0052      	lsls	r2, r2, #1
 8017356:	3101      	adds	r1, #1
 8017358:	e7f0      	b.n	801733c <__s2b+0x18>
 801735a:	9b08      	ldr	r3, [sp, #32]
 801735c:	6143      	str	r3, [r0, #20]
 801735e:	2d09      	cmp	r5, #9
 8017360:	f04f 0301 	mov.w	r3, #1
 8017364:	6103      	str	r3, [r0, #16]
 8017366:	dd16      	ble.n	8017396 <__s2b+0x72>
 8017368:	f104 0909 	add.w	r9, r4, #9
 801736c:	46c8      	mov	r8, r9
 801736e:	442c      	add	r4, r5
 8017370:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017374:	4601      	mov	r1, r0
 8017376:	3b30      	subs	r3, #48	@ 0x30
 8017378:	220a      	movs	r2, #10
 801737a:	4630      	mov	r0, r6
 801737c:	f7ff ff8c 	bl	8017298 <__multadd>
 8017380:	45a0      	cmp	r8, r4
 8017382:	d1f5      	bne.n	8017370 <__s2b+0x4c>
 8017384:	f1a5 0408 	sub.w	r4, r5, #8
 8017388:	444c      	add	r4, r9
 801738a:	1b2d      	subs	r5, r5, r4
 801738c:	1963      	adds	r3, r4, r5
 801738e:	42bb      	cmp	r3, r7
 8017390:	db04      	blt.n	801739c <__s2b+0x78>
 8017392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017396:	340a      	adds	r4, #10
 8017398:	2509      	movs	r5, #9
 801739a:	e7f6      	b.n	801738a <__s2b+0x66>
 801739c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80173a0:	4601      	mov	r1, r0
 80173a2:	3b30      	subs	r3, #48	@ 0x30
 80173a4:	220a      	movs	r2, #10
 80173a6:	4630      	mov	r0, r6
 80173a8:	f7ff ff76 	bl	8017298 <__multadd>
 80173ac:	e7ee      	b.n	801738c <__s2b+0x68>
 80173ae:	bf00      	nop
 80173b0:	0801c483 	.word	0x0801c483
 80173b4:	0801c494 	.word	0x0801c494

080173b8 <__hi0bits>:
 80173b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80173bc:	4603      	mov	r3, r0
 80173be:	bf36      	itet	cc
 80173c0:	0403      	lslcc	r3, r0, #16
 80173c2:	2000      	movcs	r0, #0
 80173c4:	2010      	movcc	r0, #16
 80173c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80173ca:	bf3c      	itt	cc
 80173cc:	021b      	lslcc	r3, r3, #8
 80173ce:	3008      	addcc	r0, #8
 80173d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80173d4:	bf3c      	itt	cc
 80173d6:	011b      	lslcc	r3, r3, #4
 80173d8:	3004      	addcc	r0, #4
 80173da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80173de:	bf3c      	itt	cc
 80173e0:	009b      	lslcc	r3, r3, #2
 80173e2:	3002      	addcc	r0, #2
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	db05      	blt.n	80173f4 <__hi0bits+0x3c>
 80173e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80173ec:	f100 0001 	add.w	r0, r0, #1
 80173f0:	bf08      	it	eq
 80173f2:	2020      	moveq	r0, #32
 80173f4:	4770      	bx	lr

080173f6 <__lo0bits>:
 80173f6:	6803      	ldr	r3, [r0, #0]
 80173f8:	4602      	mov	r2, r0
 80173fa:	f013 0007 	ands.w	r0, r3, #7
 80173fe:	d00b      	beq.n	8017418 <__lo0bits+0x22>
 8017400:	07d9      	lsls	r1, r3, #31
 8017402:	d421      	bmi.n	8017448 <__lo0bits+0x52>
 8017404:	0798      	lsls	r0, r3, #30
 8017406:	bf49      	itett	mi
 8017408:	085b      	lsrmi	r3, r3, #1
 801740a:	089b      	lsrpl	r3, r3, #2
 801740c:	2001      	movmi	r0, #1
 801740e:	6013      	strmi	r3, [r2, #0]
 8017410:	bf5c      	itt	pl
 8017412:	6013      	strpl	r3, [r2, #0]
 8017414:	2002      	movpl	r0, #2
 8017416:	4770      	bx	lr
 8017418:	b299      	uxth	r1, r3
 801741a:	b909      	cbnz	r1, 8017420 <__lo0bits+0x2a>
 801741c:	0c1b      	lsrs	r3, r3, #16
 801741e:	2010      	movs	r0, #16
 8017420:	b2d9      	uxtb	r1, r3
 8017422:	b909      	cbnz	r1, 8017428 <__lo0bits+0x32>
 8017424:	3008      	adds	r0, #8
 8017426:	0a1b      	lsrs	r3, r3, #8
 8017428:	0719      	lsls	r1, r3, #28
 801742a:	bf04      	itt	eq
 801742c:	091b      	lsreq	r3, r3, #4
 801742e:	3004      	addeq	r0, #4
 8017430:	0799      	lsls	r1, r3, #30
 8017432:	bf04      	itt	eq
 8017434:	089b      	lsreq	r3, r3, #2
 8017436:	3002      	addeq	r0, #2
 8017438:	07d9      	lsls	r1, r3, #31
 801743a:	d403      	bmi.n	8017444 <__lo0bits+0x4e>
 801743c:	085b      	lsrs	r3, r3, #1
 801743e:	f100 0001 	add.w	r0, r0, #1
 8017442:	d003      	beq.n	801744c <__lo0bits+0x56>
 8017444:	6013      	str	r3, [r2, #0]
 8017446:	4770      	bx	lr
 8017448:	2000      	movs	r0, #0
 801744a:	4770      	bx	lr
 801744c:	2020      	movs	r0, #32
 801744e:	4770      	bx	lr

08017450 <__i2b>:
 8017450:	b510      	push	{r4, lr}
 8017452:	460c      	mov	r4, r1
 8017454:	2101      	movs	r1, #1
 8017456:	f7ff febd 	bl	80171d4 <_Balloc>
 801745a:	4602      	mov	r2, r0
 801745c:	b928      	cbnz	r0, 801746a <__i2b+0x1a>
 801745e:	4b05      	ldr	r3, [pc, #20]	@ (8017474 <__i2b+0x24>)
 8017460:	4805      	ldr	r0, [pc, #20]	@ (8017478 <__i2b+0x28>)
 8017462:	f240 1145 	movw	r1, #325	@ 0x145
 8017466:	f7fe ffaf 	bl	80163c8 <__assert_func>
 801746a:	2301      	movs	r3, #1
 801746c:	6144      	str	r4, [r0, #20]
 801746e:	6103      	str	r3, [r0, #16]
 8017470:	bd10      	pop	{r4, pc}
 8017472:	bf00      	nop
 8017474:	0801c483 	.word	0x0801c483
 8017478:	0801c494 	.word	0x0801c494

0801747c <__multiply>:
 801747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017480:	4617      	mov	r7, r2
 8017482:	690a      	ldr	r2, [r1, #16]
 8017484:	693b      	ldr	r3, [r7, #16]
 8017486:	429a      	cmp	r2, r3
 8017488:	bfa8      	it	ge
 801748a:	463b      	movge	r3, r7
 801748c:	4689      	mov	r9, r1
 801748e:	bfa4      	itt	ge
 8017490:	460f      	movge	r7, r1
 8017492:	4699      	movge	r9, r3
 8017494:	693d      	ldr	r5, [r7, #16]
 8017496:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801749a:	68bb      	ldr	r3, [r7, #8]
 801749c:	6879      	ldr	r1, [r7, #4]
 801749e:	eb05 060a 	add.w	r6, r5, sl
 80174a2:	42b3      	cmp	r3, r6
 80174a4:	b085      	sub	sp, #20
 80174a6:	bfb8      	it	lt
 80174a8:	3101      	addlt	r1, #1
 80174aa:	f7ff fe93 	bl	80171d4 <_Balloc>
 80174ae:	b930      	cbnz	r0, 80174be <__multiply+0x42>
 80174b0:	4602      	mov	r2, r0
 80174b2:	4b41      	ldr	r3, [pc, #260]	@ (80175b8 <__multiply+0x13c>)
 80174b4:	4841      	ldr	r0, [pc, #260]	@ (80175bc <__multiply+0x140>)
 80174b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80174ba:	f7fe ff85 	bl	80163c8 <__assert_func>
 80174be:	f100 0414 	add.w	r4, r0, #20
 80174c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80174c6:	4623      	mov	r3, r4
 80174c8:	2200      	movs	r2, #0
 80174ca:	4573      	cmp	r3, lr
 80174cc:	d320      	bcc.n	8017510 <__multiply+0x94>
 80174ce:	f107 0814 	add.w	r8, r7, #20
 80174d2:	f109 0114 	add.w	r1, r9, #20
 80174d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80174da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80174de:	9302      	str	r3, [sp, #8]
 80174e0:	1beb      	subs	r3, r5, r7
 80174e2:	3b15      	subs	r3, #21
 80174e4:	f023 0303 	bic.w	r3, r3, #3
 80174e8:	3304      	adds	r3, #4
 80174ea:	3715      	adds	r7, #21
 80174ec:	42bd      	cmp	r5, r7
 80174ee:	bf38      	it	cc
 80174f0:	2304      	movcc	r3, #4
 80174f2:	9301      	str	r3, [sp, #4]
 80174f4:	9b02      	ldr	r3, [sp, #8]
 80174f6:	9103      	str	r1, [sp, #12]
 80174f8:	428b      	cmp	r3, r1
 80174fa:	d80c      	bhi.n	8017516 <__multiply+0x9a>
 80174fc:	2e00      	cmp	r6, #0
 80174fe:	dd03      	ble.n	8017508 <__multiply+0x8c>
 8017500:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017504:	2b00      	cmp	r3, #0
 8017506:	d055      	beq.n	80175b4 <__multiply+0x138>
 8017508:	6106      	str	r6, [r0, #16]
 801750a:	b005      	add	sp, #20
 801750c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017510:	f843 2b04 	str.w	r2, [r3], #4
 8017514:	e7d9      	b.n	80174ca <__multiply+0x4e>
 8017516:	f8b1 a000 	ldrh.w	sl, [r1]
 801751a:	f1ba 0f00 	cmp.w	sl, #0
 801751e:	d01f      	beq.n	8017560 <__multiply+0xe4>
 8017520:	46c4      	mov	ip, r8
 8017522:	46a1      	mov	r9, r4
 8017524:	2700      	movs	r7, #0
 8017526:	f85c 2b04 	ldr.w	r2, [ip], #4
 801752a:	f8d9 3000 	ldr.w	r3, [r9]
 801752e:	fa1f fb82 	uxth.w	fp, r2
 8017532:	b29b      	uxth	r3, r3
 8017534:	fb0a 330b 	mla	r3, sl, fp, r3
 8017538:	443b      	add	r3, r7
 801753a:	f8d9 7000 	ldr.w	r7, [r9]
 801753e:	0c12      	lsrs	r2, r2, #16
 8017540:	0c3f      	lsrs	r7, r7, #16
 8017542:	fb0a 7202 	mla	r2, sl, r2, r7
 8017546:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801754a:	b29b      	uxth	r3, r3
 801754c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017550:	4565      	cmp	r5, ip
 8017552:	f849 3b04 	str.w	r3, [r9], #4
 8017556:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801755a:	d8e4      	bhi.n	8017526 <__multiply+0xaa>
 801755c:	9b01      	ldr	r3, [sp, #4]
 801755e:	50e7      	str	r7, [r4, r3]
 8017560:	9b03      	ldr	r3, [sp, #12]
 8017562:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017566:	3104      	adds	r1, #4
 8017568:	f1b9 0f00 	cmp.w	r9, #0
 801756c:	d020      	beq.n	80175b0 <__multiply+0x134>
 801756e:	6823      	ldr	r3, [r4, #0]
 8017570:	4647      	mov	r7, r8
 8017572:	46a4      	mov	ip, r4
 8017574:	f04f 0a00 	mov.w	sl, #0
 8017578:	f8b7 b000 	ldrh.w	fp, [r7]
 801757c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8017580:	fb09 220b 	mla	r2, r9, fp, r2
 8017584:	4452      	add	r2, sl
 8017586:	b29b      	uxth	r3, r3
 8017588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801758c:	f84c 3b04 	str.w	r3, [ip], #4
 8017590:	f857 3b04 	ldr.w	r3, [r7], #4
 8017594:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017598:	f8bc 3000 	ldrh.w	r3, [ip]
 801759c:	fb09 330a 	mla	r3, r9, sl, r3
 80175a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80175a4:	42bd      	cmp	r5, r7
 80175a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80175aa:	d8e5      	bhi.n	8017578 <__multiply+0xfc>
 80175ac:	9a01      	ldr	r2, [sp, #4]
 80175ae:	50a3      	str	r3, [r4, r2]
 80175b0:	3404      	adds	r4, #4
 80175b2:	e79f      	b.n	80174f4 <__multiply+0x78>
 80175b4:	3e01      	subs	r6, #1
 80175b6:	e7a1      	b.n	80174fc <__multiply+0x80>
 80175b8:	0801c483 	.word	0x0801c483
 80175bc:	0801c494 	.word	0x0801c494

080175c0 <__pow5mult>:
 80175c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175c4:	4615      	mov	r5, r2
 80175c6:	f012 0203 	ands.w	r2, r2, #3
 80175ca:	4607      	mov	r7, r0
 80175cc:	460e      	mov	r6, r1
 80175ce:	d007      	beq.n	80175e0 <__pow5mult+0x20>
 80175d0:	4c25      	ldr	r4, [pc, #148]	@ (8017668 <__pow5mult+0xa8>)
 80175d2:	3a01      	subs	r2, #1
 80175d4:	2300      	movs	r3, #0
 80175d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80175da:	f7ff fe5d 	bl	8017298 <__multadd>
 80175de:	4606      	mov	r6, r0
 80175e0:	10ad      	asrs	r5, r5, #2
 80175e2:	d03d      	beq.n	8017660 <__pow5mult+0xa0>
 80175e4:	69fc      	ldr	r4, [r7, #28]
 80175e6:	b97c      	cbnz	r4, 8017608 <__pow5mult+0x48>
 80175e8:	2010      	movs	r0, #16
 80175ea:	f7ff fd3d 	bl	8017068 <malloc>
 80175ee:	4602      	mov	r2, r0
 80175f0:	61f8      	str	r0, [r7, #28]
 80175f2:	b928      	cbnz	r0, 8017600 <__pow5mult+0x40>
 80175f4:	4b1d      	ldr	r3, [pc, #116]	@ (801766c <__pow5mult+0xac>)
 80175f6:	481e      	ldr	r0, [pc, #120]	@ (8017670 <__pow5mult+0xb0>)
 80175f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80175fc:	f7fe fee4 	bl	80163c8 <__assert_func>
 8017600:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017604:	6004      	str	r4, [r0, #0]
 8017606:	60c4      	str	r4, [r0, #12]
 8017608:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801760c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017610:	b94c      	cbnz	r4, 8017626 <__pow5mult+0x66>
 8017612:	f240 2171 	movw	r1, #625	@ 0x271
 8017616:	4638      	mov	r0, r7
 8017618:	f7ff ff1a 	bl	8017450 <__i2b>
 801761c:	2300      	movs	r3, #0
 801761e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017622:	4604      	mov	r4, r0
 8017624:	6003      	str	r3, [r0, #0]
 8017626:	f04f 0900 	mov.w	r9, #0
 801762a:	07eb      	lsls	r3, r5, #31
 801762c:	d50a      	bpl.n	8017644 <__pow5mult+0x84>
 801762e:	4631      	mov	r1, r6
 8017630:	4622      	mov	r2, r4
 8017632:	4638      	mov	r0, r7
 8017634:	f7ff ff22 	bl	801747c <__multiply>
 8017638:	4631      	mov	r1, r6
 801763a:	4680      	mov	r8, r0
 801763c:	4638      	mov	r0, r7
 801763e:	f7ff fe09 	bl	8017254 <_Bfree>
 8017642:	4646      	mov	r6, r8
 8017644:	106d      	asrs	r5, r5, #1
 8017646:	d00b      	beq.n	8017660 <__pow5mult+0xa0>
 8017648:	6820      	ldr	r0, [r4, #0]
 801764a:	b938      	cbnz	r0, 801765c <__pow5mult+0x9c>
 801764c:	4622      	mov	r2, r4
 801764e:	4621      	mov	r1, r4
 8017650:	4638      	mov	r0, r7
 8017652:	f7ff ff13 	bl	801747c <__multiply>
 8017656:	6020      	str	r0, [r4, #0]
 8017658:	f8c0 9000 	str.w	r9, [r0]
 801765c:	4604      	mov	r4, r0
 801765e:	e7e4      	b.n	801762a <__pow5mult+0x6a>
 8017660:	4630      	mov	r0, r6
 8017662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017666:	bf00      	nop
 8017668:	0801c66c 	.word	0x0801c66c
 801766c:	0801c33a 	.word	0x0801c33a
 8017670:	0801c494 	.word	0x0801c494

08017674 <__lshift>:
 8017674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017678:	460c      	mov	r4, r1
 801767a:	6849      	ldr	r1, [r1, #4]
 801767c:	6923      	ldr	r3, [r4, #16]
 801767e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017682:	68a3      	ldr	r3, [r4, #8]
 8017684:	4607      	mov	r7, r0
 8017686:	4691      	mov	r9, r2
 8017688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801768c:	f108 0601 	add.w	r6, r8, #1
 8017690:	42b3      	cmp	r3, r6
 8017692:	db0b      	blt.n	80176ac <__lshift+0x38>
 8017694:	4638      	mov	r0, r7
 8017696:	f7ff fd9d 	bl	80171d4 <_Balloc>
 801769a:	4605      	mov	r5, r0
 801769c:	b948      	cbnz	r0, 80176b2 <__lshift+0x3e>
 801769e:	4602      	mov	r2, r0
 80176a0:	4b28      	ldr	r3, [pc, #160]	@ (8017744 <__lshift+0xd0>)
 80176a2:	4829      	ldr	r0, [pc, #164]	@ (8017748 <__lshift+0xd4>)
 80176a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80176a8:	f7fe fe8e 	bl	80163c8 <__assert_func>
 80176ac:	3101      	adds	r1, #1
 80176ae:	005b      	lsls	r3, r3, #1
 80176b0:	e7ee      	b.n	8017690 <__lshift+0x1c>
 80176b2:	2300      	movs	r3, #0
 80176b4:	f100 0114 	add.w	r1, r0, #20
 80176b8:	f100 0210 	add.w	r2, r0, #16
 80176bc:	4618      	mov	r0, r3
 80176be:	4553      	cmp	r3, sl
 80176c0:	db33      	blt.n	801772a <__lshift+0xb6>
 80176c2:	6920      	ldr	r0, [r4, #16]
 80176c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80176c8:	f104 0314 	add.w	r3, r4, #20
 80176cc:	f019 091f 	ands.w	r9, r9, #31
 80176d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80176d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80176d8:	d02b      	beq.n	8017732 <__lshift+0xbe>
 80176da:	f1c9 0e20 	rsb	lr, r9, #32
 80176de:	468a      	mov	sl, r1
 80176e0:	2200      	movs	r2, #0
 80176e2:	6818      	ldr	r0, [r3, #0]
 80176e4:	fa00 f009 	lsl.w	r0, r0, r9
 80176e8:	4310      	orrs	r0, r2
 80176ea:	f84a 0b04 	str.w	r0, [sl], #4
 80176ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80176f2:	459c      	cmp	ip, r3
 80176f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80176f8:	d8f3      	bhi.n	80176e2 <__lshift+0x6e>
 80176fa:	ebac 0304 	sub.w	r3, ip, r4
 80176fe:	3b15      	subs	r3, #21
 8017700:	f023 0303 	bic.w	r3, r3, #3
 8017704:	3304      	adds	r3, #4
 8017706:	f104 0015 	add.w	r0, r4, #21
 801770a:	4560      	cmp	r0, ip
 801770c:	bf88      	it	hi
 801770e:	2304      	movhi	r3, #4
 8017710:	50ca      	str	r2, [r1, r3]
 8017712:	b10a      	cbz	r2, 8017718 <__lshift+0xa4>
 8017714:	f108 0602 	add.w	r6, r8, #2
 8017718:	3e01      	subs	r6, #1
 801771a:	4638      	mov	r0, r7
 801771c:	612e      	str	r6, [r5, #16]
 801771e:	4621      	mov	r1, r4
 8017720:	f7ff fd98 	bl	8017254 <_Bfree>
 8017724:	4628      	mov	r0, r5
 8017726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801772a:	f842 0f04 	str.w	r0, [r2, #4]!
 801772e:	3301      	adds	r3, #1
 8017730:	e7c5      	b.n	80176be <__lshift+0x4a>
 8017732:	3904      	subs	r1, #4
 8017734:	f853 2b04 	ldr.w	r2, [r3], #4
 8017738:	f841 2f04 	str.w	r2, [r1, #4]!
 801773c:	459c      	cmp	ip, r3
 801773e:	d8f9      	bhi.n	8017734 <__lshift+0xc0>
 8017740:	e7ea      	b.n	8017718 <__lshift+0xa4>
 8017742:	bf00      	nop
 8017744:	0801c483 	.word	0x0801c483
 8017748:	0801c494 	.word	0x0801c494

0801774c <__mcmp>:
 801774c:	690a      	ldr	r2, [r1, #16]
 801774e:	4603      	mov	r3, r0
 8017750:	6900      	ldr	r0, [r0, #16]
 8017752:	1a80      	subs	r0, r0, r2
 8017754:	b530      	push	{r4, r5, lr}
 8017756:	d10e      	bne.n	8017776 <__mcmp+0x2a>
 8017758:	3314      	adds	r3, #20
 801775a:	3114      	adds	r1, #20
 801775c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017760:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017764:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017768:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801776c:	4295      	cmp	r5, r2
 801776e:	d003      	beq.n	8017778 <__mcmp+0x2c>
 8017770:	d205      	bcs.n	801777e <__mcmp+0x32>
 8017772:	f04f 30ff 	mov.w	r0, #4294967295
 8017776:	bd30      	pop	{r4, r5, pc}
 8017778:	42a3      	cmp	r3, r4
 801777a:	d3f3      	bcc.n	8017764 <__mcmp+0x18>
 801777c:	e7fb      	b.n	8017776 <__mcmp+0x2a>
 801777e:	2001      	movs	r0, #1
 8017780:	e7f9      	b.n	8017776 <__mcmp+0x2a>
	...

08017784 <__mdiff>:
 8017784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017788:	4689      	mov	r9, r1
 801778a:	4606      	mov	r6, r0
 801778c:	4611      	mov	r1, r2
 801778e:	4648      	mov	r0, r9
 8017790:	4614      	mov	r4, r2
 8017792:	f7ff ffdb 	bl	801774c <__mcmp>
 8017796:	1e05      	subs	r5, r0, #0
 8017798:	d112      	bne.n	80177c0 <__mdiff+0x3c>
 801779a:	4629      	mov	r1, r5
 801779c:	4630      	mov	r0, r6
 801779e:	f7ff fd19 	bl	80171d4 <_Balloc>
 80177a2:	4602      	mov	r2, r0
 80177a4:	b928      	cbnz	r0, 80177b2 <__mdiff+0x2e>
 80177a6:	4b3f      	ldr	r3, [pc, #252]	@ (80178a4 <__mdiff+0x120>)
 80177a8:	f240 2137 	movw	r1, #567	@ 0x237
 80177ac:	483e      	ldr	r0, [pc, #248]	@ (80178a8 <__mdiff+0x124>)
 80177ae:	f7fe fe0b 	bl	80163c8 <__assert_func>
 80177b2:	2301      	movs	r3, #1
 80177b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80177b8:	4610      	mov	r0, r2
 80177ba:	b003      	add	sp, #12
 80177bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177c0:	bfbc      	itt	lt
 80177c2:	464b      	movlt	r3, r9
 80177c4:	46a1      	movlt	r9, r4
 80177c6:	4630      	mov	r0, r6
 80177c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80177cc:	bfba      	itte	lt
 80177ce:	461c      	movlt	r4, r3
 80177d0:	2501      	movlt	r5, #1
 80177d2:	2500      	movge	r5, #0
 80177d4:	f7ff fcfe 	bl	80171d4 <_Balloc>
 80177d8:	4602      	mov	r2, r0
 80177da:	b918      	cbnz	r0, 80177e4 <__mdiff+0x60>
 80177dc:	4b31      	ldr	r3, [pc, #196]	@ (80178a4 <__mdiff+0x120>)
 80177de:	f240 2145 	movw	r1, #581	@ 0x245
 80177e2:	e7e3      	b.n	80177ac <__mdiff+0x28>
 80177e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80177e8:	6926      	ldr	r6, [r4, #16]
 80177ea:	60c5      	str	r5, [r0, #12]
 80177ec:	f109 0310 	add.w	r3, r9, #16
 80177f0:	f109 0514 	add.w	r5, r9, #20
 80177f4:	f104 0e14 	add.w	lr, r4, #20
 80177f8:	f100 0b14 	add.w	fp, r0, #20
 80177fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017800:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017804:	9301      	str	r3, [sp, #4]
 8017806:	46d9      	mov	r9, fp
 8017808:	f04f 0c00 	mov.w	ip, #0
 801780c:	9b01      	ldr	r3, [sp, #4]
 801780e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017812:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017816:	9301      	str	r3, [sp, #4]
 8017818:	fa1f f38a 	uxth.w	r3, sl
 801781c:	4619      	mov	r1, r3
 801781e:	b283      	uxth	r3, r0
 8017820:	1acb      	subs	r3, r1, r3
 8017822:	0c00      	lsrs	r0, r0, #16
 8017824:	4463      	add	r3, ip
 8017826:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801782a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801782e:	b29b      	uxth	r3, r3
 8017830:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017834:	4576      	cmp	r6, lr
 8017836:	f849 3b04 	str.w	r3, [r9], #4
 801783a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801783e:	d8e5      	bhi.n	801780c <__mdiff+0x88>
 8017840:	1b33      	subs	r3, r6, r4
 8017842:	3b15      	subs	r3, #21
 8017844:	f023 0303 	bic.w	r3, r3, #3
 8017848:	3415      	adds	r4, #21
 801784a:	3304      	adds	r3, #4
 801784c:	42a6      	cmp	r6, r4
 801784e:	bf38      	it	cc
 8017850:	2304      	movcc	r3, #4
 8017852:	441d      	add	r5, r3
 8017854:	445b      	add	r3, fp
 8017856:	461e      	mov	r6, r3
 8017858:	462c      	mov	r4, r5
 801785a:	4544      	cmp	r4, r8
 801785c:	d30e      	bcc.n	801787c <__mdiff+0xf8>
 801785e:	f108 0103 	add.w	r1, r8, #3
 8017862:	1b49      	subs	r1, r1, r5
 8017864:	f021 0103 	bic.w	r1, r1, #3
 8017868:	3d03      	subs	r5, #3
 801786a:	45a8      	cmp	r8, r5
 801786c:	bf38      	it	cc
 801786e:	2100      	movcc	r1, #0
 8017870:	440b      	add	r3, r1
 8017872:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017876:	b191      	cbz	r1, 801789e <__mdiff+0x11a>
 8017878:	6117      	str	r7, [r2, #16]
 801787a:	e79d      	b.n	80177b8 <__mdiff+0x34>
 801787c:	f854 1b04 	ldr.w	r1, [r4], #4
 8017880:	46e6      	mov	lr, ip
 8017882:	0c08      	lsrs	r0, r1, #16
 8017884:	fa1c fc81 	uxtah	ip, ip, r1
 8017888:	4471      	add	r1, lr
 801788a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801788e:	b289      	uxth	r1, r1
 8017890:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017894:	f846 1b04 	str.w	r1, [r6], #4
 8017898:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801789c:	e7dd      	b.n	801785a <__mdiff+0xd6>
 801789e:	3f01      	subs	r7, #1
 80178a0:	e7e7      	b.n	8017872 <__mdiff+0xee>
 80178a2:	bf00      	nop
 80178a4:	0801c483 	.word	0x0801c483
 80178a8:	0801c494 	.word	0x0801c494

080178ac <__ulp>:
 80178ac:	b082      	sub	sp, #8
 80178ae:	ed8d 0b00 	vstr	d0, [sp]
 80178b2:	9a01      	ldr	r2, [sp, #4]
 80178b4:	4b0f      	ldr	r3, [pc, #60]	@ (80178f4 <__ulp+0x48>)
 80178b6:	4013      	ands	r3, r2
 80178b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80178bc:	2b00      	cmp	r3, #0
 80178be:	dc08      	bgt.n	80178d2 <__ulp+0x26>
 80178c0:	425b      	negs	r3, r3
 80178c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80178c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80178ca:	da04      	bge.n	80178d6 <__ulp+0x2a>
 80178cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80178d0:	4113      	asrs	r3, r2
 80178d2:	2200      	movs	r2, #0
 80178d4:	e008      	b.n	80178e8 <__ulp+0x3c>
 80178d6:	f1a2 0314 	sub.w	r3, r2, #20
 80178da:	2b1e      	cmp	r3, #30
 80178dc:	bfda      	itte	le
 80178de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80178e2:	40da      	lsrle	r2, r3
 80178e4:	2201      	movgt	r2, #1
 80178e6:	2300      	movs	r3, #0
 80178e8:	4619      	mov	r1, r3
 80178ea:	4610      	mov	r0, r2
 80178ec:	ec41 0b10 	vmov	d0, r0, r1
 80178f0:	b002      	add	sp, #8
 80178f2:	4770      	bx	lr
 80178f4:	7ff00000 	.word	0x7ff00000

080178f8 <__b2d>:
 80178f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178fc:	6906      	ldr	r6, [r0, #16]
 80178fe:	f100 0814 	add.w	r8, r0, #20
 8017902:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017906:	1f37      	subs	r7, r6, #4
 8017908:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801790c:	4610      	mov	r0, r2
 801790e:	f7ff fd53 	bl	80173b8 <__hi0bits>
 8017912:	f1c0 0320 	rsb	r3, r0, #32
 8017916:	280a      	cmp	r0, #10
 8017918:	600b      	str	r3, [r1, #0]
 801791a:	491b      	ldr	r1, [pc, #108]	@ (8017988 <__b2d+0x90>)
 801791c:	dc15      	bgt.n	801794a <__b2d+0x52>
 801791e:	f1c0 0c0b 	rsb	ip, r0, #11
 8017922:	fa22 f30c 	lsr.w	r3, r2, ip
 8017926:	45b8      	cmp	r8, r7
 8017928:	ea43 0501 	orr.w	r5, r3, r1
 801792c:	bf34      	ite	cc
 801792e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017932:	2300      	movcs	r3, #0
 8017934:	3015      	adds	r0, #21
 8017936:	fa02 f000 	lsl.w	r0, r2, r0
 801793a:	fa23 f30c 	lsr.w	r3, r3, ip
 801793e:	4303      	orrs	r3, r0
 8017940:	461c      	mov	r4, r3
 8017942:	ec45 4b10 	vmov	d0, r4, r5
 8017946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801794a:	45b8      	cmp	r8, r7
 801794c:	bf3a      	itte	cc
 801794e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017952:	f1a6 0708 	subcc.w	r7, r6, #8
 8017956:	2300      	movcs	r3, #0
 8017958:	380b      	subs	r0, #11
 801795a:	d012      	beq.n	8017982 <__b2d+0x8a>
 801795c:	f1c0 0120 	rsb	r1, r0, #32
 8017960:	fa23 f401 	lsr.w	r4, r3, r1
 8017964:	4082      	lsls	r2, r0
 8017966:	4322      	orrs	r2, r4
 8017968:	4547      	cmp	r7, r8
 801796a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801796e:	bf8c      	ite	hi
 8017970:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017974:	2200      	movls	r2, #0
 8017976:	4083      	lsls	r3, r0
 8017978:	40ca      	lsrs	r2, r1
 801797a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801797e:	4313      	orrs	r3, r2
 8017980:	e7de      	b.n	8017940 <__b2d+0x48>
 8017982:	ea42 0501 	orr.w	r5, r2, r1
 8017986:	e7db      	b.n	8017940 <__b2d+0x48>
 8017988:	3ff00000 	.word	0x3ff00000

0801798c <__d2b>:
 801798c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017990:	460f      	mov	r7, r1
 8017992:	2101      	movs	r1, #1
 8017994:	ec59 8b10 	vmov	r8, r9, d0
 8017998:	4616      	mov	r6, r2
 801799a:	f7ff fc1b 	bl	80171d4 <_Balloc>
 801799e:	4604      	mov	r4, r0
 80179a0:	b930      	cbnz	r0, 80179b0 <__d2b+0x24>
 80179a2:	4602      	mov	r2, r0
 80179a4:	4b23      	ldr	r3, [pc, #140]	@ (8017a34 <__d2b+0xa8>)
 80179a6:	4824      	ldr	r0, [pc, #144]	@ (8017a38 <__d2b+0xac>)
 80179a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80179ac:	f7fe fd0c 	bl	80163c8 <__assert_func>
 80179b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80179b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80179b8:	b10d      	cbz	r5, 80179be <__d2b+0x32>
 80179ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80179be:	9301      	str	r3, [sp, #4]
 80179c0:	f1b8 0300 	subs.w	r3, r8, #0
 80179c4:	d023      	beq.n	8017a0e <__d2b+0x82>
 80179c6:	4668      	mov	r0, sp
 80179c8:	9300      	str	r3, [sp, #0]
 80179ca:	f7ff fd14 	bl	80173f6 <__lo0bits>
 80179ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80179d2:	b1d0      	cbz	r0, 8017a0a <__d2b+0x7e>
 80179d4:	f1c0 0320 	rsb	r3, r0, #32
 80179d8:	fa02 f303 	lsl.w	r3, r2, r3
 80179dc:	430b      	orrs	r3, r1
 80179de:	40c2      	lsrs	r2, r0
 80179e0:	6163      	str	r3, [r4, #20]
 80179e2:	9201      	str	r2, [sp, #4]
 80179e4:	9b01      	ldr	r3, [sp, #4]
 80179e6:	61a3      	str	r3, [r4, #24]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	bf0c      	ite	eq
 80179ec:	2201      	moveq	r2, #1
 80179ee:	2202      	movne	r2, #2
 80179f0:	6122      	str	r2, [r4, #16]
 80179f2:	b1a5      	cbz	r5, 8017a1e <__d2b+0x92>
 80179f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80179f8:	4405      	add	r5, r0
 80179fa:	603d      	str	r5, [r7, #0]
 80179fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017a00:	6030      	str	r0, [r6, #0]
 8017a02:	4620      	mov	r0, r4
 8017a04:	b003      	add	sp, #12
 8017a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a0a:	6161      	str	r1, [r4, #20]
 8017a0c:	e7ea      	b.n	80179e4 <__d2b+0x58>
 8017a0e:	a801      	add	r0, sp, #4
 8017a10:	f7ff fcf1 	bl	80173f6 <__lo0bits>
 8017a14:	9b01      	ldr	r3, [sp, #4]
 8017a16:	6163      	str	r3, [r4, #20]
 8017a18:	3020      	adds	r0, #32
 8017a1a:	2201      	movs	r2, #1
 8017a1c:	e7e8      	b.n	80179f0 <__d2b+0x64>
 8017a1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017a22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017a26:	6038      	str	r0, [r7, #0]
 8017a28:	6918      	ldr	r0, [r3, #16]
 8017a2a:	f7ff fcc5 	bl	80173b8 <__hi0bits>
 8017a2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017a32:	e7e5      	b.n	8017a00 <__d2b+0x74>
 8017a34:	0801c483 	.word	0x0801c483
 8017a38:	0801c494 	.word	0x0801c494

08017a3c <__ratio>:
 8017a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a40:	4688      	mov	r8, r1
 8017a42:	4669      	mov	r1, sp
 8017a44:	4681      	mov	r9, r0
 8017a46:	f7ff ff57 	bl	80178f8 <__b2d>
 8017a4a:	a901      	add	r1, sp, #4
 8017a4c:	4640      	mov	r0, r8
 8017a4e:	ec55 4b10 	vmov	r4, r5, d0
 8017a52:	f7ff ff51 	bl	80178f8 <__b2d>
 8017a56:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017a5a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017a5e:	1ad2      	subs	r2, r2, r3
 8017a60:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017a64:	1a5b      	subs	r3, r3, r1
 8017a66:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017a6a:	ec57 6b10 	vmov	r6, r7, d0
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	bfd6      	itet	le
 8017a72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017a76:	462a      	movgt	r2, r5
 8017a78:	463a      	movle	r2, r7
 8017a7a:	46ab      	mov	fp, r5
 8017a7c:	46a2      	mov	sl, r4
 8017a7e:	bfce      	itee	gt
 8017a80:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017a84:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017a88:	ee00 3a90 	vmovle	s1, r3
 8017a8c:	ec4b ab17 	vmov	d7, sl, fp
 8017a90:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017a94:	b003      	add	sp, #12
 8017a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a9a <__copybits>:
 8017a9a:	3901      	subs	r1, #1
 8017a9c:	b570      	push	{r4, r5, r6, lr}
 8017a9e:	1149      	asrs	r1, r1, #5
 8017aa0:	6914      	ldr	r4, [r2, #16]
 8017aa2:	3101      	adds	r1, #1
 8017aa4:	f102 0314 	add.w	r3, r2, #20
 8017aa8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017aac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017ab0:	1f05      	subs	r5, r0, #4
 8017ab2:	42a3      	cmp	r3, r4
 8017ab4:	d30c      	bcc.n	8017ad0 <__copybits+0x36>
 8017ab6:	1aa3      	subs	r3, r4, r2
 8017ab8:	3b11      	subs	r3, #17
 8017aba:	f023 0303 	bic.w	r3, r3, #3
 8017abe:	3211      	adds	r2, #17
 8017ac0:	42a2      	cmp	r2, r4
 8017ac2:	bf88      	it	hi
 8017ac4:	2300      	movhi	r3, #0
 8017ac6:	4418      	add	r0, r3
 8017ac8:	2300      	movs	r3, #0
 8017aca:	4288      	cmp	r0, r1
 8017acc:	d305      	bcc.n	8017ada <__copybits+0x40>
 8017ace:	bd70      	pop	{r4, r5, r6, pc}
 8017ad0:	f853 6b04 	ldr.w	r6, [r3], #4
 8017ad4:	f845 6f04 	str.w	r6, [r5, #4]!
 8017ad8:	e7eb      	b.n	8017ab2 <__copybits+0x18>
 8017ada:	f840 3b04 	str.w	r3, [r0], #4
 8017ade:	e7f4      	b.n	8017aca <__copybits+0x30>

08017ae0 <__any_on>:
 8017ae0:	f100 0214 	add.w	r2, r0, #20
 8017ae4:	6900      	ldr	r0, [r0, #16]
 8017ae6:	114b      	asrs	r3, r1, #5
 8017ae8:	4298      	cmp	r0, r3
 8017aea:	b510      	push	{r4, lr}
 8017aec:	db11      	blt.n	8017b12 <__any_on+0x32>
 8017aee:	dd0a      	ble.n	8017b06 <__any_on+0x26>
 8017af0:	f011 011f 	ands.w	r1, r1, #31
 8017af4:	d007      	beq.n	8017b06 <__any_on+0x26>
 8017af6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017afa:	fa24 f001 	lsr.w	r0, r4, r1
 8017afe:	fa00 f101 	lsl.w	r1, r0, r1
 8017b02:	428c      	cmp	r4, r1
 8017b04:	d10b      	bne.n	8017b1e <__any_on+0x3e>
 8017b06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017b0a:	4293      	cmp	r3, r2
 8017b0c:	d803      	bhi.n	8017b16 <__any_on+0x36>
 8017b0e:	2000      	movs	r0, #0
 8017b10:	bd10      	pop	{r4, pc}
 8017b12:	4603      	mov	r3, r0
 8017b14:	e7f7      	b.n	8017b06 <__any_on+0x26>
 8017b16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017b1a:	2900      	cmp	r1, #0
 8017b1c:	d0f5      	beq.n	8017b0a <__any_on+0x2a>
 8017b1e:	2001      	movs	r0, #1
 8017b20:	e7f6      	b.n	8017b10 <__any_on+0x30>

08017b22 <sulp>:
 8017b22:	b570      	push	{r4, r5, r6, lr}
 8017b24:	4604      	mov	r4, r0
 8017b26:	460d      	mov	r5, r1
 8017b28:	4616      	mov	r6, r2
 8017b2a:	ec45 4b10 	vmov	d0, r4, r5
 8017b2e:	f7ff febd 	bl	80178ac <__ulp>
 8017b32:	b17e      	cbz	r6, 8017b54 <sulp+0x32>
 8017b34:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017b38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	dd09      	ble.n	8017b54 <sulp+0x32>
 8017b40:	051b      	lsls	r3, r3, #20
 8017b42:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8017b46:	2000      	movs	r0, #0
 8017b48:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8017b4c:	ec41 0b17 	vmov	d7, r0, r1
 8017b50:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017b54:	bd70      	pop	{r4, r5, r6, pc}
	...

08017b58 <_strtod_l>:
 8017b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b5c:	ed2d 8b0a 	vpush	{d8-d12}
 8017b60:	b097      	sub	sp, #92	@ 0x5c
 8017b62:	4688      	mov	r8, r1
 8017b64:	920e      	str	r2, [sp, #56]	@ 0x38
 8017b66:	2200      	movs	r2, #0
 8017b68:	9212      	str	r2, [sp, #72]	@ 0x48
 8017b6a:	9005      	str	r0, [sp, #20]
 8017b6c:	f04f 0a00 	mov.w	sl, #0
 8017b70:	f04f 0b00 	mov.w	fp, #0
 8017b74:	460a      	mov	r2, r1
 8017b76:	9211      	str	r2, [sp, #68]	@ 0x44
 8017b78:	7811      	ldrb	r1, [r2, #0]
 8017b7a:	292b      	cmp	r1, #43	@ 0x2b
 8017b7c:	d04c      	beq.n	8017c18 <_strtod_l+0xc0>
 8017b7e:	d839      	bhi.n	8017bf4 <_strtod_l+0x9c>
 8017b80:	290d      	cmp	r1, #13
 8017b82:	d833      	bhi.n	8017bec <_strtod_l+0x94>
 8017b84:	2908      	cmp	r1, #8
 8017b86:	d833      	bhi.n	8017bf0 <_strtod_l+0x98>
 8017b88:	2900      	cmp	r1, #0
 8017b8a:	d03c      	beq.n	8017c06 <_strtod_l+0xae>
 8017b8c:	2200      	movs	r2, #0
 8017b8e:	9208      	str	r2, [sp, #32]
 8017b90:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8017b92:	782a      	ldrb	r2, [r5, #0]
 8017b94:	2a30      	cmp	r2, #48	@ 0x30
 8017b96:	f040 80b7 	bne.w	8017d08 <_strtod_l+0x1b0>
 8017b9a:	786a      	ldrb	r2, [r5, #1]
 8017b9c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017ba0:	2a58      	cmp	r2, #88	@ 0x58
 8017ba2:	d170      	bne.n	8017c86 <_strtod_l+0x12e>
 8017ba4:	9302      	str	r3, [sp, #8]
 8017ba6:	9b08      	ldr	r3, [sp, #32]
 8017ba8:	9301      	str	r3, [sp, #4]
 8017baa:	ab12      	add	r3, sp, #72	@ 0x48
 8017bac:	9300      	str	r3, [sp, #0]
 8017bae:	4a90      	ldr	r2, [pc, #576]	@ (8017df0 <_strtod_l+0x298>)
 8017bb0:	9805      	ldr	r0, [sp, #20]
 8017bb2:	ab13      	add	r3, sp, #76	@ 0x4c
 8017bb4:	a911      	add	r1, sp, #68	@ 0x44
 8017bb6:	f001 f9e5 	bl	8018f84 <__gethex>
 8017bba:	f010 060f 	ands.w	r6, r0, #15
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	d005      	beq.n	8017bce <_strtod_l+0x76>
 8017bc2:	2e06      	cmp	r6, #6
 8017bc4:	d12a      	bne.n	8017c1c <_strtod_l+0xc4>
 8017bc6:	3501      	adds	r5, #1
 8017bc8:	2300      	movs	r3, #0
 8017bca:	9511      	str	r5, [sp, #68]	@ 0x44
 8017bcc:	9308      	str	r3, [sp, #32]
 8017bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	f040 8537 	bne.w	8018644 <_strtod_l+0xaec>
 8017bd6:	9b08      	ldr	r3, [sp, #32]
 8017bd8:	ec4b ab10 	vmov	d0, sl, fp
 8017bdc:	b1cb      	cbz	r3, 8017c12 <_strtod_l+0xba>
 8017bde:	eeb1 0b40 	vneg.f64	d0, d0
 8017be2:	b017      	add	sp, #92	@ 0x5c
 8017be4:	ecbd 8b0a 	vpop	{d8-d12}
 8017be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bec:	2920      	cmp	r1, #32
 8017bee:	d1cd      	bne.n	8017b8c <_strtod_l+0x34>
 8017bf0:	3201      	adds	r2, #1
 8017bf2:	e7c0      	b.n	8017b76 <_strtod_l+0x1e>
 8017bf4:	292d      	cmp	r1, #45	@ 0x2d
 8017bf6:	d1c9      	bne.n	8017b8c <_strtod_l+0x34>
 8017bf8:	2101      	movs	r1, #1
 8017bfa:	9108      	str	r1, [sp, #32]
 8017bfc:	1c51      	adds	r1, r2, #1
 8017bfe:	9111      	str	r1, [sp, #68]	@ 0x44
 8017c00:	7852      	ldrb	r2, [r2, #1]
 8017c02:	2a00      	cmp	r2, #0
 8017c04:	d1c4      	bne.n	8017b90 <_strtod_l+0x38>
 8017c06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c08:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	f040 8517 	bne.w	8018640 <_strtod_l+0xae8>
 8017c12:	ec4b ab10 	vmov	d0, sl, fp
 8017c16:	e7e4      	b.n	8017be2 <_strtod_l+0x8a>
 8017c18:	2100      	movs	r1, #0
 8017c1a:	e7ee      	b.n	8017bfa <_strtod_l+0xa2>
 8017c1c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017c1e:	b13a      	cbz	r2, 8017c30 <_strtod_l+0xd8>
 8017c20:	2135      	movs	r1, #53	@ 0x35
 8017c22:	a814      	add	r0, sp, #80	@ 0x50
 8017c24:	f7ff ff39 	bl	8017a9a <__copybits>
 8017c28:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017c2a:	9805      	ldr	r0, [sp, #20]
 8017c2c:	f7ff fb12 	bl	8017254 <_Bfree>
 8017c30:	1e73      	subs	r3, r6, #1
 8017c32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017c34:	2b04      	cmp	r3, #4
 8017c36:	d806      	bhi.n	8017c46 <_strtod_l+0xee>
 8017c38:	e8df f003 	tbb	[pc, r3]
 8017c3c:	201d0314 	.word	0x201d0314
 8017c40:	14          	.byte	0x14
 8017c41:	00          	.byte	0x00
 8017c42:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8017c46:	05e3      	lsls	r3, r4, #23
 8017c48:	bf48      	it	mi
 8017c4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8017c4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017c52:	0d1b      	lsrs	r3, r3, #20
 8017c54:	051b      	lsls	r3, r3, #20
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d1b9      	bne.n	8017bce <_strtod_l+0x76>
 8017c5a:	f7fe fb73 	bl	8016344 <__errno>
 8017c5e:	2322      	movs	r3, #34	@ 0x22
 8017c60:	6003      	str	r3, [r0, #0]
 8017c62:	e7b4      	b.n	8017bce <_strtod_l+0x76>
 8017c64:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8017c68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8017c6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8017c70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017c74:	e7e7      	b.n	8017c46 <_strtod_l+0xee>
 8017c76:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8017df8 <_strtod_l+0x2a0>
 8017c7a:	e7e4      	b.n	8017c46 <_strtod_l+0xee>
 8017c7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8017c80:	f04f 3aff 	mov.w	sl, #4294967295
 8017c84:	e7df      	b.n	8017c46 <_strtod_l+0xee>
 8017c86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017c88:	1c5a      	adds	r2, r3, #1
 8017c8a:	9211      	str	r2, [sp, #68]	@ 0x44
 8017c8c:	785b      	ldrb	r3, [r3, #1]
 8017c8e:	2b30      	cmp	r3, #48	@ 0x30
 8017c90:	d0f9      	beq.n	8017c86 <_strtod_l+0x12e>
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d09b      	beq.n	8017bce <_strtod_l+0x76>
 8017c96:	2301      	movs	r3, #1
 8017c98:	9307      	str	r3, [sp, #28]
 8017c9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017c9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	9306      	str	r3, [sp, #24]
 8017ca2:	4699      	mov	r9, r3
 8017ca4:	461d      	mov	r5, r3
 8017ca6:	220a      	movs	r2, #10
 8017ca8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017caa:	7804      	ldrb	r4, [r0, #0]
 8017cac:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8017cb0:	b2d9      	uxtb	r1, r3
 8017cb2:	2909      	cmp	r1, #9
 8017cb4:	d92a      	bls.n	8017d0c <_strtod_l+0x1b4>
 8017cb6:	494f      	ldr	r1, [pc, #316]	@ (8017df4 <_strtod_l+0x29c>)
 8017cb8:	2201      	movs	r2, #1
 8017cba:	f7fe fae7 	bl	801628c <strncmp>
 8017cbe:	b398      	cbz	r0, 8017d28 <_strtod_l+0x1d0>
 8017cc0:	2000      	movs	r0, #0
 8017cc2:	4622      	mov	r2, r4
 8017cc4:	462b      	mov	r3, r5
 8017cc6:	4607      	mov	r7, r0
 8017cc8:	4601      	mov	r1, r0
 8017cca:	2a65      	cmp	r2, #101	@ 0x65
 8017ccc:	d001      	beq.n	8017cd2 <_strtod_l+0x17a>
 8017cce:	2a45      	cmp	r2, #69	@ 0x45
 8017cd0:	d118      	bne.n	8017d04 <_strtod_l+0x1ac>
 8017cd2:	b91b      	cbnz	r3, 8017cdc <_strtod_l+0x184>
 8017cd4:	9b07      	ldr	r3, [sp, #28]
 8017cd6:	4303      	orrs	r3, r0
 8017cd8:	d095      	beq.n	8017c06 <_strtod_l+0xae>
 8017cda:	2300      	movs	r3, #0
 8017cdc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8017ce0:	f108 0201 	add.w	r2, r8, #1
 8017ce4:	9211      	str	r2, [sp, #68]	@ 0x44
 8017ce6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017cea:	2a2b      	cmp	r2, #43	@ 0x2b
 8017cec:	d074      	beq.n	8017dd8 <_strtod_l+0x280>
 8017cee:	2a2d      	cmp	r2, #45	@ 0x2d
 8017cf0:	d07a      	beq.n	8017de8 <_strtod_l+0x290>
 8017cf2:	f04f 0e00 	mov.w	lr, #0
 8017cf6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8017cfa:	2c09      	cmp	r4, #9
 8017cfc:	f240 8082 	bls.w	8017e04 <_strtod_l+0x2ac>
 8017d00:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8017d04:	2400      	movs	r4, #0
 8017d06:	e09d      	b.n	8017e44 <_strtod_l+0x2ec>
 8017d08:	2300      	movs	r3, #0
 8017d0a:	e7c5      	b.n	8017c98 <_strtod_l+0x140>
 8017d0c:	2d08      	cmp	r5, #8
 8017d0e:	bfc8      	it	gt
 8017d10:	9906      	ldrgt	r1, [sp, #24]
 8017d12:	f100 0001 	add.w	r0, r0, #1
 8017d16:	bfca      	itet	gt
 8017d18:	fb02 3301 	mlagt	r3, r2, r1, r3
 8017d1c:	fb02 3909 	mlale	r9, r2, r9, r3
 8017d20:	9306      	strgt	r3, [sp, #24]
 8017d22:	3501      	adds	r5, #1
 8017d24:	9011      	str	r0, [sp, #68]	@ 0x44
 8017d26:	e7bf      	b.n	8017ca8 <_strtod_l+0x150>
 8017d28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017d2a:	1c5a      	adds	r2, r3, #1
 8017d2c:	9211      	str	r2, [sp, #68]	@ 0x44
 8017d2e:	785a      	ldrb	r2, [r3, #1]
 8017d30:	b3bd      	cbz	r5, 8017da2 <_strtod_l+0x24a>
 8017d32:	4607      	mov	r7, r0
 8017d34:	462b      	mov	r3, r5
 8017d36:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8017d3a:	2909      	cmp	r1, #9
 8017d3c:	d912      	bls.n	8017d64 <_strtod_l+0x20c>
 8017d3e:	2101      	movs	r1, #1
 8017d40:	e7c3      	b.n	8017cca <_strtod_l+0x172>
 8017d42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017d44:	1c5a      	adds	r2, r3, #1
 8017d46:	9211      	str	r2, [sp, #68]	@ 0x44
 8017d48:	785a      	ldrb	r2, [r3, #1]
 8017d4a:	3001      	adds	r0, #1
 8017d4c:	2a30      	cmp	r2, #48	@ 0x30
 8017d4e:	d0f8      	beq.n	8017d42 <_strtod_l+0x1ea>
 8017d50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8017d54:	2b08      	cmp	r3, #8
 8017d56:	f200 847a 	bhi.w	801864e <_strtod_l+0xaf6>
 8017d5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017d5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8017d5e:	4607      	mov	r7, r0
 8017d60:	2000      	movs	r0, #0
 8017d62:	4603      	mov	r3, r0
 8017d64:	3a30      	subs	r2, #48	@ 0x30
 8017d66:	f100 0101 	add.w	r1, r0, #1
 8017d6a:	d014      	beq.n	8017d96 <_strtod_l+0x23e>
 8017d6c:	440f      	add	r7, r1
 8017d6e:	469c      	mov	ip, r3
 8017d70:	f04f 0e0a 	mov.w	lr, #10
 8017d74:	f10c 0401 	add.w	r4, ip, #1
 8017d78:	1ae6      	subs	r6, r4, r3
 8017d7a:	42b1      	cmp	r1, r6
 8017d7c:	dc13      	bgt.n	8017da6 <_strtod_l+0x24e>
 8017d7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8017d82:	1819      	adds	r1, r3, r0
 8017d84:	2908      	cmp	r1, #8
 8017d86:	f103 0301 	add.w	r3, r3, #1
 8017d8a:	4403      	add	r3, r0
 8017d8c:	dc19      	bgt.n	8017dc2 <_strtod_l+0x26a>
 8017d8e:	210a      	movs	r1, #10
 8017d90:	fb01 2909 	mla	r9, r1, r9, r2
 8017d94:	2100      	movs	r1, #0
 8017d96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017d98:	1c50      	adds	r0, r2, #1
 8017d9a:	9011      	str	r0, [sp, #68]	@ 0x44
 8017d9c:	7852      	ldrb	r2, [r2, #1]
 8017d9e:	4608      	mov	r0, r1
 8017da0:	e7c9      	b.n	8017d36 <_strtod_l+0x1de>
 8017da2:	4628      	mov	r0, r5
 8017da4:	e7d2      	b.n	8017d4c <_strtod_l+0x1f4>
 8017da6:	f1bc 0f08 	cmp.w	ip, #8
 8017daa:	dc03      	bgt.n	8017db4 <_strtod_l+0x25c>
 8017dac:	fb0e f909 	mul.w	r9, lr, r9
 8017db0:	46a4      	mov	ip, r4
 8017db2:	e7df      	b.n	8017d74 <_strtod_l+0x21c>
 8017db4:	2c10      	cmp	r4, #16
 8017db6:	bfde      	ittt	le
 8017db8:	9e06      	ldrle	r6, [sp, #24]
 8017dba:	fb0e f606 	mulle.w	r6, lr, r6
 8017dbe:	9606      	strle	r6, [sp, #24]
 8017dc0:	e7f6      	b.n	8017db0 <_strtod_l+0x258>
 8017dc2:	290f      	cmp	r1, #15
 8017dc4:	bfdf      	itttt	le
 8017dc6:	9806      	ldrle	r0, [sp, #24]
 8017dc8:	210a      	movle	r1, #10
 8017dca:	fb01 2200 	mlale	r2, r1, r0, r2
 8017dce:	9206      	strle	r2, [sp, #24]
 8017dd0:	e7e0      	b.n	8017d94 <_strtod_l+0x23c>
 8017dd2:	2700      	movs	r7, #0
 8017dd4:	2101      	movs	r1, #1
 8017dd6:	e77d      	b.n	8017cd4 <_strtod_l+0x17c>
 8017dd8:	f04f 0e00 	mov.w	lr, #0
 8017ddc:	f108 0202 	add.w	r2, r8, #2
 8017de0:	9211      	str	r2, [sp, #68]	@ 0x44
 8017de2:	f898 2002 	ldrb.w	r2, [r8, #2]
 8017de6:	e786      	b.n	8017cf6 <_strtod_l+0x19e>
 8017de8:	f04f 0e01 	mov.w	lr, #1
 8017dec:	e7f6      	b.n	8017ddc <_strtod_l+0x284>
 8017dee:	bf00      	nop
 8017df0:	0801c77c 	.word	0x0801c77c
 8017df4:	0801c4ed 	.word	0x0801c4ed
 8017df8:	7ff00000 	.word	0x7ff00000
 8017dfc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017dfe:	1c54      	adds	r4, r2, #1
 8017e00:	9411      	str	r4, [sp, #68]	@ 0x44
 8017e02:	7852      	ldrb	r2, [r2, #1]
 8017e04:	2a30      	cmp	r2, #48	@ 0x30
 8017e06:	d0f9      	beq.n	8017dfc <_strtod_l+0x2a4>
 8017e08:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8017e0c:	2c08      	cmp	r4, #8
 8017e0e:	f63f af79 	bhi.w	8017d04 <_strtod_l+0x1ac>
 8017e12:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8017e16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017e18:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017e1c:	1c54      	adds	r4, r2, #1
 8017e1e:	9411      	str	r4, [sp, #68]	@ 0x44
 8017e20:	7852      	ldrb	r2, [r2, #1]
 8017e22:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8017e26:	2e09      	cmp	r6, #9
 8017e28:	d937      	bls.n	8017e9a <_strtod_l+0x342>
 8017e2a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8017e2c:	1ba4      	subs	r4, r4, r6
 8017e2e:	2c08      	cmp	r4, #8
 8017e30:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8017e34:	dc02      	bgt.n	8017e3c <_strtod_l+0x2e4>
 8017e36:	4564      	cmp	r4, ip
 8017e38:	bfa8      	it	ge
 8017e3a:	4664      	movge	r4, ip
 8017e3c:	f1be 0f00 	cmp.w	lr, #0
 8017e40:	d000      	beq.n	8017e44 <_strtod_l+0x2ec>
 8017e42:	4264      	negs	r4, r4
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d14d      	bne.n	8017ee4 <_strtod_l+0x38c>
 8017e48:	9b07      	ldr	r3, [sp, #28]
 8017e4a:	4318      	orrs	r0, r3
 8017e4c:	f47f aebf 	bne.w	8017bce <_strtod_l+0x76>
 8017e50:	2900      	cmp	r1, #0
 8017e52:	f47f aed8 	bne.w	8017c06 <_strtod_l+0xae>
 8017e56:	2a69      	cmp	r2, #105	@ 0x69
 8017e58:	d027      	beq.n	8017eaa <_strtod_l+0x352>
 8017e5a:	dc24      	bgt.n	8017ea6 <_strtod_l+0x34e>
 8017e5c:	2a49      	cmp	r2, #73	@ 0x49
 8017e5e:	d024      	beq.n	8017eaa <_strtod_l+0x352>
 8017e60:	2a4e      	cmp	r2, #78	@ 0x4e
 8017e62:	f47f aed0 	bne.w	8017c06 <_strtod_l+0xae>
 8017e66:	4997      	ldr	r1, [pc, #604]	@ (80180c4 <_strtod_l+0x56c>)
 8017e68:	a811      	add	r0, sp, #68	@ 0x44
 8017e6a:	f001 faad 	bl	80193c8 <__match>
 8017e6e:	2800      	cmp	r0, #0
 8017e70:	f43f aec9 	beq.w	8017c06 <_strtod_l+0xae>
 8017e74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017e76:	781b      	ldrb	r3, [r3, #0]
 8017e78:	2b28      	cmp	r3, #40	@ 0x28
 8017e7a:	d12d      	bne.n	8017ed8 <_strtod_l+0x380>
 8017e7c:	4992      	ldr	r1, [pc, #584]	@ (80180c8 <_strtod_l+0x570>)
 8017e7e:	aa14      	add	r2, sp, #80	@ 0x50
 8017e80:	a811      	add	r0, sp, #68	@ 0x44
 8017e82:	f001 fab5 	bl	80193f0 <__hexnan>
 8017e86:	2805      	cmp	r0, #5
 8017e88:	d126      	bne.n	8017ed8 <_strtod_l+0x380>
 8017e8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017e8c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8017e90:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017e94:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8017e98:	e699      	b.n	8017bce <_strtod_l+0x76>
 8017e9a:	240a      	movs	r4, #10
 8017e9c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8017ea0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8017ea4:	e7b9      	b.n	8017e1a <_strtod_l+0x2c2>
 8017ea6:	2a6e      	cmp	r2, #110	@ 0x6e
 8017ea8:	e7db      	b.n	8017e62 <_strtod_l+0x30a>
 8017eaa:	4988      	ldr	r1, [pc, #544]	@ (80180cc <_strtod_l+0x574>)
 8017eac:	a811      	add	r0, sp, #68	@ 0x44
 8017eae:	f001 fa8b 	bl	80193c8 <__match>
 8017eb2:	2800      	cmp	r0, #0
 8017eb4:	f43f aea7 	beq.w	8017c06 <_strtod_l+0xae>
 8017eb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017eba:	4985      	ldr	r1, [pc, #532]	@ (80180d0 <_strtod_l+0x578>)
 8017ebc:	3b01      	subs	r3, #1
 8017ebe:	a811      	add	r0, sp, #68	@ 0x44
 8017ec0:	9311      	str	r3, [sp, #68]	@ 0x44
 8017ec2:	f001 fa81 	bl	80193c8 <__match>
 8017ec6:	b910      	cbnz	r0, 8017ece <_strtod_l+0x376>
 8017ec8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017eca:	3301      	adds	r3, #1
 8017ecc:	9311      	str	r3, [sp, #68]	@ 0x44
 8017ece:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80180e4 <_strtod_l+0x58c>
 8017ed2:	f04f 0a00 	mov.w	sl, #0
 8017ed6:	e67a      	b.n	8017bce <_strtod_l+0x76>
 8017ed8:	487e      	ldr	r0, [pc, #504]	@ (80180d4 <_strtod_l+0x57c>)
 8017eda:	f000 ffc9 	bl	8018e70 <nan>
 8017ede:	ec5b ab10 	vmov	sl, fp, d0
 8017ee2:	e674      	b.n	8017bce <_strtod_l+0x76>
 8017ee4:	ee07 9a90 	vmov	s15, r9
 8017ee8:	1be2      	subs	r2, r4, r7
 8017eea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017eee:	2d00      	cmp	r5, #0
 8017ef0:	bf08      	it	eq
 8017ef2:	461d      	moveq	r5, r3
 8017ef4:	2b10      	cmp	r3, #16
 8017ef6:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ef8:	461a      	mov	r2, r3
 8017efa:	bfa8      	it	ge
 8017efc:	2210      	movge	r2, #16
 8017efe:	2b09      	cmp	r3, #9
 8017f00:	ec5b ab17 	vmov	sl, fp, d7
 8017f04:	dc15      	bgt.n	8017f32 <_strtod_l+0x3da>
 8017f06:	1be1      	subs	r1, r4, r7
 8017f08:	2900      	cmp	r1, #0
 8017f0a:	f43f ae60 	beq.w	8017bce <_strtod_l+0x76>
 8017f0e:	eba4 0107 	sub.w	r1, r4, r7
 8017f12:	dd72      	ble.n	8017ffa <_strtod_l+0x4a2>
 8017f14:	2916      	cmp	r1, #22
 8017f16:	dc59      	bgt.n	8017fcc <_strtod_l+0x474>
 8017f18:	4b6f      	ldr	r3, [pc, #444]	@ (80180d8 <_strtod_l+0x580>)
 8017f1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f20:	ed93 7b00 	vldr	d7, [r3]
 8017f24:	ec4b ab16 	vmov	d6, sl, fp
 8017f28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017f2c:	ec5b ab17 	vmov	sl, fp, d7
 8017f30:	e64d      	b.n	8017bce <_strtod_l+0x76>
 8017f32:	4969      	ldr	r1, [pc, #420]	@ (80180d8 <_strtod_l+0x580>)
 8017f34:	eddd 6a06 	vldr	s13, [sp, #24]
 8017f38:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017f3c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8017f40:	2b0f      	cmp	r3, #15
 8017f42:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8017f46:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017f4a:	ec5b ab16 	vmov	sl, fp, d6
 8017f4e:	ddda      	ble.n	8017f06 <_strtod_l+0x3ae>
 8017f50:	1a9a      	subs	r2, r3, r2
 8017f52:	1be1      	subs	r1, r4, r7
 8017f54:	440a      	add	r2, r1
 8017f56:	2a00      	cmp	r2, #0
 8017f58:	f340 8094 	ble.w	8018084 <_strtod_l+0x52c>
 8017f5c:	f012 000f 	ands.w	r0, r2, #15
 8017f60:	d00a      	beq.n	8017f78 <_strtod_l+0x420>
 8017f62:	495d      	ldr	r1, [pc, #372]	@ (80180d8 <_strtod_l+0x580>)
 8017f64:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017f68:	ed91 7b00 	vldr	d7, [r1]
 8017f6c:	ec4b ab16 	vmov	d6, sl, fp
 8017f70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017f74:	ec5b ab17 	vmov	sl, fp, d7
 8017f78:	f032 020f 	bics.w	r2, r2, #15
 8017f7c:	d073      	beq.n	8018066 <_strtod_l+0x50e>
 8017f7e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8017f82:	dd47      	ble.n	8018014 <_strtod_l+0x4bc>
 8017f84:	2400      	movs	r4, #0
 8017f86:	4625      	mov	r5, r4
 8017f88:	9407      	str	r4, [sp, #28]
 8017f8a:	4626      	mov	r6, r4
 8017f8c:	9a05      	ldr	r2, [sp, #20]
 8017f8e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80180e4 <_strtod_l+0x58c>
 8017f92:	2322      	movs	r3, #34	@ 0x22
 8017f94:	6013      	str	r3, [r2, #0]
 8017f96:	f04f 0a00 	mov.w	sl, #0
 8017f9a:	9b07      	ldr	r3, [sp, #28]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	f43f ae16 	beq.w	8017bce <_strtod_l+0x76>
 8017fa2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017fa4:	9805      	ldr	r0, [sp, #20]
 8017fa6:	f7ff f955 	bl	8017254 <_Bfree>
 8017faa:	9805      	ldr	r0, [sp, #20]
 8017fac:	4631      	mov	r1, r6
 8017fae:	f7ff f951 	bl	8017254 <_Bfree>
 8017fb2:	9805      	ldr	r0, [sp, #20]
 8017fb4:	4629      	mov	r1, r5
 8017fb6:	f7ff f94d 	bl	8017254 <_Bfree>
 8017fba:	9907      	ldr	r1, [sp, #28]
 8017fbc:	9805      	ldr	r0, [sp, #20]
 8017fbe:	f7ff f949 	bl	8017254 <_Bfree>
 8017fc2:	9805      	ldr	r0, [sp, #20]
 8017fc4:	4621      	mov	r1, r4
 8017fc6:	f7ff f945 	bl	8017254 <_Bfree>
 8017fca:	e600      	b.n	8017bce <_strtod_l+0x76>
 8017fcc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8017fd0:	1be0      	subs	r0, r4, r7
 8017fd2:	4281      	cmp	r1, r0
 8017fd4:	dbbc      	blt.n	8017f50 <_strtod_l+0x3f8>
 8017fd6:	4a40      	ldr	r2, [pc, #256]	@ (80180d8 <_strtod_l+0x580>)
 8017fd8:	f1c3 030f 	rsb	r3, r3, #15
 8017fdc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8017fe0:	ed91 7b00 	vldr	d7, [r1]
 8017fe4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017fe6:	ec4b ab16 	vmov	d6, sl, fp
 8017fea:	1acb      	subs	r3, r1, r3
 8017fec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017ff0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017ff4:	ed92 6b00 	vldr	d6, [r2]
 8017ff8:	e796      	b.n	8017f28 <_strtod_l+0x3d0>
 8017ffa:	3116      	adds	r1, #22
 8017ffc:	dba8      	blt.n	8017f50 <_strtod_l+0x3f8>
 8017ffe:	4b36      	ldr	r3, [pc, #216]	@ (80180d8 <_strtod_l+0x580>)
 8018000:	1b3c      	subs	r4, r7, r4
 8018002:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018006:	ed94 7b00 	vldr	d7, [r4]
 801800a:	ec4b ab16 	vmov	d6, sl, fp
 801800e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018012:	e78b      	b.n	8017f2c <_strtod_l+0x3d4>
 8018014:	2000      	movs	r0, #0
 8018016:	ec4b ab17 	vmov	d7, sl, fp
 801801a:	4e30      	ldr	r6, [pc, #192]	@ (80180dc <_strtod_l+0x584>)
 801801c:	1112      	asrs	r2, r2, #4
 801801e:	4601      	mov	r1, r0
 8018020:	2a01      	cmp	r2, #1
 8018022:	dc23      	bgt.n	801806c <_strtod_l+0x514>
 8018024:	b108      	cbz	r0, 801802a <_strtod_l+0x4d2>
 8018026:	ec5b ab17 	vmov	sl, fp, d7
 801802a:	4a2c      	ldr	r2, [pc, #176]	@ (80180dc <_strtod_l+0x584>)
 801802c:	482c      	ldr	r0, [pc, #176]	@ (80180e0 <_strtod_l+0x588>)
 801802e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018032:	ed92 7b00 	vldr	d7, [r2]
 8018036:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801803a:	ec4b ab16 	vmov	d6, sl, fp
 801803e:	4a29      	ldr	r2, [pc, #164]	@ (80180e4 <_strtod_l+0x58c>)
 8018040:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018044:	ee17 1a90 	vmov	r1, s15
 8018048:	400a      	ands	r2, r1
 801804a:	4282      	cmp	r2, r0
 801804c:	ec5b ab17 	vmov	sl, fp, d7
 8018050:	d898      	bhi.n	8017f84 <_strtod_l+0x42c>
 8018052:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8018056:	4282      	cmp	r2, r0
 8018058:	bf86      	itte	hi
 801805a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80180e8 <_strtod_l+0x590>
 801805e:	f04f 3aff 	movhi.w	sl, #4294967295
 8018062:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8018066:	2200      	movs	r2, #0
 8018068:	9206      	str	r2, [sp, #24]
 801806a:	e076      	b.n	801815a <_strtod_l+0x602>
 801806c:	f012 0f01 	tst.w	r2, #1
 8018070:	d004      	beq.n	801807c <_strtod_l+0x524>
 8018072:	ed96 6b00 	vldr	d6, [r6]
 8018076:	2001      	movs	r0, #1
 8018078:	ee27 7b06 	vmul.f64	d7, d7, d6
 801807c:	3101      	adds	r1, #1
 801807e:	1052      	asrs	r2, r2, #1
 8018080:	3608      	adds	r6, #8
 8018082:	e7cd      	b.n	8018020 <_strtod_l+0x4c8>
 8018084:	d0ef      	beq.n	8018066 <_strtod_l+0x50e>
 8018086:	4252      	negs	r2, r2
 8018088:	f012 000f 	ands.w	r0, r2, #15
 801808c:	d00a      	beq.n	80180a4 <_strtod_l+0x54c>
 801808e:	4912      	ldr	r1, [pc, #72]	@ (80180d8 <_strtod_l+0x580>)
 8018090:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018094:	ed91 7b00 	vldr	d7, [r1]
 8018098:	ec4b ab16 	vmov	d6, sl, fp
 801809c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80180a0:	ec5b ab17 	vmov	sl, fp, d7
 80180a4:	1112      	asrs	r2, r2, #4
 80180a6:	d0de      	beq.n	8018066 <_strtod_l+0x50e>
 80180a8:	2a1f      	cmp	r2, #31
 80180aa:	dd1f      	ble.n	80180ec <_strtod_l+0x594>
 80180ac:	2400      	movs	r4, #0
 80180ae:	4625      	mov	r5, r4
 80180b0:	9407      	str	r4, [sp, #28]
 80180b2:	4626      	mov	r6, r4
 80180b4:	9a05      	ldr	r2, [sp, #20]
 80180b6:	2322      	movs	r3, #34	@ 0x22
 80180b8:	f04f 0a00 	mov.w	sl, #0
 80180bc:	f04f 0b00 	mov.w	fp, #0
 80180c0:	6013      	str	r3, [r2, #0]
 80180c2:	e76a      	b.n	8017f9a <_strtod_l+0x442>
 80180c4:	0801c3b6 	.word	0x0801c3b6
 80180c8:	0801c768 	.word	0x0801c768
 80180cc:	0801c3ae 	.word	0x0801c3ae
 80180d0:	0801c421 	.word	0x0801c421
 80180d4:	0801c41d 	.word	0x0801c41d
 80180d8:	0801c6a0 	.word	0x0801c6a0
 80180dc:	0801c678 	.word	0x0801c678
 80180e0:	7ca00000 	.word	0x7ca00000
 80180e4:	7ff00000 	.word	0x7ff00000
 80180e8:	7fefffff 	.word	0x7fefffff
 80180ec:	f012 0110 	ands.w	r1, r2, #16
 80180f0:	bf18      	it	ne
 80180f2:	216a      	movne	r1, #106	@ 0x6a
 80180f4:	9106      	str	r1, [sp, #24]
 80180f6:	ec4b ab17 	vmov	d7, sl, fp
 80180fa:	49af      	ldr	r1, [pc, #700]	@ (80183b8 <_strtod_l+0x860>)
 80180fc:	2000      	movs	r0, #0
 80180fe:	07d6      	lsls	r6, r2, #31
 8018100:	d504      	bpl.n	801810c <_strtod_l+0x5b4>
 8018102:	ed91 6b00 	vldr	d6, [r1]
 8018106:	2001      	movs	r0, #1
 8018108:	ee27 7b06 	vmul.f64	d7, d7, d6
 801810c:	1052      	asrs	r2, r2, #1
 801810e:	f101 0108 	add.w	r1, r1, #8
 8018112:	d1f4      	bne.n	80180fe <_strtod_l+0x5a6>
 8018114:	b108      	cbz	r0, 801811a <_strtod_l+0x5c2>
 8018116:	ec5b ab17 	vmov	sl, fp, d7
 801811a:	9a06      	ldr	r2, [sp, #24]
 801811c:	b1b2      	cbz	r2, 801814c <_strtod_l+0x5f4>
 801811e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8018122:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8018126:	2a00      	cmp	r2, #0
 8018128:	4658      	mov	r0, fp
 801812a:	dd0f      	ble.n	801814c <_strtod_l+0x5f4>
 801812c:	2a1f      	cmp	r2, #31
 801812e:	dd55      	ble.n	80181dc <_strtod_l+0x684>
 8018130:	2a34      	cmp	r2, #52	@ 0x34
 8018132:	bfde      	ittt	le
 8018134:	f04f 32ff 	movle.w	r2, #4294967295
 8018138:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 801813c:	408a      	lslle	r2, r1
 801813e:	f04f 0a00 	mov.w	sl, #0
 8018142:	bfcc      	ite	gt
 8018144:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018148:	ea02 0b00 	andle.w	fp, r2, r0
 801814c:	ec4b ab17 	vmov	d7, sl, fp
 8018150:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018158:	d0a8      	beq.n	80180ac <_strtod_l+0x554>
 801815a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801815c:	9805      	ldr	r0, [sp, #20]
 801815e:	f8cd 9000 	str.w	r9, [sp]
 8018162:	462a      	mov	r2, r5
 8018164:	f7ff f8de 	bl	8017324 <__s2b>
 8018168:	9007      	str	r0, [sp, #28]
 801816a:	2800      	cmp	r0, #0
 801816c:	f43f af0a 	beq.w	8017f84 <_strtod_l+0x42c>
 8018170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018172:	1b3f      	subs	r7, r7, r4
 8018174:	2b00      	cmp	r3, #0
 8018176:	bfb4      	ite	lt
 8018178:	463b      	movlt	r3, r7
 801817a:	2300      	movge	r3, #0
 801817c:	930a      	str	r3, [sp, #40]	@ 0x28
 801817e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018180:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80183a8 <_strtod_l+0x850>
 8018184:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018188:	2400      	movs	r4, #0
 801818a:	930d      	str	r3, [sp, #52]	@ 0x34
 801818c:	4625      	mov	r5, r4
 801818e:	9b07      	ldr	r3, [sp, #28]
 8018190:	9805      	ldr	r0, [sp, #20]
 8018192:	6859      	ldr	r1, [r3, #4]
 8018194:	f7ff f81e 	bl	80171d4 <_Balloc>
 8018198:	4606      	mov	r6, r0
 801819a:	2800      	cmp	r0, #0
 801819c:	f43f aef6 	beq.w	8017f8c <_strtod_l+0x434>
 80181a0:	9b07      	ldr	r3, [sp, #28]
 80181a2:	691a      	ldr	r2, [r3, #16]
 80181a4:	ec4b ab19 	vmov	d9, sl, fp
 80181a8:	3202      	adds	r2, #2
 80181aa:	f103 010c 	add.w	r1, r3, #12
 80181ae:	0092      	lsls	r2, r2, #2
 80181b0:	300c      	adds	r0, #12
 80181b2:	f7fe f8f4 	bl	801639e <memcpy>
 80181b6:	eeb0 0b49 	vmov.f64	d0, d9
 80181ba:	9805      	ldr	r0, [sp, #20]
 80181bc:	aa14      	add	r2, sp, #80	@ 0x50
 80181be:	a913      	add	r1, sp, #76	@ 0x4c
 80181c0:	f7ff fbe4 	bl	801798c <__d2b>
 80181c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80181c6:	2800      	cmp	r0, #0
 80181c8:	f43f aee0 	beq.w	8017f8c <_strtod_l+0x434>
 80181cc:	9805      	ldr	r0, [sp, #20]
 80181ce:	2101      	movs	r1, #1
 80181d0:	f7ff f93e 	bl	8017450 <__i2b>
 80181d4:	4605      	mov	r5, r0
 80181d6:	b940      	cbnz	r0, 80181ea <_strtod_l+0x692>
 80181d8:	2500      	movs	r5, #0
 80181da:	e6d7      	b.n	8017f8c <_strtod_l+0x434>
 80181dc:	f04f 31ff 	mov.w	r1, #4294967295
 80181e0:	fa01 f202 	lsl.w	r2, r1, r2
 80181e4:	ea02 0a0a 	and.w	sl, r2, sl
 80181e8:	e7b0      	b.n	801814c <_strtod_l+0x5f4>
 80181ea:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80181ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80181ee:	2f00      	cmp	r7, #0
 80181f0:	bfab      	itete	ge
 80181f2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80181f4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80181f6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80181fa:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80181fe:	bfac      	ite	ge
 8018200:	eb07 0903 	addge.w	r9, r7, r3
 8018204:	eba3 0807 	sublt.w	r8, r3, r7
 8018208:	9b06      	ldr	r3, [sp, #24]
 801820a:	1aff      	subs	r7, r7, r3
 801820c:	4417      	add	r7, r2
 801820e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8018212:	4a6a      	ldr	r2, [pc, #424]	@ (80183bc <_strtod_l+0x864>)
 8018214:	3f01      	subs	r7, #1
 8018216:	4297      	cmp	r7, r2
 8018218:	da51      	bge.n	80182be <_strtod_l+0x766>
 801821a:	1bd1      	subs	r1, r2, r7
 801821c:	291f      	cmp	r1, #31
 801821e:	eba3 0301 	sub.w	r3, r3, r1
 8018222:	f04f 0201 	mov.w	r2, #1
 8018226:	dc3e      	bgt.n	80182a6 <_strtod_l+0x74e>
 8018228:	408a      	lsls	r2, r1
 801822a:	920c      	str	r2, [sp, #48]	@ 0x30
 801822c:	2200      	movs	r2, #0
 801822e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018230:	eb09 0703 	add.w	r7, r9, r3
 8018234:	4498      	add	r8, r3
 8018236:	9b06      	ldr	r3, [sp, #24]
 8018238:	45b9      	cmp	r9, r7
 801823a:	4498      	add	r8, r3
 801823c:	464b      	mov	r3, r9
 801823e:	bfa8      	it	ge
 8018240:	463b      	movge	r3, r7
 8018242:	4543      	cmp	r3, r8
 8018244:	bfa8      	it	ge
 8018246:	4643      	movge	r3, r8
 8018248:	2b00      	cmp	r3, #0
 801824a:	bfc2      	ittt	gt
 801824c:	1aff      	subgt	r7, r7, r3
 801824e:	eba8 0803 	subgt.w	r8, r8, r3
 8018252:	eba9 0903 	subgt.w	r9, r9, r3
 8018256:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018258:	2b00      	cmp	r3, #0
 801825a:	dd16      	ble.n	801828a <_strtod_l+0x732>
 801825c:	4629      	mov	r1, r5
 801825e:	9805      	ldr	r0, [sp, #20]
 8018260:	461a      	mov	r2, r3
 8018262:	f7ff f9ad 	bl	80175c0 <__pow5mult>
 8018266:	4605      	mov	r5, r0
 8018268:	2800      	cmp	r0, #0
 801826a:	d0b5      	beq.n	80181d8 <_strtod_l+0x680>
 801826c:	4601      	mov	r1, r0
 801826e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018270:	9805      	ldr	r0, [sp, #20]
 8018272:	f7ff f903 	bl	801747c <__multiply>
 8018276:	900f      	str	r0, [sp, #60]	@ 0x3c
 8018278:	2800      	cmp	r0, #0
 801827a:	f43f ae87 	beq.w	8017f8c <_strtod_l+0x434>
 801827e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018280:	9805      	ldr	r0, [sp, #20]
 8018282:	f7fe ffe7 	bl	8017254 <_Bfree>
 8018286:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018288:	9312      	str	r3, [sp, #72]	@ 0x48
 801828a:	2f00      	cmp	r7, #0
 801828c:	dc1b      	bgt.n	80182c6 <_strtod_l+0x76e>
 801828e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018290:	2b00      	cmp	r3, #0
 8018292:	dd21      	ble.n	80182d8 <_strtod_l+0x780>
 8018294:	4631      	mov	r1, r6
 8018296:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018298:	9805      	ldr	r0, [sp, #20]
 801829a:	f7ff f991 	bl	80175c0 <__pow5mult>
 801829e:	4606      	mov	r6, r0
 80182a0:	b9d0      	cbnz	r0, 80182d8 <_strtod_l+0x780>
 80182a2:	2600      	movs	r6, #0
 80182a4:	e672      	b.n	8017f8c <_strtod_l+0x434>
 80182a6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80182aa:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80182ae:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80182b2:	37e2      	adds	r7, #226	@ 0xe2
 80182b4:	fa02 f107 	lsl.w	r1, r2, r7
 80182b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80182ba:	920c      	str	r2, [sp, #48]	@ 0x30
 80182bc:	e7b8      	b.n	8018230 <_strtod_l+0x6d8>
 80182be:	2200      	movs	r2, #0
 80182c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80182c2:	2201      	movs	r2, #1
 80182c4:	e7f9      	b.n	80182ba <_strtod_l+0x762>
 80182c6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80182c8:	9805      	ldr	r0, [sp, #20]
 80182ca:	463a      	mov	r2, r7
 80182cc:	f7ff f9d2 	bl	8017674 <__lshift>
 80182d0:	9012      	str	r0, [sp, #72]	@ 0x48
 80182d2:	2800      	cmp	r0, #0
 80182d4:	d1db      	bne.n	801828e <_strtod_l+0x736>
 80182d6:	e659      	b.n	8017f8c <_strtod_l+0x434>
 80182d8:	f1b8 0f00 	cmp.w	r8, #0
 80182dc:	dd07      	ble.n	80182ee <_strtod_l+0x796>
 80182de:	4631      	mov	r1, r6
 80182e0:	9805      	ldr	r0, [sp, #20]
 80182e2:	4642      	mov	r2, r8
 80182e4:	f7ff f9c6 	bl	8017674 <__lshift>
 80182e8:	4606      	mov	r6, r0
 80182ea:	2800      	cmp	r0, #0
 80182ec:	d0d9      	beq.n	80182a2 <_strtod_l+0x74a>
 80182ee:	f1b9 0f00 	cmp.w	r9, #0
 80182f2:	dd08      	ble.n	8018306 <_strtod_l+0x7ae>
 80182f4:	4629      	mov	r1, r5
 80182f6:	9805      	ldr	r0, [sp, #20]
 80182f8:	464a      	mov	r2, r9
 80182fa:	f7ff f9bb 	bl	8017674 <__lshift>
 80182fe:	4605      	mov	r5, r0
 8018300:	2800      	cmp	r0, #0
 8018302:	f43f ae43 	beq.w	8017f8c <_strtod_l+0x434>
 8018306:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018308:	9805      	ldr	r0, [sp, #20]
 801830a:	4632      	mov	r2, r6
 801830c:	f7ff fa3a 	bl	8017784 <__mdiff>
 8018310:	4604      	mov	r4, r0
 8018312:	2800      	cmp	r0, #0
 8018314:	f43f ae3a 	beq.w	8017f8c <_strtod_l+0x434>
 8018318:	2300      	movs	r3, #0
 801831a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801831e:	60c3      	str	r3, [r0, #12]
 8018320:	4629      	mov	r1, r5
 8018322:	f7ff fa13 	bl	801774c <__mcmp>
 8018326:	2800      	cmp	r0, #0
 8018328:	da4c      	bge.n	80183c4 <_strtod_l+0x86c>
 801832a:	ea58 080a 	orrs.w	r8, r8, sl
 801832e:	d172      	bne.n	8018416 <_strtod_l+0x8be>
 8018330:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018334:	2b00      	cmp	r3, #0
 8018336:	d16e      	bne.n	8018416 <_strtod_l+0x8be>
 8018338:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801833c:	0d1b      	lsrs	r3, r3, #20
 801833e:	051b      	lsls	r3, r3, #20
 8018340:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018344:	d967      	bls.n	8018416 <_strtod_l+0x8be>
 8018346:	6963      	ldr	r3, [r4, #20]
 8018348:	b913      	cbnz	r3, 8018350 <_strtod_l+0x7f8>
 801834a:	6923      	ldr	r3, [r4, #16]
 801834c:	2b01      	cmp	r3, #1
 801834e:	dd62      	ble.n	8018416 <_strtod_l+0x8be>
 8018350:	4621      	mov	r1, r4
 8018352:	2201      	movs	r2, #1
 8018354:	9805      	ldr	r0, [sp, #20]
 8018356:	f7ff f98d 	bl	8017674 <__lshift>
 801835a:	4629      	mov	r1, r5
 801835c:	4604      	mov	r4, r0
 801835e:	f7ff f9f5 	bl	801774c <__mcmp>
 8018362:	2800      	cmp	r0, #0
 8018364:	dd57      	ble.n	8018416 <_strtod_l+0x8be>
 8018366:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801836a:	9a06      	ldr	r2, [sp, #24]
 801836c:	0d1b      	lsrs	r3, r3, #20
 801836e:	051b      	lsls	r3, r3, #20
 8018370:	2a00      	cmp	r2, #0
 8018372:	d06e      	beq.n	8018452 <_strtod_l+0x8fa>
 8018374:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018378:	d86b      	bhi.n	8018452 <_strtod_l+0x8fa>
 801837a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801837e:	f67f ae99 	bls.w	80180b4 <_strtod_l+0x55c>
 8018382:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80183b0 <_strtod_l+0x858>
 8018386:	ec4b ab16 	vmov	d6, sl, fp
 801838a:	4b0d      	ldr	r3, [pc, #52]	@ (80183c0 <_strtod_l+0x868>)
 801838c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018390:	ee17 2a90 	vmov	r2, s15
 8018394:	4013      	ands	r3, r2
 8018396:	ec5b ab17 	vmov	sl, fp, d7
 801839a:	2b00      	cmp	r3, #0
 801839c:	f47f ae01 	bne.w	8017fa2 <_strtod_l+0x44a>
 80183a0:	9a05      	ldr	r2, [sp, #20]
 80183a2:	2322      	movs	r3, #34	@ 0x22
 80183a4:	6013      	str	r3, [r2, #0]
 80183a6:	e5fc      	b.n	8017fa2 <_strtod_l+0x44a>
 80183a8:	ffc00000 	.word	0xffc00000
 80183ac:	41dfffff 	.word	0x41dfffff
 80183b0:	00000000 	.word	0x00000000
 80183b4:	39500000 	.word	0x39500000
 80183b8:	0801c790 	.word	0x0801c790
 80183bc:	fffffc02 	.word	0xfffffc02
 80183c0:	7ff00000 	.word	0x7ff00000
 80183c4:	46d9      	mov	r9, fp
 80183c6:	d15d      	bne.n	8018484 <_strtod_l+0x92c>
 80183c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80183cc:	f1b8 0f00 	cmp.w	r8, #0
 80183d0:	d02a      	beq.n	8018428 <_strtod_l+0x8d0>
 80183d2:	4aa9      	ldr	r2, [pc, #676]	@ (8018678 <_strtod_l+0xb20>)
 80183d4:	4293      	cmp	r3, r2
 80183d6:	d12a      	bne.n	801842e <_strtod_l+0x8d6>
 80183d8:	9b06      	ldr	r3, [sp, #24]
 80183da:	4652      	mov	r2, sl
 80183dc:	b1fb      	cbz	r3, 801841e <_strtod_l+0x8c6>
 80183de:	4ba7      	ldr	r3, [pc, #668]	@ (801867c <_strtod_l+0xb24>)
 80183e0:	ea0b 0303 	and.w	r3, fp, r3
 80183e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80183e8:	f04f 31ff 	mov.w	r1, #4294967295
 80183ec:	d81a      	bhi.n	8018424 <_strtod_l+0x8cc>
 80183ee:	0d1b      	lsrs	r3, r3, #20
 80183f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80183f4:	fa01 f303 	lsl.w	r3, r1, r3
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d118      	bne.n	801842e <_strtod_l+0x8d6>
 80183fc:	4ba0      	ldr	r3, [pc, #640]	@ (8018680 <_strtod_l+0xb28>)
 80183fe:	4599      	cmp	r9, r3
 8018400:	d102      	bne.n	8018408 <_strtod_l+0x8b0>
 8018402:	3201      	adds	r2, #1
 8018404:	f43f adc2 	beq.w	8017f8c <_strtod_l+0x434>
 8018408:	4b9c      	ldr	r3, [pc, #624]	@ (801867c <_strtod_l+0xb24>)
 801840a:	ea09 0303 	and.w	r3, r9, r3
 801840e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8018412:	f04f 0a00 	mov.w	sl, #0
 8018416:	9b06      	ldr	r3, [sp, #24]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d1b2      	bne.n	8018382 <_strtod_l+0x82a>
 801841c:	e5c1      	b.n	8017fa2 <_strtod_l+0x44a>
 801841e:	f04f 33ff 	mov.w	r3, #4294967295
 8018422:	e7e9      	b.n	80183f8 <_strtod_l+0x8a0>
 8018424:	460b      	mov	r3, r1
 8018426:	e7e7      	b.n	80183f8 <_strtod_l+0x8a0>
 8018428:	ea53 030a 	orrs.w	r3, r3, sl
 801842c:	d09b      	beq.n	8018366 <_strtod_l+0x80e>
 801842e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018430:	b1c3      	cbz	r3, 8018464 <_strtod_l+0x90c>
 8018432:	ea13 0f09 	tst.w	r3, r9
 8018436:	d0ee      	beq.n	8018416 <_strtod_l+0x8be>
 8018438:	9a06      	ldr	r2, [sp, #24]
 801843a:	4650      	mov	r0, sl
 801843c:	4659      	mov	r1, fp
 801843e:	f1b8 0f00 	cmp.w	r8, #0
 8018442:	d013      	beq.n	801846c <_strtod_l+0x914>
 8018444:	f7ff fb6d 	bl	8017b22 <sulp>
 8018448:	ee39 7b00 	vadd.f64	d7, d9, d0
 801844c:	ec5b ab17 	vmov	sl, fp, d7
 8018450:	e7e1      	b.n	8018416 <_strtod_l+0x8be>
 8018452:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8018456:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801845a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801845e:	f04f 3aff 	mov.w	sl, #4294967295
 8018462:	e7d8      	b.n	8018416 <_strtod_l+0x8be>
 8018464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018466:	ea13 0f0a 	tst.w	r3, sl
 801846a:	e7e4      	b.n	8018436 <_strtod_l+0x8de>
 801846c:	f7ff fb59 	bl	8017b22 <sulp>
 8018470:	ee39 0b40 	vsub.f64	d0, d9, d0
 8018474:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801847c:	ec5b ab10 	vmov	sl, fp, d0
 8018480:	d1c9      	bne.n	8018416 <_strtod_l+0x8be>
 8018482:	e617      	b.n	80180b4 <_strtod_l+0x55c>
 8018484:	4629      	mov	r1, r5
 8018486:	4620      	mov	r0, r4
 8018488:	f7ff fad8 	bl	8017a3c <__ratio>
 801848c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8018490:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018498:	d85d      	bhi.n	8018556 <_strtod_l+0x9fe>
 801849a:	f1b8 0f00 	cmp.w	r8, #0
 801849e:	d164      	bne.n	801856a <_strtod_l+0xa12>
 80184a0:	f1ba 0f00 	cmp.w	sl, #0
 80184a4:	d14b      	bne.n	801853e <_strtod_l+0x9e6>
 80184a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80184aa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d160      	bne.n	8018574 <_strtod_l+0xa1c>
 80184b2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80184b6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80184ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184be:	d401      	bmi.n	80184c4 <_strtod_l+0x96c>
 80184c0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80184c4:	eeb1 ab48 	vneg.f64	d10, d8
 80184c8:	486c      	ldr	r0, [pc, #432]	@ (801867c <_strtod_l+0xb24>)
 80184ca:	496e      	ldr	r1, [pc, #440]	@ (8018684 <_strtod_l+0xb2c>)
 80184cc:	ea09 0700 	and.w	r7, r9, r0
 80184d0:	428f      	cmp	r7, r1
 80184d2:	ec53 2b1a 	vmov	r2, r3, d10
 80184d6:	d17d      	bne.n	80185d4 <_strtod_l+0xa7c>
 80184d8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80184dc:	ec4b ab1c 	vmov	d12, sl, fp
 80184e0:	eeb0 0b4c 	vmov.f64	d0, d12
 80184e4:	f7ff f9e2 	bl	80178ac <__ulp>
 80184e8:	4864      	ldr	r0, [pc, #400]	@ (801867c <_strtod_l+0xb24>)
 80184ea:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80184ee:	ee1c 3a90 	vmov	r3, s25
 80184f2:	4a65      	ldr	r2, [pc, #404]	@ (8018688 <_strtod_l+0xb30>)
 80184f4:	ea03 0100 	and.w	r1, r3, r0
 80184f8:	4291      	cmp	r1, r2
 80184fa:	ec5b ab1c 	vmov	sl, fp, d12
 80184fe:	d93c      	bls.n	801857a <_strtod_l+0xa22>
 8018500:	ee19 2a90 	vmov	r2, s19
 8018504:	4b5e      	ldr	r3, [pc, #376]	@ (8018680 <_strtod_l+0xb28>)
 8018506:	429a      	cmp	r2, r3
 8018508:	d104      	bne.n	8018514 <_strtod_l+0x9bc>
 801850a:	ee19 3a10 	vmov	r3, s18
 801850e:	3301      	adds	r3, #1
 8018510:	f43f ad3c 	beq.w	8017f8c <_strtod_l+0x434>
 8018514:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8018680 <_strtod_l+0xb28>
 8018518:	f04f 3aff 	mov.w	sl, #4294967295
 801851c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801851e:	9805      	ldr	r0, [sp, #20]
 8018520:	f7fe fe98 	bl	8017254 <_Bfree>
 8018524:	9805      	ldr	r0, [sp, #20]
 8018526:	4631      	mov	r1, r6
 8018528:	f7fe fe94 	bl	8017254 <_Bfree>
 801852c:	9805      	ldr	r0, [sp, #20]
 801852e:	4629      	mov	r1, r5
 8018530:	f7fe fe90 	bl	8017254 <_Bfree>
 8018534:	9805      	ldr	r0, [sp, #20]
 8018536:	4621      	mov	r1, r4
 8018538:	f7fe fe8c 	bl	8017254 <_Bfree>
 801853c:	e627      	b.n	801818e <_strtod_l+0x636>
 801853e:	f1ba 0f01 	cmp.w	sl, #1
 8018542:	d103      	bne.n	801854c <_strtod_l+0x9f4>
 8018544:	f1bb 0f00 	cmp.w	fp, #0
 8018548:	f43f adb4 	beq.w	80180b4 <_strtod_l+0x55c>
 801854c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018550:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8018554:	e7b8      	b.n	80184c8 <_strtod_l+0x970>
 8018556:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801855a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801855e:	f1b8 0f00 	cmp.w	r8, #0
 8018562:	d0af      	beq.n	80184c4 <_strtod_l+0x96c>
 8018564:	eeb0 ab48 	vmov.f64	d10, d8
 8018568:	e7ae      	b.n	80184c8 <_strtod_l+0x970>
 801856a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801856e:	eeb0 8b4a 	vmov.f64	d8, d10
 8018572:	e7a9      	b.n	80184c8 <_strtod_l+0x970>
 8018574:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018578:	e7a6      	b.n	80184c8 <_strtod_l+0x970>
 801857a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801857e:	9b06      	ldr	r3, [sp, #24]
 8018580:	46d9      	mov	r9, fp
 8018582:	2b00      	cmp	r3, #0
 8018584:	d1ca      	bne.n	801851c <_strtod_l+0x9c4>
 8018586:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801858a:	0d1b      	lsrs	r3, r3, #20
 801858c:	051b      	lsls	r3, r3, #20
 801858e:	429f      	cmp	r7, r3
 8018590:	d1c4      	bne.n	801851c <_strtod_l+0x9c4>
 8018592:	ec51 0b18 	vmov	r0, r1, d8
 8018596:	f7e8 f8e7 	bl	8000768 <__aeabi_d2lz>
 801859a:	f7e8 f89f 	bl	80006dc <__aeabi_l2d>
 801859e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80185a2:	ec41 0b17 	vmov	d7, r0, r1
 80185a6:	ea49 090a 	orr.w	r9, r9, sl
 80185aa:	ea59 0908 	orrs.w	r9, r9, r8
 80185ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 80185b2:	d03c      	beq.n	801862e <_strtod_l+0xad6>
 80185b4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018660 <_strtod_l+0xb08>
 80185b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80185bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c0:	f53f acef 	bmi.w	8017fa2 <_strtod_l+0x44a>
 80185c4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8018668 <_strtod_l+0xb10>
 80185c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80185cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185d0:	dda4      	ble.n	801851c <_strtod_l+0x9c4>
 80185d2:	e4e6      	b.n	8017fa2 <_strtod_l+0x44a>
 80185d4:	9906      	ldr	r1, [sp, #24]
 80185d6:	b1e1      	cbz	r1, 8018612 <_strtod_l+0xaba>
 80185d8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80185dc:	d819      	bhi.n	8018612 <_strtod_l+0xaba>
 80185de:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80185e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185e6:	d811      	bhi.n	801860c <_strtod_l+0xab4>
 80185e8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80185ec:	ee18 3a10 	vmov	r3, s16
 80185f0:	2b01      	cmp	r3, #1
 80185f2:	bf38      	it	cc
 80185f4:	2301      	movcc	r3, #1
 80185f6:	ee08 3a10 	vmov	s16, r3
 80185fa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80185fe:	f1b8 0f00 	cmp.w	r8, #0
 8018602:	d111      	bne.n	8018628 <_strtod_l+0xad0>
 8018604:	eeb1 7b48 	vneg.f64	d7, d8
 8018608:	ec53 2b17 	vmov	r2, r3, d7
 801860c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8018610:	1bcb      	subs	r3, r1, r7
 8018612:	eeb0 0b49 	vmov.f64	d0, d9
 8018616:	ec43 2b1a 	vmov	d10, r2, r3
 801861a:	f7ff f947 	bl	80178ac <__ulp>
 801861e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8018622:	ec5b ab19 	vmov	sl, fp, d9
 8018626:	e7aa      	b.n	801857e <_strtod_l+0xa26>
 8018628:	eeb0 7b48 	vmov.f64	d7, d8
 801862c:	e7ec      	b.n	8018608 <_strtod_l+0xab0>
 801862e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8018670 <_strtod_l+0xb18>
 8018632:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801863a:	f57f af6f 	bpl.w	801851c <_strtod_l+0x9c4>
 801863e:	e4b0      	b.n	8017fa2 <_strtod_l+0x44a>
 8018640:	2300      	movs	r3, #0
 8018642:	9308      	str	r3, [sp, #32]
 8018644:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018646:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018648:	6013      	str	r3, [r2, #0]
 801864a:	f7ff bac4 	b.w	8017bd6 <_strtod_l+0x7e>
 801864e:	2a65      	cmp	r2, #101	@ 0x65
 8018650:	f43f abbf 	beq.w	8017dd2 <_strtod_l+0x27a>
 8018654:	2a45      	cmp	r2, #69	@ 0x45
 8018656:	f43f abbc 	beq.w	8017dd2 <_strtod_l+0x27a>
 801865a:	2101      	movs	r1, #1
 801865c:	f7ff bbf4 	b.w	8017e48 <_strtod_l+0x2f0>
 8018660:	94a03595 	.word	0x94a03595
 8018664:	3fdfffff 	.word	0x3fdfffff
 8018668:	35afe535 	.word	0x35afe535
 801866c:	3fe00000 	.word	0x3fe00000
 8018670:	94a03595 	.word	0x94a03595
 8018674:	3fcfffff 	.word	0x3fcfffff
 8018678:	000fffff 	.word	0x000fffff
 801867c:	7ff00000 	.word	0x7ff00000
 8018680:	7fefffff 	.word	0x7fefffff
 8018684:	7fe00000 	.word	0x7fe00000
 8018688:	7c9fffff 	.word	0x7c9fffff

0801868c <_strtod_r>:
 801868c:	4b01      	ldr	r3, [pc, #4]	@ (8018694 <_strtod_r+0x8>)
 801868e:	f7ff ba63 	b.w	8017b58 <_strtod_l>
 8018692:	bf00      	nop
 8018694:	240000ac 	.word	0x240000ac

08018698 <__ssputs_r>:
 8018698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801869c:	688e      	ldr	r6, [r1, #8]
 801869e:	461f      	mov	r7, r3
 80186a0:	42be      	cmp	r6, r7
 80186a2:	680b      	ldr	r3, [r1, #0]
 80186a4:	4682      	mov	sl, r0
 80186a6:	460c      	mov	r4, r1
 80186a8:	4690      	mov	r8, r2
 80186aa:	d82d      	bhi.n	8018708 <__ssputs_r+0x70>
 80186ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80186b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80186b4:	d026      	beq.n	8018704 <__ssputs_r+0x6c>
 80186b6:	6965      	ldr	r5, [r4, #20]
 80186b8:	6909      	ldr	r1, [r1, #16]
 80186ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80186be:	eba3 0901 	sub.w	r9, r3, r1
 80186c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80186c6:	1c7b      	adds	r3, r7, #1
 80186c8:	444b      	add	r3, r9
 80186ca:	106d      	asrs	r5, r5, #1
 80186cc:	429d      	cmp	r5, r3
 80186ce:	bf38      	it	cc
 80186d0:	461d      	movcc	r5, r3
 80186d2:	0553      	lsls	r3, r2, #21
 80186d4:	d527      	bpl.n	8018726 <__ssputs_r+0x8e>
 80186d6:	4629      	mov	r1, r5
 80186d8:	f7fe fcf0 	bl	80170bc <_malloc_r>
 80186dc:	4606      	mov	r6, r0
 80186de:	b360      	cbz	r0, 801873a <__ssputs_r+0xa2>
 80186e0:	6921      	ldr	r1, [r4, #16]
 80186e2:	464a      	mov	r2, r9
 80186e4:	f7fd fe5b 	bl	801639e <memcpy>
 80186e8:	89a3      	ldrh	r3, [r4, #12]
 80186ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80186ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80186f2:	81a3      	strh	r3, [r4, #12]
 80186f4:	6126      	str	r6, [r4, #16]
 80186f6:	6165      	str	r5, [r4, #20]
 80186f8:	444e      	add	r6, r9
 80186fa:	eba5 0509 	sub.w	r5, r5, r9
 80186fe:	6026      	str	r6, [r4, #0]
 8018700:	60a5      	str	r5, [r4, #8]
 8018702:	463e      	mov	r6, r7
 8018704:	42be      	cmp	r6, r7
 8018706:	d900      	bls.n	801870a <__ssputs_r+0x72>
 8018708:	463e      	mov	r6, r7
 801870a:	6820      	ldr	r0, [r4, #0]
 801870c:	4632      	mov	r2, r6
 801870e:	4641      	mov	r1, r8
 8018710:	f7fd fd9a 	bl	8016248 <memmove>
 8018714:	68a3      	ldr	r3, [r4, #8]
 8018716:	1b9b      	subs	r3, r3, r6
 8018718:	60a3      	str	r3, [r4, #8]
 801871a:	6823      	ldr	r3, [r4, #0]
 801871c:	4433      	add	r3, r6
 801871e:	6023      	str	r3, [r4, #0]
 8018720:	2000      	movs	r0, #0
 8018722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018726:	462a      	mov	r2, r5
 8018728:	f000 ff0f 	bl	801954a <_realloc_r>
 801872c:	4606      	mov	r6, r0
 801872e:	2800      	cmp	r0, #0
 8018730:	d1e0      	bne.n	80186f4 <__ssputs_r+0x5c>
 8018732:	6921      	ldr	r1, [r4, #16]
 8018734:	4650      	mov	r0, sl
 8018736:	f7fe fc4d 	bl	8016fd4 <_free_r>
 801873a:	230c      	movs	r3, #12
 801873c:	f8ca 3000 	str.w	r3, [sl]
 8018740:	89a3      	ldrh	r3, [r4, #12]
 8018742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018746:	81a3      	strh	r3, [r4, #12]
 8018748:	f04f 30ff 	mov.w	r0, #4294967295
 801874c:	e7e9      	b.n	8018722 <__ssputs_r+0x8a>
	...

08018750 <_svfiprintf_r>:
 8018750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018754:	4698      	mov	r8, r3
 8018756:	898b      	ldrh	r3, [r1, #12]
 8018758:	061b      	lsls	r3, r3, #24
 801875a:	b09d      	sub	sp, #116	@ 0x74
 801875c:	4607      	mov	r7, r0
 801875e:	460d      	mov	r5, r1
 8018760:	4614      	mov	r4, r2
 8018762:	d510      	bpl.n	8018786 <_svfiprintf_r+0x36>
 8018764:	690b      	ldr	r3, [r1, #16]
 8018766:	b973      	cbnz	r3, 8018786 <_svfiprintf_r+0x36>
 8018768:	2140      	movs	r1, #64	@ 0x40
 801876a:	f7fe fca7 	bl	80170bc <_malloc_r>
 801876e:	6028      	str	r0, [r5, #0]
 8018770:	6128      	str	r0, [r5, #16]
 8018772:	b930      	cbnz	r0, 8018782 <_svfiprintf_r+0x32>
 8018774:	230c      	movs	r3, #12
 8018776:	603b      	str	r3, [r7, #0]
 8018778:	f04f 30ff 	mov.w	r0, #4294967295
 801877c:	b01d      	add	sp, #116	@ 0x74
 801877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018782:	2340      	movs	r3, #64	@ 0x40
 8018784:	616b      	str	r3, [r5, #20]
 8018786:	2300      	movs	r3, #0
 8018788:	9309      	str	r3, [sp, #36]	@ 0x24
 801878a:	2320      	movs	r3, #32
 801878c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018790:	f8cd 800c 	str.w	r8, [sp, #12]
 8018794:	2330      	movs	r3, #48	@ 0x30
 8018796:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018934 <_svfiprintf_r+0x1e4>
 801879a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801879e:	f04f 0901 	mov.w	r9, #1
 80187a2:	4623      	mov	r3, r4
 80187a4:	469a      	mov	sl, r3
 80187a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187aa:	b10a      	cbz	r2, 80187b0 <_svfiprintf_r+0x60>
 80187ac:	2a25      	cmp	r2, #37	@ 0x25
 80187ae:	d1f9      	bne.n	80187a4 <_svfiprintf_r+0x54>
 80187b0:	ebba 0b04 	subs.w	fp, sl, r4
 80187b4:	d00b      	beq.n	80187ce <_svfiprintf_r+0x7e>
 80187b6:	465b      	mov	r3, fp
 80187b8:	4622      	mov	r2, r4
 80187ba:	4629      	mov	r1, r5
 80187bc:	4638      	mov	r0, r7
 80187be:	f7ff ff6b 	bl	8018698 <__ssputs_r>
 80187c2:	3001      	adds	r0, #1
 80187c4:	f000 80a7 	beq.w	8018916 <_svfiprintf_r+0x1c6>
 80187c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80187ca:	445a      	add	r2, fp
 80187cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80187ce:	f89a 3000 	ldrb.w	r3, [sl]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	f000 809f 	beq.w	8018916 <_svfiprintf_r+0x1c6>
 80187d8:	2300      	movs	r3, #0
 80187da:	f04f 32ff 	mov.w	r2, #4294967295
 80187de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80187e2:	f10a 0a01 	add.w	sl, sl, #1
 80187e6:	9304      	str	r3, [sp, #16]
 80187e8:	9307      	str	r3, [sp, #28]
 80187ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80187ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80187f0:	4654      	mov	r4, sl
 80187f2:	2205      	movs	r2, #5
 80187f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187f8:	484e      	ldr	r0, [pc, #312]	@ (8018934 <_svfiprintf_r+0x1e4>)
 80187fa:	f7e7 fd89 	bl	8000310 <memchr>
 80187fe:	9a04      	ldr	r2, [sp, #16]
 8018800:	b9d8      	cbnz	r0, 801883a <_svfiprintf_r+0xea>
 8018802:	06d0      	lsls	r0, r2, #27
 8018804:	bf44      	itt	mi
 8018806:	2320      	movmi	r3, #32
 8018808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801880c:	0711      	lsls	r1, r2, #28
 801880e:	bf44      	itt	mi
 8018810:	232b      	movmi	r3, #43	@ 0x2b
 8018812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018816:	f89a 3000 	ldrb.w	r3, [sl]
 801881a:	2b2a      	cmp	r3, #42	@ 0x2a
 801881c:	d015      	beq.n	801884a <_svfiprintf_r+0xfa>
 801881e:	9a07      	ldr	r2, [sp, #28]
 8018820:	4654      	mov	r4, sl
 8018822:	2000      	movs	r0, #0
 8018824:	f04f 0c0a 	mov.w	ip, #10
 8018828:	4621      	mov	r1, r4
 801882a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801882e:	3b30      	subs	r3, #48	@ 0x30
 8018830:	2b09      	cmp	r3, #9
 8018832:	d94b      	bls.n	80188cc <_svfiprintf_r+0x17c>
 8018834:	b1b0      	cbz	r0, 8018864 <_svfiprintf_r+0x114>
 8018836:	9207      	str	r2, [sp, #28]
 8018838:	e014      	b.n	8018864 <_svfiprintf_r+0x114>
 801883a:	eba0 0308 	sub.w	r3, r0, r8
 801883e:	fa09 f303 	lsl.w	r3, r9, r3
 8018842:	4313      	orrs	r3, r2
 8018844:	9304      	str	r3, [sp, #16]
 8018846:	46a2      	mov	sl, r4
 8018848:	e7d2      	b.n	80187f0 <_svfiprintf_r+0xa0>
 801884a:	9b03      	ldr	r3, [sp, #12]
 801884c:	1d19      	adds	r1, r3, #4
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	9103      	str	r1, [sp, #12]
 8018852:	2b00      	cmp	r3, #0
 8018854:	bfbb      	ittet	lt
 8018856:	425b      	neglt	r3, r3
 8018858:	f042 0202 	orrlt.w	r2, r2, #2
 801885c:	9307      	strge	r3, [sp, #28]
 801885e:	9307      	strlt	r3, [sp, #28]
 8018860:	bfb8      	it	lt
 8018862:	9204      	strlt	r2, [sp, #16]
 8018864:	7823      	ldrb	r3, [r4, #0]
 8018866:	2b2e      	cmp	r3, #46	@ 0x2e
 8018868:	d10a      	bne.n	8018880 <_svfiprintf_r+0x130>
 801886a:	7863      	ldrb	r3, [r4, #1]
 801886c:	2b2a      	cmp	r3, #42	@ 0x2a
 801886e:	d132      	bne.n	80188d6 <_svfiprintf_r+0x186>
 8018870:	9b03      	ldr	r3, [sp, #12]
 8018872:	1d1a      	adds	r2, r3, #4
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	9203      	str	r2, [sp, #12]
 8018878:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801887c:	3402      	adds	r4, #2
 801887e:	9305      	str	r3, [sp, #20]
 8018880:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018944 <_svfiprintf_r+0x1f4>
 8018884:	7821      	ldrb	r1, [r4, #0]
 8018886:	2203      	movs	r2, #3
 8018888:	4650      	mov	r0, sl
 801888a:	f7e7 fd41 	bl	8000310 <memchr>
 801888e:	b138      	cbz	r0, 80188a0 <_svfiprintf_r+0x150>
 8018890:	9b04      	ldr	r3, [sp, #16]
 8018892:	eba0 000a 	sub.w	r0, r0, sl
 8018896:	2240      	movs	r2, #64	@ 0x40
 8018898:	4082      	lsls	r2, r0
 801889a:	4313      	orrs	r3, r2
 801889c:	3401      	adds	r4, #1
 801889e:	9304      	str	r3, [sp, #16]
 80188a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188a4:	4824      	ldr	r0, [pc, #144]	@ (8018938 <_svfiprintf_r+0x1e8>)
 80188a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80188aa:	2206      	movs	r2, #6
 80188ac:	f7e7 fd30 	bl	8000310 <memchr>
 80188b0:	2800      	cmp	r0, #0
 80188b2:	d036      	beq.n	8018922 <_svfiprintf_r+0x1d2>
 80188b4:	4b21      	ldr	r3, [pc, #132]	@ (801893c <_svfiprintf_r+0x1ec>)
 80188b6:	bb1b      	cbnz	r3, 8018900 <_svfiprintf_r+0x1b0>
 80188b8:	9b03      	ldr	r3, [sp, #12]
 80188ba:	3307      	adds	r3, #7
 80188bc:	f023 0307 	bic.w	r3, r3, #7
 80188c0:	3308      	adds	r3, #8
 80188c2:	9303      	str	r3, [sp, #12]
 80188c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188c6:	4433      	add	r3, r6
 80188c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80188ca:	e76a      	b.n	80187a2 <_svfiprintf_r+0x52>
 80188cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80188d0:	460c      	mov	r4, r1
 80188d2:	2001      	movs	r0, #1
 80188d4:	e7a8      	b.n	8018828 <_svfiprintf_r+0xd8>
 80188d6:	2300      	movs	r3, #0
 80188d8:	3401      	adds	r4, #1
 80188da:	9305      	str	r3, [sp, #20]
 80188dc:	4619      	mov	r1, r3
 80188de:	f04f 0c0a 	mov.w	ip, #10
 80188e2:	4620      	mov	r0, r4
 80188e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80188e8:	3a30      	subs	r2, #48	@ 0x30
 80188ea:	2a09      	cmp	r2, #9
 80188ec:	d903      	bls.n	80188f6 <_svfiprintf_r+0x1a6>
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d0c6      	beq.n	8018880 <_svfiprintf_r+0x130>
 80188f2:	9105      	str	r1, [sp, #20]
 80188f4:	e7c4      	b.n	8018880 <_svfiprintf_r+0x130>
 80188f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80188fa:	4604      	mov	r4, r0
 80188fc:	2301      	movs	r3, #1
 80188fe:	e7f0      	b.n	80188e2 <_svfiprintf_r+0x192>
 8018900:	ab03      	add	r3, sp, #12
 8018902:	9300      	str	r3, [sp, #0]
 8018904:	462a      	mov	r2, r5
 8018906:	4b0e      	ldr	r3, [pc, #56]	@ (8018940 <_svfiprintf_r+0x1f0>)
 8018908:	a904      	add	r1, sp, #16
 801890a:	4638      	mov	r0, r7
 801890c:	f7fc fcb4 	bl	8015278 <_printf_float>
 8018910:	1c42      	adds	r2, r0, #1
 8018912:	4606      	mov	r6, r0
 8018914:	d1d6      	bne.n	80188c4 <_svfiprintf_r+0x174>
 8018916:	89ab      	ldrh	r3, [r5, #12]
 8018918:	065b      	lsls	r3, r3, #25
 801891a:	f53f af2d 	bmi.w	8018778 <_svfiprintf_r+0x28>
 801891e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018920:	e72c      	b.n	801877c <_svfiprintf_r+0x2c>
 8018922:	ab03      	add	r3, sp, #12
 8018924:	9300      	str	r3, [sp, #0]
 8018926:	462a      	mov	r2, r5
 8018928:	4b05      	ldr	r3, [pc, #20]	@ (8018940 <_svfiprintf_r+0x1f0>)
 801892a:	a904      	add	r1, sp, #16
 801892c:	4638      	mov	r0, r7
 801892e:	f7fc ff2b 	bl	8015788 <_printf_i>
 8018932:	e7ed      	b.n	8018910 <_svfiprintf_r+0x1c0>
 8018934:	0801c4ef 	.word	0x0801c4ef
 8018938:	0801c4f9 	.word	0x0801c4f9
 801893c:	08015279 	.word	0x08015279
 8018940:	08018699 	.word	0x08018699
 8018944:	0801c4f5 	.word	0x0801c4f5

08018948 <__sfputc_r>:
 8018948:	6893      	ldr	r3, [r2, #8]
 801894a:	3b01      	subs	r3, #1
 801894c:	2b00      	cmp	r3, #0
 801894e:	b410      	push	{r4}
 8018950:	6093      	str	r3, [r2, #8]
 8018952:	da08      	bge.n	8018966 <__sfputc_r+0x1e>
 8018954:	6994      	ldr	r4, [r2, #24]
 8018956:	42a3      	cmp	r3, r4
 8018958:	db01      	blt.n	801895e <__sfputc_r+0x16>
 801895a:	290a      	cmp	r1, #10
 801895c:	d103      	bne.n	8018966 <__sfputc_r+0x1e>
 801895e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018962:	f7fd bbcc 	b.w	80160fe <__swbuf_r>
 8018966:	6813      	ldr	r3, [r2, #0]
 8018968:	1c58      	adds	r0, r3, #1
 801896a:	6010      	str	r0, [r2, #0]
 801896c:	7019      	strb	r1, [r3, #0]
 801896e:	4608      	mov	r0, r1
 8018970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018974:	4770      	bx	lr

08018976 <__sfputs_r>:
 8018976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018978:	4606      	mov	r6, r0
 801897a:	460f      	mov	r7, r1
 801897c:	4614      	mov	r4, r2
 801897e:	18d5      	adds	r5, r2, r3
 8018980:	42ac      	cmp	r4, r5
 8018982:	d101      	bne.n	8018988 <__sfputs_r+0x12>
 8018984:	2000      	movs	r0, #0
 8018986:	e007      	b.n	8018998 <__sfputs_r+0x22>
 8018988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801898c:	463a      	mov	r2, r7
 801898e:	4630      	mov	r0, r6
 8018990:	f7ff ffda 	bl	8018948 <__sfputc_r>
 8018994:	1c43      	adds	r3, r0, #1
 8018996:	d1f3      	bne.n	8018980 <__sfputs_r+0xa>
 8018998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801899c <_vfiprintf_r>:
 801899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a0:	460d      	mov	r5, r1
 80189a2:	b09d      	sub	sp, #116	@ 0x74
 80189a4:	4614      	mov	r4, r2
 80189a6:	4698      	mov	r8, r3
 80189a8:	4606      	mov	r6, r0
 80189aa:	b118      	cbz	r0, 80189b4 <_vfiprintf_r+0x18>
 80189ac:	6a03      	ldr	r3, [r0, #32]
 80189ae:	b90b      	cbnz	r3, 80189b4 <_vfiprintf_r+0x18>
 80189b0:	f7fd fa9a 	bl	8015ee8 <__sinit>
 80189b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80189b6:	07d9      	lsls	r1, r3, #31
 80189b8:	d405      	bmi.n	80189c6 <_vfiprintf_r+0x2a>
 80189ba:	89ab      	ldrh	r3, [r5, #12]
 80189bc:	059a      	lsls	r2, r3, #22
 80189be:	d402      	bmi.n	80189c6 <_vfiprintf_r+0x2a>
 80189c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80189c2:	f7fd fcea 	bl	801639a <__retarget_lock_acquire_recursive>
 80189c6:	89ab      	ldrh	r3, [r5, #12]
 80189c8:	071b      	lsls	r3, r3, #28
 80189ca:	d501      	bpl.n	80189d0 <_vfiprintf_r+0x34>
 80189cc:	692b      	ldr	r3, [r5, #16]
 80189ce:	b99b      	cbnz	r3, 80189f8 <_vfiprintf_r+0x5c>
 80189d0:	4629      	mov	r1, r5
 80189d2:	4630      	mov	r0, r6
 80189d4:	f7fd fbd2 	bl	801617c <__swsetup_r>
 80189d8:	b170      	cbz	r0, 80189f8 <_vfiprintf_r+0x5c>
 80189da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80189dc:	07dc      	lsls	r4, r3, #31
 80189de:	d504      	bpl.n	80189ea <_vfiprintf_r+0x4e>
 80189e0:	f04f 30ff 	mov.w	r0, #4294967295
 80189e4:	b01d      	add	sp, #116	@ 0x74
 80189e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ea:	89ab      	ldrh	r3, [r5, #12]
 80189ec:	0598      	lsls	r0, r3, #22
 80189ee:	d4f7      	bmi.n	80189e0 <_vfiprintf_r+0x44>
 80189f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80189f2:	f7fd fcd3 	bl	801639c <__retarget_lock_release_recursive>
 80189f6:	e7f3      	b.n	80189e0 <_vfiprintf_r+0x44>
 80189f8:	2300      	movs	r3, #0
 80189fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80189fc:	2320      	movs	r3, #32
 80189fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a06:	2330      	movs	r3, #48	@ 0x30
 8018a08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018bb8 <_vfiprintf_r+0x21c>
 8018a0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018a10:	f04f 0901 	mov.w	r9, #1
 8018a14:	4623      	mov	r3, r4
 8018a16:	469a      	mov	sl, r3
 8018a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a1c:	b10a      	cbz	r2, 8018a22 <_vfiprintf_r+0x86>
 8018a1e:	2a25      	cmp	r2, #37	@ 0x25
 8018a20:	d1f9      	bne.n	8018a16 <_vfiprintf_r+0x7a>
 8018a22:	ebba 0b04 	subs.w	fp, sl, r4
 8018a26:	d00b      	beq.n	8018a40 <_vfiprintf_r+0xa4>
 8018a28:	465b      	mov	r3, fp
 8018a2a:	4622      	mov	r2, r4
 8018a2c:	4629      	mov	r1, r5
 8018a2e:	4630      	mov	r0, r6
 8018a30:	f7ff ffa1 	bl	8018976 <__sfputs_r>
 8018a34:	3001      	adds	r0, #1
 8018a36:	f000 80a7 	beq.w	8018b88 <_vfiprintf_r+0x1ec>
 8018a3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018a3c:	445a      	add	r2, fp
 8018a3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018a40:	f89a 3000 	ldrb.w	r3, [sl]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	f000 809f 	beq.w	8018b88 <_vfiprintf_r+0x1ec>
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8018a50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a54:	f10a 0a01 	add.w	sl, sl, #1
 8018a58:	9304      	str	r3, [sp, #16]
 8018a5a:	9307      	str	r3, [sp, #28]
 8018a5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018a60:	931a      	str	r3, [sp, #104]	@ 0x68
 8018a62:	4654      	mov	r4, sl
 8018a64:	2205      	movs	r2, #5
 8018a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a6a:	4853      	ldr	r0, [pc, #332]	@ (8018bb8 <_vfiprintf_r+0x21c>)
 8018a6c:	f7e7 fc50 	bl	8000310 <memchr>
 8018a70:	9a04      	ldr	r2, [sp, #16]
 8018a72:	b9d8      	cbnz	r0, 8018aac <_vfiprintf_r+0x110>
 8018a74:	06d1      	lsls	r1, r2, #27
 8018a76:	bf44      	itt	mi
 8018a78:	2320      	movmi	r3, #32
 8018a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018a7e:	0713      	lsls	r3, r2, #28
 8018a80:	bf44      	itt	mi
 8018a82:	232b      	movmi	r3, #43	@ 0x2b
 8018a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018a88:	f89a 3000 	ldrb.w	r3, [sl]
 8018a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a8e:	d015      	beq.n	8018abc <_vfiprintf_r+0x120>
 8018a90:	9a07      	ldr	r2, [sp, #28]
 8018a92:	4654      	mov	r4, sl
 8018a94:	2000      	movs	r0, #0
 8018a96:	f04f 0c0a 	mov.w	ip, #10
 8018a9a:	4621      	mov	r1, r4
 8018a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018aa0:	3b30      	subs	r3, #48	@ 0x30
 8018aa2:	2b09      	cmp	r3, #9
 8018aa4:	d94b      	bls.n	8018b3e <_vfiprintf_r+0x1a2>
 8018aa6:	b1b0      	cbz	r0, 8018ad6 <_vfiprintf_r+0x13a>
 8018aa8:	9207      	str	r2, [sp, #28]
 8018aaa:	e014      	b.n	8018ad6 <_vfiprintf_r+0x13a>
 8018aac:	eba0 0308 	sub.w	r3, r0, r8
 8018ab0:	fa09 f303 	lsl.w	r3, r9, r3
 8018ab4:	4313      	orrs	r3, r2
 8018ab6:	9304      	str	r3, [sp, #16]
 8018ab8:	46a2      	mov	sl, r4
 8018aba:	e7d2      	b.n	8018a62 <_vfiprintf_r+0xc6>
 8018abc:	9b03      	ldr	r3, [sp, #12]
 8018abe:	1d19      	adds	r1, r3, #4
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	9103      	str	r1, [sp, #12]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	bfbb      	ittet	lt
 8018ac8:	425b      	neglt	r3, r3
 8018aca:	f042 0202 	orrlt.w	r2, r2, #2
 8018ace:	9307      	strge	r3, [sp, #28]
 8018ad0:	9307      	strlt	r3, [sp, #28]
 8018ad2:	bfb8      	it	lt
 8018ad4:	9204      	strlt	r2, [sp, #16]
 8018ad6:	7823      	ldrb	r3, [r4, #0]
 8018ad8:	2b2e      	cmp	r3, #46	@ 0x2e
 8018ada:	d10a      	bne.n	8018af2 <_vfiprintf_r+0x156>
 8018adc:	7863      	ldrb	r3, [r4, #1]
 8018ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8018ae0:	d132      	bne.n	8018b48 <_vfiprintf_r+0x1ac>
 8018ae2:	9b03      	ldr	r3, [sp, #12]
 8018ae4:	1d1a      	adds	r2, r3, #4
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	9203      	str	r2, [sp, #12]
 8018aea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018aee:	3402      	adds	r4, #2
 8018af0:	9305      	str	r3, [sp, #20]
 8018af2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018bc8 <_vfiprintf_r+0x22c>
 8018af6:	7821      	ldrb	r1, [r4, #0]
 8018af8:	2203      	movs	r2, #3
 8018afa:	4650      	mov	r0, sl
 8018afc:	f7e7 fc08 	bl	8000310 <memchr>
 8018b00:	b138      	cbz	r0, 8018b12 <_vfiprintf_r+0x176>
 8018b02:	9b04      	ldr	r3, [sp, #16]
 8018b04:	eba0 000a 	sub.w	r0, r0, sl
 8018b08:	2240      	movs	r2, #64	@ 0x40
 8018b0a:	4082      	lsls	r2, r0
 8018b0c:	4313      	orrs	r3, r2
 8018b0e:	3401      	adds	r4, #1
 8018b10:	9304      	str	r3, [sp, #16]
 8018b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b16:	4829      	ldr	r0, [pc, #164]	@ (8018bbc <_vfiprintf_r+0x220>)
 8018b18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018b1c:	2206      	movs	r2, #6
 8018b1e:	f7e7 fbf7 	bl	8000310 <memchr>
 8018b22:	2800      	cmp	r0, #0
 8018b24:	d03f      	beq.n	8018ba6 <_vfiprintf_r+0x20a>
 8018b26:	4b26      	ldr	r3, [pc, #152]	@ (8018bc0 <_vfiprintf_r+0x224>)
 8018b28:	bb1b      	cbnz	r3, 8018b72 <_vfiprintf_r+0x1d6>
 8018b2a:	9b03      	ldr	r3, [sp, #12]
 8018b2c:	3307      	adds	r3, #7
 8018b2e:	f023 0307 	bic.w	r3, r3, #7
 8018b32:	3308      	adds	r3, #8
 8018b34:	9303      	str	r3, [sp, #12]
 8018b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b38:	443b      	add	r3, r7
 8018b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b3c:	e76a      	b.n	8018a14 <_vfiprintf_r+0x78>
 8018b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b42:	460c      	mov	r4, r1
 8018b44:	2001      	movs	r0, #1
 8018b46:	e7a8      	b.n	8018a9a <_vfiprintf_r+0xfe>
 8018b48:	2300      	movs	r3, #0
 8018b4a:	3401      	adds	r4, #1
 8018b4c:	9305      	str	r3, [sp, #20]
 8018b4e:	4619      	mov	r1, r3
 8018b50:	f04f 0c0a 	mov.w	ip, #10
 8018b54:	4620      	mov	r0, r4
 8018b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018b5a:	3a30      	subs	r2, #48	@ 0x30
 8018b5c:	2a09      	cmp	r2, #9
 8018b5e:	d903      	bls.n	8018b68 <_vfiprintf_r+0x1cc>
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d0c6      	beq.n	8018af2 <_vfiprintf_r+0x156>
 8018b64:	9105      	str	r1, [sp, #20]
 8018b66:	e7c4      	b.n	8018af2 <_vfiprintf_r+0x156>
 8018b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8018b6c:	4604      	mov	r4, r0
 8018b6e:	2301      	movs	r3, #1
 8018b70:	e7f0      	b.n	8018b54 <_vfiprintf_r+0x1b8>
 8018b72:	ab03      	add	r3, sp, #12
 8018b74:	9300      	str	r3, [sp, #0]
 8018b76:	462a      	mov	r2, r5
 8018b78:	4b12      	ldr	r3, [pc, #72]	@ (8018bc4 <_vfiprintf_r+0x228>)
 8018b7a:	a904      	add	r1, sp, #16
 8018b7c:	4630      	mov	r0, r6
 8018b7e:	f7fc fb7b 	bl	8015278 <_printf_float>
 8018b82:	4607      	mov	r7, r0
 8018b84:	1c78      	adds	r0, r7, #1
 8018b86:	d1d6      	bne.n	8018b36 <_vfiprintf_r+0x19a>
 8018b88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b8a:	07d9      	lsls	r1, r3, #31
 8018b8c:	d405      	bmi.n	8018b9a <_vfiprintf_r+0x1fe>
 8018b8e:	89ab      	ldrh	r3, [r5, #12]
 8018b90:	059a      	lsls	r2, r3, #22
 8018b92:	d402      	bmi.n	8018b9a <_vfiprintf_r+0x1fe>
 8018b94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b96:	f7fd fc01 	bl	801639c <__retarget_lock_release_recursive>
 8018b9a:	89ab      	ldrh	r3, [r5, #12]
 8018b9c:	065b      	lsls	r3, r3, #25
 8018b9e:	f53f af1f 	bmi.w	80189e0 <_vfiprintf_r+0x44>
 8018ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018ba4:	e71e      	b.n	80189e4 <_vfiprintf_r+0x48>
 8018ba6:	ab03      	add	r3, sp, #12
 8018ba8:	9300      	str	r3, [sp, #0]
 8018baa:	462a      	mov	r2, r5
 8018bac:	4b05      	ldr	r3, [pc, #20]	@ (8018bc4 <_vfiprintf_r+0x228>)
 8018bae:	a904      	add	r1, sp, #16
 8018bb0:	4630      	mov	r0, r6
 8018bb2:	f7fc fde9 	bl	8015788 <_printf_i>
 8018bb6:	e7e4      	b.n	8018b82 <_vfiprintf_r+0x1e6>
 8018bb8:	0801c4ef 	.word	0x0801c4ef
 8018bbc:	0801c4f9 	.word	0x0801c4f9
 8018bc0:	08015279 	.word	0x08015279
 8018bc4:	08018977 	.word	0x08018977
 8018bc8:	0801c4f5 	.word	0x0801c4f5

08018bcc <__sflush_r>:
 8018bcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bd4:	0716      	lsls	r6, r2, #28
 8018bd6:	4605      	mov	r5, r0
 8018bd8:	460c      	mov	r4, r1
 8018bda:	d454      	bmi.n	8018c86 <__sflush_r+0xba>
 8018bdc:	684b      	ldr	r3, [r1, #4]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	dc02      	bgt.n	8018be8 <__sflush_r+0x1c>
 8018be2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	dd48      	ble.n	8018c7a <__sflush_r+0xae>
 8018be8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018bea:	2e00      	cmp	r6, #0
 8018bec:	d045      	beq.n	8018c7a <__sflush_r+0xae>
 8018bee:	2300      	movs	r3, #0
 8018bf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018bf4:	682f      	ldr	r7, [r5, #0]
 8018bf6:	6a21      	ldr	r1, [r4, #32]
 8018bf8:	602b      	str	r3, [r5, #0]
 8018bfa:	d030      	beq.n	8018c5e <__sflush_r+0x92>
 8018bfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018bfe:	89a3      	ldrh	r3, [r4, #12]
 8018c00:	0759      	lsls	r1, r3, #29
 8018c02:	d505      	bpl.n	8018c10 <__sflush_r+0x44>
 8018c04:	6863      	ldr	r3, [r4, #4]
 8018c06:	1ad2      	subs	r2, r2, r3
 8018c08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018c0a:	b10b      	cbz	r3, 8018c10 <__sflush_r+0x44>
 8018c0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018c0e:	1ad2      	subs	r2, r2, r3
 8018c10:	2300      	movs	r3, #0
 8018c12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018c14:	6a21      	ldr	r1, [r4, #32]
 8018c16:	4628      	mov	r0, r5
 8018c18:	47b0      	blx	r6
 8018c1a:	1c43      	adds	r3, r0, #1
 8018c1c:	89a3      	ldrh	r3, [r4, #12]
 8018c1e:	d106      	bne.n	8018c2e <__sflush_r+0x62>
 8018c20:	6829      	ldr	r1, [r5, #0]
 8018c22:	291d      	cmp	r1, #29
 8018c24:	d82b      	bhi.n	8018c7e <__sflush_r+0xb2>
 8018c26:	4a2a      	ldr	r2, [pc, #168]	@ (8018cd0 <__sflush_r+0x104>)
 8018c28:	40ca      	lsrs	r2, r1
 8018c2a:	07d6      	lsls	r6, r2, #31
 8018c2c:	d527      	bpl.n	8018c7e <__sflush_r+0xb2>
 8018c2e:	2200      	movs	r2, #0
 8018c30:	6062      	str	r2, [r4, #4]
 8018c32:	04d9      	lsls	r1, r3, #19
 8018c34:	6922      	ldr	r2, [r4, #16]
 8018c36:	6022      	str	r2, [r4, #0]
 8018c38:	d504      	bpl.n	8018c44 <__sflush_r+0x78>
 8018c3a:	1c42      	adds	r2, r0, #1
 8018c3c:	d101      	bne.n	8018c42 <__sflush_r+0x76>
 8018c3e:	682b      	ldr	r3, [r5, #0]
 8018c40:	b903      	cbnz	r3, 8018c44 <__sflush_r+0x78>
 8018c42:	6560      	str	r0, [r4, #84]	@ 0x54
 8018c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018c46:	602f      	str	r7, [r5, #0]
 8018c48:	b1b9      	cbz	r1, 8018c7a <__sflush_r+0xae>
 8018c4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018c4e:	4299      	cmp	r1, r3
 8018c50:	d002      	beq.n	8018c58 <__sflush_r+0x8c>
 8018c52:	4628      	mov	r0, r5
 8018c54:	f7fe f9be 	bl	8016fd4 <_free_r>
 8018c58:	2300      	movs	r3, #0
 8018c5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8018c5c:	e00d      	b.n	8018c7a <__sflush_r+0xae>
 8018c5e:	2301      	movs	r3, #1
 8018c60:	4628      	mov	r0, r5
 8018c62:	47b0      	blx	r6
 8018c64:	4602      	mov	r2, r0
 8018c66:	1c50      	adds	r0, r2, #1
 8018c68:	d1c9      	bne.n	8018bfe <__sflush_r+0x32>
 8018c6a:	682b      	ldr	r3, [r5, #0]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d0c6      	beq.n	8018bfe <__sflush_r+0x32>
 8018c70:	2b1d      	cmp	r3, #29
 8018c72:	d001      	beq.n	8018c78 <__sflush_r+0xac>
 8018c74:	2b16      	cmp	r3, #22
 8018c76:	d11e      	bne.n	8018cb6 <__sflush_r+0xea>
 8018c78:	602f      	str	r7, [r5, #0]
 8018c7a:	2000      	movs	r0, #0
 8018c7c:	e022      	b.n	8018cc4 <__sflush_r+0xf8>
 8018c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c82:	b21b      	sxth	r3, r3
 8018c84:	e01b      	b.n	8018cbe <__sflush_r+0xf2>
 8018c86:	690f      	ldr	r7, [r1, #16]
 8018c88:	2f00      	cmp	r7, #0
 8018c8a:	d0f6      	beq.n	8018c7a <__sflush_r+0xae>
 8018c8c:	0793      	lsls	r3, r2, #30
 8018c8e:	680e      	ldr	r6, [r1, #0]
 8018c90:	bf08      	it	eq
 8018c92:	694b      	ldreq	r3, [r1, #20]
 8018c94:	600f      	str	r7, [r1, #0]
 8018c96:	bf18      	it	ne
 8018c98:	2300      	movne	r3, #0
 8018c9a:	eba6 0807 	sub.w	r8, r6, r7
 8018c9e:	608b      	str	r3, [r1, #8]
 8018ca0:	f1b8 0f00 	cmp.w	r8, #0
 8018ca4:	dde9      	ble.n	8018c7a <__sflush_r+0xae>
 8018ca6:	6a21      	ldr	r1, [r4, #32]
 8018ca8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018caa:	4643      	mov	r3, r8
 8018cac:	463a      	mov	r2, r7
 8018cae:	4628      	mov	r0, r5
 8018cb0:	47b0      	blx	r6
 8018cb2:	2800      	cmp	r0, #0
 8018cb4:	dc08      	bgt.n	8018cc8 <__sflush_r+0xfc>
 8018cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018cbe:	81a3      	strh	r3, [r4, #12]
 8018cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8018cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cc8:	4407      	add	r7, r0
 8018cca:	eba8 0800 	sub.w	r8, r8, r0
 8018cce:	e7e7      	b.n	8018ca0 <__sflush_r+0xd4>
 8018cd0:	20400001 	.word	0x20400001

08018cd4 <_fflush_r>:
 8018cd4:	b538      	push	{r3, r4, r5, lr}
 8018cd6:	690b      	ldr	r3, [r1, #16]
 8018cd8:	4605      	mov	r5, r0
 8018cda:	460c      	mov	r4, r1
 8018cdc:	b913      	cbnz	r3, 8018ce4 <_fflush_r+0x10>
 8018cde:	2500      	movs	r5, #0
 8018ce0:	4628      	mov	r0, r5
 8018ce2:	bd38      	pop	{r3, r4, r5, pc}
 8018ce4:	b118      	cbz	r0, 8018cee <_fflush_r+0x1a>
 8018ce6:	6a03      	ldr	r3, [r0, #32]
 8018ce8:	b90b      	cbnz	r3, 8018cee <_fflush_r+0x1a>
 8018cea:	f7fd f8fd 	bl	8015ee8 <__sinit>
 8018cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d0f3      	beq.n	8018cde <_fflush_r+0xa>
 8018cf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018cf8:	07d0      	lsls	r0, r2, #31
 8018cfa:	d404      	bmi.n	8018d06 <_fflush_r+0x32>
 8018cfc:	0599      	lsls	r1, r3, #22
 8018cfe:	d402      	bmi.n	8018d06 <_fflush_r+0x32>
 8018d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d02:	f7fd fb4a 	bl	801639a <__retarget_lock_acquire_recursive>
 8018d06:	4628      	mov	r0, r5
 8018d08:	4621      	mov	r1, r4
 8018d0a:	f7ff ff5f 	bl	8018bcc <__sflush_r>
 8018d0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018d10:	07da      	lsls	r2, r3, #31
 8018d12:	4605      	mov	r5, r0
 8018d14:	d4e4      	bmi.n	8018ce0 <_fflush_r+0xc>
 8018d16:	89a3      	ldrh	r3, [r4, #12]
 8018d18:	059b      	lsls	r3, r3, #22
 8018d1a:	d4e1      	bmi.n	8018ce0 <_fflush_r+0xc>
 8018d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d1e:	f7fd fb3d 	bl	801639c <__retarget_lock_release_recursive>
 8018d22:	e7dd      	b.n	8018ce0 <_fflush_r+0xc>

08018d24 <fiprintf>:
 8018d24:	b40e      	push	{r1, r2, r3}
 8018d26:	b503      	push	{r0, r1, lr}
 8018d28:	4601      	mov	r1, r0
 8018d2a:	ab03      	add	r3, sp, #12
 8018d2c:	4805      	ldr	r0, [pc, #20]	@ (8018d44 <fiprintf+0x20>)
 8018d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d32:	6800      	ldr	r0, [r0, #0]
 8018d34:	9301      	str	r3, [sp, #4]
 8018d36:	f7ff fe31 	bl	801899c <_vfiprintf_r>
 8018d3a:	b002      	add	sp, #8
 8018d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d40:	b003      	add	sp, #12
 8018d42:	4770      	bx	lr
 8018d44:	2400005c 	.word	0x2400005c

08018d48 <__swhatbuf_r>:
 8018d48:	b570      	push	{r4, r5, r6, lr}
 8018d4a:	460c      	mov	r4, r1
 8018d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d50:	2900      	cmp	r1, #0
 8018d52:	b096      	sub	sp, #88	@ 0x58
 8018d54:	4615      	mov	r5, r2
 8018d56:	461e      	mov	r6, r3
 8018d58:	da0d      	bge.n	8018d76 <__swhatbuf_r+0x2e>
 8018d5a:	89a3      	ldrh	r3, [r4, #12]
 8018d5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018d60:	f04f 0100 	mov.w	r1, #0
 8018d64:	bf14      	ite	ne
 8018d66:	2340      	movne	r3, #64	@ 0x40
 8018d68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018d6c:	2000      	movs	r0, #0
 8018d6e:	6031      	str	r1, [r6, #0]
 8018d70:	602b      	str	r3, [r5, #0]
 8018d72:	b016      	add	sp, #88	@ 0x58
 8018d74:	bd70      	pop	{r4, r5, r6, pc}
 8018d76:	466a      	mov	r2, sp
 8018d78:	f000 f848 	bl	8018e0c <_fstat_r>
 8018d7c:	2800      	cmp	r0, #0
 8018d7e:	dbec      	blt.n	8018d5a <__swhatbuf_r+0x12>
 8018d80:	9901      	ldr	r1, [sp, #4]
 8018d82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018d86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018d8a:	4259      	negs	r1, r3
 8018d8c:	4159      	adcs	r1, r3
 8018d8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018d92:	e7eb      	b.n	8018d6c <__swhatbuf_r+0x24>

08018d94 <__smakebuf_r>:
 8018d94:	898b      	ldrh	r3, [r1, #12]
 8018d96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d98:	079d      	lsls	r5, r3, #30
 8018d9a:	4606      	mov	r6, r0
 8018d9c:	460c      	mov	r4, r1
 8018d9e:	d507      	bpl.n	8018db0 <__smakebuf_r+0x1c>
 8018da0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018da4:	6023      	str	r3, [r4, #0]
 8018da6:	6123      	str	r3, [r4, #16]
 8018da8:	2301      	movs	r3, #1
 8018daa:	6163      	str	r3, [r4, #20]
 8018dac:	b003      	add	sp, #12
 8018dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018db0:	ab01      	add	r3, sp, #4
 8018db2:	466a      	mov	r2, sp
 8018db4:	f7ff ffc8 	bl	8018d48 <__swhatbuf_r>
 8018db8:	9f00      	ldr	r7, [sp, #0]
 8018dba:	4605      	mov	r5, r0
 8018dbc:	4639      	mov	r1, r7
 8018dbe:	4630      	mov	r0, r6
 8018dc0:	f7fe f97c 	bl	80170bc <_malloc_r>
 8018dc4:	b948      	cbnz	r0, 8018dda <__smakebuf_r+0x46>
 8018dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dca:	059a      	lsls	r2, r3, #22
 8018dcc:	d4ee      	bmi.n	8018dac <__smakebuf_r+0x18>
 8018dce:	f023 0303 	bic.w	r3, r3, #3
 8018dd2:	f043 0302 	orr.w	r3, r3, #2
 8018dd6:	81a3      	strh	r3, [r4, #12]
 8018dd8:	e7e2      	b.n	8018da0 <__smakebuf_r+0xc>
 8018dda:	89a3      	ldrh	r3, [r4, #12]
 8018ddc:	6020      	str	r0, [r4, #0]
 8018dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018de2:	81a3      	strh	r3, [r4, #12]
 8018de4:	9b01      	ldr	r3, [sp, #4]
 8018de6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018dea:	b15b      	cbz	r3, 8018e04 <__smakebuf_r+0x70>
 8018dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018df0:	4630      	mov	r0, r6
 8018df2:	f000 f81d 	bl	8018e30 <_isatty_r>
 8018df6:	b128      	cbz	r0, 8018e04 <__smakebuf_r+0x70>
 8018df8:	89a3      	ldrh	r3, [r4, #12]
 8018dfa:	f023 0303 	bic.w	r3, r3, #3
 8018dfe:	f043 0301 	orr.w	r3, r3, #1
 8018e02:	81a3      	strh	r3, [r4, #12]
 8018e04:	89a3      	ldrh	r3, [r4, #12]
 8018e06:	431d      	orrs	r5, r3
 8018e08:	81a5      	strh	r5, [r4, #12]
 8018e0a:	e7cf      	b.n	8018dac <__smakebuf_r+0x18>

08018e0c <_fstat_r>:
 8018e0c:	b538      	push	{r3, r4, r5, lr}
 8018e0e:	4d07      	ldr	r5, [pc, #28]	@ (8018e2c <_fstat_r+0x20>)
 8018e10:	2300      	movs	r3, #0
 8018e12:	4604      	mov	r4, r0
 8018e14:	4608      	mov	r0, r1
 8018e16:	4611      	mov	r1, r2
 8018e18:	602b      	str	r3, [r5, #0]
 8018e1a:	f7e9 f9ad 	bl	8002178 <_fstat>
 8018e1e:	1c43      	adds	r3, r0, #1
 8018e20:	d102      	bne.n	8018e28 <_fstat_r+0x1c>
 8018e22:	682b      	ldr	r3, [r5, #0]
 8018e24:	b103      	cbz	r3, 8018e28 <_fstat_r+0x1c>
 8018e26:	6023      	str	r3, [r4, #0]
 8018e28:	bd38      	pop	{r3, r4, r5, pc}
 8018e2a:	bf00      	nop
 8018e2c:	24008624 	.word	0x24008624

08018e30 <_isatty_r>:
 8018e30:	b538      	push	{r3, r4, r5, lr}
 8018e32:	4d06      	ldr	r5, [pc, #24]	@ (8018e4c <_isatty_r+0x1c>)
 8018e34:	2300      	movs	r3, #0
 8018e36:	4604      	mov	r4, r0
 8018e38:	4608      	mov	r0, r1
 8018e3a:	602b      	str	r3, [r5, #0]
 8018e3c:	f7e9 f9ac 	bl	8002198 <_isatty>
 8018e40:	1c43      	adds	r3, r0, #1
 8018e42:	d102      	bne.n	8018e4a <_isatty_r+0x1a>
 8018e44:	682b      	ldr	r3, [r5, #0]
 8018e46:	b103      	cbz	r3, 8018e4a <_isatty_r+0x1a>
 8018e48:	6023      	str	r3, [r4, #0]
 8018e4a:	bd38      	pop	{r3, r4, r5, pc}
 8018e4c:	24008624 	.word	0x24008624

08018e50 <_sbrk_r>:
 8018e50:	b538      	push	{r3, r4, r5, lr}
 8018e52:	4d06      	ldr	r5, [pc, #24]	@ (8018e6c <_sbrk_r+0x1c>)
 8018e54:	2300      	movs	r3, #0
 8018e56:	4604      	mov	r4, r0
 8018e58:	4608      	mov	r0, r1
 8018e5a:	602b      	str	r3, [r5, #0]
 8018e5c:	f7e9 f9b4 	bl	80021c8 <_sbrk>
 8018e60:	1c43      	adds	r3, r0, #1
 8018e62:	d102      	bne.n	8018e6a <_sbrk_r+0x1a>
 8018e64:	682b      	ldr	r3, [r5, #0]
 8018e66:	b103      	cbz	r3, 8018e6a <_sbrk_r+0x1a>
 8018e68:	6023      	str	r3, [r4, #0]
 8018e6a:	bd38      	pop	{r3, r4, r5, pc}
 8018e6c:	24008624 	.word	0x24008624

08018e70 <nan>:
 8018e70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018e78 <nan+0x8>
 8018e74:	4770      	bx	lr
 8018e76:	bf00      	nop
 8018e78:	00000000 	.word	0x00000000
 8018e7c:	7ff80000 	.word	0x7ff80000

08018e80 <abort>:
 8018e80:	b508      	push	{r3, lr}
 8018e82:	2006      	movs	r0, #6
 8018e84:	f000 fbc4 	bl	8019610 <raise>
 8018e88:	2001      	movs	r0, #1
 8018e8a:	f7e9 f925 	bl	80020d8 <_exit>

08018e8e <_calloc_r>:
 8018e8e:	b570      	push	{r4, r5, r6, lr}
 8018e90:	fba1 5402 	umull	r5, r4, r1, r2
 8018e94:	b934      	cbnz	r4, 8018ea4 <_calloc_r+0x16>
 8018e96:	4629      	mov	r1, r5
 8018e98:	f7fe f910 	bl	80170bc <_malloc_r>
 8018e9c:	4606      	mov	r6, r0
 8018e9e:	b928      	cbnz	r0, 8018eac <_calloc_r+0x1e>
 8018ea0:	4630      	mov	r0, r6
 8018ea2:	bd70      	pop	{r4, r5, r6, pc}
 8018ea4:	220c      	movs	r2, #12
 8018ea6:	6002      	str	r2, [r0, #0]
 8018ea8:	2600      	movs	r6, #0
 8018eaa:	e7f9      	b.n	8018ea0 <_calloc_r+0x12>
 8018eac:	462a      	mov	r2, r5
 8018eae:	4621      	mov	r1, r4
 8018eb0:	f7fd f9e4 	bl	801627c <memset>
 8018eb4:	e7f4      	b.n	8018ea0 <_calloc_r+0x12>

08018eb6 <rshift>:
 8018eb6:	6903      	ldr	r3, [r0, #16]
 8018eb8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ec0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018ec4:	f100 0414 	add.w	r4, r0, #20
 8018ec8:	dd45      	ble.n	8018f56 <rshift+0xa0>
 8018eca:	f011 011f 	ands.w	r1, r1, #31
 8018ece:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018ed2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018ed6:	d10c      	bne.n	8018ef2 <rshift+0x3c>
 8018ed8:	f100 0710 	add.w	r7, r0, #16
 8018edc:	4629      	mov	r1, r5
 8018ede:	42b1      	cmp	r1, r6
 8018ee0:	d334      	bcc.n	8018f4c <rshift+0x96>
 8018ee2:	1a9b      	subs	r3, r3, r2
 8018ee4:	009b      	lsls	r3, r3, #2
 8018ee6:	1eea      	subs	r2, r5, #3
 8018ee8:	4296      	cmp	r6, r2
 8018eea:	bf38      	it	cc
 8018eec:	2300      	movcc	r3, #0
 8018eee:	4423      	add	r3, r4
 8018ef0:	e015      	b.n	8018f1e <rshift+0x68>
 8018ef2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018ef6:	f1c1 0820 	rsb	r8, r1, #32
 8018efa:	40cf      	lsrs	r7, r1
 8018efc:	f105 0e04 	add.w	lr, r5, #4
 8018f00:	46a1      	mov	r9, r4
 8018f02:	4576      	cmp	r6, lr
 8018f04:	46f4      	mov	ip, lr
 8018f06:	d815      	bhi.n	8018f34 <rshift+0x7e>
 8018f08:	1a9a      	subs	r2, r3, r2
 8018f0a:	0092      	lsls	r2, r2, #2
 8018f0c:	3a04      	subs	r2, #4
 8018f0e:	3501      	adds	r5, #1
 8018f10:	42ae      	cmp	r6, r5
 8018f12:	bf38      	it	cc
 8018f14:	2200      	movcc	r2, #0
 8018f16:	18a3      	adds	r3, r4, r2
 8018f18:	50a7      	str	r7, [r4, r2]
 8018f1a:	b107      	cbz	r7, 8018f1e <rshift+0x68>
 8018f1c:	3304      	adds	r3, #4
 8018f1e:	1b1a      	subs	r2, r3, r4
 8018f20:	42a3      	cmp	r3, r4
 8018f22:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018f26:	bf08      	it	eq
 8018f28:	2300      	moveq	r3, #0
 8018f2a:	6102      	str	r2, [r0, #16]
 8018f2c:	bf08      	it	eq
 8018f2e:	6143      	streq	r3, [r0, #20]
 8018f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f34:	f8dc c000 	ldr.w	ip, [ip]
 8018f38:	fa0c fc08 	lsl.w	ip, ip, r8
 8018f3c:	ea4c 0707 	orr.w	r7, ip, r7
 8018f40:	f849 7b04 	str.w	r7, [r9], #4
 8018f44:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018f48:	40cf      	lsrs	r7, r1
 8018f4a:	e7da      	b.n	8018f02 <rshift+0x4c>
 8018f4c:	f851 cb04 	ldr.w	ip, [r1], #4
 8018f50:	f847 cf04 	str.w	ip, [r7, #4]!
 8018f54:	e7c3      	b.n	8018ede <rshift+0x28>
 8018f56:	4623      	mov	r3, r4
 8018f58:	e7e1      	b.n	8018f1e <rshift+0x68>

08018f5a <__hexdig_fun>:
 8018f5a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8018f5e:	2b09      	cmp	r3, #9
 8018f60:	d802      	bhi.n	8018f68 <__hexdig_fun+0xe>
 8018f62:	3820      	subs	r0, #32
 8018f64:	b2c0      	uxtb	r0, r0
 8018f66:	4770      	bx	lr
 8018f68:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8018f6c:	2b05      	cmp	r3, #5
 8018f6e:	d801      	bhi.n	8018f74 <__hexdig_fun+0x1a>
 8018f70:	3847      	subs	r0, #71	@ 0x47
 8018f72:	e7f7      	b.n	8018f64 <__hexdig_fun+0xa>
 8018f74:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8018f78:	2b05      	cmp	r3, #5
 8018f7a:	d801      	bhi.n	8018f80 <__hexdig_fun+0x26>
 8018f7c:	3827      	subs	r0, #39	@ 0x27
 8018f7e:	e7f1      	b.n	8018f64 <__hexdig_fun+0xa>
 8018f80:	2000      	movs	r0, #0
 8018f82:	4770      	bx	lr

08018f84 <__gethex>:
 8018f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f88:	b085      	sub	sp, #20
 8018f8a:	468a      	mov	sl, r1
 8018f8c:	9302      	str	r3, [sp, #8]
 8018f8e:	680b      	ldr	r3, [r1, #0]
 8018f90:	9001      	str	r0, [sp, #4]
 8018f92:	4690      	mov	r8, r2
 8018f94:	1c9c      	adds	r4, r3, #2
 8018f96:	46a1      	mov	r9, r4
 8018f98:	f814 0b01 	ldrb.w	r0, [r4], #1
 8018f9c:	2830      	cmp	r0, #48	@ 0x30
 8018f9e:	d0fa      	beq.n	8018f96 <__gethex+0x12>
 8018fa0:	eba9 0303 	sub.w	r3, r9, r3
 8018fa4:	f1a3 0b02 	sub.w	fp, r3, #2
 8018fa8:	f7ff ffd7 	bl	8018f5a <__hexdig_fun>
 8018fac:	4605      	mov	r5, r0
 8018fae:	2800      	cmp	r0, #0
 8018fb0:	d168      	bne.n	8019084 <__gethex+0x100>
 8018fb2:	49a0      	ldr	r1, [pc, #640]	@ (8019234 <__gethex+0x2b0>)
 8018fb4:	2201      	movs	r2, #1
 8018fb6:	4648      	mov	r0, r9
 8018fb8:	f7fd f968 	bl	801628c <strncmp>
 8018fbc:	4607      	mov	r7, r0
 8018fbe:	2800      	cmp	r0, #0
 8018fc0:	d167      	bne.n	8019092 <__gethex+0x10e>
 8018fc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8018fc6:	4626      	mov	r6, r4
 8018fc8:	f7ff ffc7 	bl	8018f5a <__hexdig_fun>
 8018fcc:	2800      	cmp	r0, #0
 8018fce:	d062      	beq.n	8019096 <__gethex+0x112>
 8018fd0:	4623      	mov	r3, r4
 8018fd2:	7818      	ldrb	r0, [r3, #0]
 8018fd4:	2830      	cmp	r0, #48	@ 0x30
 8018fd6:	4699      	mov	r9, r3
 8018fd8:	f103 0301 	add.w	r3, r3, #1
 8018fdc:	d0f9      	beq.n	8018fd2 <__gethex+0x4e>
 8018fde:	f7ff ffbc 	bl	8018f5a <__hexdig_fun>
 8018fe2:	fab0 f580 	clz	r5, r0
 8018fe6:	096d      	lsrs	r5, r5, #5
 8018fe8:	f04f 0b01 	mov.w	fp, #1
 8018fec:	464a      	mov	r2, r9
 8018fee:	4616      	mov	r6, r2
 8018ff0:	3201      	adds	r2, #1
 8018ff2:	7830      	ldrb	r0, [r6, #0]
 8018ff4:	f7ff ffb1 	bl	8018f5a <__hexdig_fun>
 8018ff8:	2800      	cmp	r0, #0
 8018ffa:	d1f8      	bne.n	8018fee <__gethex+0x6a>
 8018ffc:	498d      	ldr	r1, [pc, #564]	@ (8019234 <__gethex+0x2b0>)
 8018ffe:	2201      	movs	r2, #1
 8019000:	4630      	mov	r0, r6
 8019002:	f7fd f943 	bl	801628c <strncmp>
 8019006:	2800      	cmp	r0, #0
 8019008:	d13f      	bne.n	801908a <__gethex+0x106>
 801900a:	b944      	cbnz	r4, 801901e <__gethex+0x9a>
 801900c:	1c74      	adds	r4, r6, #1
 801900e:	4622      	mov	r2, r4
 8019010:	4616      	mov	r6, r2
 8019012:	3201      	adds	r2, #1
 8019014:	7830      	ldrb	r0, [r6, #0]
 8019016:	f7ff ffa0 	bl	8018f5a <__hexdig_fun>
 801901a:	2800      	cmp	r0, #0
 801901c:	d1f8      	bne.n	8019010 <__gethex+0x8c>
 801901e:	1ba4      	subs	r4, r4, r6
 8019020:	00a7      	lsls	r7, r4, #2
 8019022:	7833      	ldrb	r3, [r6, #0]
 8019024:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8019028:	2b50      	cmp	r3, #80	@ 0x50
 801902a:	d13e      	bne.n	80190aa <__gethex+0x126>
 801902c:	7873      	ldrb	r3, [r6, #1]
 801902e:	2b2b      	cmp	r3, #43	@ 0x2b
 8019030:	d033      	beq.n	801909a <__gethex+0x116>
 8019032:	2b2d      	cmp	r3, #45	@ 0x2d
 8019034:	d034      	beq.n	80190a0 <__gethex+0x11c>
 8019036:	1c71      	adds	r1, r6, #1
 8019038:	2400      	movs	r4, #0
 801903a:	7808      	ldrb	r0, [r1, #0]
 801903c:	f7ff ff8d 	bl	8018f5a <__hexdig_fun>
 8019040:	1e43      	subs	r3, r0, #1
 8019042:	b2db      	uxtb	r3, r3
 8019044:	2b18      	cmp	r3, #24
 8019046:	d830      	bhi.n	80190aa <__gethex+0x126>
 8019048:	f1a0 0210 	sub.w	r2, r0, #16
 801904c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019050:	f7ff ff83 	bl	8018f5a <__hexdig_fun>
 8019054:	f100 3cff 	add.w	ip, r0, #4294967295
 8019058:	fa5f fc8c 	uxtb.w	ip, ip
 801905c:	f1bc 0f18 	cmp.w	ip, #24
 8019060:	f04f 030a 	mov.w	r3, #10
 8019064:	d91e      	bls.n	80190a4 <__gethex+0x120>
 8019066:	b104      	cbz	r4, 801906a <__gethex+0xe6>
 8019068:	4252      	negs	r2, r2
 801906a:	4417      	add	r7, r2
 801906c:	f8ca 1000 	str.w	r1, [sl]
 8019070:	b1ed      	cbz	r5, 80190ae <__gethex+0x12a>
 8019072:	f1bb 0f00 	cmp.w	fp, #0
 8019076:	bf0c      	ite	eq
 8019078:	2506      	moveq	r5, #6
 801907a:	2500      	movne	r5, #0
 801907c:	4628      	mov	r0, r5
 801907e:	b005      	add	sp, #20
 8019080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019084:	2500      	movs	r5, #0
 8019086:	462c      	mov	r4, r5
 8019088:	e7b0      	b.n	8018fec <__gethex+0x68>
 801908a:	2c00      	cmp	r4, #0
 801908c:	d1c7      	bne.n	801901e <__gethex+0x9a>
 801908e:	4627      	mov	r7, r4
 8019090:	e7c7      	b.n	8019022 <__gethex+0x9e>
 8019092:	464e      	mov	r6, r9
 8019094:	462f      	mov	r7, r5
 8019096:	2501      	movs	r5, #1
 8019098:	e7c3      	b.n	8019022 <__gethex+0x9e>
 801909a:	2400      	movs	r4, #0
 801909c:	1cb1      	adds	r1, r6, #2
 801909e:	e7cc      	b.n	801903a <__gethex+0xb6>
 80190a0:	2401      	movs	r4, #1
 80190a2:	e7fb      	b.n	801909c <__gethex+0x118>
 80190a4:	fb03 0002 	mla	r0, r3, r2, r0
 80190a8:	e7ce      	b.n	8019048 <__gethex+0xc4>
 80190aa:	4631      	mov	r1, r6
 80190ac:	e7de      	b.n	801906c <__gethex+0xe8>
 80190ae:	eba6 0309 	sub.w	r3, r6, r9
 80190b2:	3b01      	subs	r3, #1
 80190b4:	4629      	mov	r1, r5
 80190b6:	2b07      	cmp	r3, #7
 80190b8:	dc0a      	bgt.n	80190d0 <__gethex+0x14c>
 80190ba:	9801      	ldr	r0, [sp, #4]
 80190bc:	f7fe f88a 	bl	80171d4 <_Balloc>
 80190c0:	4604      	mov	r4, r0
 80190c2:	b940      	cbnz	r0, 80190d6 <__gethex+0x152>
 80190c4:	4b5c      	ldr	r3, [pc, #368]	@ (8019238 <__gethex+0x2b4>)
 80190c6:	4602      	mov	r2, r0
 80190c8:	21e4      	movs	r1, #228	@ 0xe4
 80190ca:	485c      	ldr	r0, [pc, #368]	@ (801923c <__gethex+0x2b8>)
 80190cc:	f7fd f97c 	bl	80163c8 <__assert_func>
 80190d0:	3101      	adds	r1, #1
 80190d2:	105b      	asrs	r3, r3, #1
 80190d4:	e7ef      	b.n	80190b6 <__gethex+0x132>
 80190d6:	f100 0a14 	add.w	sl, r0, #20
 80190da:	2300      	movs	r3, #0
 80190dc:	4655      	mov	r5, sl
 80190de:	469b      	mov	fp, r3
 80190e0:	45b1      	cmp	r9, r6
 80190e2:	d337      	bcc.n	8019154 <__gethex+0x1d0>
 80190e4:	f845 bb04 	str.w	fp, [r5], #4
 80190e8:	eba5 050a 	sub.w	r5, r5, sl
 80190ec:	10ad      	asrs	r5, r5, #2
 80190ee:	6125      	str	r5, [r4, #16]
 80190f0:	4658      	mov	r0, fp
 80190f2:	f7fe f961 	bl	80173b8 <__hi0bits>
 80190f6:	016d      	lsls	r5, r5, #5
 80190f8:	f8d8 6000 	ldr.w	r6, [r8]
 80190fc:	1a2d      	subs	r5, r5, r0
 80190fe:	42b5      	cmp	r5, r6
 8019100:	dd54      	ble.n	80191ac <__gethex+0x228>
 8019102:	1bad      	subs	r5, r5, r6
 8019104:	4629      	mov	r1, r5
 8019106:	4620      	mov	r0, r4
 8019108:	f7fe fcea 	bl	8017ae0 <__any_on>
 801910c:	4681      	mov	r9, r0
 801910e:	b178      	cbz	r0, 8019130 <__gethex+0x1ac>
 8019110:	1e6b      	subs	r3, r5, #1
 8019112:	1159      	asrs	r1, r3, #5
 8019114:	f003 021f 	and.w	r2, r3, #31
 8019118:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801911c:	f04f 0901 	mov.w	r9, #1
 8019120:	fa09 f202 	lsl.w	r2, r9, r2
 8019124:	420a      	tst	r2, r1
 8019126:	d003      	beq.n	8019130 <__gethex+0x1ac>
 8019128:	454b      	cmp	r3, r9
 801912a:	dc36      	bgt.n	801919a <__gethex+0x216>
 801912c:	f04f 0902 	mov.w	r9, #2
 8019130:	4629      	mov	r1, r5
 8019132:	4620      	mov	r0, r4
 8019134:	f7ff febf 	bl	8018eb6 <rshift>
 8019138:	442f      	add	r7, r5
 801913a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801913e:	42bb      	cmp	r3, r7
 8019140:	da42      	bge.n	80191c8 <__gethex+0x244>
 8019142:	9801      	ldr	r0, [sp, #4]
 8019144:	4621      	mov	r1, r4
 8019146:	f7fe f885 	bl	8017254 <_Bfree>
 801914a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801914c:	2300      	movs	r3, #0
 801914e:	6013      	str	r3, [r2, #0]
 8019150:	25a3      	movs	r5, #163	@ 0xa3
 8019152:	e793      	b.n	801907c <__gethex+0xf8>
 8019154:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8019158:	2a2e      	cmp	r2, #46	@ 0x2e
 801915a:	d012      	beq.n	8019182 <__gethex+0x1fe>
 801915c:	2b20      	cmp	r3, #32
 801915e:	d104      	bne.n	801916a <__gethex+0x1e6>
 8019160:	f845 bb04 	str.w	fp, [r5], #4
 8019164:	f04f 0b00 	mov.w	fp, #0
 8019168:	465b      	mov	r3, fp
 801916a:	7830      	ldrb	r0, [r6, #0]
 801916c:	9303      	str	r3, [sp, #12]
 801916e:	f7ff fef4 	bl	8018f5a <__hexdig_fun>
 8019172:	9b03      	ldr	r3, [sp, #12]
 8019174:	f000 000f 	and.w	r0, r0, #15
 8019178:	4098      	lsls	r0, r3
 801917a:	ea4b 0b00 	orr.w	fp, fp, r0
 801917e:	3304      	adds	r3, #4
 8019180:	e7ae      	b.n	80190e0 <__gethex+0x15c>
 8019182:	45b1      	cmp	r9, r6
 8019184:	d8ea      	bhi.n	801915c <__gethex+0x1d8>
 8019186:	492b      	ldr	r1, [pc, #172]	@ (8019234 <__gethex+0x2b0>)
 8019188:	9303      	str	r3, [sp, #12]
 801918a:	2201      	movs	r2, #1
 801918c:	4630      	mov	r0, r6
 801918e:	f7fd f87d 	bl	801628c <strncmp>
 8019192:	9b03      	ldr	r3, [sp, #12]
 8019194:	2800      	cmp	r0, #0
 8019196:	d1e1      	bne.n	801915c <__gethex+0x1d8>
 8019198:	e7a2      	b.n	80190e0 <__gethex+0x15c>
 801919a:	1ea9      	subs	r1, r5, #2
 801919c:	4620      	mov	r0, r4
 801919e:	f7fe fc9f 	bl	8017ae0 <__any_on>
 80191a2:	2800      	cmp	r0, #0
 80191a4:	d0c2      	beq.n	801912c <__gethex+0x1a8>
 80191a6:	f04f 0903 	mov.w	r9, #3
 80191aa:	e7c1      	b.n	8019130 <__gethex+0x1ac>
 80191ac:	da09      	bge.n	80191c2 <__gethex+0x23e>
 80191ae:	1b75      	subs	r5, r6, r5
 80191b0:	4621      	mov	r1, r4
 80191b2:	9801      	ldr	r0, [sp, #4]
 80191b4:	462a      	mov	r2, r5
 80191b6:	f7fe fa5d 	bl	8017674 <__lshift>
 80191ba:	1b7f      	subs	r7, r7, r5
 80191bc:	4604      	mov	r4, r0
 80191be:	f100 0a14 	add.w	sl, r0, #20
 80191c2:	f04f 0900 	mov.w	r9, #0
 80191c6:	e7b8      	b.n	801913a <__gethex+0x1b6>
 80191c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80191cc:	42bd      	cmp	r5, r7
 80191ce:	dd6f      	ble.n	80192b0 <__gethex+0x32c>
 80191d0:	1bed      	subs	r5, r5, r7
 80191d2:	42ae      	cmp	r6, r5
 80191d4:	dc34      	bgt.n	8019240 <__gethex+0x2bc>
 80191d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80191da:	2b02      	cmp	r3, #2
 80191dc:	d022      	beq.n	8019224 <__gethex+0x2a0>
 80191de:	2b03      	cmp	r3, #3
 80191e0:	d024      	beq.n	801922c <__gethex+0x2a8>
 80191e2:	2b01      	cmp	r3, #1
 80191e4:	d115      	bne.n	8019212 <__gethex+0x28e>
 80191e6:	42ae      	cmp	r6, r5
 80191e8:	d113      	bne.n	8019212 <__gethex+0x28e>
 80191ea:	2e01      	cmp	r6, #1
 80191ec:	d10b      	bne.n	8019206 <__gethex+0x282>
 80191ee:	9a02      	ldr	r2, [sp, #8]
 80191f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80191f4:	6013      	str	r3, [r2, #0]
 80191f6:	2301      	movs	r3, #1
 80191f8:	6123      	str	r3, [r4, #16]
 80191fa:	f8ca 3000 	str.w	r3, [sl]
 80191fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019200:	2562      	movs	r5, #98	@ 0x62
 8019202:	601c      	str	r4, [r3, #0]
 8019204:	e73a      	b.n	801907c <__gethex+0xf8>
 8019206:	1e71      	subs	r1, r6, #1
 8019208:	4620      	mov	r0, r4
 801920a:	f7fe fc69 	bl	8017ae0 <__any_on>
 801920e:	2800      	cmp	r0, #0
 8019210:	d1ed      	bne.n	80191ee <__gethex+0x26a>
 8019212:	9801      	ldr	r0, [sp, #4]
 8019214:	4621      	mov	r1, r4
 8019216:	f7fe f81d 	bl	8017254 <_Bfree>
 801921a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801921c:	2300      	movs	r3, #0
 801921e:	6013      	str	r3, [r2, #0]
 8019220:	2550      	movs	r5, #80	@ 0x50
 8019222:	e72b      	b.n	801907c <__gethex+0xf8>
 8019224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019226:	2b00      	cmp	r3, #0
 8019228:	d1f3      	bne.n	8019212 <__gethex+0x28e>
 801922a:	e7e0      	b.n	80191ee <__gethex+0x26a>
 801922c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801922e:	2b00      	cmp	r3, #0
 8019230:	d1dd      	bne.n	80191ee <__gethex+0x26a>
 8019232:	e7ee      	b.n	8019212 <__gethex+0x28e>
 8019234:	0801c4ed 	.word	0x0801c4ed
 8019238:	0801c483 	.word	0x0801c483
 801923c:	0801c508 	.word	0x0801c508
 8019240:	1e6f      	subs	r7, r5, #1
 8019242:	f1b9 0f00 	cmp.w	r9, #0
 8019246:	d130      	bne.n	80192aa <__gethex+0x326>
 8019248:	b127      	cbz	r7, 8019254 <__gethex+0x2d0>
 801924a:	4639      	mov	r1, r7
 801924c:	4620      	mov	r0, r4
 801924e:	f7fe fc47 	bl	8017ae0 <__any_on>
 8019252:	4681      	mov	r9, r0
 8019254:	117a      	asrs	r2, r7, #5
 8019256:	2301      	movs	r3, #1
 8019258:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801925c:	f007 071f 	and.w	r7, r7, #31
 8019260:	40bb      	lsls	r3, r7
 8019262:	4213      	tst	r3, r2
 8019264:	4629      	mov	r1, r5
 8019266:	4620      	mov	r0, r4
 8019268:	bf18      	it	ne
 801926a:	f049 0902 	orrne.w	r9, r9, #2
 801926e:	f7ff fe22 	bl	8018eb6 <rshift>
 8019272:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8019276:	1b76      	subs	r6, r6, r5
 8019278:	2502      	movs	r5, #2
 801927a:	f1b9 0f00 	cmp.w	r9, #0
 801927e:	d047      	beq.n	8019310 <__gethex+0x38c>
 8019280:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019284:	2b02      	cmp	r3, #2
 8019286:	d015      	beq.n	80192b4 <__gethex+0x330>
 8019288:	2b03      	cmp	r3, #3
 801928a:	d017      	beq.n	80192bc <__gethex+0x338>
 801928c:	2b01      	cmp	r3, #1
 801928e:	d109      	bne.n	80192a4 <__gethex+0x320>
 8019290:	f019 0f02 	tst.w	r9, #2
 8019294:	d006      	beq.n	80192a4 <__gethex+0x320>
 8019296:	f8da 3000 	ldr.w	r3, [sl]
 801929a:	ea49 0903 	orr.w	r9, r9, r3
 801929e:	f019 0f01 	tst.w	r9, #1
 80192a2:	d10e      	bne.n	80192c2 <__gethex+0x33e>
 80192a4:	f045 0510 	orr.w	r5, r5, #16
 80192a8:	e032      	b.n	8019310 <__gethex+0x38c>
 80192aa:	f04f 0901 	mov.w	r9, #1
 80192ae:	e7d1      	b.n	8019254 <__gethex+0x2d0>
 80192b0:	2501      	movs	r5, #1
 80192b2:	e7e2      	b.n	801927a <__gethex+0x2f6>
 80192b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80192b6:	f1c3 0301 	rsb	r3, r3, #1
 80192ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80192bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d0f0      	beq.n	80192a4 <__gethex+0x320>
 80192c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80192c6:	f104 0314 	add.w	r3, r4, #20
 80192ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80192ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80192d2:	f04f 0c00 	mov.w	ip, #0
 80192d6:	4618      	mov	r0, r3
 80192d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80192dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80192e0:	d01b      	beq.n	801931a <__gethex+0x396>
 80192e2:	3201      	adds	r2, #1
 80192e4:	6002      	str	r2, [r0, #0]
 80192e6:	2d02      	cmp	r5, #2
 80192e8:	f104 0314 	add.w	r3, r4, #20
 80192ec:	d13c      	bne.n	8019368 <__gethex+0x3e4>
 80192ee:	f8d8 2000 	ldr.w	r2, [r8]
 80192f2:	3a01      	subs	r2, #1
 80192f4:	42b2      	cmp	r2, r6
 80192f6:	d109      	bne.n	801930c <__gethex+0x388>
 80192f8:	1171      	asrs	r1, r6, #5
 80192fa:	2201      	movs	r2, #1
 80192fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019300:	f006 061f 	and.w	r6, r6, #31
 8019304:	fa02 f606 	lsl.w	r6, r2, r6
 8019308:	421e      	tst	r6, r3
 801930a:	d13a      	bne.n	8019382 <__gethex+0x3fe>
 801930c:	f045 0520 	orr.w	r5, r5, #32
 8019310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019312:	601c      	str	r4, [r3, #0]
 8019314:	9b02      	ldr	r3, [sp, #8]
 8019316:	601f      	str	r7, [r3, #0]
 8019318:	e6b0      	b.n	801907c <__gethex+0xf8>
 801931a:	4299      	cmp	r1, r3
 801931c:	f843 cc04 	str.w	ip, [r3, #-4]
 8019320:	d8d9      	bhi.n	80192d6 <__gethex+0x352>
 8019322:	68a3      	ldr	r3, [r4, #8]
 8019324:	459b      	cmp	fp, r3
 8019326:	db17      	blt.n	8019358 <__gethex+0x3d4>
 8019328:	6861      	ldr	r1, [r4, #4]
 801932a:	9801      	ldr	r0, [sp, #4]
 801932c:	3101      	adds	r1, #1
 801932e:	f7fd ff51 	bl	80171d4 <_Balloc>
 8019332:	4681      	mov	r9, r0
 8019334:	b918      	cbnz	r0, 801933e <__gethex+0x3ba>
 8019336:	4b1a      	ldr	r3, [pc, #104]	@ (80193a0 <__gethex+0x41c>)
 8019338:	4602      	mov	r2, r0
 801933a:	2184      	movs	r1, #132	@ 0x84
 801933c:	e6c5      	b.n	80190ca <__gethex+0x146>
 801933e:	6922      	ldr	r2, [r4, #16]
 8019340:	3202      	adds	r2, #2
 8019342:	f104 010c 	add.w	r1, r4, #12
 8019346:	0092      	lsls	r2, r2, #2
 8019348:	300c      	adds	r0, #12
 801934a:	f7fd f828 	bl	801639e <memcpy>
 801934e:	4621      	mov	r1, r4
 8019350:	9801      	ldr	r0, [sp, #4]
 8019352:	f7fd ff7f 	bl	8017254 <_Bfree>
 8019356:	464c      	mov	r4, r9
 8019358:	6923      	ldr	r3, [r4, #16]
 801935a:	1c5a      	adds	r2, r3, #1
 801935c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019360:	6122      	str	r2, [r4, #16]
 8019362:	2201      	movs	r2, #1
 8019364:	615a      	str	r2, [r3, #20]
 8019366:	e7be      	b.n	80192e6 <__gethex+0x362>
 8019368:	6922      	ldr	r2, [r4, #16]
 801936a:	455a      	cmp	r2, fp
 801936c:	dd0b      	ble.n	8019386 <__gethex+0x402>
 801936e:	2101      	movs	r1, #1
 8019370:	4620      	mov	r0, r4
 8019372:	f7ff fda0 	bl	8018eb6 <rshift>
 8019376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801937a:	3701      	adds	r7, #1
 801937c:	42bb      	cmp	r3, r7
 801937e:	f6ff aee0 	blt.w	8019142 <__gethex+0x1be>
 8019382:	2501      	movs	r5, #1
 8019384:	e7c2      	b.n	801930c <__gethex+0x388>
 8019386:	f016 061f 	ands.w	r6, r6, #31
 801938a:	d0fa      	beq.n	8019382 <__gethex+0x3fe>
 801938c:	4453      	add	r3, sl
 801938e:	f1c6 0620 	rsb	r6, r6, #32
 8019392:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019396:	f7fe f80f 	bl	80173b8 <__hi0bits>
 801939a:	42b0      	cmp	r0, r6
 801939c:	dbe7      	blt.n	801936e <__gethex+0x3ea>
 801939e:	e7f0      	b.n	8019382 <__gethex+0x3fe>
 80193a0:	0801c483 	.word	0x0801c483

080193a4 <L_shift>:
 80193a4:	f1c2 0208 	rsb	r2, r2, #8
 80193a8:	0092      	lsls	r2, r2, #2
 80193aa:	b570      	push	{r4, r5, r6, lr}
 80193ac:	f1c2 0620 	rsb	r6, r2, #32
 80193b0:	6843      	ldr	r3, [r0, #4]
 80193b2:	6804      	ldr	r4, [r0, #0]
 80193b4:	fa03 f506 	lsl.w	r5, r3, r6
 80193b8:	432c      	orrs	r4, r5
 80193ba:	40d3      	lsrs	r3, r2
 80193bc:	6004      	str	r4, [r0, #0]
 80193be:	f840 3f04 	str.w	r3, [r0, #4]!
 80193c2:	4288      	cmp	r0, r1
 80193c4:	d3f4      	bcc.n	80193b0 <L_shift+0xc>
 80193c6:	bd70      	pop	{r4, r5, r6, pc}

080193c8 <__match>:
 80193c8:	b530      	push	{r4, r5, lr}
 80193ca:	6803      	ldr	r3, [r0, #0]
 80193cc:	3301      	adds	r3, #1
 80193ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193d2:	b914      	cbnz	r4, 80193da <__match+0x12>
 80193d4:	6003      	str	r3, [r0, #0]
 80193d6:	2001      	movs	r0, #1
 80193d8:	bd30      	pop	{r4, r5, pc}
 80193da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80193e2:	2d19      	cmp	r5, #25
 80193e4:	bf98      	it	ls
 80193e6:	3220      	addls	r2, #32
 80193e8:	42a2      	cmp	r2, r4
 80193ea:	d0f0      	beq.n	80193ce <__match+0x6>
 80193ec:	2000      	movs	r0, #0
 80193ee:	e7f3      	b.n	80193d8 <__match+0x10>

080193f0 <__hexnan>:
 80193f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f4:	680b      	ldr	r3, [r1, #0]
 80193f6:	6801      	ldr	r1, [r0, #0]
 80193f8:	115e      	asrs	r6, r3, #5
 80193fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80193fe:	f013 031f 	ands.w	r3, r3, #31
 8019402:	b087      	sub	sp, #28
 8019404:	bf18      	it	ne
 8019406:	3604      	addne	r6, #4
 8019408:	2500      	movs	r5, #0
 801940a:	1f37      	subs	r7, r6, #4
 801940c:	4682      	mov	sl, r0
 801940e:	4690      	mov	r8, r2
 8019410:	9301      	str	r3, [sp, #4]
 8019412:	f846 5c04 	str.w	r5, [r6, #-4]
 8019416:	46b9      	mov	r9, r7
 8019418:	463c      	mov	r4, r7
 801941a:	9502      	str	r5, [sp, #8]
 801941c:	46ab      	mov	fp, r5
 801941e:	784a      	ldrb	r2, [r1, #1]
 8019420:	1c4b      	adds	r3, r1, #1
 8019422:	9303      	str	r3, [sp, #12]
 8019424:	b342      	cbz	r2, 8019478 <__hexnan+0x88>
 8019426:	4610      	mov	r0, r2
 8019428:	9105      	str	r1, [sp, #20]
 801942a:	9204      	str	r2, [sp, #16]
 801942c:	f7ff fd95 	bl	8018f5a <__hexdig_fun>
 8019430:	2800      	cmp	r0, #0
 8019432:	d151      	bne.n	80194d8 <__hexnan+0xe8>
 8019434:	9a04      	ldr	r2, [sp, #16]
 8019436:	9905      	ldr	r1, [sp, #20]
 8019438:	2a20      	cmp	r2, #32
 801943a:	d818      	bhi.n	801946e <__hexnan+0x7e>
 801943c:	9b02      	ldr	r3, [sp, #8]
 801943e:	459b      	cmp	fp, r3
 8019440:	dd13      	ble.n	801946a <__hexnan+0x7a>
 8019442:	454c      	cmp	r4, r9
 8019444:	d206      	bcs.n	8019454 <__hexnan+0x64>
 8019446:	2d07      	cmp	r5, #7
 8019448:	dc04      	bgt.n	8019454 <__hexnan+0x64>
 801944a:	462a      	mov	r2, r5
 801944c:	4649      	mov	r1, r9
 801944e:	4620      	mov	r0, r4
 8019450:	f7ff ffa8 	bl	80193a4 <L_shift>
 8019454:	4544      	cmp	r4, r8
 8019456:	d952      	bls.n	80194fe <__hexnan+0x10e>
 8019458:	2300      	movs	r3, #0
 801945a:	f1a4 0904 	sub.w	r9, r4, #4
 801945e:	f844 3c04 	str.w	r3, [r4, #-4]
 8019462:	f8cd b008 	str.w	fp, [sp, #8]
 8019466:	464c      	mov	r4, r9
 8019468:	461d      	mov	r5, r3
 801946a:	9903      	ldr	r1, [sp, #12]
 801946c:	e7d7      	b.n	801941e <__hexnan+0x2e>
 801946e:	2a29      	cmp	r2, #41	@ 0x29
 8019470:	d157      	bne.n	8019522 <__hexnan+0x132>
 8019472:	3102      	adds	r1, #2
 8019474:	f8ca 1000 	str.w	r1, [sl]
 8019478:	f1bb 0f00 	cmp.w	fp, #0
 801947c:	d051      	beq.n	8019522 <__hexnan+0x132>
 801947e:	454c      	cmp	r4, r9
 8019480:	d206      	bcs.n	8019490 <__hexnan+0xa0>
 8019482:	2d07      	cmp	r5, #7
 8019484:	dc04      	bgt.n	8019490 <__hexnan+0xa0>
 8019486:	462a      	mov	r2, r5
 8019488:	4649      	mov	r1, r9
 801948a:	4620      	mov	r0, r4
 801948c:	f7ff ff8a 	bl	80193a4 <L_shift>
 8019490:	4544      	cmp	r4, r8
 8019492:	d936      	bls.n	8019502 <__hexnan+0x112>
 8019494:	f1a8 0204 	sub.w	r2, r8, #4
 8019498:	4623      	mov	r3, r4
 801949a:	f853 1b04 	ldr.w	r1, [r3], #4
 801949e:	f842 1f04 	str.w	r1, [r2, #4]!
 80194a2:	429f      	cmp	r7, r3
 80194a4:	d2f9      	bcs.n	801949a <__hexnan+0xaa>
 80194a6:	1b3b      	subs	r3, r7, r4
 80194a8:	f023 0303 	bic.w	r3, r3, #3
 80194ac:	3304      	adds	r3, #4
 80194ae:	3401      	adds	r4, #1
 80194b0:	3e03      	subs	r6, #3
 80194b2:	42b4      	cmp	r4, r6
 80194b4:	bf88      	it	hi
 80194b6:	2304      	movhi	r3, #4
 80194b8:	4443      	add	r3, r8
 80194ba:	2200      	movs	r2, #0
 80194bc:	f843 2b04 	str.w	r2, [r3], #4
 80194c0:	429f      	cmp	r7, r3
 80194c2:	d2fb      	bcs.n	80194bc <__hexnan+0xcc>
 80194c4:	683b      	ldr	r3, [r7, #0]
 80194c6:	b91b      	cbnz	r3, 80194d0 <__hexnan+0xe0>
 80194c8:	4547      	cmp	r7, r8
 80194ca:	d128      	bne.n	801951e <__hexnan+0x12e>
 80194cc:	2301      	movs	r3, #1
 80194ce:	603b      	str	r3, [r7, #0]
 80194d0:	2005      	movs	r0, #5
 80194d2:	b007      	add	sp, #28
 80194d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d8:	3501      	adds	r5, #1
 80194da:	2d08      	cmp	r5, #8
 80194dc:	f10b 0b01 	add.w	fp, fp, #1
 80194e0:	dd06      	ble.n	80194f0 <__hexnan+0x100>
 80194e2:	4544      	cmp	r4, r8
 80194e4:	d9c1      	bls.n	801946a <__hexnan+0x7a>
 80194e6:	2300      	movs	r3, #0
 80194e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80194ec:	2501      	movs	r5, #1
 80194ee:	3c04      	subs	r4, #4
 80194f0:	6822      	ldr	r2, [r4, #0]
 80194f2:	f000 000f 	and.w	r0, r0, #15
 80194f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80194fa:	6020      	str	r0, [r4, #0]
 80194fc:	e7b5      	b.n	801946a <__hexnan+0x7a>
 80194fe:	2508      	movs	r5, #8
 8019500:	e7b3      	b.n	801946a <__hexnan+0x7a>
 8019502:	9b01      	ldr	r3, [sp, #4]
 8019504:	2b00      	cmp	r3, #0
 8019506:	d0dd      	beq.n	80194c4 <__hexnan+0xd4>
 8019508:	f1c3 0320 	rsb	r3, r3, #32
 801950c:	f04f 32ff 	mov.w	r2, #4294967295
 8019510:	40da      	lsrs	r2, r3
 8019512:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8019516:	4013      	ands	r3, r2
 8019518:	f846 3c04 	str.w	r3, [r6, #-4]
 801951c:	e7d2      	b.n	80194c4 <__hexnan+0xd4>
 801951e:	3f04      	subs	r7, #4
 8019520:	e7d0      	b.n	80194c4 <__hexnan+0xd4>
 8019522:	2004      	movs	r0, #4
 8019524:	e7d5      	b.n	80194d2 <__hexnan+0xe2>

08019526 <__ascii_mbtowc>:
 8019526:	b082      	sub	sp, #8
 8019528:	b901      	cbnz	r1, 801952c <__ascii_mbtowc+0x6>
 801952a:	a901      	add	r1, sp, #4
 801952c:	b142      	cbz	r2, 8019540 <__ascii_mbtowc+0x1a>
 801952e:	b14b      	cbz	r3, 8019544 <__ascii_mbtowc+0x1e>
 8019530:	7813      	ldrb	r3, [r2, #0]
 8019532:	600b      	str	r3, [r1, #0]
 8019534:	7812      	ldrb	r2, [r2, #0]
 8019536:	1e10      	subs	r0, r2, #0
 8019538:	bf18      	it	ne
 801953a:	2001      	movne	r0, #1
 801953c:	b002      	add	sp, #8
 801953e:	4770      	bx	lr
 8019540:	4610      	mov	r0, r2
 8019542:	e7fb      	b.n	801953c <__ascii_mbtowc+0x16>
 8019544:	f06f 0001 	mvn.w	r0, #1
 8019548:	e7f8      	b.n	801953c <__ascii_mbtowc+0x16>

0801954a <_realloc_r>:
 801954a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801954e:	4607      	mov	r7, r0
 8019550:	4614      	mov	r4, r2
 8019552:	460d      	mov	r5, r1
 8019554:	b921      	cbnz	r1, 8019560 <_realloc_r+0x16>
 8019556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801955a:	4611      	mov	r1, r2
 801955c:	f7fd bdae 	b.w	80170bc <_malloc_r>
 8019560:	b92a      	cbnz	r2, 801956e <_realloc_r+0x24>
 8019562:	f7fd fd37 	bl	8016fd4 <_free_r>
 8019566:	4625      	mov	r5, r4
 8019568:	4628      	mov	r0, r5
 801956a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801956e:	f000 f86b 	bl	8019648 <_malloc_usable_size_r>
 8019572:	4284      	cmp	r4, r0
 8019574:	4606      	mov	r6, r0
 8019576:	d802      	bhi.n	801957e <_realloc_r+0x34>
 8019578:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801957c:	d8f4      	bhi.n	8019568 <_realloc_r+0x1e>
 801957e:	4621      	mov	r1, r4
 8019580:	4638      	mov	r0, r7
 8019582:	f7fd fd9b 	bl	80170bc <_malloc_r>
 8019586:	4680      	mov	r8, r0
 8019588:	b908      	cbnz	r0, 801958e <_realloc_r+0x44>
 801958a:	4645      	mov	r5, r8
 801958c:	e7ec      	b.n	8019568 <_realloc_r+0x1e>
 801958e:	42b4      	cmp	r4, r6
 8019590:	4622      	mov	r2, r4
 8019592:	4629      	mov	r1, r5
 8019594:	bf28      	it	cs
 8019596:	4632      	movcs	r2, r6
 8019598:	f7fc ff01 	bl	801639e <memcpy>
 801959c:	4629      	mov	r1, r5
 801959e:	4638      	mov	r0, r7
 80195a0:	f7fd fd18 	bl	8016fd4 <_free_r>
 80195a4:	e7f1      	b.n	801958a <_realloc_r+0x40>

080195a6 <__ascii_wctomb>:
 80195a6:	4603      	mov	r3, r0
 80195a8:	4608      	mov	r0, r1
 80195aa:	b141      	cbz	r1, 80195be <__ascii_wctomb+0x18>
 80195ac:	2aff      	cmp	r2, #255	@ 0xff
 80195ae:	d904      	bls.n	80195ba <__ascii_wctomb+0x14>
 80195b0:	228a      	movs	r2, #138	@ 0x8a
 80195b2:	601a      	str	r2, [r3, #0]
 80195b4:	f04f 30ff 	mov.w	r0, #4294967295
 80195b8:	4770      	bx	lr
 80195ba:	700a      	strb	r2, [r1, #0]
 80195bc:	2001      	movs	r0, #1
 80195be:	4770      	bx	lr

080195c0 <_raise_r>:
 80195c0:	291f      	cmp	r1, #31
 80195c2:	b538      	push	{r3, r4, r5, lr}
 80195c4:	4605      	mov	r5, r0
 80195c6:	460c      	mov	r4, r1
 80195c8:	d904      	bls.n	80195d4 <_raise_r+0x14>
 80195ca:	2316      	movs	r3, #22
 80195cc:	6003      	str	r3, [r0, #0]
 80195ce:	f04f 30ff 	mov.w	r0, #4294967295
 80195d2:	bd38      	pop	{r3, r4, r5, pc}
 80195d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80195d6:	b112      	cbz	r2, 80195de <_raise_r+0x1e>
 80195d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80195dc:	b94b      	cbnz	r3, 80195f2 <_raise_r+0x32>
 80195de:	4628      	mov	r0, r5
 80195e0:	f000 f830 	bl	8019644 <_getpid_r>
 80195e4:	4622      	mov	r2, r4
 80195e6:	4601      	mov	r1, r0
 80195e8:	4628      	mov	r0, r5
 80195ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80195ee:	f000 b817 	b.w	8019620 <_kill_r>
 80195f2:	2b01      	cmp	r3, #1
 80195f4:	d00a      	beq.n	801960c <_raise_r+0x4c>
 80195f6:	1c59      	adds	r1, r3, #1
 80195f8:	d103      	bne.n	8019602 <_raise_r+0x42>
 80195fa:	2316      	movs	r3, #22
 80195fc:	6003      	str	r3, [r0, #0]
 80195fe:	2001      	movs	r0, #1
 8019600:	e7e7      	b.n	80195d2 <_raise_r+0x12>
 8019602:	2100      	movs	r1, #0
 8019604:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019608:	4620      	mov	r0, r4
 801960a:	4798      	blx	r3
 801960c:	2000      	movs	r0, #0
 801960e:	e7e0      	b.n	80195d2 <_raise_r+0x12>

08019610 <raise>:
 8019610:	4b02      	ldr	r3, [pc, #8]	@ (801961c <raise+0xc>)
 8019612:	4601      	mov	r1, r0
 8019614:	6818      	ldr	r0, [r3, #0]
 8019616:	f7ff bfd3 	b.w	80195c0 <_raise_r>
 801961a:	bf00      	nop
 801961c:	2400005c 	.word	0x2400005c

08019620 <_kill_r>:
 8019620:	b538      	push	{r3, r4, r5, lr}
 8019622:	4d07      	ldr	r5, [pc, #28]	@ (8019640 <_kill_r+0x20>)
 8019624:	2300      	movs	r3, #0
 8019626:	4604      	mov	r4, r0
 8019628:	4608      	mov	r0, r1
 801962a:	4611      	mov	r1, r2
 801962c:	602b      	str	r3, [r5, #0]
 801962e:	f7e8 fd41 	bl	80020b4 <_kill>
 8019632:	1c43      	adds	r3, r0, #1
 8019634:	d102      	bne.n	801963c <_kill_r+0x1c>
 8019636:	682b      	ldr	r3, [r5, #0]
 8019638:	b103      	cbz	r3, 801963c <_kill_r+0x1c>
 801963a:	6023      	str	r3, [r4, #0]
 801963c:	bd38      	pop	{r3, r4, r5, pc}
 801963e:	bf00      	nop
 8019640:	24008624 	.word	0x24008624

08019644 <_getpid_r>:
 8019644:	f7e8 bd2e 	b.w	80020a4 <_getpid>

08019648 <_malloc_usable_size_r>:
 8019648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801964c:	1f18      	subs	r0, r3, #4
 801964e:	2b00      	cmp	r3, #0
 8019650:	bfbc      	itt	lt
 8019652:	580b      	ldrlt	r3, [r1, r0]
 8019654:	18c0      	addlt	r0, r0, r3
 8019656:	4770      	bx	lr

08019658 <_init>:
 8019658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801965a:	bf00      	nop
 801965c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801965e:	bc08      	pop	{r3}
 8019660:	469e      	mov	lr, r3
 8019662:	4770      	bx	lr

08019664 <_fini>:
 8019664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019666:	bf00      	nop
 8019668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801966a:	bc08      	pop	{r3}
 801966c:	469e      	mov	lr, r3
 801966e:	4770      	bx	lr
